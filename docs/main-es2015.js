(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["main"],{

/***/ "./$$_lazy_route_resource lazy recursive":
/*!******************************************************!*\
  !*** ./$$_lazy_route_resource lazy namespace object ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function webpackEmptyAsyncContext(req) {
	// Here Promise.resolve().then() is used instead of new Promise() to prevent
	// uncaught exception popping up in devtools
	return Promise.resolve().then(function() {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	});
}
webpackEmptyAsyncContext.keys = function() { return []; };
webpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;
module.exports = webpackEmptyAsyncContext;
webpackEmptyAsyncContext.id = "./$$_lazy_route_resource lazy recursive";

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/app.component.html":
/*!**************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/app.component.html ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<app-svg>\r\n</app-svg>\r\n<app-design-pop *ngIf='designPopOn'></app-design-pop>"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/design-pop/container/button-list/button-list.component.html":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/design-pop/container/button-list/button-list.component.html ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div *ngFor=\"let btn of buttonList let i=index\">\r\n  <button type=\"button\" class=\"btn\" container=\"body\" ngbPopover=\"{{btn.text}}\" triggers=\"mouseenter:mouseleave\" placement=\"bottom\" (click)=\"btn.func(btn,buttonList,i)\">\r\n    <div class=\"iconbox\">\r\n      <svg class=\"icon\" aria-hidden=\"true\">\r\n        <use [attr.xlink:href]=\"btn.icon\"></use>\r\n      </svg>\r\n    </div>\r\n  </button>\r\n</div>\r\n"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/design-pop/container/container.component.html":
/*!*****************************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/design-pop/container/container.component.html ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"out_div\" [ngStyle]=\"container.outArea.style\" *ngIf=\"container != null\">\r\n  <div [buttonList]=\"container.content\"></div>\r\n</div>\r\n"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/design-pop/cue-info/cue-info.component.html":
/*!***************************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/design-pop/cue-info/cue-info.component.html ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"cue-info\" *ngIf=\"cueInfo != undefined && cueInfo.time > 0\">\r\n  <div class=\"center-text\">\r\n    <div class=\"cue-text\">{{cueInfo.text}}</div>\r\n    <div class=\"cue-time\">{{cueInfo.time}}s</div>\r\n    <div class=\"cue-button\" (click)=\"hidde()\">我知道了</div>\r\n  </div>  \r\n</div>\r\n"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/design-pop/design-pop.component.html":
/*!********************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/design-pop/design-pop.component.html ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div [rightDiv]=\"rigthClickMenu\"></div>\r\n<app-container [container]=\"button\">\r\n</app-container>\r\n<div [panelTop]=\"panelTop\"></div>\r\n<!-- <div [panelRight]=\"panelRight\"></div> -->\r\n<div [panelPropety]=\"panelRight\"></div>\r\n<div [panelLeft]=\"panelLeft\"></div>\r\n<div [panelBottom] = \"panelBottom\"></div>\r\n<!-- <! <div class='viewContainer' [appViewContainer]=\"condtion\"> -->\r\n<app-toggle-window [toggleWindow]=\"toggleData\"></app-toggle-window>\r\n<!-- </div> -->\r\n<div [messages]=\"popMessage\"></div>\r\n<!-- <app-panel></app-panel> -->\r\n<div [ImgDistance]=\"imgDistance\"></div>\r\n<div *ngIf=\"inputBox != null\" [inputBox]=\"inputBox\"></div>\r\n<div [test]=\"testData\"></div>\r\n<div [cueInfo]=\"cueInfo\"></div>\r\n<!-- <div [threeTools]=\"null\"></div> -->\r\n<!-- <app-loading [loading]=\"loadingOn\"></app-loading> -->"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/design-pop/img-distance/img-distance.component.html":
/*!***********************************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/design-pop/img-distance/img-distance.component.html ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div *ngIf=\"ImgDistance != null\">\r\n  <div class=\"zhezhao\">\r\n    <div class=\"pop\" (mousedown)='mouseDownEvent($event)' (mousemove)='mouseMoveEvent($event)' (mouseup)='mouseUpEvent($event)'\r\n      (wheel)='mouseWheelEvent($event)'>\r\n      <div class=\"title\">\r\n        <span class=\"name\">导入户型图</span>\r\n        <span class=\"btnclose\" (click)=\"btnClose($event)\">\r\n          X\r\n        </span>\r\n      </div>\r\n      <div class=\"middle\">\r\n        <div class=\"distance\" [ngStyle]='{\"width.px\":divSize.width,\"height.px\":divSize.height}'>\r\n          <ng-container *ngIf='svgProper!=null'>\r\n            <svg [ngStyle]='{\"width.px\":svgProper.width,\"height.px\":svgProper.height}'>\r\n              <g [ngStyle]=\"{'transform' :svgProper? 'scale(' + svgProper.zoom + ',' + svgProper.zoom + ')': 'scale(1,1)'}\">\r\n                <image [attr.xlink:href]='ImgDistance.url' [attr.x]='svgProper.img.left' [attr.y]='svgProper.img.top'\r\n                  [attr.width]='svgProper.img.width' [attr.height]='svgProper.img.height' class='svg_img' (mousedown)='setMoveAct(\"img\")'></image>\r\n                <!-- 两个点 -->\r\n                <circle [attr.r]='circleBigRadius' [attr.cx]='svgProper.pointS.x' [attr.cy]='svgProper.pointS.y' class='svg_circle big pointStart'\r\n                  (mousedown)='setMoveAct(\"pointStart\")'></circle>\r\n                <!-- <circle [attr.r]='circleSmallRadius' [attr.cx]='svgProper.pointS.x' [attr.cy]='svgProper.pointS.y'\r\n                  class='small pointStart'></circle> -->\r\n                <circle [attr.r]='circleBigRadius' [attr.cx]='svgProper.pointE.x' [attr.cy]='svgProper.pointE.y' class='svg_circle big pointEnd'\r\n                  (mousedown)='setMoveAct(\"pointEnd\")'></circle>\r\n                <!-- <circle [attr.r]='circleSmallRadius' [attr.cx]='svgProper.pointE.x' [attr.cy]='svgProper.pointE.y'\r\n                  class='small pointEnd'></circle> -->\r\n                <!-- 连接线 -->\r\n                <path [attr.d]='getPath()' class='svg_path'></path>\r\n              </g>\r\n            </svg>\r\n          </ng-container>\r\n          <!-- <img [attr.src]=\"ImgDistance.url\" alt=\"\">\r\n          <div class=\"radiu radiu-left\">+</div>\r\n          <div class=\"radiu radiu-right\">+</div> -->\r\n        </div>\r\n        <div class=\"pro\">\r\n          <span>\r\n            1、拖动2个点以标记一个距离。\r\n          </span>\r\n          <span class=\"key_value\">\r\n            2、确定两点间的距离。\r\n            <input type=\"number\" onfocus=\"this.select()\" [(ngModel)]=\"ImgDistance.distance\">\r\n          </span>\r\n          <span>\r\n            3、<input type=\"checkbox\" [(ngModel)]=\"isOrthogonal\">尾部正交\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <div class=\"bottom\">\r\n        <button type=\"button\" class=\"btn btn-done\" (click)='setDistanceEvent($event)'>导入</button>\r\n        <button type=\"button\" class=\"btn btn-default\" (click)=\"btnClose($event)\">取消</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/design-pop/input-div/input-box/input-box.component.html":
/*!***************************************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/design-pop/input-div/input-box/input-box.component.html ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div *ngIf=\"inputBox != null\">\r\n  <div class=\"inputContainer\" *ngFor=\"let list of inputBox\" [ngStyle]=\"{\r\n    'top.px':list.position.y - list.css.height / 2,\r\n    'left.px':list.position.x - list.css.width / 2,\r\n    'width.px':list.css.width,\r\n    'height.px':list.css.height,\r\n    'z-index': list.index ? list.index : 0\r\n  }\">\r\n    <input type=\"number\" tabindex=\"-1\" #box [attr.min]=\"list.min\" [attr.max]=\"list.max\" [(ngModel)]='list.value' (keyup)=\"getSureValue($event,box)\" (keyup.enter)=\"list.newFunc(box,list.value)\" onfocus=\"this.select()\" class='input_test'>\r\n  </div>\r\n</div>\r\n\r\n<!-- (keyup.tab)=\"list.newFunc(box,list.value)\"  -->"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/design-pop/loading/loading.component.html":
/*!*************************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/design-pop/loading/loading.component.html ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\r\n<div class=\"full_screen\" *ngIf=\"loading ==true\">\r\n  <div class=\"spinner spinnerOne\"></div>\r\n</div> "

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/design-pop/panel/messages/messages.component.html":
/*!*********************************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/design-pop/panel/messages/messages.component.html ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div *ngIf=\"messages != null\">\r\n  <div class=\"popMessage\" [ngStyle] = \"messages.style\">\r\n    <span class=\"text_message\" *ngIf = \"messages.text != null\">{{messages.text}}</span>\r\n    <div class=\"img_message\" *ngIf=\"messages.img != null\">\r\n      <img [attr.src]=\"messages.img\" alt=\"\">\r\n    </div>\r\n  </div>\r\n</div>\r\n<!-- <div [rightDiv] = \"popDiv\"></div> -->"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/design-pop/panel/panel-bottom/panel-bottom.component.html":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/design-pop/panel/panel-bottom/panel-bottom.component.html ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"bottom_container\">\r\n  <ng-container *ngFor=\"let btn of getArr(panelBottom)\">\r\n    <div class=\"list_bottom\" #backColor [ngStyle]=\"{'background-color':btn.isDown != undefined && btn.isDown == true?'#4b9bd6':'transparent'}\" (click)=\"btn.func(backColor,btn.cameraImg)\" triggers=\"mouseenter:mouseleave\" ngbPopover=\"{{btn.name}}\">\r\n      <svg class=\"barIcon\" aria-hidden=\"true\">\r\n        <use [attr.xlink:href]= \"btn.icon\"></use>\r\n      </svg>\r\n    </div>\r\n  </ng-container>\r\n</div>\r\n"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/design-pop/panel/panel-left/panel-left.component.html":
/*!*************************************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/design-pop/panel/panel-left/panel-left.component.html ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\r\n<div class=\"left_container\" *ngIf=\"imgList == null\" [ngStyle] = \"leftDiv\" (mouseleave)=\"panelLeft.global.mouseleave($event)\">\r\n  <div class=\"toggle_bar\" (click) = \"toggleContainer($event)\">\r\n    <!-- 展开收缩按钮 -->\r\n    <div class=\"expland\">\r\n      <svg class=\"explandIcon\" aria-hidden=\"true\">\r\n        <use xlink:href= \"#icon-expland\"></use>\r\n      </svg>\r\n    </div>\r\n  </div>\r\n  <!-- 左侧导航按钮 -->\r\n  <div class=\"bar\" *ngIf=\"panelLeft != null\">\r\n    <div class=\"vertecial_bar\">\r\n      <div class=\"splider_bar\" *ngFor = \"let bar of panelLeft.data\">\r\n        <div class=\"blindEvent\" (mousedown)=\"bar.sendToNext($event,bar)\">\r\n          <div class=\"bar_list\" (mouseenter)=\"listMouseEnter($event)\" (mouseleave)=\"listMouseLeave($event)\" (click)=\"toggleSlider($event)\" [ngStyle] = \"{'background-color':bar.isWasSelect === true? '#3e82f7':'none'}\">\r\n            <svg class=\"barIcon\" aria-hidden=\"true\" [ngStyle] = \"{'fill':bar.isWasSelect === true? '#ffffff':'#323232'}\">\r\n              <use [attr.xlink:href]= \"bar.icon\"></use>\r\n            </svg>\r\n          </div>\r\n          <span class=\"name\">{{bar.name}}</span>\r\n        </div>\r\n        <div class=\"drop_list\" *ngIf=\"bar.dropList != undefined\">\r\n          <div class=\"list_name\" *ngFor=\"let list of bar.dropList\"  (mouseenter)=\"list.mouseHover($event,list)\" (mouseleave)=\"list.mouseLeave($event,list)\">\r\n            <span (click)=\"list.getData($event,list)\">{{list.name}}</span>\r\n            <!-- hover悬浮框 -->\r\n          <div *ngIf = \"listData != null && list.isShow == true\" class=\"hoverable\" [typeList]=\"listData\"></div>\r\n          </div>\r\n        </div>\r\n        \r\n      </div>\r\n    </div>\r\n    \r\n    <!-- 右侧产品列表 -->\r\n    <div class=\"list_bar\">\r\n      <div [productList] = \"productData\"></div>\r\n    </div>\r\n  </div>\r\n  \r\n</div>\r\n<div *ngIf=\"imgList != null\" [imgList]=\"imgList\"></div>\r\n\r\n<div id=\"img\" class=\"direction\" [ngStyle]=\"imgStyle\">\r\n  <img src=\"./assets/img/freeicon/direction.png\" alt=\"\">\r\n</div>\r\n\r\n"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/design-pop/panel/panel-left/product-list/draw-room/draw-room.component.html":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/design-pop/panel/panel-left/product-list/draw-room/draw-room.component.html ***!
  \***********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"content\" (mouseleave)=\"drawRoom.mouseleave($event)\">\r\n  <div class=\"title\">{{drawRoom.title}}</div>\r\n  <div class=\"back\">\r\n    <input id=\"load\" type=\"file\" (change)=\"drawRoom.importBack.newFunc($event)\">\r\n    <label for=\"load\"  class=\"btn\">\r\n      <div class=\"imgCon\"> \r\n       <img [attr.src]=\"drawRoom.importBack.icon\" alt=\"\">\r\n      </div>\r\n       <div class=\"backName\">{{drawRoom.importBack.name}}</div> \r\n    </label>\r\n  </div>\r\n  <div class=\"drawTool\">\r\n    <div *ngFor=\"let list of drawRoom.drawData\" class=\"listcontainer\">\r\n      <span>{{list.title}}</span>\r\n      <div *ngFor=\"let ele of list.data\" (click)=\"ele.newFunc?ele.newFunc($event,ele,list.data):ele.func($event,ele,list.data)\" class=\"icon-container\">\r\n        <svg *ngIf=\"ele.icon.indexOf('#') != -1\" class=\"icon2\" aria-hidden=\"true\" [ngClass]=\"{'border_out':ele.borderClass === true,'border_null':ele.borderClass === false || ele.borderClass === undefined}\">\r\n          <use [attr.xlink:href] = \"ele.icon\"></use>\r\n        </svg>\r\n        <img *ngIf=\"ele.icon.indexOf('#') == -1\" class= \"icon2\" [attr.src]=\"ele.icon\" alt=\"\" [ngClass]=\"{'border_out':ele.borderClass === true,'border_null':ele.borderClass === false || ele.borderClass === undefined}\">\r\n        <span>{{ele.name}}</span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/design-pop/panel/panel-left/product-list/mine/mine.component.html":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/design-pop/panel/panel-left/product-list/mine/mine.component.html ***!
  \*************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<p>\r\n  敬请期待！！\r\n</p>\r\n"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/design-pop/panel/panel-left/product-list/product-list.component.html":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/design-pop/panel/panel-left/product-list/product-list.component.html ***!
  \****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<ng-container *ngIf=\"productList != null\">\r\n  <ng-container *ngIf = \"productList.type == 'room'\">\r\n    <div class=\"putModel\" [drawRoom] = \"productList\"></div>\r\n  </ng-container>\r\n  <ng-container *ngIf = \"productList.type == 'matter'\">\r\n    <div class=\"putModel\" [putModel] = \"productList\"></div>\r\n  </ng-container>\r\n  <ng-container *ngIf = \"productList.type == 'mine'\">\r\n    <div [mine] = \"productList\"></div>\r\n  </ng-container>\r\n</ng-container>"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/design-pop/panel/panel-left/product-list/put-model/put-model.component.html":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/design-pop/panel/panel-left/product-list/put-model/put-model.component.html ***!
  \***********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"put_content\">\r\n  <div class=\"bread\">\r\n    <div class=\"hidde_icon\">\r\n      <div class=\"names\" *ngFor=\"let bread of putModel.bread\">\r\n        > <span>{{bread}}</span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"search_content\">\r\n    <input type=\"text\" class=\"search_for\" placeholder=\"当前目录搜索\">\r\n  </div>\r\n  <div class=\"type_content\">\r\n  </div>\r\n  <div class=\"main_content\">\r\n    <div class=\"img_content\" *ngFor=\"let img of putModel.imgData\" (click)=\"img.func($event)\">\r\n      <svg aria-hidden=\"true\" class=\"xinxi_icon\" (mouseenter)=\"showInfo($event,img)\" (mouseleave)=\"hiddeInfo()\">\r\n          <use xlink:href=\"#icon-xinxi\"></use>\r\n      </svg>\r\n      <img [attr.src]=\"img.imgUrl\" alt=\"图片加载失败\">\r\n    </div>\r\n  </div>\r\n  <div class=\"detail_container\" *ngIf = \"imgInfo != null\">\r\n      <img [attr.src]=\"imgInfo.imgUrl\" alt=\"图片加载失败\">\r\n      <div class=\"text_info\">\r\n        <span>{{imgInfo.id}}</span>\r\n      </div>\r\n    </div>\r\n</div>"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/design-pop/panel/panel-left/type-list/type-list.component.html":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/design-pop/panel/panel-left/type-list/type-list.component.html ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div #greet class=\"hover_panel\" *ngIf=\"typeList != null\">\r\n  <div class=\"type_panel\" *ngFor=\"let type of typeList.data\">\r\n    <span class=\"title_name\" (click)=\"type.getData($event,type)\">{{type.name}}</span>\r\n    <div class=\"name_list\" *ngIf=\"type.typeList.length != 0\">\r\n      <span *ngFor=\"let nam of type.typeList\" (click)=\"nam.func($event,nam)\">{{nam.name}}</span>\r\n    </div>\r\n  </div>\r\n</div>\r\n"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/design-pop/panel/panel-propety/check-slider/check-slider.component.html":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/design-pop/panel/panel-propety/check-slider/check-slider.component.html ***!
  \*******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div *ngFor = \"let check of checkSlider\">\r\n  <div class=\"check_box\">\r\n    <div class=\"title_box\">\r\n      <input type=\"checkBox\" [checked]=\"check.isCheck\" (change)=\"check.newFunc(check.isCheck)\"><span>{{check.name}}</span>\r\n    </div>\r\n    <div *ngIf=\"check.isCheck&&check.haveSlider != null\"  [sliderBox] = \"check.haveSlider\"></div>\r\n  </div>\r\n</div>\r\n"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/design-pop/panel/panel-propety/img-detail/img-detail.component.html":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/design-pop/panel/panel-propety/img-detail/img-detail.component.html ***!
  \***************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"imgDiv\">\r\n  <div class=\"imageDiv\">\r\n    <img [attr.src]=\"imgDetail.img\" alt=\"\">\r\n  </div>\r\n  <span>{{imgDetail.detail}}</span>\r\n</div>"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/design-pop/panel/panel-propety/img-list/img-list.component.html":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/design-pop/panel/panel-propety/img-list/img-list.component.html ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"img_panel\" *ngIf=\"imgList != null\">\r\n  <div class=\"img_title\">\r\n    <span class=\"name\">{{imgList.name}}</span>\r\n    <span class=\"close\" (click)=\"close($event)\">\r\n      <svg aria-hidden=\"true\" class=\"close_icon\">\r\n        <use xlink:href=\"#icon-guanbi\"></use>\r\n      </svg>\r\n    </span>\r\n  </div>\r\n  <div class=\"img_container\">\r\n    <div class=\"imgDiv\" *ngFor=\"let img of imgList.img\" [ngStyle] = \"{'border':img.borderClass === true? '2px solid lightBlue':'none'}\">\r\n      <svg aria-hidden=\"true\" class=\"xinxi_icon\" (mouseenter)=\"showInfo($event,img)\" (mouseleave)=\"hiddeInfo()\">\r\n          <use xlink:href=\"#icon-xinxi\"></use>\r\n      </svg>\r\n      <div class=\"border_div\" (click)=\"img.func($event,img,imgList)\">\r\n        <img [attr.src]=\"img.path\" alt=\"图片加载失败\">\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"detail_container\" *ngIf = \"imgInfo != null\">\r\n    <img [attr.src]=\"imgInfo.path\" alt=\"图片加载失败\">\r\n    <div class=\"text_info\">\r\n      <span>详细信息</span>\r\n    </div>\r\n  </div>\r\n</div>\r\n"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/design-pop/panel/panel-propety/inline-text/inline-text.component.html":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/design-pop/panel/panel-propety/inline-text/inline-text.component.html ***!
  \*****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"txtContainer\">\r\n  <p class=\"name\">{{inlineText.name}}:</p>\r\n  <input type=\"text\" [value]=\"inlineText.value\" [disabled]=\"inlineText.isEditable\">\r\n</div>"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/design-pop/panel/panel-propety/panel-propety.component.html":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/design-pop/panel/panel-propety/panel-propety.component.html ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\r\n<div class=\"rightProperty\" *ngIf=\"panelPropety != null && panelPropety.length != 0\">\r\n  <div class=\"property\" *ngFor=\"let right of panelPropety\">\r\n      <div *ngIf=\"right.type == 'input'\" [textBox]=\"right.data\"></div>\r\n    <div *ngIf=\"right.type == 'slider'\" [sliderBox]=\"right.data\"></div>\r\n    <div *ngIf=\"right.type == 'check'\" [checkSlider]=\"right.data\"></div>\r\n    <div *ngIf=\"right.type == 'select'\" [selectBox]=\"right.data\"></div>\r\n    <div *ngIf=\"right.type == 'inline'\" [inlineText]=\"right.data\"></div>\r\n    <div *ngIf = \"right.type == 'img'\" [imgDetail] = \"right.data\"></div>\r\n  </div>\r\n</div>"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/design-pop/panel/panel-propety/select-box/select-box.component.html":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/design-pop/panel/panel-propety/select-box/select-box.component.html ***!
  \***************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"select_box\">\r\n  <span class=\"title\">{{selectBox.name}}</span>\r\n  <div class=\"ulcontainer\">\r\n    <button type=\"button\" (click)=\"showUl($event,selectBox)\">\r\n      <img *ngIf=\"selectBox.chance.length != 0 && selectBox.chance[selectBox.currentData]['icon'] != undefined\" [attr.src]=\"selectBox.chance[selectBox.currentData].icon\" alt=\"\">\r\n      <span class=\"text\">{{selectBox.chance[selectBox.currentData].name}}</span>\r\n      <div class=\"caretcontainer\">\r\n        <span class=\"caret\"></span>\r\n      </div>\r\n    </button>\r\n    <ul class=\"dropDownUl\" *ngIf=\"selectBox.isShow == true\">\r\n      <li class=\"dropdownLi\" *ngFor=\"let op of selectBox.chance\" (click)=\"op.func($event,op,selectBox)\">\r\n        <img *ngIf=\"op.icon != undefined\" [attr.src]=\"op.icon\" alt=\"\">\r\n        <span class=\"text\">{{op.name}}</span>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n  <ng-container *ngIf=\"selectBox.isHaveInput != undefined\">\r\n    <input  class=\"roomName\" type=\"text\" [(ngModel)]=\"selectBox.isHaveInput.value\" onfocus=\"this.select()\" (change)=\"selectBox.isHaveInput.func($event,selectBox.isHaveInput)\">\r\n  </ng-container>\r\n  \r\n</div>\r\n"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/design-pop/panel/panel-propety/slider-box/slider-box.component.html":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/design-pop/panel/panel-propety/slider-box/slider-box.component.html ***!
  \***************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<ng-container *ngIf=\"sliderBox != null\">\r\n  <div *ngFor=\"let slider of sliderBox\" class=\"img-type\">\r\n    <span>{{slider.name}}</span>\r\n    <div  class=\"imgContainer\" (click)=\"sendMaterial($event,slider)\">\r\n      <img [attr.src]=\"slider.FloorImg\" alt=\"\">\r\n    </div>\r\n  </div>\r\n</ng-container>\r\n"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/design-pop/panel/panel-propety/text-box/text-box.component.html":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/design-pop/panel/panel-propety/text-box/text-box.component.html ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<ng-container *ngFor=\"let txt of textBox\">\r\n  <div class=\"inputContainer\">\r\n    <input type=\"text\" [(ngModel)]=\"txt.value\" [disabled]=\"txt.isEditable\" onfocus=\"this.select()\" (keyup.enter)=\"txt.func($event,txt)\">\r\n    <!-- <input type=\"text\" [disabled]=\"true\"> -->\r\n    <span class=\"danwei\">mm</span>\r\n    <p class=\"name\">{{txt.name}}</p>\r\n  </div>\r\n</ng-container>\r\n"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/design-pop/panel/panel-top/panel-top.component.html":
/*!***********************************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/design-pop/panel/panel-top/panel-top.component.html ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\r\n<div class=\"topDiv\">\r\n  <div class=\"topBar\" *ngIf=\"panelTop!=null\">\r\n    <div class=\"d-inline-block\" *ngFor=\"let top of panelTop\">\r\n      <div ngbDropdown  *ngIf=\"top.dropList!=null\">\r\n        <button class=\"btn\" id=\"dropdownBasic1\"  ngbDropdownToggle aria-expanded=\"false\" aria-haspopup=\"true\">\r\n          <div class=\"iconbox\">\r\n            <svg class=\"icon\" aria-hidden=\"true\">\r\n              <use [attr.xlink:href]=\"top.icon\"></use>\r\n            </svg>\r\n            <b class=\"caret-bottom-r\"></b>\r\n          </div>{{top.text}}\r\n        </button>\r\n        <div ngbDropdownMenu open=\"true\" aria-labelledby=\"dropdownBasic1\">\r\n          <button class=\"dropdown-item\" *ngFor=\"let list of top.dropList\">\r\n              <div class=\"itemSel\" *ngIf=\"list.load == undefined && list.list == undefined\" (click)=\"list.func($event,list)\">\r\n                <input *ngIf=\"list.isSelect != undefined\" type=\"checkbox\" [checked]=\"list.isSelect\">\r\n                <span>{{list.name}}</span>\r\n              </div>\r\n              <div class=\"itemSel\" id=\"item\" *ngIf=\"list.list != undefined\">\r\n                <span>{{list.name}}></span>\r\n                <div class=\"radioBox\">\r\n                  <div class=\"radioIndex\" *ngFor=\"let size of list.list;let i=index\" (click)=\"size.func($event,size,list.list)\">\r\n                    <input type=\"radio\" [checked]=\"size.isSelect\" [value]=\"i\" [attr.name]=\"list.name\">{{size.name}}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <ng-container *ngIf=\"list.load == true\">\r\n                  <input id=\"loadjson\" type=\"file\" (change)=\"list.func($event)\">\r\n                  <label for=\"loadjson\" id=\"loadFile\" container=\"body\">\r\n                  {{list.name}}\r\n                  </label>\r\n              </ng-container>\r\n              <ng-container *ngIf =\"list.load == false\">\r\n                <a class=\"saveFile\" [attr.href]=\"list.href\" [attr.download]=\"list.textName\" (click)=\"list.func($event,list)\">{{list.name}}</a>\r\n              </ng-container>\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div class=\"dropdown\" *ngIf=\"top.dropList == null\">\r\n        <div *ngIf=\"top.type == undefined || top.type =='button'\" (click)=\"top.func($event)\">\r\n          <button [disabled]=\"top.isBack() == top.result\"   type=\"button\" class=\"btn\" container=\"body\" data-html=\"true\" triggers=\"mouseenter:mouseleave\" ngbPopover=\"{{top.text + top.hot}}\" #p=\"ngbPopover\" (click)=\"p.close()\"  placement=\"bottom\" >\r\n            <div class=\"iconbox\">\r\n              <svg class=\"icon\" aria-hidden=\"true\">\r\n                <use [attr.xlink:href]=\"top.icon\"></use>\r\n              </svg>\r\n            </div>{{top.text}}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/design-pop/pop-div/right-div/right-div.component.html":
/*!*************************************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/design-pop/pop-div/right-div/right-div.component.html ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div *ngIf=\"rightDiv!=null\">\r\n  <div class=\"popDiv\" [ngStyle]=\"popStyle\">\r\n    <div class=\"inputContainer\" *ngIf=\"rightDiv.input\">\r\n      <div class=\"card\">\r\n        <div class=\"wall\">\r\n          <span>{{rightDiv.input.text}}</span>\r\n          \r\n          <!-- <select name=\"wallSelect\" id=\"greet\" (change)='rightDiv.input.func($event)'>\r\n            <option [attr.value]='inputValue' *ngFor='let inputValue of rightDiv.input.valueArr' [selected]='inputValue==rightDiv.input.choose'>{{inputValue}}</option>\r\n          </select> -->\r\n          <input type=\"text\" [value]=\"rightDiv.input.valueArr\" onfocus=\"this.select()\" (change)=\"rightDiv.input.func($event)\">\r\n          <!-- <div class=\"drop-icon\"></div> -->\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <ng-container *ngFor=\"let pop of rightDiv.body\">\r\n      <div class=\"popContent\" *ngIf=\"!pop.isHidde\">\r\n        <!-- <div> -->\r\n        <ng-container *ngIf=\"pop.type == 'file'\">\r\n          <svg class=\"icon\" aria-hidden=\"true\">\r\n            <use [attr.xlink:href]=\"pop.icon\"></use>\r\n          </svg>\r\n          <input type=\"file\" id=\"file\" (change)=\"pop.newFunc($event)\">\r\n          <label for=\"file\">\r\n            {{pop.text}}\r\n          </label>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"pop.type == undefined\">\r\n          <div class=\"else\" (mousedown)=\"pop.newFunc()\">\r\n            <svg class=\"icon\" aria-hidden=\"true\">\r\n              <use [attr.xlink:href]=\"pop.icon\"></use>\r\n            </svg>\r\n            <div>{{pop.text}}\r\n              <span *ngIf=\"pop.hot\">{{pop.hot}}</span>\r\n            </div>\r\n          </div>\r\n        </ng-container>\r\n        <!-- </div> -->\r\n      </div>\r\n    </ng-container>\r\n  </div>\r\n</div>"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/design-pop/test/test.component.html":
/*!*******************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/design-pop/test/test.component.html ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"test_box\" [ngStyle]=\"style\">\r\n  <div *ngFor=\"let bt of test.data\">\r\n    <span>{{bt.text}}</span>\r\n    <input type=\"text\" #val [(ngModel)]=\"bt.value\" (keyup.enter)=\"bt.func($event,val.value)\">\r\n    <!-- <div class=\"button\" (click)=\"bt.func($event,val.value)\">click</div> -->\r\n  </div>\r\n</div>\r\n"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/design-pop/three-tools/three-tools.component.html":
/*!*********************************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/design-pop/three-tools/three-tools.component.html ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"three_tools\">\r\n  <div class=\"item-tool\" *ngFor=\"let ico of threeTools\" (click)=\"ico.func($event)\">\r\n    <button type=\"button\" class=\"btn\" container=\"body\" ngbPopover=\"{{ico.hover}}\" triggers=\"mouseenter:mouseleave\" placement=\"bottom\">\r\n      <svg class=\"icon\" aria-hidden=\"true\">\r\n        <use [attr.xlink:href]=\"ico.icon\"></use>\r\n      </svg>\r\n    </button>\r\n    <span class=\"name\" *ngIf=\"ico.name != undefined\">{{ico.name}}</span>\r\n  </div>\r\n</div>\r\n"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/design-pop/toggle-window/toggle-window.component.html":
/*!*************************************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/design-pop/toggle-window/toggle-window.component.html ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"D2_3D_container\" [ngStyle]=\"domStyle\">\r\n  <div class=\"toggle_window\">\r\n    <button type=\"button\" class=\"btn toggle\" container=\"body\" ngbPopover=\"\" triggers=\"mouseenter:mouseleave\" placement=\"bottom\" (click)=\"toggleView($event)\">\r\n      <div class=\"iconbox\">\r\n        <svg class=\"icon\" aria-hidden=\"true\">\r\n          <use xlink:href=\"#icon-zuidahua\"></use>\r\n        </svg>\r\n      </div>\r\n    </button>\r\n    <!-- <button type=\"button\" class=\"btn enlarge\" container=\"body\" ngbPopover=\"\" triggers=\"mouseenter:mouseleave\" placement=\"bottom\">\r\n      <div class=\"iconbox\">\r\n        <svg class=\"icon\" aria-hidden=\"true\">\r\n          <use xlink:href=\"#icon-fangda\"></use>\r\n        </svg>\r\n      </div>\r\n    </button>\r\n    <button type=\"button\" class=\"btn reduce\" container=\"body\" ngbPopover=\"\" triggers=\"mouseenter:mouseleave\" placement=\"bottom\">\r\n      <div class=\"iconbox\">\r\n        <svg class=\"icon\" aria-hidden=\"true\">\r\n          <use xlink:href=\"#icon-suoxiao\"></use>\r\n        </svg>\r\n      </div>\r\n    </button> -->\r\n  </div>\r\n  <button type=\"button\" class=\"btn resize\" container=\"body\" ngbPopover=\"\" triggers=\"mouseenter:mouseleave\" placement=\"bottom\"  (mousedown)=\"resizeStartView($event)\" >\r\n    <div class=\"iconbox\">\r\n      <svg class=\"icon icon_resize\" aria-hidden=\"true\">\r\n        <use xlink:href=\"#icon-resize\"></use>\r\n      </svg>\r\n    </div>\r\n  </button>\r\n</div>\r\n"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/svg/dom/back/back.component.html":
/*!****************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/svg/dom/back/back.component.html ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg class='back_svg'>\r\n\r\n    <!-- 背景色 -->\r\n    <svg:rect class='back_color' x=\"0\" y=\"0\" [attr.width]=\"back?back.size.width:0\" [attr.height]=\"back?back.size.height:0\" />\r\n\r\n    <!-- 背景图框 -->\r\n    <svg:rect *ngIf='dataService.cache.floorplan.display.grid' fill=\"url(#svg_back)\" x=\"0\" y=\"0\" [attr.width]=\"back?back.size.width:0\"\r\n        [attr.height]=\"back?back.size.height:0\" />\r\n\r\n    <!-- 背景图 -->\r\n    <ng-container *ngIf=\"dataService.cache.floorplan.display.roomImg && dataService.floorplan && dataService.floorplan.backImg!=null\">\r\n        <svg:image [attr.xlink:href]='dataService.floorplan.backImg.url' [attr.x]='dataService.floorplan.backImg.left'\r\n            [attr.y]='dataService.floorplan.backImg.top' [attr.width]='dataService.floorplan.backImg.width'\r\n            [attr.height]='dataService.floorplan.backImg.height'></svg:image>\r\n    </ng-container>\r\n\r\n\r\n    <!-- 保护挡板 -->\r\n    <svg:rect x=\"0\" y=\"0\" [attr.width]=\"back?back.size.width:0\" [attr.height]=\"back?back.size.height:0\" class='rect_protect'></svg:rect>\r\n\r\n    <!-- 需要合成的小图 -->\r\n    <svg:defs>\r\n        <svg:pattern id=\"svg_back\" patternUnits=\"userSpaceOnUse\" [attr.width]='back?back.pattern.width:0' [attr.height]='back?back.pattern.width:0'>\r\n            <svg:path class='path_small' [attr.d]=getSmallPathD() [ngStyle]='{\"stroke-width\":1*dataService.cache.floorplan.multiple}' />\r\n            <svg:path class=\"path_big\" [attr.d]=getBigPathD() [ngStyle]='{\"stroke-width\":2*dataService.cache.floorplan.multiple}' />\r\n        </svg:pattern>\r\n    </svg:defs>\r\n\r\n</svg>"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/svg/dom/block/block.component.html":
/*!******************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/svg/dom/block/block.component.html ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class='div_block' [ngStyle]=\"{\r\n    'width':dataService.cmd&&dataService.cache.common.blockON?'100%':'0%',\r\n    'height':dataService.cmd&&dataService.cache.common.blockON?'100%':'0%'\r\n}\">\r\n    <svg class='svg_block' [ngStyle]=\"{\r\n        'top.px':dataService.cmd&&dataService.cache.common.blockON?dataService.cmd.floorplan.top:0,\r\n\r\n        'left.px':dataService.cmd&&dataService.cache.common.blockON?dataService.cmd.floorplan.left:0,\r\n\r\n        'width.px':dataService.cmd&&dataService.cache.common.blockON?dataService.cmd.back.size.width:0,\r\n\r\n        'height.px':dataService.cmd&&dataService.cache.common.blockON?dataService.cmd.back.size.height:0,\r\n        \r\n        'transform':dataService.cmd&&dataService.cache.common.blockON?'scale(' + dataService.cmd.floorplan.zoom + ',' + dataService.cmd.floorplan.zoom + ')':'scale(1,1)'\r\n    }\"></svg>\r\n</div>"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/svg/dom/camera/camera.component.html":
/*!********************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/svg/dom/camera/camera.component.html ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<ng-container *ngIf='dataService.camera!=null'>\r\n  <!-- 容器 -->\r\n\r\n  <svg:g [attr.id]=\"dataService.camera.id\" [attr.transform]='getTransform()'>\r\n    <!-- 头 -->\r\n    <svg:image [attr.xlink:href]='dataService.cmd.camera.headImg.url' [attr.x]='dataService.cmd.camera.offset.x' [attr.y]='dataService.cmd.camera.offset.y'\r\n      [attr.width]='dataService.cmd.camera.headImg.size.width' [attr.height]='dataService.cmd.camera.headImg.size.height' (mousedown)='setMode(\"move\")'></svg:image>\r\n\r\n    <!-- 旋转 -->\r\n    <!-- <svg:image [attr.xlink:href]='dataService.cmd.camera.rotateImg.url' [attr.x]='dataService.cmd.camera.offset.x' [attr.y]='dataService.cmd.camera.offset.y'\r\n      [attr.width]='dataService.cmd.camera.rotateImg.size.width' [attr.height]='dataService.cmd.camera.rotateImg.size.height'\r\n      (mousedown)='setMode(\"rotate\")'></svg:image> -->\r\n    <svg:rect [attr.x]='dataService.cmd.camera.offset.x' [attr.y]='dataService.cmd.camera.offset.y' [attr.width]='dataService.cmd.camera.rotateImg.size.width'\r\n      [attr.height]='dataService.cmd.camera.rotateImg.size.height' (mousedown)='setMode(\"rotate\")' class='camera_rotate'></svg:rect>\r\n  </svg:g>\r\n  <!-- 图像 -->\r\n  <!-- <svg:rect [attr.width]='dataService.cmd.camera.headImg.size.width' [attr.height]='dataService.cmd.camera.headImg.size.height'\r\n    [attr.x]='0' [attr.y]='0' [attr.transform]='getTransform()' [attr.fill]='getFill()'></svg:rect> -->\r\n  <!-- 原始坐标 -->\r\n  <svg:circle r='30' [attr.cx]='dataService.camera.pos.x' [attr.cy]='dataService.camera.pos.y' fill='#ff0000'></svg:circle>\r\n\r\n</ng-container>"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/svg/dom/common/absorb-lines/absorb-lines.component.html":
/*!***************************************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/svg/dom/common/absorb-lines/absorb-lines.component.html ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<ng-container *ngIf=\"absorbLine.data!=null && absorbLine.data!=[]\">\r\n  <ng-container *ngFor=\"let line of absorbLine.data\">\r\n    <ng-container [ngSwitch]=\"line.mode\">\r\n      <svg:path *ngSwitchCase=\"'line'\" class='line_path line_width' [attr.d]='getPath(line)' />\r\n      <svg:circle *ngSwitchCase=\"'point'\" [attr.cx]='line.pos.x' [attr.cy]='line.pos.y' [attr.r]='line.radius?line.radius:8' class='point_circle circle_width'></svg:circle>\r\n      <svg:path *ngSwitchDefault class='line_path line_width' [attr.d]='getPath(line)' />\r\n    </ng-container>\r\n  </ng-container>\r\n</ng-container>"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/svg/dom/common/label-circle/label-circle.component.html":
/*!***************************************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/svg/dom/common/label-circle/label-circle.component.html ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<ng-container *ngIf='labelCircle!=null'>\r\n  <svg:g [attr.transform]=\"labelCircle.transform?labelCircle.transform:'matrix(1,0,0,1,0,0)'\">\r\n    <svg:g [attr.transform]=\"labelCircle.otherTransform?labelCircle.otherTransform:'matrix(1,0,0,1,0,0)'\">\r\n      <ng-container *ngFor='let circle of labelCircle.data'>\r\n        <svg:circle [attr.r]='labelCircle.r' [attr.cx]='circle.pos.x ' [attr.cy]='circle.pos.y ' class='circle_width label_circle'>\r\n        </svg:circle>\r\n      </ng-container>\r\n    </svg:g>\r\n  </svg:g>\r\n</ng-container>"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/svg/dom/common/label-lines/label-lines.component.html":
/*!*************************************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/svg/dom/common/label-lines/label-lines.component.html ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<ng-container *ngIf='labelLines!=null'>\r\n  <!-- <svg x='0' y='0' [attr.transform]='labelLines.transform?labelLines.transform:null'> -->\r\n  <svg:g class='move' [attr.transform]=\"moveTransfrom\">\r\n    <svg:g class='rotate' [attr.transform]=\"rotateTransform\">\r\n      <ng-container *ngFor='let data of domDatas'>\r\n        <ng-container *ngIf='data'>\r\n          <!-- 是否隐藏线 -->\r\n          <ng-container *ngIf='!labelLines.isRemoveStyle'>\r\n            <!-- 直线 -->\r\n            <svg:path class='label_line line_width' [attr.d]=\"data.path\" />\r\n            <!-- 辅助线 -->\r\n            <svg:path class='label_line line_width' [attr.stroke-dasharray]='data.dasharray' *ngFor='let line of data.auxiliaryLines'\r\n              [attr.d]='line' />\r\n            <!-- 头尾是否隐藏 -->\r\n            <ng-container *ngIf='labelLines.img'>\r\n              <!-- 头x -->\r\n              <svg:image class='label_img' [attr.xlink:href]='labelLines.img' [attr.width]='labelLines.imgWidth'\r\n                [attr.height]='labelLines.imgHeight' [attr.x]=\"-labelLines.imgWidth/2\" [attr.y]=\"-labelLines.imgHeight/2\"\r\n                [attr.transform]='data.transformStart' />\r\n              <!-- 尾x -->\r\n              <svg:image class='label_img' [attr.xlink:href]='labelLines.img' [attr.width]='labelLines.imgWidth'\r\n                [attr.height]='labelLines.imgHeight' [attr.x]=\"-labelLines.imgWidth/2\" [attr.y]=\"-labelLines.imgHeight/2\"\r\n                [attr.transform]='data.transformEnd' />\r\n            </ng-container>\r\n          </ng-container>\r\n          <!-- 文字 -->\r\n          <svg:text *ngIf='data.textTransform' [attr.class]='getTextClass()' [ngStyle]=\"getTextStyle()\"\r\n            [attr.transform]='data.textTransform'>{{data.text}}</svg:text>\r\n        </ng-container>\r\n\r\n      </ng-container>\r\n      <!-- </svg> -->\r\n    </svg:g>\r\n  </svg:g>\r\n\r\n\r\n\r\n</ng-container>"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/svg/dom/common/repeat-path/repeat-path.component.html":
/*!*************************************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/svg/dom/common/repeat-path/repeat-path.component.html ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<ng-container *ngFor='let pathData of repeatPathDatas'>\n  <!-- 矩阵 -->\n  <svg:g [attr.transform]=\"pathData.transform?pathData.transform:'matrix(1,0,0,1,0,0)'\">\n    <!-- 线段 -->\n    <ng-container *ngIf=\"pathData.paths\">\n      <ng-container *ngFor=\"let path of pathData.paths\">\n        <path [attr.d]='path' class='lu_path' [attr.fill]='getColor()'></path>\n      </ng-container>\n    </ng-container>\n    <!-- 子对象 -->\n    <ng-container *ngIf=\"pathData.children\">\n      <svg:g [repeatPathDatas]='pathData.children'></svg:g>\n    </ng-container>\n  </svg:g>\n</ng-container>"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/svg/dom/common/test-svg/test-svg.component.html":
/*!*******************************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/svg/dom/common/test-svg/test-svg.component.html ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<ng-container *ngIf=\"testSvgData.data!=null && testSvgData.data!=[]\">\r\n  <ng-container *ngFor='let data of testSvgData.data'>\r\n    <ng-container [ngSwitch]=\"data.mode\">\r\n      <svg:circle *ngSwitchCase=\"'circle'\" [attr.cx]='data.pos.x' [attr.cy]='data.pos.y' [attr.r]='data.radius?data.radius:8' class='point_circle circle_width'></svg:circle>\r\n    </ng-container>\r\n  </ng-container>\r\n</ng-container>"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/svg/dom/corner-wins/corner-win/corner-win.component.html":
/*!****************************************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/svg/dom/corner-wins/corner-win/corner-win.component.html ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<ng-container *ngIf='path!=\"\" && transform'>\r\n    <!-- 窗主体 -->\r\n    <svg:path [attr.d]='path' [attr.transform]='transform' class='line_width CW_path' (mousedown)='setActive($event)'\r\n        (mouseover)='setMsg($event)'></svg:path>\r\n    <!-- 选中 -->\r\n    <ng-container *ngIf=\"isChoose()\">\r\n        <svg:path [attr.d]='path' [attr.transform]='transform' class='choose'></svg:path>\r\n    </ng-container>\r\n    <!-- 操作======================== -->\r\n    <svg:path [attr.d]='path' [attr.transform]='transform' (mousedown)='setActive($event)' (mouseover)='setMsg($event)'\r\n        class='action'></svg:path>\r\n    <!-- 窗的上边  -->\r\n    <svg:path [attr.d]='getUPath()' [attr.transform]='transform' class='up_path'></svg:path>\r\n\r\n    <!-- 窗的左边============== -->\r\n    <!-- 刷墙 -->\r\n    <ng-container *ngIf='cornerWin.outWallThickness!=0'>\r\n        <svg:path [attr.d]='getLPath(true)' class='line_width wall_path' [attr.transform]='transform'></svg:path>\r\n    </ng-container>\r\n    <!-- 刷框 -->\r\n    <ng-container *ngIf='cornerWin.outWallThickness==0'>\r\n        <svg:path [attr.d]='getLPath(false)' class='line_width wall_path' [attr.transform]='transform'></svg:path>\r\n    </ng-container>\r\n    <!-- 窗的下边================ -->\r\n    <!-- 刷墙 -->\r\n    <ng-container *ngIf='cornerWin.outWallThickness!=0'>\r\n        <svg:path [attr.d]='getDPath(true)' class='line_width wall_path' [attr.transform]='transform'></svg:path>\r\n    </ng-container>\r\n    <!-- 刷框 -->\r\n    <ng-container *ngIf='cornerWin.outWallThickness==0'>\r\n        <svg:path [attr.d]='getDPath(false)' class='line_width wall_path' [attr.transform]='transform'></svg:path>\r\n    </ng-container>\r\n    <!-- 点分布 -->\r\n    <ng-container *ngIf='!dataService.cache.cornerWin.hideAllCircle && dataService.cache.common.choose!=null && dataService.cache.common.choose.id==cornerWin.id'>\r\n        <svg [labelCircle]='getALLCircleData(transform?transform:null)'></svg>\r\n    </ng-container>\r\n    <svg [labelLines]='getLabelLines()'></svg>\r\n</ng-container>"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/svg/dom/corner-wins/corner-wins.component.html":
/*!******************************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/svg/dom/corner-wins/corner-wins.component.html ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<ng-container *ngFor='let newCornerWin of dataService.doCornerWins().arr()'>\r\n  <svg>\r\n    <g [cornerWin]='newCornerWin' />\r\n  </svg>\r\n</ng-container>"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/svg/dom/cowalls/cowall-shadow/cowall-shadow.component.html":
/*!******************************************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/svg/dom/cowalls/cowall-shadow/cowall-shadow.component.html ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<ng-container *ngIf=\"isShow()\">\r\n  <svg [labelLines]='getLabelData()'></svg>\r\n</ng-container>"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/svg/dom/cowalls/cowall/cowall.component.html":
/*!****************************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/svg/dom/cowalls/cowall/cowall.component.html ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<ng-container *ngIf=' isShow() && inLine && labelData'>\r\n    <!-- <svg:path class='label_path' [attr.d]=\"getPath()\" style=\"stroke:rgb(99,99,99);stroke-width:2\" />\r\n    <svg:image class='label_img' [attr.xlink:href]='getImgUrl()' [attr.width]='getImgWdith()' [attr.height]='getImgHeight()'\r\n        [attr.x]=\"-getImgWdith()/2\" [attr.y]=\"-getImgHeight()/2\" [attr.transform]='getTransformStart()' />\r\n    <svg:image class='label_img' [attr.xlink:href]='getImgUrl()' [attr.width]='getImgWdith()' [attr.height]='getImgHeight()'\r\n        [attr.x]=\"-getImgWdith()/2\" [attr.y]=\"-getImgHeight()/2\" [attr.x]=\"-getImgWdith()/2\" [attr.y]=\"-getImgHeight()/2\" [attr.transform]='getTransformEnd()'\r\n    />\r\n    <svg:text class='label_text' [attr.id]='cowall.id' [attr.transform]='getTextTransform()'>{{getText()}}</svg:text> -->\r\n    <svg (mouseenter)=\"mouseOver($event)\">\r\n        <svg [attr.id]='cowall.id' [labelLines]='labelData' (labelData)='setInput($event)'></svg>\r\n    </svg>\r\n</ng-container>"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/svg/dom/cowalls/cowalls.component.html":
/*!**********************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/svg/dom/cowalls/cowalls.component.html ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<!-- 标签 -->\r\n<ng-container *ngIf='dataService.cache.floorplan.display.inLabel && !dataService.cmd.cowall.strongHide && !dataService.cmd.cowall.hide'>\r\n  <ng-container *ngFor='let newCowall of getCowallArr()'>\r\n    <svg>\r\n      <g [cowall]='newCowall' />\r\n    </svg>\r\n  </ng-container>\r\n</ng-container>\r\n<!-- 外标签 -->\r\n<ng-container *ngIf='isDisplayOutLine() && !dataService.cmd.cowall.strongHide && !dataService.cmd.cowall.hide'>\r\n  <svg>\r\n    <g outLabel></g>\r\n  </svg>\r\n</ng-container>\r\n<!-- 影子标签 -->\r\n<svg>\r\n  <g cowall-shadow />\r\n</svg>"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/svg/dom/cowalls/out-label/out-label.component.html":
/*!**********************************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/svg/dom/cowalls/out-label/out-label.component.html ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<!-- <ng-container *ngFor='let point of testPosArr'>\r\n  <svg:circle [attr.cx]='point.x' [attr.cy]='point.y' r=50 fill='red'></svg:circle>\r\n</ng-container> -->\r\n<svg [labelLines]='labelData'></svg>"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/svg/dom/doors/door/door.component.html":
/*!**********************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/svg/dom/doors/door/door.component.html ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<!-- 门框 -->\r\n<svg:path [attr.d]='getPath()' [attr.id]='door.id' class='line_width door_path' [attr.transform]='transformString'\r\n    (mousedown)=\"mouseDown($event)\" (mouseenter)=\"mouseOver($event)\" />\r\n<!-- 门板 -->\r\n<ng-container *ngIf=\"door.svgImg\">\r\n    <svg:g [attr.transform]='transformString'>\r\n        <!-- 普通门板 -->\r\n        <svg:image *ngIf=\"door.plankType=='normal'\" preserveAspectRatio='none meet' [attr.width]='pixSize.width'\r\n            [attr.height]='pixSize.height' [attr.x]='originPos.x' [attr.y]='originPos.y-pixSize.height*(door.out?1:0)'\r\n            [attr.xlink:href]='door.svgImg' [ngClass]=\"{ 'door_mirror':door.mirror&&door.out,'door_in':!door.mirror&&!door.out,'door_mirror_in':door.mirror&&!door.out}\"\r\n            [ngStyle]=\"{'transform-origin':(originPos.x+(pixSize.width/2))+'px '+(originPos.y-pixSize.height*(door.out?1:0)+(pixSize.height/2))+'px'}\"\r\n            (mousedown)=\"mouseDown($event)\" (mouseenter)=\"mouseOver($event)\">\r\n        </svg:image>\r\n        <!-- 双门板 -->\r\n        <svg:image *ngIf=\"door.plankType=='twoDoor'\" preserveAspectRatio='none meet' [attr.width]='pixSize.width'\r\n            [attr.height]='pixSize.height' [attr.x]='originPos.x' [attr.y]='originPos.y-pixSize.height*(door.out?1:0)'\r\n            [attr.xlink:href]='door.svgImg' [ngClass]=\"{ 'door_mirror':door.mirror&&door.out,'door_in':!door.mirror&&!door.out,'door_mirror_in':door.mirror&&!door.out}\"\r\n            [ngStyle]=\"{'transform-origin':(originPos.x+(pixSize.width/2))+'px '+(originPos.y-pixSize.height*(door.out?1:0)+(pixSize.height/2))+'px'}\"\r\n            (mousedown)=\"mouseDown($event)\" (mouseenter)=\"mouseOver($event)\">\r\n        </svg:image>\r\n        <!-- 移门 -->\r\n        <svg:image *ngIf=\"door.plankType=='pullDoor'\" preserveAspectRatio='none meet' [attr.width]='pixSize.width'\r\n            [attr.height]='pixSize.height' [attr.x]='originPos.x' [attr.y]='originPos.y' [attr.xlink:href]='door.svgImg'\r\n            [ngClass]=\"{ 'door_mirror':door.mirror&&door.out,'door_in':!door.mirror&&!door.out,'door_mirror_in':door.mirror&&!door.out}\"\r\n            (mousedown)=\"mouseDown($event)\" (mouseenter)=\"mouseOver($event)\">\r\n        </svg:image>\r\n        <!-- <svg:circle [attr.cx]='door.getOriginPos().x' [attr.cy]='door.getOriginPos().y' r='50' fill='#ff0000'></svg:circle> -->\r\n    </svg:g>\r\n</ng-container>\r\n<!-- 标签 -->\r\n<ng-container *ngIf='showLabel()'>\r\n\r\n    <svg [labelLines]='getLabelDatas()'></svg>\r\n</ng-container>\r\n\r\n<!-- 双点 -->\r\n<ng-container *ngIf='dataService.cache.common.choose!=null && dataService.cache.common.choose.id==door.id'>\r\n    <svg [labelCircle]='getALLPointData(transformString?transformString:null)'></svg>\r\n</ng-container>"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/svg/dom/doors/doors.component.html":
/*!******************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/svg/dom/doors/doors.component.html ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<ng-container *ngFor='let newDoor of dataService.doDoors().arr()'>\r\n  <svg>\r\n    <g [door]='newDoor' />\r\n  </svg>\r\n</ng-container>"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/svg/dom/geometrys/geometry/geometry.component.html":
/*!**********************************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/svg/dom/geometrys/geometry/geometry.component.html ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<!-- 用来框住家具的,网络加载时图片有延时 -->\n<svg:path [attr.d]='getPath()' [attr.id]='geometry.id' class='geometry_path line_width' #boxPath [attr.transform]='getTransform()'\n  #geometryPath />\n<!-- 物体图片 -->\n<svg:image [attr.xlink:href]='geometry.url2D' preserveAspectRatio='none meet' [attr.width]='pixSize.width'\n  [attr.height]='pixSize.height' [attr.x]='-pixSize.width/2' [attr.y]='-pixSize.height/2' [attr.transform]='boxPath.attributes[\"transform\"].textContent'\n  (mousedown)='mouseDown($event,\"move\")'></svg:image>\n<!-- 圆,旋转用的 -->\n<ng-container *ngIf=\"dataService.cache.common.choose!=null &&\ndataService.cache.common.choose.id==geometry.id\">\n  <!-- 样式圆,摆式用的,基本没卵用,仅好看 -->\n  <svg:circle [attr.cx]='geometry.pos.x' [attr.cy]='geometry.pos.y' [attr.r]=\"dataService.cmd.furniture.radius\" class='line_width circle_line'\n    fill='none'></svg:circle>\n  <!-- 旋转按钮 -->\n  <svg:image [attr.xlink:href]='dataService.cmd.furniture.rotateIco' [attr.width]='dataService.cmd.furniture.icoSize.width'\n    [attr.height]='dataService.cmd.furniture.icoSize.width' [attr.x]='-dataService.cmd.furniture.icoSize.width/2'\n    [attr.y]='-dataService.cmd.furniture.icoSize.height/2' [attr.transform]='getRotateTransform()' (mousedown)='mouseDown($event,\"rotate\")'></svg:image>\n</ng-container>"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/svg/dom/geometrys/geometrys.component.html":
/*!**************************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/svg/dom/geometrys/geometrys.component.html ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<ng-container *ngFor='let geometry of getData()'>\n  <svg>\n    <g [geometry]='geometry' />\n  </svg>\n</ng-container>"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/svg/dom/lu-wins/lu-win/lu-win.component.html":
/*!****************************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/svg/dom/lu-wins/lu-win/lu-win.component.html ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<!-- 初版 -->\r\n<!-- <svg:path [attr.d]='pathD' class='lu_path' (mousedown)=\"mouseDown($event)\"></svg:path> -->\r\n<!-- 参数化版 -->\r\n<ng-container *ngIf='pathDatas'>\r\n    <svg [repeatPathDatas]='pathDatas' (mousedown)=\"mouseDown($event)\"></svg>\r\n</ng-container>\r\n\r\n<!-- 点分布 -->\r\n<ng-container *ngIf='isShowCircles()'>\r\n    <svg [labelCircle]='getCircles(LUWin)'></svg>\r\n</ng-container>"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/svg/dom/lu-wins/lu-wins.component.html":
/*!**********************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/svg/dom/lu-wins/lu-wins.component.html ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<ng-container *ngFor='let newWin of getData()'>\n  <svg>\n    <g [LUWin]='newWin' />\n  </svg>\n</ng-container>"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/svg/dom/params-models/params-model/params-model.component.html":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/svg/dom/params-models/params-model/params-model.component.html ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<!-- 初版 -->\n<!-- <svg:path [attr.d]='pathD' class='lu_path' (mousedown)=\"mouseDown($event)\"></svg:path> -->\n<!-- 参数化版 -->\n<ng-container *ngIf='pathDatas'>\n  <svg [repeatPathDatas]='pathDatas' (mousedown)='mouseDown($event)'></svg>\n</ng-container>\n\n<!-- 标签 -->\n<svg [labelLines]='labelData'></svg>\n\n<!-- 点分布 -->\n<svg [labelCircle]='circleData'></svg>"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/svg/dom/params-models/params-models.component.html":
/*!**********************************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/svg/dom/params-models/params-models.component.html ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<ng-container *ngFor='let paramsObj of dataService.doParamsModels().arr()'>\n  <svg>\n    <g [paramsModel]='paramsObj' />\n  </svg>\n</ng-container>"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/svg/dom/points/point/point.component.html":
/*!*************************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/svg/dom/points/point/point.component.html ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<ng-container *ngIf='point'>\r\n    <svg:circle class='svg_circle' [attr.id]='point.id' [attr.cx]=\"testPos.x\" [attr.cy]=\"testPos.y\" r=\"40\" (mouseenter)=\"mouseOver($event)\" />\r\n    <ng-container *ngIf='isOver'>\r\n        <svg:circle class='svg_circle_shadow' [attr.id]='point.id' [attr.cx]=\"testPos.x\" [attr.cy]=\"testPos.y\" r=\"70\"\r\n            (mousedown)=\"mouseDown($event)\" (mouseleave)=\"mouseLeave($event)\" />\r\n    </ng-container>\r\n</ng-container>"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/svg/dom/points/points.component.html":
/*!********************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/svg/dom/points/points.component.html ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<ng-template ngFor let-newPoint [ngForOf]=\"getPointArr()\">\r\n  <svg>\r\n    <g [point]='newPoint' />\r\n  </svg>\r\n</ng-template>"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/svg/dom/rooms/floor/floor.component.html":
/*!************************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/svg/dom/rooms/floor/floor.component.html ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<ng-container *ngIf=\"floor.imgUrl!=null && floor.size!=null && dataService.cache.floorplan.display.floor\">\r\n  <svg:pattern [attr.id]='floor.id' x=\"0\" y=\"0\" [attr.width]='floor.size.width' [attr.height]='floor.size.height'\r\n    patternUnits=\"userSpaceOnUse\">\r\n    <svg:image [attr.xlink:href]='floor.imgUrl' preserveAspectRatio='none meet' [attr.width]='floor.size.width'\r\n      [attr.height]='floor.size.height'></svg:image>\r\n  </svg:pattern>\r\n</ng-container>"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/svg/dom/rooms/room-shadow/room-shadow.component.html":
/*!************************************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/svg/dom/rooms/room-shadow/room-shadow.component.html ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<ng-container *ngIf='isShow()'>\r\n    <!-- 边框 -->\r\n    <svg:path class=\"room_shadow_path\" [attr.d]='getPath()' [ngStyle]=\"{ 'stroke-width':getThickness()}\" />\r\n    <ng-container *ngIf='isLabel()'>\r\n        <!-- 标注 -->\r\n        <svg [labelLines]='getLabelData(centerPos,size)'></svg>\r\n        <!-- 面积 -->\r\n        <svg:text class='room_shadow_area font_size' [attr.transform]='getTextTransform(centerPos)'>{{getArea(size)}}</svg:text>\r\n    </ng-container>\r\n</ng-container>"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/svg/dom/rooms/room/room.component.html":
/*!**********************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/svg/dom/rooms/room/room.component.html ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg:defs [floor]=\"room.getFloor()\"></svg:defs>\r\n<!-- 地板 -->\r\n<!-- <svg:path [attr.d]=\"getPath()\" /> -->\r\n\r\n<!-- 空间 -->\r\n<!-- <ng-container *ngIf='transform!=null'> -->\r\n<svg:path [attr.d]='path' class='test_room'></svg:path>\r\n<!-- 地板 -->\r\n<svg:path [attr.d]=\"path\" [attr.fill]=\"fillString\" />\r\n\r\n<ng-container *ngIf=\"dataService.cache.common.choose!=null && dataService.cache.common.choose.id==room.id\">\r\n    <!-- 点击选中 -->\r\n    <svg:path [attr.d]=\"path\" class='room_click' />\r\n</ng-container>\r\n<!-- 用来空地板测试 -->\r\n<svg:path [attr.d]=\"path\" class='shadow_room' [attr.id]='room.id' (mouseenter)='mouseOver($event)' (mousedown)='mouseDown($event)' />\r\n<!-- 文字部分 -->\r\n<svg (mousedown)='textDown($event)'>\r\n    <!-- 空间类型 -->\r\n    <!-- <svg:text *ngIf='dataService.cache.floorplan.display.roomType' class='room_area font_size' y='-150'\r\n            [attr.transform]='transform'>{{room.roomName}}</svg:text> -->\r\n    <!-- 空间面积 -->\r\n    <!-- <svg:text *ngIf='dataService.cache.floorplan.display.area' class='room_area font_size' y='150' [attr.transform]='transform'>{{area}}</svg:text> -->\r\n</svg>\r\n<!-- </ng-container> -->"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/svg/dom/rooms/rooms-text/rooms-text.component.html":
/*!**********************************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/svg/dom/rooms/rooms-text/rooms-text.component.html ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<ng-container *ngFor='let room of getRoomArr()'>\n  <svg (mousedown)='mouseDown($event,room)'>\n    <!-- 空间类型 -->\n    <svg:text *ngIf='dataService.cache.floorplan.display.roomType' [attr.class]='getClassName(room)' y='-150'\n      [attr.transform]='getTransform(room)'>{{room.roomName}}</svg:text>\n    <!-- 空间面积 -->\n    <svg:text *ngIf='dataService.cache.floorplan.display.area' [attr.class]='getClassName(room)' y='150'\n      [attr.transform]='getTransform(room)'>{{getArea(room)}}</svg:text>\n  </svg>\n</ng-container>"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/svg/dom/rooms/rooms.component.html":
/*!******************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/svg/dom/rooms/rooms.component.html ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<ng-container *ngFor='let newRoom of getRoomArr()'>\r\n  <svg>\r\n    <g [room]='newRoom'></g>\r\n  </svg>\r\n</ng-container>\r\n<svg>\r\n  <g roomsText></g>\r\n</svg>>"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/svg/dom/walls/wall-shadow/wall-shadow.component.html":
/*!************************************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/svg/dom/walls/wall-shadow/wall-shadow.component.html ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<ng-container *ngIf=\"isShow()\">\r\n\r\n  <svg:path [attr.d]=\"getPath()\" class=\"wall_shadow_path\" />\r\n  <ng-container *ngIf='setCircle()!=null'>\r\n    <svg:circle [attr.cx]='circlePos.x' [attr.cy]='circlePos.y' [attr.r]='dataService.cache.floorplan.multiple *4' class='wall_circle'></svg:circle>\r\n  </ng-container>\r\n\r\n\r\n</ng-container>"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/svg/dom/walls/wall/wall.component.html":
/*!**********************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/svg/dom/walls/wall/wall.component.html ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<ng-container *ngIf=\"isShow() && path\">\r\n    <!-- 墙类型 -->\r\n    <svg:defs>\r\n        <svg:pattern [attr.id]=\"patternName\" [attr.x]=\"0\" [attr.y]=\"-this.wall.thickness/2\" [attr.width]=\"this.wall.thickness\"\r\n            [attr.height]=\"this.wall.thickness\" patternUnits=\"userSpaceOnUse\" [attr.patternTransform]=\"'rotate('+wallRotate+')'\">\r\n            <svg:image [attr.width]=\"this.wall.thickness\" [attr.height]=\"this.wall.thickness\" [attr.xlink:href]='typeSrc'\r\n                preserveAspectRatio='none meet' />\r\n            </pattern>\r\n    </svg:defs>\r\n    <svg:path [attr.d]=\"path\" class=\"wall_path\" />\r\n    <ng-container *ngIf='wall.wallType!=0'>\r\n        <svg:path [attr.d]='path' [attr.fill]=\"fillName\" />\r\n    </ng-container>\r\n    <ng-container *ngIf='wall.wallType==0'>\r\n        <svg:path [attr.d]='path' class='wall_stroke_color' />\r\n    </ng-container>\r\n    <!-- 轮廓线 -->\r\n    <!-- <ng-container *ngIf='!wall.isVeryShort && linePaths'>\r\n        <ng-container *ngFor='let line of linePaths'>\r\n            <svg:path [attr.d]='line' class='line_width wall_path wall_line' />\r\n        </ng-container>\r\n    </ng-container> -->\r\n    <!-- 调试版轮廓线 -->\r\n    <svg:path [attr.d]='path' class='line_width wall_path wall_line' />\r\n    <!-- 选择 -->\r\n    <ng-container *ngIf='isChoose()'>\r\n        <svg:path [attr.d]=\"path\" class='choose' />\r\n    </ng-container>\r\n    <!-- 操作 -->\r\n    <svg (mousedown)=\"mouseDown($event)\" (mouseenter)=\"mouseOver($event)\">\r\n        <ng-container *ngIf=\"isVertical(); else elseTemplate\">\r\n            <svg:path [attr.d]=\"path\" [attr.id]='wall.id' class='action left_right'></svg:path>\r\n        </ng-container>\r\n        <ng-template #elseTemplate>\r\n            <svg:path [attr.d]=\"path\" [attr.id]='wall.id' class='action top_bottom'></svg:path>\r\n        </ng-template>\r\n    </svg>\r\n    <!-- 墙本身标签 -->\r\n    <ng-container *ngIf='dataService.cmd.wall.displayName && centertransform!=null'>\r\n        <svg:text class='wall_label' [attr.transform]='centertransform'>{{wall.id}}</svg:text>\r\n    </ng-container>\r\n\r\n    <!-- 测试 -->\r\n    <!-- 测试点分布 -->\r\n    <!-- <ng-container *ngIf='wall.outLine!=null'>\r\n        <svg:circle [attr.cx]='wall.outLine[0][0].x' [attr.cy]='wall.outLine[0][0].y' r='80' fill=\"red\" />\r\n        <svg:circle [attr.cx]='wall.outLine[0][1].x' [attr.cy]='wall.outLine[0][1].y' r='80' fill=\"green\" />\r\n        <svg:circle [attr.cx]='wall.outLine[1][0].x' [attr.cy]='wall.outLine[1][0].y' r='80' fill=\"blue\" />\r\n        <svg:circle [attr.cx]='wall.outLine[1][1].x' [attr.cy]='wall.outLine[1][1].y' r='80' fill=\"black\" />\r\n    </ng-container> -->\r\n\r\n    <!-- <svg:line class='line_width test_center_line' [attr.x1]='centerLine[0].x' [attr.y1]='centerLine[0].y' [attr.x2]='centerLine[1].x'\r\n        [attr.y2]='centerLine[1].y'></svg:line>\r\n    <svg:line class='line_width test_out_line' [attr.x1]='outLine[0].x' [attr.y1]='outLine[0].y' [attr.x2]='outLine[1].x' [attr.y2]='outLine[1].y'></svg:line>\r\n    <svg:line class='line_width test_in_line' [attr.x1]='inLine[0].x' [attr.y1]='inLine[0].y' [attr.x2]='inLine[1].x' [attr.y2]='inLine[1].y'></svg:line> -->\r\n</ng-container>"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/svg/dom/walls/walls.component.html":
/*!******************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/svg/dom/walls/walls.component.html ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<ng-container *ngFor='let newWall of getWallArr()'>\r\n  <svg>\r\n    <g [wall]='newWall' />\r\n  </svg>\r\n</ng-container>"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/svg/dom/wins/win/win.component.html":
/*!*******************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/svg/dom/wins/win/win.component.html ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<!-- 飘窗窗框 -->\r\n<ng-container *ngIf='win.outThickness!=0'>\r\n    <svg:path [attr.d]='getBayBlockPath()' [attr.transform]='transformString' class='bayWin_path' (mousedown)=\"mouseDown($event)\"\r\n        (mouseenter)=\"mouseOver($event)\" />\r\n</ng-container>\r\n<!-- 窗主体 -->\r\n<svg:path [attr.d]='getPath()' [attr.id]='win.id' class='line_width win_path' [attr.transform]='transformString'\r\n    (mousedown)=\"mouseDown($event)\" (mouseenter)=\"mouseOver($event)\" />\r\n<!-- 窗板 -->\r\n<svg:image *ngIf=\"win.plankType=='normal'\" preserveAspectRatio='none meet' [attr.width]='win.size.width' [attr.height]='win.size.height'\r\n    [attr.x]='-win.size.width/2' [attr.y]='-win.size.height/2' [attr.xlink:href]='win.svgImg' [attr.transform]='transformString'\r\n    (mousedown)=\"mouseDown($event)\" (mouseenter)=\"mouseOver($event)\">\r\n</svg:image>\r\n<!-- 标签 -->\r\n<ng-container *ngIf='showLabel()'>\r\n    <svg [labelLines]='getLabelDatas()'></svg>\r\n</ng-container>\r\n\r\n<!-- 双点 -->\r\n<ng-container *ngIf='dataService.cache.common.choose!=null && dataService.cache.common.choose.id==win.id'>\r\n    <svg [labelCircle]='getALLPointData(transformString?transformString:null)'></svg>\r\n</ng-container>"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/svg/dom/wins/wins.component.html":
/*!****************************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/svg/dom/wins/wins.component.html ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<ng-container *ngFor='let newWin of dataService.doWins().arr()'>\r\n  <svg>\r\n    <g [win]='newWin' />\r\n  </svg>\r\n</ng-container>"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/svg/svg.component.html":
/*!******************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/svg/svg.component.html ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class='viewContainer' [appViewContainer]=\"dataService.cache.thumbnail.svg\">\r\n  <div class='svg_div'>\r\n    <svg class='main_svg' [ngStyle]=\"{\r\n          'top.px':cmd?cmd.floorplan.top!=null?cmd.floorplan.top:0:0,\r\n          'left.px':cmd?cmd.floorplan.left!=null?cmd.floorplan.left:0:0,\r\n          'width.px':cmd?cmd.back.size.width:0,\r\n          'height.px':cmd?cmd.back.size.height:0,\r\n          'fill-opacity':cmd && (floorplan.backImg && dataService.cache.floorplan.display.roomImg) ?cmd.floorplan.opacity:1,\r\n          'transform':cmd?'scale(' + cmd.floorplan.zoom + ',' + cmd.floorplan.zoom + ')':'scale(1,1)'\r\n        }\">\r\n      <ng-container *ngIf='cmd!=null'>\r\n        <g [back]='backData'></g>\r\n        <svg [ngStyle]=\"{'display':dataService.cache.floorplan.display.roomSvg==true?'block':'none'}\">\r\n          <g rooms></g>\r\n          <g walls></g>\r\n          <g points></g>\r\n          <g cowalls></g>\r\n          <g cornerWins></g>\r\n          <g doors></g>\r\n          <g wins></g>\r\n          <g LUWins></g>\r\n          <g paramsModels></g>\r\n          <g geometrys></g>\r\n          <g svgCamera *ngIf='cameraOn'></g>\r\n          <g wall-shadow></g>\r\n          <g room-shadow></g>\r\n        </svg>>\r\n        <g absorbLines (ABEvent)='setAbsorbLineEvent($event)'></g>\r\n        <g testSvg (TSEvent)='setTestSvgEvent($event)'></g>\r\n      </ng-container>\r\n    </svg>\r\n  </div>\r\n  <ng-container *ngIf='cmd!=null'>\r\n    <app-block [block]='blockData'></app-block>\r\n  </ng-container>\r\n</div>\r\n\r\n<!-- 记得关闭自动loading加载器 -->\r\n\r\n<div threeCanvas class='threeView' *ngIf='threeOn==1' [appViewContainer]=\"dataService.cache.thumbnail.three\">\r\n\r\n</div>\r\n<!-- <div class='svg_div'></div> -->"

/***/ }),

/***/ "./node_modules/raw-loader/index.js!./src/app/three/three.component.html":
/*!**********************************************************************!*\
  !*** ./node_modules/raw-loader!./src/app/three/three.component.html ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<canvas id=\"mainCanvas\"></canvas>"

/***/ }),

/***/ "./src/app/app.component.scss":
/*!************************************!*\
  !*** ./src/app/app.component.scss ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuc2NzcyJ9 */"

/***/ }),

/***/ "./src/app/app.component.ts":
/*!**********************************!*\
  !*** ./src/app/app.component.ts ***!
  \**********************************/
/*! exports provided: AppComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppComponent", function() { return AppComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");



let AppComponent = class AppComponent {
    constructor(el, DUService) {
        this.el = el;
        this.DUService = DUService;
        this.title = 'app';
        this.designPopOn = true;
        let doc = this.el.nativeElement;
        doc.setAttribute('oncontextmenu', "return false;");
        doc.setAttribute('ondragstart', "return false;");
        doc.setAttribute('onselectstart', "return false");
    }
    ngOnInit() {
        let a = this.DUService.obj.getQueryStringSuper('isSimplify');
        a == 1 ? this.designPopOn = false : true;
    }
};
AppComponent.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"] }
];
AppComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-root',
        template: __webpack_require__(/*! raw-loader!./app.component.html */ "./node_modules/raw-loader/index.js!./src/app/app.component.html"),
        styles: [__webpack_require__(/*! ./app.component.scss */ "./src/app/app.component.scss")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"], _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"]])
], AppComponent);



/***/ }),

/***/ "./src/app/app.module.ts":
/*!*******************************!*\
  !*** ./src/app/app.module.ts ***!
  \*******************************/
/*! exports provided: AppModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppModule", function() { return AppModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/platform-browser */ "./node_modules/@angular/platform-browser/fesm2015/platform-browser.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
/* harmony import */ var _app_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./app.component */ "./src/app/app.component.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_data3d_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./services/data3d.service */ "./src/app/services/data3d.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_message_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./services/message.service */ "./src/app/services/message.service.ts");
/* harmony import */ var _svg_svg_module__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./svg/svg.module */ "./src/app/svg/svg.module.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./services/dom-update.service */ "./src/app/services/dom-update.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _design_pop_design_pop_module__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./design-pop/design-pop.module */ "./src/app/design-pop/design-pop.module.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./services/pop-div.service */ "./src/app/services/pop-div.service.ts");
/* harmony import */ var _ng_bootstrap_ng_bootstrap__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @ng-bootstrap/ng-bootstrap */ "./node_modules/@ng-bootstrap/ng-bootstrap/fesm2015/ng-bootstrap.js");
/* harmony import */ var _services_save_data_service__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./services/save-data.service */ "./src/app/services/save-data.service.ts");
/* harmony import */ var _services_hot_key_service__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./services/hot-key.service */ "./src/app/services/hot-key.service.ts");
/* harmony import */ var _services_http_service__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./services/http.service */ "./src/app/services/http.service.ts");
/* harmony import */ var _services_right_menu_service__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./services/right-menu.service */ "./src/app/services/right-menu.service.ts");




















let AppModule = class AppModule {
};
AppModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"])({
        declarations: [
            _app_component__WEBPACK_IMPORTED_MODULE_5__["AppComponent"]
        ],
        imports: [
            _angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__["BrowserModule"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"],
            _svg_svg_module__WEBPACK_IMPORTED_MODULE_10__["SvgModule"],
            _design_pop_design_pop_module__WEBPACK_IMPORTED_MODULE_13__["DesignPopModule"],
            _angular_common_http__WEBPACK_IMPORTED_MODULE_4__["HttpClientModule"],
            _design_pop_design_pop_module__WEBPACK_IMPORTED_MODULE_13__["DesignPopModule"],
            _ng_bootstrap_ng_bootstrap__WEBPACK_IMPORTED_MODULE_15__["NgbModule"],
        ],
        providers: [
            _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_6__["JdesignDataService"],
            _services_data3d_service__WEBPACK_IMPORTED_MODULE_7__["Data3dService"],
            _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_8__["JdesignUtil2dService"],
            _services_message_service__WEBPACK_IMPORTED_MODULE_9__["MessageService"],
            _services_dom_update_service__WEBPACK_IMPORTED_MODULE_11__["DomUpdateService"],
            _services_calculators_service__WEBPACK_IMPORTED_MODULE_12__["CalculatorsService"],
            _services_pop_div_service__WEBPACK_IMPORTED_MODULE_14__["PopDivService"],
            _services_save_data_service__WEBPACK_IMPORTED_MODULE_16__["SaveDataService"],
            _services_hot_key_service__WEBPACK_IMPORTED_MODULE_17__["HotKeyService"],
            _services_http_service__WEBPACK_IMPORTED_MODULE_18__["HttpService"],
            _services_right_menu_service__WEBPACK_IMPORTED_MODULE_19__["RightMenuService"]
        ],
        bootstrap: [_app_component__WEBPACK_IMPORTED_MODULE_5__["AppComponent"]]
    })
], AppModule);



/***/ }),

/***/ "./src/app/data/design.data.ts":
/*!*************************************!*\
  !*** ./src/app/data/design.data.ts ***!
  \*************************************/
/*! exports provided: points, cowalls, walls, rooms, floors, roofs, doors, wins, cameras, furnitures, builds, cornerWins, LWins, UWins, paramsModels, cache */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "points", function() { return points; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cowalls", function() { return cowalls; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "walls", function() { return walls; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rooms", function() { return rooms; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "floors", function() { return floors; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "roofs", function() { return roofs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "doors", function() { return doors; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "wins", function() { return wins; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cameras", function() { return cameras; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "furnitures", function() { return furnitures; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "builds", function() { return builds; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cornerWins", function() { return cornerWins; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LWins", function() { return LWins; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UWins", function() { return UWins; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "paramsModels", function() { return paramsModels; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cache", function() { return cache; });
/* harmony import */ var _svg_common_jdesign_JCache__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../svg/common/jdesign/JCache */ "./src/app/svg/common/jdesign/JCache.ts");

let points = [];
let cowalls = [];
let walls = [];
let rooms = [];
let floors = [];
let roofs = [];
let doors = [];
let wins = [];
let cameras = [];
let furnitures = [];
let builds = [];
let cornerWins = [];
let LWins = [];
let UWins = [];
let paramsModels = [];
let cache = new _svg_common_jdesign_JCache__WEBPACK_IMPORTED_MODULE_0__["JCache"]();


/***/ }),

/***/ "./src/app/data/pop.data.ts":
/*!**********************************!*\
  !*** ./src/app/data/pop.data.ts ***!
  \**********************************/
/*! exports provided: popRightData, panelTopData, PanelTopFuncData */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "popRightData", function() { return popRightData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "panelTopData", function() { return panelTopData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PanelTopFuncData", function() { return PanelTopFuncData; });
let popRightData = {
    "闭合": {
        "ico": "#icon-bihe"
    },
    "退出": {
        "ico": "#icon-tuichu"
    },
    "取消": {
        "ico": "#icon-quxiao"
    },
    "拆分墙": {
        "ico": "#icon-chaifen"
    },
    "转弧墙": {
        "ico": "#icon-huxing"
    },
    "背景图修改": {
        "ico": "#icon-tubiao3"
    },
    "删除背景图": {
        "ico": "#icon-shanchu"
    },
    "连接墙体": {
        "ico": "#icon-ljie"
    },
    "变成阳台": {
        "ico": "#icon-yangtai"
    },
    "变成正常": {
        "ico": "#icon-zhengchang"
    },
    "地板测试": {
        "ico": "#icon-diban"
    }
};
let panelTopData = {
    "文件": {
        "icon": "#icon-wenjian2"
    },
    "保存": {
        "icon": "#icon-baocun2"
    },
    "编辑": {
        "icon": "#icon-bianji"
    },
    "画墙": {
        "icon": "#icon-shezhi"
    },
    "画空间": {
        "icon": "#icon-shezhi"
    }
};
let PanelTopFuncData = [];


/***/ }),

/***/ "./src/app/data/util2d.data.ts":
/*!*************************************!*\
  !*** ./src/app/data/util2d.data.ts ***!
  \*************************************/
/*! exports provided: newPosUtil, newCommonUtil, newCalUtil, newSvgUtil, newConsoleUtil, newObjUtil, newAbsorbUtil, newParseJ2D */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "newPosUtil", function() { return newPosUtil; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "newCommonUtil", function() { return newCommonUtil; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "newCalUtil", function() { return newCalUtil; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "newSvgUtil", function() { return newSvgUtil; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "newConsoleUtil", function() { return newConsoleUtil; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "newObjUtil", function() { return newObjUtil; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "newAbsorbUtil", function() { return newAbsorbUtil; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "newParseJ2D", function() { return newParseJ2D; });
/* harmony import */ var _svg_common_Util_PosUtil__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../svg/common/Util/PosUtil */ "./src/app/svg/common/Util/PosUtil.ts");
/* harmony import */ var _svg_common_Util_CommonUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../svg/common/Util/CommonUtil */ "./src/app/svg/common/Util/CommonUtil.ts");
/* harmony import */ var _svg_common_Util_CalUtil__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../svg/common/Util/CalUtil */ "./src/app/svg/common/Util/CalUtil.ts");
/* harmony import */ var _svg_common_Util_SvgUtil__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../svg/common/Util/SvgUtil */ "./src/app/svg/common/Util/SvgUtil.ts");
/* harmony import */ var _svg_common_Util_consoleUtil__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../svg/common/Util/consoleUtil */ "./src/app/svg/common/Util/consoleUtil.ts");
/* harmony import */ var _svg_common_Util_ObjUtil__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../svg/common/Util/ObjUtil */ "./src/app/svg/common/Util/ObjUtil.ts");
/* harmony import */ var _svg_common_Util_AbsorbUtil__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../svg/common/Util/AbsorbUtil */ "./src/app/svg/common/Util/AbsorbUtil.ts");
/* harmony import */ var _svg_common_Util_JParseJ2D__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../svg/common/Util/JParseJ2D */ "./src/app/svg/common/Util/JParseJ2D.ts");








let newPosUtil = new _svg_common_Util_PosUtil__WEBPACK_IMPORTED_MODULE_0__["PosUtil"]();
let newCommonUtil = new _svg_common_Util_CommonUtil__WEBPACK_IMPORTED_MODULE_1__["CommonUtil"]();
let newCalUtil = new _svg_common_Util_CalUtil__WEBPACK_IMPORTED_MODULE_2__["CalUtil"]();
let newSvgUtil = new _svg_common_Util_SvgUtil__WEBPACK_IMPORTED_MODULE_3__["SvgUtil"]();
let newConsoleUtil = new _svg_common_Util_consoleUtil__WEBPACK_IMPORTED_MODULE_4__["ConsoleUtil"]();
let newObjUtil = new _svg_common_Util_ObjUtil__WEBPACK_IMPORTED_MODULE_5__["ObjUtil"]();
let newAbsorbUtil = new _svg_common_Util_AbsorbUtil__WEBPACK_IMPORTED_MODULE_6__["AbsorbUtil"](newPosUtil);
let newParseJ2D = new _svg_common_Util_JParseJ2D__WEBPACK_IMPORTED_MODULE_7__["JParseJ2D"]();


/***/ }),

/***/ "./src/app/design-pop/container/button-list/button-list.component.css":
/*!****************************************************************************!*\
  !*** ./src/app/design-pop/container/button-list/button-list.component.css ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".icon {\r\n    width: 24px;\r\n    height: 24px;\r\n    vertical-align: -0.15em;\r\n    fill: #808080;\r\n    margin: 0 auto;\r\n}\r\n.btn {\r\n    background: transparent;\r\n    font-size: .7rem;\r\n    line-height: 12px;\r\n    color: #696969;\r\n    padding: 0;\r\n}\r\n.btn:hover .icon{\r\n    fill:lightblue;\r\n}\r\n.iconbox {\r\n    padding: 0;\r\n    width: 34px;\r\n    margin: 0 auto;\r\n    height: 32px;\r\n    border-radius: 4px;\r\n    border: 1px solid transparent;\r\n    padding-top: 3px;\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZGVzaWduLXBvcC9jb250YWluZXIvYnV0dG9uLWxpc3QvYnV0dG9uLWxpc3QuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLFdBQVc7SUFDWCxZQUFZO0lBQ1osdUJBQXVCO0lBQ3ZCLGFBQWE7SUFDYixjQUFjO0FBQ2xCO0FBQ0E7SUFDSSx1QkFBdUI7SUFDdkIsZ0JBQWdCO0lBQ2hCLGlCQUFpQjtJQUNqQixjQUFjO0lBQ2QsVUFBVTtBQUNkO0FBQ0E7SUFDSSxjQUFjO0FBQ2xCO0FBQ0E7SUFDSSxVQUFVO0lBQ1YsV0FBVztJQUNYLGNBQWM7SUFDZCxZQUFZO0lBQ1osa0JBQWtCO0lBQ2xCLDZCQUE2QjtJQUM3QixnQkFBZ0I7QUFDcEIiLCJmaWxlIjoic3JjL2FwcC9kZXNpZ24tcG9wL2NvbnRhaW5lci9idXR0b24tbGlzdC9idXR0b24tbGlzdC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmljb24ge1xyXG4gICAgd2lkdGg6IDI0cHg7XHJcbiAgICBoZWlnaHQ6IDI0cHg7XHJcbiAgICB2ZXJ0aWNhbC1hbGlnbjogLTAuMTVlbTtcclxuICAgIGZpbGw6ICM4MDgwODA7XHJcbiAgICBtYXJnaW46IDAgYXV0bztcclxufVxyXG4uYnRuIHtcclxuICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xyXG4gICAgZm9udC1zaXplOiAuN3JlbTtcclxuICAgIGxpbmUtaGVpZ2h0OiAxMnB4O1xyXG4gICAgY29sb3I6ICM2OTY5Njk7XHJcbiAgICBwYWRkaW5nOiAwO1xyXG59XHJcbi5idG46aG92ZXIgLmljb257XHJcbiAgICBmaWxsOmxpZ2h0Ymx1ZTtcclxufVxyXG4uaWNvbmJveCB7XHJcbiAgICBwYWRkaW5nOiAwO1xyXG4gICAgd2lkdGg6IDM0cHg7XHJcbiAgICBtYXJnaW46IDAgYXV0bztcclxuICAgIGhlaWdodDogMzJweDtcclxuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcclxuICAgIGJvcmRlcjogMXB4IHNvbGlkIHRyYW5zcGFyZW50O1xyXG4gICAgcGFkZGluZy10b3A6IDNweDtcclxufSJdfQ== */"

/***/ }),

/***/ "./src/app/design-pop/container/button-list/button-list.component.ts":
/*!***************************************************************************!*\
  !*** ./src/app/design-pop/container/button-list/button-list.component.ts ***!
  \***************************************************************************/
/*! exports provided: ButtonListComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ButtonListComponent", function() { return ButtonListComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let ButtonListComponent = class ButtonListComponent {
    constructor() { }
    set buttonList(data) {
        this._button = data;
        // console.log(data)
    }
    get buttonList() { return this._button; }
    ngOnInit() {
    }
};
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [Object])
], ButtonListComponent.prototype, "buttonList", null);
ButtonListComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[buttonList]',
        template: __webpack_require__(/*! raw-loader!./button-list.component.html */ "./node_modules/raw-loader/index.js!./src/app/design-pop/container/button-list/button-list.component.html"),
        styles: [__webpack_require__(/*! ./button-list.component.css */ "./src/app/design-pop/container/button-list/button-list.component.css")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
], ButtonListComponent);



/***/ }),

/***/ "./src/app/design-pop/container/button-list/button-list.module.ts":
/*!************************************************************************!*\
  !*** ./src/app/design-pop/container/button-list/button-list.module.ts ***!
  \************************************************************************/
/*! exports provided: ButtonListModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ButtonListModule", function() { return ButtonListModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _button_list_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./button-list.component */ "./src/app/design-pop/container/button-list/button-list.component.ts");
/* harmony import */ var _ng_bootstrap_ng_bootstrap__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ng-bootstrap/ng-bootstrap */ "./node_modules/@ng-bootstrap/ng-bootstrap/fesm2015/ng-bootstrap.js");





let ButtonListModule = class ButtonListModule {
};
ButtonListModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
            _ng_bootstrap_ng_bootstrap__WEBPACK_IMPORTED_MODULE_4__["NgbModule"]
        ],
        declarations: [_button_list_component__WEBPACK_IMPORTED_MODULE_3__["ButtonListComponent"]],
        exports: [_button_list_component__WEBPACK_IMPORTED_MODULE_3__["ButtonListComponent"]]
    })
], ButtonListModule);



/***/ }),

/***/ "./src/app/design-pop/container/container.component.css":
/*!**************************************************************!*\
  !*** ./src/app/design-pop/container/container.component.css ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".out_div{\r\n   max-width: 135px;\r\n    background: #fafafa;\r\n    border: 1px solid #d6d6d6;\r\n    box-shadow: 0 2px 7px 0.16px rgba(52,58,64,.25);\r\n    border-radius: 4px;\r\n    color: #444b52;\r\n    font-size: 12px;\r\n    padding: 3px 0;\r\n    display: block;\r\n    position: absolute;\r\n    z-index:1;\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZGVzaWduLXBvcC9jb250YWluZXIvY29udGFpbmVyLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7R0FDRyxnQkFBZ0I7SUFDZixtQkFBbUI7SUFDbkIseUJBQXlCO0lBQ3pCLCtDQUErQztJQUMvQyxrQkFBa0I7SUFDbEIsY0FBYztJQUNkLGVBQWU7SUFDZixjQUFjO0lBQ2QsY0FBYztJQUNkLGtCQUFrQjtJQUNsQixTQUFTO0FBQ2IiLCJmaWxlIjoic3JjL2FwcC9kZXNpZ24tcG9wL2NvbnRhaW5lci9jb250YWluZXIuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5vdXRfZGl2e1xyXG4gICBtYXgtd2lkdGg6IDEzNXB4O1xyXG4gICAgYmFja2dyb3VuZDogI2ZhZmFmYTtcclxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNkNmQ2ZDY7XHJcbiAgICBib3gtc2hhZG93OiAwIDJweCA3cHggMC4xNnB4IHJnYmEoNTIsNTgsNjQsLjI1KTtcclxuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcclxuICAgIGNvbG9yOiAjNDQ0YjUyO1xyXG4gICAgZm9udC1zaXplOiAxMnB4O1xyXG4gICAgcGFkZGluZzogM3B4IDA7XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHotaW5kZXg6MTtcclxufSJdfQ== */"

/***/ }),

/***/ "./src/app/design-pop/container/container.component.ts":
/*!*************************************************************!*\
  !*** ./src/app/design-pop/container/container.component.ts ***!
  \*************************************************************/
/*! exports provided: ContainerComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContainerComponent", function() { return ContainerComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let ContainerComponent = class ContainerComponent {
    constructor() { }
    set container(data) {
        if (data != null) {
            data.outArea.style = {
                "top": data.outArea.position.y - (34 * data.content.length + 8) / 2 + 'px',
                "left": data.outArea.position.x - 19 + 'px',
                "transform": 'rotate(' + data.outArea.rotate + 'deg)',
                "z-index": "index" in data.outArea == true ? data.outArea.index : 0
            };
        }
        this._container = data;
    }
    get container() {
        return this._container;
    }
    ngOnInit() {
    }
};
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [Object])
], ContainerComponent.prototype, "container", null);
ContainerComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-container',
        template: __webpack_require__(/*! raw-loader!./container.component.html */ "./node_modules/raw-loader/index.js!./src/app/design-pop/container/container.component.html"),
        styles: [__webpack_require__(/*! ./container.component.css */ "./src/app/design-pop/container/container.component.css")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
], ContainerComponent);



/***/ }),

/***/ "./src/app/design-pop/container/container.module.ts":
/*!**********************************************************!*\
  !*** ./src/app/design-pop/container/container.module.ts ***!
  \**********************************************************/
/*! exports provided: ContainerModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContainerModule", function() { return ContainerModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _container_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./container.component */ "./src/app/design-pop/container/container.component.ts");
/* harmony import */ var _button_list_button_list_module__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./button-list/button-list.module */ "./src/app/design-pop/container/button-list/button-list.module.ts");





let ContainerModule = class ContainerModule {
};
ContainerModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
            _button_list_button_list_module__WEBPACK_IMPORTED_MODULE_4__["ButtonListModule"]
        ],
        declarations: [_container_component__WEBPACK_IMPORTED_MODULE_3__["ContainerComponent"]],
        exports: [_container_component__WEBPACK_IMPORTED_MODULE_3__["ContainerComponent"]]
    })
], ContainerModule);



/***/ }),

/***/ "./src/app/design-pop/cue-info/cue-info.component.css":
/*!************************************************************!*\
  !*** ./src/app/design-pop/cue-info/cue-info.component.css ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".cue-info{\r\n    height: 50px;\r\n    display: flex;\r\n    text-align: center;\r\n    flex-wrap: wrap;\r\n    justify-content: center;\r\n    z-index: 1;\r\n}\r\n.cue-info .center-text{\r\n    position: absolute;\r\n    top: 55px;\r\n    display: flex;\r\n    background: white;\r\n    border: 1px solid #e5e5e5;\r\n    height: 30px;\r\n    flex-wrap: wrap;\r\n    justify-content: center;\r\n    -moz-box-pack: center;\r\n    -webkit-moz-box-pack: center;\r\n    -webkit-box-pack: center;\r\n    padding-left: 0;\r\n    margin-bottom: 0;\r\n    list-style: none;\r\n    float: left;\r\n    border-top: 0;\r\n    z-index: 50;\r\n    border-radius: 3px;\r\n}\r\n.cue-text,.cue-time,.cue-button{\r\n    padding: 5px 8px;\r\n    height: 100%;\r\n    color: color;\r\n}\r\n.cue-button{\r\n    color: #3182f7;\r\n}\r\n\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZGVzaWduLXBvcC9jdWUtaW5mby9jdWUtaW5mby5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksWUFBWTtJQUNaLGFBQWE7SUFDYixrQkFBa0I7SUFDbEIsZUFBZTtJQUNmLHVCQUF1QjtJQUN2QixVQUFVO0FBQ2Q7QUFDQTtJQUNJLGtCQUFrQjtJQUNsQixTQUFTO0lBQ1QsYUFBYTtJQUNiLGlCQUFpQjtJQUNqQix5QkFBeUI7SUFDekIsWUFBWTtJQUVaLGVBQWU7SUFFZix1QkFBdUI7SUFDdkIscUJBQXFCO0lBQ3JCLDRCQUE0QjtJQUM1Qix3QkFBd0I7SUFDeEIsZUFBZTtJQUNmLGdCQUFnQjtJQUNoQixnQkFBZ0I7SUFDaEIsV0FBVztJQUNYLGFBQWE7SUFDYixXQUFXO0lBQ1gsa0JBQWtCO0FBQ3RCO0FBQ0E7SUFDSSxnQkFBZ0I7SUFDaEIsWUFBWTtJQUNaLFlBQVk7QUFDaEI7QUFDQTtJQUNJLGNBQWM7QUFDbEIiLCJmaWxlIjoic3JjL2FwcC9kZXNpZ24tcG9wL2N1ZS1pbmZvL2N1ZS1pbmZvLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuY3VlLWluZm97XHJcbiAgICBoZWlnaHQ6IDUwcHg7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgZmxleC13cmFwOiB3cmFwO1xyXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICB6LWluZGV4OiAxO1xyXG59XHJcbi5jdWUtaW5mbyAuY2VudGVyLXRleHR7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICB0b3A6IDU1cHg7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgYmFja2dyb3VuZDogd2hpdGU7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjZTVlNWU1O1xyXG4gICAgaGVpZ2h0OiAzMHB4O1xyXG4gICAgLW1zLWZsZXgtd3JhcDogd3JhcDtcclxuICAgIGZsZXgtd3JhcDogd3JhcDtcclxuICAgIC1tcy1mbGV4LXBhY2s6IGNlbnRlcjtcclxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgLW1vei1ib3gtcGFjazogY2VudGVyO1xyXG4gICAgLXdlYmtpdC1tb3otYm94LXBhY2s6IGNlbnRlcjtcclxuICAgIC13ZWJraXQtYm94LXBhY2s6IGNlbnRlcjtcclxuICAgIHBhZGRpbmctbGVmdDogMDtcclxuICAgIG1hcmdpbi1ib3R0b206IDA7XHJcbiAgICBsaXN0LXN0eWxlOiBub25lO1xyXG4gICAgZmxvYXQ6IGxlZnQ7XHJcbiAgICBib3JkZXItdG9wOiAwO1xyXG4gICAgei1pbmRleDogNTA7XHJcbiAgICBib3JkZXItcmFkaXVzOiAzcHg7XHJcbn1cclxuLmN1ZS10ZXh0LC5jdWUtdGltZSwuY3VlLWJ1dHRvbntcclxuICAgIHBhZGRpbmc6IDVweCA4cHg7XHJcbiAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICBjb2xvcjogY29sb3I7XHJcbn1cclxuLmN1ZS1idXR0b257XHJcbiAgICBjb2xvcjogIzMxODJmNztcclxufVxyXG4iXX0= */"

/***/ }),

/***/ "./src/app/design-pop/cue-info/cue-info.component.ts":
/*!***********************************************************!*\
  !*** ./src/app/design-pop/cue-info/cue-info.component.ts ***!
  \***********************************************************/
/*! exports provided: CueInfoComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CueInfoComponent", function() { return CueInfoComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let CueInfoComponent = class CueInfoComponent {
    constructor() {
    }
    set cueInfo(data) {
        if (data != null) {
            this._cueInfo = data;
            clearInterval(this.timer);
            if (this._cueInfo != undefined) {
                this.timer = setInterval(() => {
                    this.setMessage(this._cueInfo);
                }, 1000);
            }
        }
    }
    get cueInfo() { return this._cueInfo; }
    ngOnInit() {
        // console.log(this._cueInfo)
    }
    setMessage(obj) {
        obj.time -= 1;
        if (this._cueInfo.time == 0) {
            clearInterval(this.timer);
        }
    }
    hidde() {
        this._cueInfo.time = 0;
        clearInterval(this.timer);
    }
};
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [Object])
], CueInfoComponent.prototype, "cueInfo", null);
CueInfoComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[cueInfo]',
        template: __webpack_require__(/*! raw-loader!./cue-info.component.html */ "./node_modules/raw-loader/index.js!./src/app/design-pop/cue-info/cue-info.component.html"),
        styles: [__webpack_require__(/*! ./cue-info.component.css */ "./src/app/design-pop/cue-info/cue-info.component.css")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
], CueInfoComponent);



/***/ }),

/***/ "./src/app/design-pop/cue-info/cue-info.module.ts":
/*!********************************************************!*\
  !*** ./src/app/design-pop/cue-info/cue-info.module.ts ***!
  \********************************************************/
/*! exports provided: CueInfoModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CueInfoModule", function() { return CueInfoModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _cue_info_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cue-info.component */ "./src/app/design-pop/cue-info/cue-info.component.ts");




let CueInfoModule = class CueInfoModule {
};
CueInfoModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]
        ],
        declarations: [_cue_info_component__WEBPACK_IMPORTED_MODULE_3__["CueInfoComponent"]],
        exports: [_cue_info_component__WEBPACK_IMPORTED_MODULE_3__["CueInfoComponent"]]
    })
], CueInfoModule);



/***/ }),

/***/ "./src/app/design-pop/design-pop.component.scss":
/*!******************************************************!*\
  !*** ./src/app/design-pop/design-pop.component.scss ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".viewContainer {\n  display: block;\n  width: 220px;\n  height: 200px;\n  background-color: #ddd;\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZGVzaWduLXBvcC9EOlxca25vd2xlZGdlXFxoZ1xcb2xkXFxvbGRSb29tL3NyY1xcYXBwXFxkZXNpZ24tcG9wXFxkZXNpZ24tcG9wLmNvbXBvbmVudC5zY3NzIiwic3JjL2FwcC9kZXNpZ24tcG9wL2Rlc2lnbi1wb3AuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxjQUFBO0VBQ0EsWUFBQTtFQUNBLGFBQUE7RUFDQSxzQkFBQTtFQUNBLGtCQUFBO0VBQ0EsTUFBQTtFQUNBLE9BQUE7QUNDSiIsImZpbGUiOiJzcmMvYXBwL2Rlc2lnbi1wb3AvZGVzaWduLXBvcC5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi52aWV3Q29udGFpbmVye1xyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICB3aWR0aDogMjIwcHg7XHJcbiAgICBoZWlnaHQ6IDIwMHB4O1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2RkZDtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHRvcDogMDtcclxuICAgIGxlZnQ6IDA7XHJcbn0iLCIudmlld0NvbnRhaW5lciB7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICB3aWR0aDogMjIwcHg7XG4gIGhlaWdodDogMjAwcHg7XG4gIGJhY2tncm91bmQtY29sb3I6ICNkZGQ7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAwO1xuICBsZWZ0OiAwO1xufSJdfQ== */"

/***/ }),

/***/ "./src/app/design-pop/design-pop.component.ts":
/*!****************************************************!*\
  !*** ./src/app/design-pop/design-pop.component.ts ***!
  \****************************************************/
/*! exports provided: DesignPopComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DesignPopComponent", function() { return DesignPopComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../services/pop-div.service */ "./src/app/services/pop-div.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _hotkey_newNewHotKey_class__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./hotkey/newNewHotKey.class */ "./src/app/design-pop/hotkey/newNewHotKey.class.ts");
/* harmony import */ var _designStyleData_hotKey_config_ts_hotKey_data__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../designStyleData/hotKey.config.ts/hotKey.data */ "./src/app/designStyleData/hotKey.config.ts/hotKey.data.ts");






let DesignPopComponent = class DesignPopComponent {
    constructor(popService, dataService) {
        this.popService = popService;
        this.dataService = dataService;
        this._rigthClickMenu = null;
        this.hotKey = [];
        // 切换视图数据
        this.toggleData = null;
        /* 加载开关 */
        // loadingOn = true;
        // 左侧按钮数据
        this.panelLeft = null;
        // 类型选择页面数据
        this.productMenu = null;
        /* 沙发 */
        this.safaData = null;
        // 产品页面数据
        this.datailMenu = null;
        // 左侧类型列表
        this.listData = null;
        // 右侧属性面板数据
        this.panelRight = null;
        this.panelBottom = null;
        // 输入框数据
        this.inputBox = null;
        // 弹出信息数据
        this.popMessage = null;
        // 按钮数据
        this.button = null;
        // 提示信息显示
        this.cueInfo = null;
        this.testData = {
            pos: {
                x: 100,
                y: 100
            },
            data: [
                {
                    text: "value",
                    func: (e, value) => {
                        console.log(value);
                    }
                }
            ]
        };
        /* 背景图 */
        // imgDistance: any = {
        //   url: './assets/img/1.jpg',
        //   width: 322,
        //   height: 240
        // }
        this.imgDistance = null;
        this.popService.rightClick.subscribe((data) => {
            this.rigthClickMenu = data;
        });
        this.popService.panelTop.subscribe((data) => {
            this.panelTop = data;
        });
        this.popService.inputBoxs.subscribe((data) => {
            this.inputBox = data;
        });
        this.popService.message.subscribe((data) => {
            // console.log(data)
            this.popMessage = data;
        });
        this.popService.backImg.subscribe((data) => {
            // console.log(data)
            this.imgDistance = data;
        });
        this.popService.buttons.subscribe((data) => {
            this.button = data;
        });
        this.popService.thumbnail.subscribe((data) => {
            this.toggleData = data;
        });
        this.popService.panelRightData.subscribe((data) => {
            // console.log(data)
            this.popService.getMaterial.emit(null);
            this.panelRight = data;
            // console.log(data)
        });
        this.popService.panelBottom.subscribe((data) => {
            this.panelBottom = data;
        });
        // this.popService.loadingPage.subscribe((data) => {
        //   this.loadingOn = data.loadingOn
        // })
        this.popService.testInputBtn.subscribe((data) => {
            this.testData = data;
        });
        /* 左边=========================== */
        // this.popService.leftBtn.subscribe((data) => {
        //   this.panelLeft = data
        // })
        this.popService.leftProduct.subscribe((data) => {
            this.datailMenu = data;
        });
        this.popService.leftMenuList.subscribe((data) => {
            this.listData = data;
        });
        this.popService.leftMenuType.subscribe((data) => {
            this.productMenu = data;
        });
        this.popService.sendLeftData.subscribe((data) => {
            // console.log(data);
            this.panelLeft = data;
        });
        this.popService.cueInfo.subscribe((data) => {
            this.cueInfo = data;
        });
        // this.popService.panelLeftDraw.subscribe((data) => {
        //   this.panelLeft = data
        // })
        // this.popService.panelLeftSofaData.subscribe((data) => {
        //   this.safaData = data
        // })
        /* 所有东西加载完才设置热键 */
        this.dataService.cache.common.allInit.subscribe(() => {
            // console.log('ssssss')
            // let key = new hotKey(document, this.dataService.cache.hotKeys)
            let hotKeyData = new _designStyleData_hotKey_config_ts_hotKey_data__WEBPACK_IMPORTED_MODULE_5__["HotKeyData"](this.dataService);
            let newKey = new _hotkey_newNewHotKey_class__WEBPACK_IMPORTED_MODULE_4__["NewNewHotKey"](hotKeyData.shortKeyData);
            // console.log(this.dataService.cache.shortFuncs)
            this.dataService.cache.common.chooseUpdate.subscribe((data) => {
                newKey.designObj = data;
            });
        });
    }
    get rigthClickMenu() {
        // console.log(this._rigthClickMenu)
        return this._rigthClickMenu;
    }
    set rigthClickMenu(data) {
        this._rigthClickMenu = data;
    }
    ngOnInit() {
    }
};
DesignPopComponent.ctorParameters = () => [
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_2__["PopDivService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_3__["JdesignDataService"] }
];
DesignPopComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-design-pop',
        template: __webpack_require__(/*! raw-loader!./design-pop.component.html */ "./node_modules/raw-loader/index.js!./src/app/design-pop/design-pop.component.html"),
        styles: [__webpack_require__(/*! ./design-pop.component.scss */ "./src/app/design-pop/design-pop.component.scss")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_services_pop_div_service__WEBPACK_IMPORTED_MODULE_2__["PopDivService"],
        _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_3__["JdesignDataService"]])
], DesignPopComponent);



/***/ }),

/***/ "./src/app/design-pop/design-pop.module.ts":
/*!*************************************************!*\
  !*** ./src/app/design-pop/design-pop.module.ts ***!
  \*************************************************/
/*! exports provided: DesignPopModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DesignPopModule", function() { return DesignPopModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _design_pop_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./design-pop.component */ "./src/app/design-pop/design-pop.component.ts");
/* harmony import */ var _pop_div_pop_div_module__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./pop-div/pop-div.module */ "./src/app/design-pop/pop-div/pop-div.module.ts");
/* harmony import */ var _panel_panel_module__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./panel/panel.module */ "./src/app/design-pop/panel/panel.module.ts");
/* harmony import */ var _input_div_input_div_module__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./input-div/input-div.module */ "./src/app/design-pop/input-div/input-div.module.ts");
/* harmony import */ var _panel_panel_top_panel_top_module__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./panel/panel-top/panel-top.module */ "./src/app/design-pop/panel/panel-top/panel-top.module.ts");
/* harmony import */ var _panel_messages_messages_module__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./panel/messages/messages.module */ "./src/app/design-pop/panel/messages/messages.module.ts");
/* harmony import */ var _container_container_module__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./container/container.module */ "./src/app/design-pop/container/container.module.ts");
/* harmony import */ var _img_distance_img_distance_module__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./img-distance/img-distance.module */ "./src/app/design-pop/img-distance/img-distance.module.ts");
/* harmony import */ var _toggle_window_toggle_window_module__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./toggle-window/toggle-window.module */ "./src/app/design-pop/toggle-window/toggle-window.module.ts");
/* harmony import */ var _loading_loading_module__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./loading/loading.module */ "./src/app/design-pop/loading/loading.module.ts");
/* harmony import */ var _panel_panel_left_panel_left_module__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./panel/panel-left/panel-left.module */ "./src/app/design-pop/panel/panel-left/panel-left.module.ts");
/* harmony import */ var _test_test_module__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./test/test.module */ "./src/app/design-pop/test/test.module.ts");
/* harmony import */ var _three_tools_three_tools_module__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./three-tools/three-tools.module */ "./src/app/design-pop/three-tools/three-tools.module.ts");
/* harmony import */ var _panel_panel_bottom_panel_bottom_module__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./panel/panel-bottom/panel-bottom.module */ "./src/app/design-pop/panel/panel-bottom/panel-bottom.module.ts");
/* harmony import */ var _panel_panel_propety_panel_propety_module__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./panel/panel-propety/panel-propety.module */ "./src/app/design-pop/panel/panel-propety/panel-propety.module.ts");
/* harmony import */ var _cue_info_cue_info_module__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./cue-info/cue-info.module */ "./src/app/design-pop/cue-info/cue-info.module.ts");



















// import { PanelTopModule} from './panel/panel-top/panel-top.module';
let DesignPopModule = class DesignPopModule {
};
DesignPopModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
            _pop_div_pop_div_module__WEBPACK_IMPORTED_MODULE_4__["PopDivModule"],
            _panel_panel_module__WEBPACK_IMPORTED_MODULE_5__["PanelModule"],
            _input_div_input_div_module__WEBPACK_IMPORTED_MODULE_6__["InputDivModule"],
            _panel_panel_top_panel_top_module__WEBPACK_IMPORTED_MODULE_7__["PanelTopModule"],
            _panel_panel_propety_panel_propety_module__WEBPACK_IMPORTED_MODULE_17__["PanelPropetyModule"],
            _panel_panel_left_panel_left_module__WEBPACK_IMPORTED_MODULE_13__["PanelLeftModule"],
            _panel_panel_bottom_panel_bottom_module__WEBPACK_IMPORTED_MODULE_16__["PanelBottomModule"],
            _panel_messages_messages_module__WEBPACK_IMPORTED_MODULE_8__["MessagesModule"],
            _img_distance_img_distance_module__WEBPACK_IMPORTED_MODULE_10__["ImgDistanceModule"],
            _container_container_module__WEBPACK_IMPORTED_MODULE_9__["ContainerModule"],
            _toggle_window_toggle_window_module__WEBPACK_IMPORTED_MODULE_11__["ToggleWindowModule"],
            _loading_loading_module__WEBPACK_IMPORTED_MODULE_12__["LoadingModule"],
            _test_test_module__WEBPACK_IMPORTED_MODULE_14__["TestModule"],
            _three_tools_three_tools_module__WEBPACK_IMPORTED_MODULE_15__["ThreeToolsModule"],
            _cue_info_cue_info_module__WEBPACK_IMPORTED_MODULE_18__["CueInfoModule"]
            // HotkeyModule
            // ViewContainerDirective
        ],
        declarations: [_design_pop_component__WEBPACK_IMPORTED_MODULE_3__["DesignPopComponent"]],
        exports: [_design_pop_component__WEBPACK_IMPORTED_MODULE_3__["DesignPopComponent"]]
    })
], DesignPopModule);



/***/ }),

/***/ "./src/app/design-pop/hotkey/newNewHotKey.class.ts":
/*!*********************************************************!*\
  !*** ./src/app/design-pop/hotkey/newNewHotKey.class.ts ***!
  \*********************************************************/
/*! exports provided: NewNewHotKey, ShortKey */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NewNewHotKey", function() { return NewNewHotKey; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ShortKey", function() { return ShortKey; });
class NewNewHotKey {
    constructor(shortKeys) {
        this.shortKeys = shortKeys;
        /** 存放按键 */
        this._saveKeysData = [];
        /** 当前按键个数 */
        this._currentDownKeyNum = 0;
        /* 已经触发方法标记 */
        this._isDoneArr = [];
        /* 排除对象 */
        this.exkeys = [];
        document.addEventListener("keydown", (e) => {
            let key = this.getTransKey(e);
            this.addDownKey(key);
            let isDo = this.setDownKeys(this.shortKeys);
            if (isDo) {
                e.preventDefault();
                return false;
            }
        });
        document.addEventListener("keyup", (e) => {
            this.setUpKeys(this.shortKeys);
            let key = this.getTransKey(e);
            this.removeUpKey(key);
            e.preventDefault();
            return false;
        });
    }
    /* 转键 */
    getTransKey(e) {
        // 将大写按键转换为小写
        if (e.keyCode >= 65 && e.keyCode <= 90) {
            return e.key.toLowerCase();
        }
        else {
            return e.key;
        }
        // return e.key.toLowerCase()
    }
    /* 判断按键 */
    checkKeys(keys) {
        if (this._currentDownKeyNum >= keys.length) {
            let same = true;
            for (let i = 0; i < keys.length; i++) {
                if (!this._saveKeysData[keys[i]]) {
                    same = false;
                    break;
                }
            }
            return same;
        }
        return false;
    }
    /** 检测状态 */
    checkStatus(status) {
        /* 空值返回true */
        if (!status)
            return true;
        /* 如果是数组(只要有一个为true,则true) */
        if (status instanceof Array) {
            for (let i = 0; i < status.length; i++) {
                if (status[i]())
                    return true;
            }
            return false;
        }
        /* 如果不是数组 */
        return status();
    }
    /* 检测对象 */
    checkIsObj(isObj) {
        /* 空值返回true */
        if (!isObj)
            return true;
        return (this.designObj != undefined && isObj(this.designObj));
    }
    /* 添加按键 */
    addDownKey(key) {
        if (!this._saveKeysData[key])
            this._currentDownKeyNum++;
        this._saveKeysData[key] = true;
    }
    /* 放开按键 */
    removeUpKey(key) {
        this._currentDownKeyNum--;
        this._saveKeysData[key] = false;
    }
    /* 所有触发按下去的方法 */
    setDownKeys(shortKeys) {
        let isDo = false;
        for (let i = 0; i < shortKeys.length; i++) {
            let a = this.setDownkey(shortKeys[i], i);
            if (a)
                isDo = true;
        }
        return isDo;
    }
    /* 所有触发放开的方法 */
    setUpKeys(shortKeys) {
        for (let i = 0; i < shortKeys.length; i++) {
            this.setUpKey(shortKeys[i], i);
        }
    }
    /* 触发按下去的方法 */
    setDownkey(shortKey, index) {
        if (shortKey.getObj) {
            this.designObj = (typeof shortKey.getObj) == "function" ? shortKey.getObj() : shortKey.getObj;
        }
        if (shortKey.downFunc &&
            this.checkKeys(shortKey.keys) &&
            this.checkIsObj(shortKey.isObj) &&
            this.checkStatus(shortKey.status)) {
            /* 是否已经执行过了 */
            if (!this._isDoneArr[index]) {
                if (!shortKey.isObj) {
                    shortKey.downFunc();
                }
                else {
                    shortKey.downFunc(this.designObj);
                }
                this._isDoneArr[index] = true;
            }
            return true;
        }
        return false;
    }
    /* 触发按上去的方法 */
    setUpKey(shortKey, index) {
        if (shortKey.getObj) {
            this.designObj = (typeof shortKey.getObj) == "function" ? shortKey.getObj() : shortKey.getObj;
        }
        /* 提前判断是为了将按下方法是否执行改为false */
        if (this.checkKeys(shortKey.keys)) {
            this._isDoneArr[index] = false;
            if (shortKey.upFunc &&
                this.checkIsObj(shortKey.isObj) &&
                this.checkStatus(shortKey.status)) {
                if (!shortKey.isObj)
                    shortKey.upFunc();
                else
                    shortKey.upFunc(this.designObj);
            }
        }
    }
}
NewNewHotKey.ctorParameters = () => [
    { type: Array }
];
class ShortKey {
}


/***/ }),

/***/ "./src/app/design-pop/img-distance/img-distance.component.css":
/*!********************************************************************!*\
  !*** ./src/app/design-pop/img-distance/img-distance.component.css ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".zhezhao {\r\n    width: 100%;\r\n    height: 100%;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    background-color: rgba(0, 0, 0, 0.2);\r\n    z-index: 101;\r\n}\r\n\r\n.pop {\r\n    width: 700px;\r\n    height: 530px;\r\n    border-radius: 4px;\r\n    position: absolute;\r\n    top: calc(50% - 265px);\r\n    left: calc(50% - 350px);\r\n    background-color: #f7f7f7;\r\n}\r\n\r\n.pop>.title {\r\n    width: 100%;\r\n    height: 50px;\r\n    position: relative;\r\n    border-top-left-radius: 4px;\r\n    border-top-right-radius: 4px;\r\n    background-color: white;\r\n    border-bottom: 1px solid #e3e3e3\r\n}\r\n\r\n.title .name {\r\n    font-family: '微软雅黑';\r\n    font-size: 20px;\r\n    text-align: center;\r\n    line-height: 50px;\r\n    display: block;\r\n    width: 100%;\r\n    height: 50px;\r\n}\r\n\r\n.title .btnclose {\r\n    overflow: hidden;\r\n    width: 52px;\r\n    height: 30px;\r\n    border-left: 1px solid #e3e3e3;\r\n    line-height: 30px;\r\n    text-align: center;\r\n    position: absolute;\r\n    top: 50%;\r\n    -webkit-transform: translateY(-50%);\r\n            transform: translateY(-50%);\r\n    right: 4px;\r\n    cursor: pointer;\r\n}\r\n\r\n.middle {\r\n    width: 600px;\r\n    height: 400px;\r\n    padding-top: 15px;\r\n    margin: 0 auto;\r\n}\r\n\r\n.distance {\r\n    display: table-cell;\r\n    text-align: center;\r\n    vertical-align: middle;\r\n    border: 1px solid #ddd;\r\n    background-color: white;\r\n}\r\n\r\n.distance svg {\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n\r\n/* .distance .radiu{\r\n    width: 10px;\r\n    height: 10px;\r\n    border-radius: 100%;\r\n    background-color: #4d9bd6\r\n}\r\n.distance img {\r\n    vertical-align: middle;\r\n} */\r\n\r\n.pro {\r\n    width: 100%;\r\n    height: 50px;\r\n    padding-top: 10px;\r\n}\r\n\r\n.pro span {\r\n    display: block;\r\n}\r\n\r\n.key_value input[type=number] {\r\n    width: 80px;\r\n    text-align: center;\r\n}\r\n\r\n.bottom {\r\n    width: 100%;\r\n    /* height: 40px; */\r\n    padding-top: 20px;\r\n    text-align: right;\r\n    padding-right: 29px;\r\n}\r\n\r\n.bottom .btn {\r\n    width: 108px;\r\n    height: 38px;\r\n    font-size: 18px;\r\n    margin-right: 20px;\r\n    line-height: 38px;\r\n    padding: 0 10px;\r\n}\r\n\r\n.bottom .btn-done {\r\n    border: 1px solid #3085c4;\r\n    background-color: #4d9bd6;\r\n    color: #fff;\r\n}\r\n\r\n.bottom .btn-default {\r\n    border: 1px solid #d9dbdf;\r\n    color: gray;\r\n    border-radius: 2px;\r\n    background: #fff;\r\n}\r\n\r\n.svg_circle {\r\n    cursor: move;\r\n}\r\n\r\n.big {}\r\n\r\n.small {\r\n    fill: #f30a0a;\r\n}\r\n\r\n.svg_img {\r\n    cursor: move;\r\n}\r\n\r\n.svg_path {\r\n    stroke: #3085c4;\r\n    stroke-opacity: 0.5;\r\n    stroke-width: 1;\r\n}\r\n\r\n.pointStart {\r\n    stroke: red;\r\n    stroke-width: 1;\r\n}\r\n\r\n.pointEnd {\r\n    stroke: blue;\r\n    stroke-width: 1;\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZGVzaWduLXBvcC9pbWctZGlzdGFuY2UvaW1nLWRpc3RhbmNlLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxXQUFXO0lBQ1gsWUFBWTtJQUNaLGtCQUFrQjtJQUNsQixNQUFNO0lBQ04sT0FBTztJQUNQLG9DQUFvQztJQUNwQyxZQUFZO0FBQ2hCOztBQUVBO0lBQ0ksWUFBWTtJQUNaLGFBQWE7SUFDYixrQkFBa0I7SUFDbEIsa0JBQWtCO0lBQ2xCLHNCQUFzQjtJQUN0Qix1QkFBdUI7SUFDdkIseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0ksV0FBVztJQUNYLFlBQVk7SUFDWixrQkFBa0I7SUFDbEIsMkJBQTJCO0lBQzNCLDRCQUE0QjtJQUM1Qix1QkFBdUI7SUFDdkI7QUFDSjs7QUFFQTtJQUNJLG1CQUFtQjtJQUNuQixlQUFlO0lBQ2Ysa0JBQWtCO0lBQ2xCLGlCQUFpQjtJQUNqQixjQUFjO0lBQ2QsV0FBVztJQUNYLFlBQVk7QUFDaEI7O0FBRUE7SUFDSSxnQkFBZ0I7SUFDaEIsV0FBVztJQUNYLFlBQVk7SUFDWiw4QkFBOEI7SUFDOUIsaUJBQWlCO0lBQ2pCLGtCQUFrQjtJQUNsQixrQkFBa0I7SUFDbEIsUUFBUTtJQUNSLG1DQUEyQjtZQUEzQiwyQkFBMkI7SUFDM0IsVUFBVTtJQUNWLGVBQWU7QUFDbkI7O0FBRUE7SUFDSSxZQUFZO0lBQ1osYUFBYTtJQUNiLGlCQUFpQjtJQUNqQixjQUFjO0FBQ2xCOztBQUVBO0lBQ0ksbUJBQW1CO0lBQ25CLGtCQUFrQjtJQUNsQixzQkFBc0I7SUFDdEIsc0JBQXNCO0lBQ3RCLHVCQUF1QjtBQUMzQjs7QUFFQTtJQUNJLFdBQVc7SUFDWCxZQUFZO0FBQ2hCOztBQUVBOzs7Ozs7OztHQVFHOztBQUVIO0lBQ0ksV0FBVztJQUNYLFlBQVk7SUFDWixpQkFBaUI7QUFDckI7O0FBRUE7SUFDSSxjQUFjO0FBQ2xCOztBQUVBO0lBQ0ksV0FBVztJQUNYLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLFdBQVc7SUFDWCxrQkFBa0I7SUFDbEIsaUJBQWlCO0lBQ2pCLGlCQUFpQjtJQUNqQixtQkFBbUI7QUFDdkI7O0FBRUE7SUFDSSxZQUFZO0lBQ1osWUFBWTtJQUNaLGVBQWU7SUFDZixrQkFBa0I7SUFDbEIsaUJBQWlCO0lBQ2pCLGVBQWU7QUFDbkI7O0FBRUE7SUFDSSx5QkFBeUI7SUFDekIseUJBQXlCO0lBQ3pCLFdBQVc7QUFDZjs7QUFFQTtJQUNJLHlCQUF5QjtJQUN6QixXQUFXO0lBQ1gsa0JBQWtCO0lBQ2xCLGdCQUFnQjtBQUNwQjs7QUFFQTtJQUNJLFlBQVk7QUFDaEI7O0FBRUEsTUFBTTs7QUFFTjtJQUNJLGFBQWE7QUFDakI7O0FBRUE7SUFDSSxZQUFZO0FBQ2hCOztBQUVBO0lBQ0ksZUFBZTtJQUNmLG1CQUFtQjtJQUNuQixlQUFlO0FBQ25COztBQUVBO0lBQ0ksV0FBVztJQUNYLGVBQWU7QUFDbkI7O0FBRUE7SUFDSSxZQUFZO0lBQ1osZUFBZTtBQUNuQiIsImZpbGUiOiJzcmMvYXBwL2Rlc2lnbi1wb3AvaW1nLWRpc3RhbmNlL2ltZy1kaXN0YW5jZS5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLnpoZXpoYW8ge1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICB0b3A6IDA7XHJcbiAgICBsZWZ0OiAwO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjIpO1xyXG4gICAgei1pbmRleDogMTAxO1xyXG59XHJcblxyXG4ucG9wIHtcclxuICAgIHdpZHRoOiA3MDBweDtcclxuICAgIGhlaWdodDogNTMwcHg7XHJcbiAgICBib3JkZXItcmFkaXVzOiA0cHg7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICB0b3A6IGNhbGMoNTAlIC0gMjY1cHgpO1xyXG4gICAgbGVmdDogY2FsYyg1MCUgLSAzNTBweCk7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjdmN2Y3O1xyXG59XHJcblxyXG4ucG9wPi50aXRsZSB7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIGhlaWdodDogNTBweDtcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDRweDtcclxuICAgIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiA0cHg7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcclxuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZTNlM2UzXHJcbn1cclxuXHJcbi50aXRsZSAubmFtZSB7XHJcbiAgICBmb250LWZhbWlseTogJ+W+rui9r+mbhem7kSc7XHJcbiAgICBmb250LXNpemU6IDIwcHg7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBsaW5lLWhlaWdodDogNTBweDtcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBoZWlnaHQ6IDUwcHg7XHJcbn1cclxuXHJcbi50aXRsZSAuYnRuY2xvc2Uge1xyXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgIHdpZHRoOiA1MnB4O1xyXG4gICAgaGVpZ2h0OiAzMHB4O1xyXG4gICAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAjZTNlM2UzO1xyXG4gICAgbGluZS1oZWlnaHQ6IDMwcHg7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICB0b3A6IDUwJTtcclxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcclxuICAgIHJpZ2h0OiA0cHg7XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbn1cclxuXHJcbi5taWRkbGUge1xyXG4gICAgd2lkdGg6IDYwMHB4O1xyXG4gICAgaGVpZ2h0OiA0MDBweDtcclxuICAgIHBhZGRpbmctdG9wOiAxNXB4O1xyXG4gICAgbWFyZ2luOiAwIGF1dG87XHJcbn1cclxuXHJcbi5kaXN0YW5jZSB7XHJcbiAgICBkaXNwbGF5OiB0YWJsZS1jZWxsO1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcclxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNkZGQ7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcclxufVxyXG5cclxuLmRpc3RhbmNlIHN2ZyB7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIGhlaWdodDogMTAwJTtcclxufVxyXG5cclxuLyogLmRpc3RhbmNlIC5yYWRpdXtcclxuICAgIHdpZHRoOiAxMHB4O1xyXG4gICAgaGVpZ2h0OiAxMHB4O1xyXG4gICAgYm9yZGVyLXJhZGl1czogMTAwJTtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICM0ZDliZDZcclxufVxyXG4uZGlzdGFuY2UgaW1nIHtcclxuICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XHJcbn0gKi9cclxuXHJcbi5wcm8ge1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBoZWlnaHQ6IDUwcHg7XHJcbiAgICBwYWRkaW5nLXRvcDogMTBweDtcclxufVxyXG5cclxuLnBybyBzcGFuIHtcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG59XHJcblxyXG4ua2V5X3ZhbHVlIGlucHV0W3R5cGU9bnVtYmVyXSB7XHJcbiAgICB3aWR0aDogODBweDtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxufVxyXG5cclxuLmJvdHRvbSB7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIC8qIGhlaWdodDogNDBweDsgKi9cclxuICAgIHBhZGRpbmctdG9wOiAyMHB4O1xyXG4gICAgdGV4dC1hbGlnbjogcmlnaHQ7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiAyOXB4O1xyXG59XHJcblxyXG4uYm90dG9tIC5idG4ge1xyXG4gICAgd2lkdGg6IDEwOHB4O1xyXG4gICAgaGVpZ2h0OiAzOHB4O1xyXG4gICAgZm9udC1zaXplOiAxOHB4O1xyXG4gICAgbWFyZ2luLXJpZ2h0OiAyMHB4O1xyXG4gICAgbGluZS1oZWlnaHQ6IDM4cHg7XHJcbiAgICBwYWRkaW5nOiAwIDEwcHg7XHJcbn1cclxuXHJcbi5ib3R0b20gLmJ0bi1kb25lIHtcclxuICAgIGJvcmRlcjogMXB4IHNvbGlkICMzMDg1YzQ7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNGQ5YmQ2O1xyXG4gICAgY29sb3I6ICNmZmY7XHJcbn1cclxuXHJcbi5ib3R0b20gLmJ0bi1kZWZhdWx0IHtcclxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNkOWRiZGY7XHJcbiAgICBjb2xvcjogZ3JheTtcclxuICAgIGJvcmRlci1yYWRpdXM6IDJweDtcclxuICAgIGJhY2tncm91bmQ6ICNmZmY7XHJcbn1cclxuXHJcbi5zdmdfY2lyY2xlIHtcclxuICAgIGN1cnNvcjogbW92ZTtcclxufVxyXG5cclxuLmJpZyB7fVxyXG5cclxuLnNtYWxsIHtcclxuICAgIGZpbGw6ICNmMzBhMGE7XHJcbn1cclxuXHJcbi5zdmdfaW1nIHtcclxuICAgIGN1cnNvcjogbW92ZTtcclxufVxyXG5cclxuLnN2Z19wYXRoIHtcclxuICAgIHN0cm9rZTogIzMwODVjNDtcclxuICAgIHN0cm9rZS1vcGFjaXR5OiAwLjU7XHJcbiAgICBzdHJva2Utd2lkdGg6IDE7XHJcbn1cclxuXHJcbi5wb2ludFN0YXJ0IHtcclxuICAgIHN0cm9rZTogcmVkO1xyXG4gICAgc3Ryb2tlLXdpZHRoOiAxO1xyXG59XHJcblxyXG4ucG9pbnRFbmQge1xyXG4gICAgc3Ryb2tlOiBibHVlO1xyXG4gICAgc3Ryb2tlLXdpZHRoOiAxO1xyXG59Il19 */"

/***/ }),

/***/ "./src/app/design-pop/img-distance/img-distance.component.ts":
/*!*******************************************************************!*\
  !*** ./src/app/design-pop/img-distance/img-distance.component.ts ***!
  \*******************************************************************/
/*! exports provided: ImgDistanceComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ImgDistanceComponent", function() { return ImgDistanceComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let ImgDistanceComponent = class ImgDistanceComponent {
    constructor(el) {
        this.el = el;
        this._firstPos = null;
        this._moveAct = null;
        this.isOrthogonal = true;
        this.absCircleBigRadius = 30;
        this.circleBigRadius = this.absCircleBigRadius;
        this.circleSmallRadius = 1;
        this.divSize = {
            width: 600,
            height: 320
        };
        this.svgProper = null;
        // this.setEvent()
    }
    set ImgDistance(data) {
        this._distance = data;
        if (data != null) {
            this.svgInit();
        }
        else {
            this.svgProper = null;
        }
    }
    get ImgDistance() { return this._distance; }
    ngOnInit() {
    }
    /* 事件=========================================== */
    /* 鼠标按下 */
    mouseDownEvent(e) {
        this._firstPos = { x: e.clientX, y: e.clientY };
    }
    /* 鼠标移动 */
    mouseMoveEvent(e) {
        let newPos = { x: e.clientX, y: e.clientY };
        if (this._firstPos != null) {
            switch (this._moveAct) {
                case 'img':
                    this.moveImg(this._firstPos, newPos);
                    break;
                case 'pointStart':
                    this.movePoint(this._firstPos, newPos, this.svgProper.pointS);
                    break;
                case 'pointEnd':
                    if (this.isOrthogonal)
                        this.verticalMovePoint(this.svgProper.pointS, this._firstPos, newPos, this.svgProper.pointE);
                    else
                        this.movePoint(this._firstPos, newPos, this.svgProper.pointE);
                    break;
            }
            this._firstPos = newPos;
        }
    }
    /* 鼠标放开事件 */
    mouseUpEvent(e) {
        this._firstPos = null;
        this._moveAct = null;
    }
    /* 鼠标滚轴事件 */
    mouseWheelEvent(e) {
        let distance = 0.2;
        if (e.deltaX > 0) {
            this.svgProper.zoom = Math.max(this.svgProper.minZoom, Math.min(this.svgProper.maxZoom, this.svgProper.zoom + distance));
        }
        else {
            this.svgProper.zoom = Math.max(this.svgProper.minZoom, Math.min(this.svgProper.maxZoom, this.svgProper.zoom - distance));
        }
        this.circleBigRadius = this.absCircleBigRadius / this.svgProper.zoom;
    }
    btnClose(e) {
        this._distance = null;
    }
    /* 初始化svg */
    svgInit() {
        let svgRatio = this.divSize.width / this.divSize.height;
        let imgRatio = this.ImgDistance.width / this.ImgDistance.height;
        let imgWidth = 0;
        let imgHeight = 0;
        let imgTop = 0;
        let imgLeft = 0;
        if (svgRatio > imgRatio) {
            imgHeight = this.divSize.height;
            imgWidth = imgHeight * imgRatio;
        }
        else {
            imgWidth = this.divSize.width;
            imgHeight = imgWidth / imgRatio;
        }
        imgTop = (this.divSize.height - imgHeight) / 2;
        imgLeft = (this.divSize.width - imgWidth) / 2;
        this.svgProper = {
            width: this.divSize.width,
            height: this.divSize.height,
            maxZoom: 3,
            minZoom: 1,
            pointE: { x: this.divSize.width * 0.65, y: this.divSize.height * 0.3 },
            pointS: { x: this.divSize.width * 0.35, y: this.divSize.height * 0.3 },
            zoom: 1,
            img: {
                width: imgWidth,
                height: imgHeight,
                top: imgTop,
                left: imgLeft
            }
        };
    }
    setMoveAct(mode) {
        this._moveAct = mode;
    }
    /* 移动图片 */
    moveImg(posStart, posEnd) {
        this.svgProper.img.left += (posEnd.x - posStart.x) / this.svgProper.zoom;
        this.svgProper.img.top += (posEnd.y - posStart.y) / this.svgProper.zoom;
        this.movePoint(posStart, posEnd, this.svgProper.pointS);
        this.movePoint(posStart, posEnd, this.svgProper.pointE);
    }
    /* 移动点 */
    movePoint(posStart, posEnd, movePos) {
        movePos.x += (posEnd.x - posStart.x) / this.svgProper.zoom;
        movePos.y += (posEnd.y - posStart.y) / this.svgProper.zoom;
    }
    /* 垂直移动点 */
    verticalMovePoint(targetPos, posStart, posEnd, movePos) {
        this.movePoint(posStart, posEnd, movePos);
        let distanceX = Math.abs(targetPos.x - (posEnd.x / this.svgProper.zoom));
        let distanceY = Math.abs(targetPos.y - (posEnd.y / this.svgProper.zoom));
        if (distanceX > distanceY) {
            movePos.y = targetPos.y;
        }
        else {
            movePos.x = targetPos.x;
        }
    }
    /* 获取线 */
    getPath() {
        let path = `M${this.svgProper.pointS.x} ${this.svgProper.pointS.y},L${this.svgProper.pointE.x} ${this.svgProper.pointE.y}`;
        return path;
    }
    /* 测距离 */
    getDistance() {
        let distance = Math.sqrt(Math.pow(this.svgProper.pointE.x - this.svgProper.pointS.x, 2) + Math.pow(this.svgProper.pointE.y - this.svgProper.pointS.y, 2));
        return distance;
    }
    /* 距离事件 */
    setDistanceEvent(e) {
        let distance = this.getDistance();
        let radtio = this.ImgDistance.distance / distance;
        this.ImgDistance.func(e, {
            url: this.ImgDistance.url,
            width: this.svgProper.img.width,
            height: this.svgProper.img.height
        }, radtio);
        this.btnClose(e);
    }
};
ImgDistanceComponent.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] }
];
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [Object])
], ImgDistanceComponent.prototype, "ImgDistance", null);
ImgDistanceComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[ImgDistance]',
        template: __webpack_require__(/*! raw-loader!./img-distance.component.html */ "./node_modules/raw-loader/index.js!./src/app/design-pop/img-distance/img-distance.component.html"),
        styles: [__webpack_require__(/*! ./img-distance.component.css */ "./src/app/design-pop/img-distance/img-distance.component.css")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]])
], ImgDistanceComponent);

class DistanceType {
}
class SvgProper {
}
class JPos {
}


/***/ }),

/***/ "./src/app/design-pop/img-distance/img-distance.module.ts":
/*!****************************************************************!*\
  !*** ./src/app/design-pop/img-distance/img-distance.module.ts ***!
  \****************************************************************/
/*! exports provided: ImgDistanceModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ImgDistanceModule", function() { return ImgDistanceModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _img_distance_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./img-distance.component */ "./src/app/design-pop/img-distance/img-distance.component.ts");





let ImgDistanceModule = class ImgDistanceModule {
};
ImgDistanceModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_3__["CommonModule"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"]
        ],
        declarations: [_img_distance_component__WEBPACK_IMPORTED_MODULE_4__["ImgDistanceComponent"]],
        exports: [_img_distance_component__WEBPACK_IMPORTED_MODULE_4__["ImgDistanceComponent"]]
    })
], ImgDistanceModule);



/***/ }),

/***/ "./src/app/design-pop/input-div/input-box/input-box.component.css":
/*!************************************************************************!*\
  !*** ./src/app/design-pop/input-div/input-box/input-box.component.css ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".inputContainer{\r\n    position: absolute;\r\n    z-index: 3;\r\n}\r\n.inputContainer input {\r\n    width: 30px;\r\n    height: 18px;\r\n    text-align: center;\r\n    font-size: 12px;\r\n    outline: none;\r\n    /* border-radius: 5px; */\r\n    border: 1px solid lightskyblue;\r\n    color: #5f5f5f;\r\n    cursor: text;\r\n}\r\ninput::-webkit-outer-spin-button,\r\n    input::-webkit-inner-spin-button {\r\n        -webkit-appearance: none;\r\n    }\r\ninput[type=\"number\"]{\r\n        -moz-appearance: textfield;\r\n    } \r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZGVzaWduLXBvcC9pbnB1dC1kaXYvaW5wdXQtYm94L2lucHV0LWJveC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksa0JBQWtCO0lBQ2xCLFVBQVU7QUFDZDtBQUNBO0lBQ0ksV0FBVztJQUNYLFlBQVk7SUFDWixrQkFBa0I7SUFDbEIsZUFBZTtJQUNmLGFBQWE7SUFDYix3QkFBd0I7SUFDeEIsOEJBQThCO0lBQzlCLGNBQWM7SUFDZCxZQUFZO0FBQ2hCO0FBQ0E7O1FBRVEsd0JBQXdCO0lBQzVCO0FBQ0E7UUFDSSwwQkFBMEI7SUFDOUIiLCJmaWxlIjoic3JjL2FwcC9kZXNpZ24tcG9wL2lucHV0LWRpdi9pbnB1dC1ib3gvaW5wdXQtYm94LmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuaW5wdXRDb250YWluZXJ7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICB6LWluZGV4OiAzO1xyXG59XHJcbi5pbnB1dENvbnRhaW5lciBpbnB1dCB7XHJcbiAgICB3aWR0aDogMzBweDtcclxuICAgIGhlaWdodDogMThweDtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIGZvbnQtc2l6ZTogMTJweDtcclxuICAgIG91dGxpbmU6IG5vbmU7XHJcbiAgICAvKiBib3JkZXItcmFkaXVzOiA1cHg7ICovXHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCBsaWdodHNreWJsdWU7XHJcbiAgICBjb2xvcjogIzVmNWY1ZjtcclxuICAgIGN1cnNvcjogdGV4dDtcclxufVxyXG5pbnB1dDo6LXdlYmtpdC1vdXRlci1zcGluLWJ1dHRvbixcclxuICAgIGlucHV0Ojotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uIHtcclxuICAgICAgICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XHJcbiAgICB9XHJcbiAgICBpbnB1dFt0eXBlPVwibnVtYmVyXCJde1xyXG4gICAgICAgIC1tb3otYXBwZWFyYW5jZTogdGV4dGZpZWxkO1xyXG4gICAgfSAiXX0= */"

/***/ }),

/***/ "./src/app/design-pop/input-div/input-box/input-box.component.ts":
/*!***********************************************************************!*\
  !*** ./src/app/design-pop/input-div/input-box/input-box.component.ts ***!
  \***********************************************************************/
/*! exports provided: InputBoxComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InputBoxComponent", function() { return InputBoxComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let InputBoxComponent = class InputBoxComponent {
    constructor(el, renderer) {
        this.el = el;
        this.renderer = renderer;
    }
    set inputBox(array) {
        let int = null;
        if (array != null) {
            this._inputData = array;
            for (let i = 0; i < array.length; i++) {
                if (array[i].isAutoFocus == true)
                    int = i;
                this._inputData[i].min = 0;
                this._inputData[i].max = 99999;
                this._inputData[i].newFunc = (box, value) => {
                    if (box.style.borderColor == 'lightskyblue' || box.style.borderColor == '') {
                        this._inputData[i].func(Number(value));
                    }
                };
            }
        }
        setTimeout(() => {
            let inputs = this.el.nativeElement.getElementsByClassName('input_test');
            if (int != null && inputs[int] != undefined) {
                inputs[int].select();
            }
        }, 300);
    }
    get inputBox() { return this._inputData; }
    ngOnInit() {
    }
    getSureValue(e, box) {
        if (parseFloat(box.value).toString() == 'NaN') {
            this.renderer.setElementStyle(this.boxDiv.nativeElement, 'border-color', 'red');
        }
        else {
            if (box.value > box.max || box.value < box.min) {
                this.renderer.setElementStyle(this.boxDiv.nativeElement, 'border-color', 'red');
            }
            else {
                this.renderer.setElementStyle(this.boxDiv.nativeElement, 'border-color', 'lightskyblue');
            }
        }
    }
};
InputBoxComponent.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Renderer"] }
];
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])('box', { static: false }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"])
], InputBoxComponent.prototype, "boxDiv", void 0);
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [Object])
], InputBoxComponent.prototype, "inputBox", null);
InputBoxComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[inputBox]',
        template: __webpack_require__(/*! raw-loader!./input-box.component.html */ "./node_modules/raw-loader/index.js!./src/app/design-pop/input-div/input-box/input-box.component.html"),
        styles: [__webpack_require__(/*! ./input-box.component.css */ "./src/app/design-pop/input-div/input-box/input-box.component.css")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["Renderer"]])
], InputBoxComponent);



/***/ }),

/***/ "./src/app/design-pop/input-div/input-div.module.ts":
/*!**********************************************************!*\
  !*** ./src/app/design-pop/input-div/input-div.module.ts ***!
  \**********************************************************/
/*! exports provided: InputDivModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InputDivModule", function() { return InputDivModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
/* harmony import */ var _input_box_input_box_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./input-box/input-box.component */ "./src/app/design-pop/input-div/input-box/input-box.component.ts");





let InputDivModule = class InputDivModule {
};
InputDivModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"]
        ],
        declarations: [_input_box_input_box_component__WEBPACK_IMPORTED_MODULE_4__["InputBoxComponent"]],
        exports: [_input_box_input_box_component__WEBPACK_IMPORTED_MODULE_4__["InputBoxComponent"]]
    })
], InputDivModule);



/***/ }),

/***/ "./src/app/design-pop/loading/loading.component.css":
/*!**********************************************************!*\
  !*** ./src/app/design-pop/loading/loading.component.css ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".full_screen{\r\n    width: 100%;\r\n    height: 100%;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    background-color: #f5f5f5;\r\n    z-index: 6;\r\n}\r\n.spinner {\r\n    border-radius: 50%;\r\n    /* margin: 20px; */\r\n    position: absolute;\r\n    top: calc(50% - 60px);\r\n    left: calc(50% - 60px);\r\n    display: inline-block;\r\n    position: relative;\r\n    height: 120px;\r\n    width: 120px;\r\n    background-color: #e0e0eb;\r\n  }\r\n.spinnerOne::after {\r\n    content: \"\";\r\n    position: absolute;\r\n    border-radius: 50%;\r\n    height: 120px;\r\n    width: 120px;\r\n    border: 5px solid transparent;\r\n    border-top-color: #7389AE;\r\n    -webkit-animation: spinneroneani 1.5s linear infinite;\r\n            animation: spinneroneani 1.5s linear infinite;\r\n  }\r\n@-webkit-keyframes spinneroneani {\r\n    25% {\r\n      border-top-color: transparent;\r\n      border-right-color: transparent;\r\n      border-bottom-color: transparent;\r\n      border-left-color: #05A8AA;\r\n    }\r\n    50% {\r\n      border-top-color: transparent;\r\n      border-right-color: transparent;\r\n      border-bottom-color: #416788;\r\n      border-left-color: transparent;\r\n      -webkit-transform: rotate(180deg) scale(1.2);\r\n              transform: rotate(180deg) scale(1.2);\r\n    }\r\n    75% {\r\n      border-top-color: transparent;\r\n      border-right-color: #2F6690;\r\n      border-bottom-color: transparent;\r\n      border-left-color: transparent;\r\n    }\r\n    100% {\r\n      border-top-color: #7389AE;\r\n      border-right-color: transparent;\r\n      border-bottom-color: transparent;\r\n      border-left-color: transparent;\r\n      -webkit-transform: rotate(360deg) scale(1);\r\n              transform: rotate(360deg) scale(1);\r\n    }\r\n  }\r\n@keyframes spinneroneani {\r\n    25% {\r\n      border-top-color: transparent;\r\n      border-right-color: transparent;\r\n      border-bottom-color: transparent;\r\n      border-left-color: #05A8AA;\r\n    }\r\n    50% {\r\n      border-top-color: transparent;\r\n      border-right-color: transparent;\r\n      border-bottom-color: #416788;\r\n      border-left-color: transparent;\r\n      -webkit-transform: rotate(180deg) scale(1.2);\r\n              transform: rotate(180deg) scale(1.2);\r\n    }\r\n    75% {\r\n      border-top-color: transparent;\r\n      border-right-color: #2F6690;\r\n      border-bottom-color: transparent;\r\n      border-left-color: transparent;\r\n    }\r\n    100% {\r\n      border-top-color: #7389AE;\r\n      border-right-color: transparent;\r\n      border-bottom-color: transparent;\r\n      border-left-color: transparent;\r\n      -webkit-transform: rotate(360deg) scale(1);\r\n              transform: rotate(360deg) scale(1);\r\n    }\r\n  }\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZGVzaWduLXBvcC9sb2FkaW5nL2xvYWRpbmcuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLFdBQVc7SUFDWCxZQUFZO0lBQ1osa0JBQWtCO0lBQ2xCLE1BQU07SUFDTixPQUFPO0lBQ1AseUJBQXlCO0lBQ3pCLFVBQVU7QUFDZDtBQUNBO0lBQ0ksa0JBQWtCO0lBQ2xCLGtCQUFrQjtJQUNsQixrQkFBa0I7SUFDbEIscUJBQXFCO0lBQ3JCLHNCQUFzQjtJQUN0QixxQkFBcUI7SUFDckIsa0JBQWtCO0lBQ2xCLGFBQWE7SUFDYixZQUFZO0lBQ1oseUJBQXlCO0VBQzNCO0FBRUE7SUFDRSxXQUFXO0lBQ1gsa0JBQWtCO0lBQ2xCLGtCQUFrQjtJQUNsQixhQUFhO0lBQ2IsWUFBWTtJQUNaLDZCQUE2QjtJQUM3Qix5QkFBeUI7SUFDekIscURBQTZDO1lBQTdDLDZDQUE2QztFQUMvQztBQUVBO0lBQ0U7TUFDRSw2QkFBNkI7TUFDN0IsK0JBQStCO01BQy9CLGdDQUFnQztNQUNoQywwQkFBMEI7SUFDNUI7SUFDQTtNQUNFLDZCQUE2QjtNQUM3QiwrQkFBK0I7TUFDL0IsNEJBQTRCO01BQzVCLDhCQUE4QjtNQUM5Qiw0Q0FBb0M7Y0FBcEMsb0NBQW9DO0lBQ3RDO0lBQ0E7TUFDRSw2QkFBNkI7TUFDN0IsMkJBQTJCO01BQzNCLGdDQUFnQztNQUNoQyw4QkFBOEI7SUFDaEM7SUFDQTtNQUNFLHlCQUF5QjtNQUN6QiwrQkFBK0I7TUFDL0IsZ0NBQWdDO01BQ2hDLDhCQUE4QjtNQUM5QiwwQ0FBa0M7Y0FBbEMsa0NBQWtDO0lBQ3BDO0VBQ0Y7QUEzQkE7SUFDRTtNQUNFLDZCQUE2QjtNQUM3QiwrQkFBK0I7TUFDL0IsZ0NBQWdDO01BQ2hDLDBCQUEwQjtJQUM1QjtJQUNBO01BQ0UsNkJBQTZCO01BQzdCLCtCQUErQjtNQUMvQiw0QkFBNEI7TUFDNUIsOEJBQThCO01BQzlCLDRDQUFvQztjQUFwQyxvQ0FBb0M7SUFDdEM7SUFDQTtNQUNFLDZCQUE2QjtNQUM3QiwyQkFBMkI7TUFDM0IsZ0NBQWdDO01BQ2hDLDhCQUE4QjtJQUNoQztJQUNBO01BQ0UseUJBQXlCO01BQ3pCLCtCQUErQjtNQUMvQixnQ0FBZ0M7TUFDaEMsOEJBQThCO01BQzlCLDBDQUFrQztjQUFsQyxrQ0FBa0M7SUFDcEM7RUFDRiIsImZpbGUiOiJzcmMvYXBwL2Rlc2lnbi1wb3AvbG9hZGluZy9sb2FkaW5nLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuZnVsbF9zY3JlZW57XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIGhlaWdodDogMTAwJTtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHRvcDogMDtcclxuICAgIGxlZnQ6IDA7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjVmNWY1O1xyXG4gICAgei1pbmRleDogNjtcclxufVxyXG4uc3Bpbm5lciB7XHJcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XHJcbiAgICAvKiBtYXJnaW46IDIwcHg7ICovXHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICB0b3A6IGNhbGMoNTAlIC0gNjBweCk7XHJcbiAgICBsZWZ0OiBjYWxjKDUwJSAtIDYwcHgpO1xyXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgaGVpZ2h0OiAxMjBweDtcclxuICAgIHdpZHRoOiAxMjBweDtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNlMGUwZWI7XHJcbiAgfVxyXG4gIFxyXG4gIC5zcGlubmVyT25lOjphZnRlciB7XHJcbiAgICBjb250ZW50OiBcIlwiO1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xyXG4gICAgaGVpZ2h0OiAxMjBweDtcclxuICAgIHdpZHRoOiAxMjBweDtcclxuICAgIGJvcmRlcjogNXB4IHNvbGlkIHRyYW5zcGFyZW50O1xyXG4gICAgYm9yZGVyLXRvcC1jb2xvcjogIzczODlBRTtcclxuICAgIGFuaW1hdGlvbjogc3Bpbm5lcm9uZWFuaSAxLjVzIGxpbmVhciBpbmZpbml0ZTtcclxuICB9XHJcbiAgXHJcbiAgQGtleWZyYW1lcyBzcGlubmVyb25lYW5pIHtcclxuICAgIDI1JSB7XHJcbiAgICAgIGJvcmRlci10b3AtY29sb3I6IHRyYW5zcGFyZW50O1xyXG4gICAgICBib3JkZXItcmlnaHQtY29sb3I6IHRyYW5zcGFyZW50O1xyXG4gICAgICBib3JkZXItYm90dG9tLWNvbG9yOiB0cmFuc3BhcmVudDtcclxuICAgICAgYm9yZGVyLWxlZnQtY29sb3I6ICMwNUE4QUE7XHJcbiAgICB9XHJcbiAgICA1MCUge1xyXG4gICAgICBib3JkZXItdG9wLWNvbG9yOiB0cmFuc3BhcmVudDtcclxuICAgICAgYm9yZGVyLXJpZ2h0LWNvbG9yOiB0cmFuc3BhcmVudDtcclxuICAgICAgYm9yZGVyLWJvdHRvbS1jb2xvcjogIzQxNjc4ODtcclxuICAgICAgYm9yZGVyLWxlZnQtY29sb3I6IHRyYW5zcGFyZW50O1xyXG4gICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgxODBkZWcpIHNjYWxlKDEuMik7XHJcbiAgICB9XHJcbiAgICA3NSUge1xyXG4gICAgICBib3JkZXItdG9wLWNvbG9yOiB0cmFuc3BhcmVudDtcclxuICAgICAgYm9yZGVyLXJpZ2h0LWNvbG9yOiAjMkY2NjkwO1xyXG4gICAgICBib3JkZXItYm90dG9tLWNvbG9yOiB0cmFuc3BhcmVudDtcclxuICAgICAgYm9yZGVyLWxlZnQtY29sb3I6IHRyYW5zcGFyZW50O1xyXG4gICAgfVxyXG4gICAgMTAwJSB7XHJcbiAgICAgIGJvcmRlci10b3AtY29sb3I6ICM3Mzg5QUU7XHJcbiAgICAgIGJvcmRlci1yaWdodC1jb2xvcjogdHJhbnNwYXJlbnQ7XHJcbiAgICAgIGJvcmRlci1ib3R0b20tY29sb3I6IHRyYW5zcGFyZW50O1xyXG4gICAgICBib3JkZXItbGVmdC1jb2xvcjogdHJhbnNwYXJlbnQ7XHJcbiAgICAgIHRyYW5zZm9ybTogcm90YXRlKDM2MGRlZykgc2NhbGUoMSk7XHJcbiAgICB9XHJcbiAgfSJdfQ== */"

/***/ }),

/***/ "./src/app/design-pop/loading/loading.component.ts":
/*!*********************************************************!*\
  !*** ./src/app/design-pop/loading/loading.component.ts ***!
  \*********************************************************/
/*! exports provided: LoadingComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoadingComponent", function() { return LoadingComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let LoadingComponent = class LoadingComponent {
    constructor() { }
    ngOnInit() {
    }
};
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Boolean)
], LoadingComponent.prototype, "loading", void 0);
LoadingComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-loading',
        template: __webpack_require__(/*! raw-loader!./loading.component.html */ "./node_modules/raw-loader/index.js!./src/app/design-pop/loading/loading.component.html"),
        styles: [__webpack_require__(/*! ./loading.component.css */ "./src/app/design-pop/loading/loading.component.css")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
], LoadingComponent);



/***/ }),

/***/ "./src/app/design-pop/loading/loading.module.ts":
/*!******************************************************!*\
  !*** ./src/app/design-pop/loading/loading.module.ts ***!
  \******************************************************/
/*! exports provided: LoadingModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoadingModule", function() { return LoadingModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _loading_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./loading.component */ "./src/app/design-pop/loading/loading.component.ts");




let LoadingModule = class LoadingModule {
};
LoadingModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]
        ],
        declarations: [_loading_component__WEBPACK_IMPORTED_MODULE_3__["LoadingComponent"]],
        exports: [_loading_component__WEBPACK_IMPORTED_MODULE_3__["LoadingComponent"]]
    })
], LoadingModule);



/***/ }),

/***/ "./src/app/design-pop/panel/messages/messages.component.scss":
/*!*******************************************************************!*\
  !*** ./src/app/design-pop/panel/messages/messages.component.scss ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".popMessage {\n  width: 135px;\n  background: #fafafa;\n  border: 1px solid #d6d6d6;\n  box-shadow: 0 2px 7px 0.16px rgba(52, 58, 64, 0.25);\n  border-radius: 4px;\n  color: #444b52;\n  font-size: 12px;\n  padding: 3px;\n  display: block;\n  position: absolute;\n  z-index: 99;\n}\n\n.popMessage span {\n  text-indent: 2em;\n  word-wrap: break-word;\n}\n\n.popMessage .img_message {\n  width: 100%;\n  height: 135px;\n}\n\n.img_message img {\n  height: 80%;\n  width: 80%;\n  margin: 10%;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZGVzaWduLXBvcC9wYW5lbC9tZXNzYWdlcy9EOlxca25vd2xlZGdlXFxoZ1xcb2xkXFxvbGRSb29tL3NyY1xcYXBwXFxkZXNpZ24tcG9wXFxwYW5lbFxcbWVzc2FnZXNcXG1lc3NhZ2VzLmNvbXBvbmVudC5zY3NzIiwic3JjL2FwcC9kZXNpZ24tcG9wL3BhbmVsL21lc3NhZ2VzL21lc3NhZ2VzLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksWUFBQTtFQUNBLG1CQUFBO0VBQ0EseUJBQUE7RUFDQSxtREFBQTtFQUNBLGtCQUFBO0VBQ0EsY0FBQTtFQUNBLGVBQUE7RUFDQSxZQUFBO0VBQ0EsY0FBQTtFQUNBLGtCQUFBO0VBQ0EsV0FBQTtBQ0NKOztBRENBO0VBQ0ksZ0JBQUE7RUFDQSxxQkFBQTtBQ0VKOztBREFBO0VBQ0ksV0FBQTtFQUNBLGFBQUE7QUNHSjs7QURBQTtFQUNJLFdBQUE7RUFDQSxVQUFBO0VBQ0EsV0FBQTtBQ0dKIiwiZmlsZSI6InNyYy9hcHAvZGVzaWduLXBvcC9wYW5lbC9tZXNzYWdlcy9tZXNzYWdlcy5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5wb3BNZXNzYWdle1xyXG4gICAgd2lkdGg6IDEzNXB4O1xyXG4gICAgYmFja2dyb3VuZDogI2ZhZmFmYTtcclxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNkNmQ2ZDY7XHJcbiAgICBib3gtc2hhZG93OiAwIDJweCA3cHggMC4xNnB4IHJnYmEoNTIsNTgsNjQsLjI1KTtcclxuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcclxuICAgIGNvbG9yOiAjNDQ0YjUyO1xyXG4gICAgZm9udC1zaXplOiAxMnB4O1xyXG4gICAgcGFkZGluZzogM3B4O1xyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICB6LWluZGV4OiA5OTtcclxufVxyXG4ucG9wTWVzc2FnZSBzcGFuIHtcclxuICAgIHRleHQtaW5kZW50OiAyZW07XHJcbiAgICB3b3JkLXdyYXA6YnJlYWstd29yZDtcclxufVxyXG4ucG9wTWVzc2FnZSAuaW1nX21lc3NhZ2Uge1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBoZWlnaHQ6IDEzNXB4O1xyXG5cclxufVxyXG4uaW1nX21lc3NhZ2UgaW1ne1xyXG4gICAgaGVpZ2h0OiA4MCU7XHJcbiAgICB3aWR0aDogODAlO1xyXG4gICAgbWFyZ2luOiAxMCU7XHJcbn0iLCIucG9wTWVzc2FnZSB7XG4gIHdpZHRoOiAxMzVweDtcbiAgYmFja2dyb3VuZDogI2ZhZmFmYTtcbiAgYm9yZGVyOiAxcHggc29saWQgI2Q2ZDZkNjtcbiAgYm94LXNoYWRvdzogMCAycHggN3B4IDAuMTZweCByZ2JhKDUyLCA1OCwgNjQsIDAuMjUpO1xuICBib3JkZXItcmFkaXVzOiA0cHg7XG4gIGNvbG9yOiAjNDQ0YjUyO1xuICBmb250LXNpemU6IDEycHg7XG4gIHBhZGRpbmc6IDNweDtcbiAgZGlzcGxheTogYmxvY2s7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgei1pbmRleDogOTk7XG59XG5cbi5wb3BNZXNzYWdlIHNwYW4ge1xuICB0ZXh0LWluZGVudDogMmVtO1xuICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG59XG5cbi5wb3BNZXNzYWdlIC5pbWdfbWVzc2FnZSB7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEzNXB4O1xufVxuXG4uaW1nX21lc3NhZ2UgaW1nIHtcbiAgaGVpZ2h0OiA4MCU7XG4gIHdpZHRoOiA4MCU7XG4gIG1hcmdpbjogMTAlO1xufSJdfQ== */"

/***/ }),

/***/ "./src/app/design-pop/panel/messages/messages.component.ts":
/*!*****************************************************************!*\
  !*** ./src/app/design-pop/panel/messages/messages.component.ts ***!
  \*****************************************************************/
/*! exports provided: MessagesComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MessagesComponent", function() { return MessagesComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let MessagesComponent = class MessagesComponent {
    constructor() { }
    set messages(data) {
        if (data == null) {
            this._messageData = null;
        }
        else {
            let newData = {
                text: data.text,
                style: {
                    "top": data.position.y + 'px',
                    "left": window.innerWidth - data.position.x < 140 ? (window.innerWidth - data.position.x) + 'px' : data.position.x + 'px',
                    "width": data.width
                },
                img: data.img
            };
            this._messageData = newData;
        }
    }
    get messages() { return this._messageData; }
    ngOnInit() {
    }
};
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [Object])
], MessagesComponent.prototype, "messages", null);
MessagesComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[messages]',
        template: __webpack_require__(/*! raw-loader!./messages.component.html */ "./node_modules/raw-loader/index.js!./src/app/design-pop/panel/messages/messages.component.html"),
        styles: [__webpack_require__(/*! ./messages.component.scss */ "./src/app/design-pop/panel/messages/messages.component.scss")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
], MessagesComponent);



/***/ }),

/***/ "./src/app/design-pop/panel/messages/messages.module.ts":
/*!**************************************************************!*\
  !*** ./src/app/design-pop/panel/messages/messages.module.ts ***!
  \**************************************************************/
/*! exports provided: MessagesModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MessagesModule", function() { return MessagesModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _messages_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./messages.component */ "./src/app/design-pop/panel/messages/messages.component.ts");




let MessagesModule = class MessagesModule {
};
MessagesModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]
        ],
        declarations: [_messages_component__WEBPACK_IMPORTED_MODULE_3__["MessagesComponent"]],
        exports: [_messages_component__WEBPACK_IMPORTED_MODULE_3__["MessagesComponent"]]
    })
], MessagesModule);



/***/ }),

/***/ "./src/app/design-pop/panel/panel-bottom/panel-bottom.component.css":
/*!**************************************************************************!*\
  !*** ./src/app/design-pop/panel/panel-bottom/panel-bottom.component.css ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".bottom_container{\r\n    width: 100%;\r\n    height: 35px;\r\n    border-top: 1px solid #ddd;\r\n    position: absolute;\r\n    bottom: 0;\r\n    left: 0;\r\n    background-color: #f5f5f5;\r\n    z-index: 50;\r\n    padding-right: 15px;\r\n}\r\n.list_bottom{\r\n    width: 34px;\r\n    height: 100%;\r\n    margin-right: 8px;\r\n    padding: 5px;\r\n    float: right;\r\n}\r\n.bottom_color{\r\n    background-color:#4b9bd6; \r\n}\r\n.list_bottom .barIcon{\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZGVzaWduLXBvcC9wYW5lbC9wYW5lbC1ib3R0b20vcGFuZWwtYm90dG9tLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxXQUFXO0lBQ1gsWUFBWTtJQUNaLDBCQUEwQjtJQUMxQixrQkFBa0I7SUFDbEIsU0FBUztJQUNULE9BQU87SUFDUCx5QkFBeUI7SUFDekIsV0FBVztJQUNYLG1CQUFtQjtBQUN2QjtBQUNBO0lBQ0ksV0FBVztJQUNYLFlBQVk7SUFDWixpQkFBaUI7SUFDakIsWUFBWTtJQUNaLFlBQVk7QUFDaEI7QUFDQTtJQUNJLHdCQUF3QjtBQUM1QjtBQUNBO0lBQ0ksV0FBVztJQUNYLFlBQVk7QUFDaEIiLCJmaWxlIjoic3JjL2FwcC9kZXNpZ24tcG9wL3BhbmVsL3BhbmVsLWJvdHRvbS9wYW5lbC1ib3R0b20uY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5ib3R0b21fY29udGFpbmVye1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBoZWlnaHQ6IDM1cHg7XHJcbiAgICBib3JkZXItdG9wOiAxcHggc29saWQgI2RkZDtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIGJvdHRvbTogMDtcclxuICAgIGxlZnQ6IDA7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjVmNWY1O1xyXG4gICAgei1pbmRleDogNTA7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiAxNXB4O1xyXG59XHJcbi5saXN0X2JvdHRvbXtcclxuICAgIHdpZHRoOiAzNHB4O1xyXG4gICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgbWFyZ2luLXJpZ2h0OiA4cHg7XHJcbiAgICBwYWRkaW5nOiA1cHg7XHJcbiAgICBmbG9hdDogcmlnaHQ7XHJcbn1cclxuLmJvdHRvbV9jb2xvcntcclxuICAgIGJhY2tncm91bmQtY29sb3I6IzRiOWJkNjsgXHJcbn1cclxuLmxpc3RfYm90dG9tIC5iYXJJY29ue1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBoZWlnaHQ6IDEwMCU7XHJcbn0iXX0= */"

/***/ }),

/***/ "./src/app/design-pop/panel/panel-bottom/panel-bottom.component.ts":
/*!*************************************************************************!*\
  !*** ./src/app/design-pop/panel/panel-bottom/panel-bottom.component.ts ***!
  \*************************************************************************/
/*! exports provided: PanelBottomComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PanelBottomComponent", function() { return PanelBottomComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");



let PanelBottomComponent = class PanelBottomComponent {
    constructor(popService) {
        this.popService = popService;
    }
    set panelBottom(data) {
        // this._panelBottom = data;
        this._panelBottom = data;
    }
    get panelBottom() { return this._panelBottom; }
    ngOnInit() {
    }
    getArr(data) {
        let arr = [];
        for (let key in data) {
            arr.push(data[key]);
        }
        return arr;
    }
};
PanelBottomComponent.ctorParameters = () => [
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_2__["PopDivService"] }
];
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [Object])
], PanelBottomComponent.prototype, "panelBottom", null);
PanelBottomComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[panelBottom]',
        template: __webpack_require__(/*! raw-loader!./panel-bottom.component.html */ "./node_modules/raw-loader/index.js!./src/app/design-pop/panel/panel-bottom/panel-bottom.component.html"),
        styles: [__webpack_require__(/*! ./panel-bottom.component.css */ "./src/app/design-pop/panel/panel-bottom/panel-bottom.component.css")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_services_pop_div_service__WEBPACK_IMPORTED_MODULE_2__["PopDivService"]])
], PanelBottomComponent);



/***/ }),

/***/ "./src/app/design-pop/panel/panel-bottom/panel-bottom.module.ts":
/*!**********************************************************************!*\
  !*** ./src/app/design-pop/panel/panel-bottom/panel-bottom.module.ts ***!
  \**********************************************************************/
/*! exports provided: PanelBottomModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PanelBottomModule", function() { return PanelBottomModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _ng_bootstrap_ng_bootstrap__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ng-bootstrap/ng-bootstrap */ "./node_modules/@ng-bootstrap/ng-bootstrap/fesm2015/ng-bootstrap.js");
/* harmony import */ var _panel_bottom_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./panel-bottom.component */ "./src/app/design-pop/panel/panel-bottom/panel-bottom.component.ts");





let PanelBottomModule = class PanelBottomModule {
};
PanelBottomModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
            _ng_bootstrap_ng_bootstrap__WEBPACK_IMPORTED_MODULE_3__["NgbModule"]
            // PopDivModule
        ],
        declarations: [_panel_bottom_component__WEBPACK_IMPORTED_MODULE_4__["PanelBottomComponent"]],
        exports: [_panel_bottom_component__WEBPACK_IMPORTED_MODULE_4__["PanelBottomComponent"]]
    })
], PanelBottomModule);



/***/ }),

/***/ "./src/app/design-pop/panel/panel-left/panel-left.component.css":
/*!**********************************************************************!*\
  !*** ./src/app/design-pop/panel/panel-left/panel-left.component.css ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\r\n\r\n /* 左侧容器 */\r\n.left_container{\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    height: calc(100% - 35px);\r\n    z-index: 50;\r\n}\r\n.drawBlind{\r\n    width: 100%;\r\n    height: 100%;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n}\r\n.bar{\r\n    height: 100%;\r\n    box-sizing: border-box;\r\n    box-shadow: 0 0 4px 0 rgba(62,129,247,.1), 0 0 6px 0 hsla(0,0%,87%,.5);\r\n}\r\n.vertecial_bar{\r\n    float: left;\r\n    height: 100%;\r\n    width: 70px;\r\n    box-sizing: border-box;\r\n    background: #f5f5f5;\r\n    border-right: 1px solid #ddd;\r\n}\r\n.hoverable{\r\n    position: absolute;\r\n}\r\n.list_bar{\r\n    float: left;\r\n    position: relative;\r\n    height: 100%;\r\n    width: 266px;\r\n    box-sizing: border-box;\r\n    background: #f5f5f5; \r\n}\r\n.list_bar div{\r\n    height: 100%;   \r\n}\r\n/* 收起展开按钮 */\r\n.toggle_bar{\r\n    position: absolute;\r\n    top: 50%;\r\n    margin-top: -29px;\r\n    right: -18px;\r\n    width: 20px;\r\n    height: 58px;\r\n    background: transparent;\r\n}\r\n.expland{\r\n    position: absolute;\r\n    left: 0;\r\n    top: 9px;\r\n    box-sizing: border-box;\r\n    width: 20px;\r\n    height: 40px;\r\n    padding: 11px 2px;\r\n    background: #f5f5f5;\r\n    border-top-right-radius: 4px;\r\n    border-bottom-right-radius: 4px;\r\n    box-shadow: 0 0 4px 0 rgba(62,129,247,.1), 0 0 6px 0 hsla(0,0%,87%,.5);\r\n}\r\n.expland::before{\r\n    content: \"\";\r\n    display: block;\r\n    position: absolute;\r\n    top: -9px;\r\n    border-right: 19px solid transparent;\r\n    border-bottom: 10px solid #f5f5f5;\r\n}\r\n.expland::after{\r\n    content: \"\";\r\n    display: block;\r\n    position: absolute;\r\n    bottom: -9px;\r\n    border-right: 19px solid transparent;\r\n    border-top: 10px solid #f5f5f5;\r\n}\r\n.explandIcon{\r\n    vertical-align: -0.15em;\r\n    margin: 0 auto;\r\n    width: 16px;\r\n    height: 16px;\r\n    color: #323232;\r\n    /* vertical-align: -.15em; */\r\n    fill: currentColor;\r\n    -webkit-transform: rotate(180deg);\r\n            transform: rotate(180deg);\r\n    overflow: hidden;\r\n}\r\n/* 左侧导航栏 */\r\n.splider_bar{\r\n    position: relative;\r\n    font-size: 14px;\r\n    line-height: 22px;\r\n    text-align: center;\r\n    margin-bottom: 10px;\r\n    border-bottom: 1px solid #ddd\r\n}\r\n.blindEvent{   \r\n    margin: 12px;\r\n    width: 48px;\r\n    height: 36px;\r\n}\r\n.bar_list{\r\n    position: relative;\r\n    /* /* margin: 12px; */\r\n    width: 100%;\r\n    height: 100%;\r\n    /* fill: white; */\r\n    border-radius: 4px;\r\n    line-height: 36px;\r\n    text-align: center;\r\n    cursor: pointer;\r\n    /* border: 1px solid #ddd; */\r\n}\r\n.bar_list:hover{\r\n    background-color: lightgrey\r\n}\r\n/* 鼠标悬停出现的状态 */\r\n.name {\r\n    display: none;\r\n    z-index: 2;\r\n    font-size: 12px;\r\n    background-color: #3e82f7;\r\n    color: white;\r\n    white-space:nowrap;\r\n    height: 36px;\r\n    line-height: 36px;\r\n    min-width: 30px;\r\n    position: absolute;\r\n    left: 56px;\r\n    top: 0px;\r\n    padding: 0px 10px;\r\n    border-top-right-radius: 4px;\r\n    border-bottom-right-radius: 4px;\r\n}\r\n.barIcon{\r\n    position: relative;\r\n    top: 2px;\r\n    width: 18px;\r\n    height: 18px;\r\n    fill: #323232;\r\n}\r\n/* 家具名称列表 */\r\n.drop_list{\r\n    display: none;\r\n    background-color: #ddd;\r\n    border-top: 1px solid #ddd;\r\n    border-radius: 4px;\r\n    padding: 10px 0;\r\n}\r\n.drop_list::before{\r\n    content: '';\r\n    display: block;\r\n    position: absolute;\r\n    z-index: 2;\r\n    top: 41px;\r\n    left: 50%;\r\n    width: 7px;\r\n    height: 7px;\r\n    -webkit-transform: translate(-50%,50%) rotate(-45deg);\r\n    transform: translate(-50%,50%) rotate(-45deg);\r\n    background: #ddd;\r\n    border: 1px solid #ddd;\r\n    border-left: none;\r\n    border-bottom: none;\r\n}\r\n.list_name{\r\n    margin: 10px 0;\r\n    padding: 0;\r\n    font-size: 12px;\r\n    font-weight: 600;\r\n    color: #666;\r\n    cursor: pointer;\r\n}\r\n.list_name:hover {\r\n    color:#3e82f7;\r\n}\r\n.direction{\r\n    width: 60px;\r\n    height: 60px;\r\n    border-radius: 50%;\r\n    position: absolute;\r\n    top: 50px;\r\n    overflow: hidden;\r\n    z-index: 50\r\n}\r\n.direction img {\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n\r\n/*# sourceMappingURL=data:application/json;base64, */"

/***/ }),

/***/ "./src/app/design-pop/panel/panel-left/panel-left.component.ts":
/*!*********************************************************************!*\
  !*** ./src/app/design-pop/panel/panel-left/panel-left.component.ts ***!
  \*********************************************************************/
/*! exports provided: PanelLeftComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PanelLeftComponent", function() { return PanelLeftComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");




let PanelLeftComponent = class PanelLeftComponent {
    constructor(popService, dataService) {
        this.popService = popService;
        this.dataService = dataService;
        this.listData = null;
        this.imgList = null;
        this.imgStyle = {
            "left": "340px"
        };
        this.angle = 0;
        this.moveAngle = 0;
        this.endAngle = 0;
        this.pointPosition = {
            x: 370,
            y: 80
        };
        this.popService.clickLeftData.subscribe((data) => {
            this.productData = data;
        });
        this.popService.hoverLeftData.subscribe((data) => {
            this.listData = data;
        });
        this.popService.getMaterial.subscribe((data) => {
            this.imgList = data;
        });
    }
    set panelLeft(data) {
        this._panelLeft = data;
    }
    get panelLeft() { return this._panelLeft; }
    ngDoCheck() {
        if (this.dataService.cmd != undefined) {
            if (this.moveAngle != this.dataService.cmd.floorplan.compass) {
                this.moveAngle = this.dataService.cmd.floorplan.compass;
                this.imgStyle.transform = 'rotate(' + this.dataService.cmd.floorplan.compass + 'deg)';
            }
        }
    }
    ngOnInit() {
        let img = document.getElementById('img');
        let angle = 0;
        img.addEventListener('mousedown', this.startEvent = (e) => {
            // console.log(this.pointPosition)
            this.imgStartX = e.clientX;
            this.imgStartY = e.clientY;
            let anglePre = this.countDeg(this.pointPosition.x, this.pointPosition.y, this.imgStartX, this.imgStartY);
            img.addEventListener('mousemove', this.moveEvent = (e) => {
                this.imgEndX = e.clientX;
                this.imgEndY = e.clientY;
                let angleNext = this.countDeg(this.pointPosition.x, this.pointPosition.y, this.imgEndX, this.imgEndY);
                angle += angleNext - anglePre;
                this.moveAngle = this.dataService.cmd.floorplan.compass = angle;
                anglePre = angleNext;
                this.imgStyle.transform = 'rotate(' + angle + 'deg)';
            });
        });
        img.addEventListener('mouseup', (_) => {
            img.removeEventListener('mousemove', this.moveEvent);
        });
        img.addEventListener('mouseleave', (e) => {
            img.removeEventListener('mousemove', this.moveEvent);
        });
    }
    // 鼠标悬停出现弹出框
    listMouseEnter(e) {
        if (e.target.nextElementSibling.className == 'name') {
            e.target.nextElementSibling.style.cssText = `display:block`;
        }
    }
    listMouseLeave(e) {
        let name = document.querySelectorAll('.blindEvent .name');
        for (let i = 0; i < name.length; i++) {
            name[i].style.cssText = `display:none`;
        }
    }
    // 左侧面板的展开收起
    toggleContainer(e) {
        // e.stopPropagation();
        let bar_con = this.getMode(e.target, 'toggle_bar');
        let container = document.getElementsByClassName('left_container')[0];
        let expland = document.getElementsByClassName('explandIcon')[0];
        if (bar_con.className == 'toggle_bar toggle_hidde') {
            expland.style.cssText = `transform: rotate(-180deg);`;
            bar_con.className = 'toggle_bar toggle_show';
            this.leftDiv = {
                "left": "0px",
                "transition": "left 1s ease"
            };
            this.imgStyle["left"] = "340px";
            // :,
            // "transition":"left 1s ease",
            // "transform":'rotate('+this.moveAngle+'deg)'
            this.pointPosition = {
                x: 370,
                y: 80
            };
        }
        else {
            expland.style.cssText = `transform: rotate(0deg);`;
            bar_con.className = 'toggle_bar toggle_hidde';
            this.leftDiv = {
                "left": -container.clientWidth + "px",
                "transition": "left 1s ease"
            };
            // this.imgStyle = {
            //   "left":"5px",
            //   "transition":"left 1s ease",
            //   "transform":'rotate('+this.moveAngle+'deg)'
            // }
            this.imgStyle["left"] = "5px";
            this.pointPosition = {
                x: 35,
                y: 80
            };
        }
    }
    toggleSlider(e) {
        e.stopPropagation();
        // 点击把所有的按钮背景色去掉
        let bar_List = this.getMode(e.target, 'bar_list');
        // 将目标按钮背景色变为蓝色
        if (bar_List && 'className' in bar_List == true && bar_List.className == 'bar_list') {
            let hiddeAllColor = document.querySelectorAll('.blindEvent .bar_list');
            for (let j = 0; j < hiddeAllColor.length; j++) {
                hiddeAllColor[j].style.cssText = `background-color:none`;
            }
            bar_List.style.cssText = `background-color:#3e82f7`;
            // svg图标变色
            let barIcon = document.querySelectorAll('.bar_list .barIcon');
            for (let j = 0; j < barIcon.length; j++) {
                barIcon[j].style.cssText = `fill:#323232`;
            }
            let svgIcon = bar_List.children[0];
            svgIcon.style.cssText = `fill:#ffffff`;
        }
        // 产品类型列表出现隐藏
        let newLast = this.getMode(e.target, 'splider_bar').children;
        for (let i = 0; i < newLast.length; i++) {
            if (newLast[i].className == 'drop_list') {
                newLast[i].style.cssText = `display:block`;
            }
            else {
                let drop = document.querySelectorAll('.splider_bar .drop_list');
                for (let j = 0; j < drop.length; j++) {
                    drop[j].style.cssText = `display:none`;
                }
            }
        }
    }
    getMode(startMode, name) {
        if (this._getClass(startMode.className) == 'String') {
            if (startMode.className.indexOf(name) >= 0) {
                return startMode;
            }
            else if (startMode.className != name) {
                let newMode = startMode.parentElement;
                return this.getMode(newMode, name);
            }
        }
        else {
            if (startMode.className == name) {
                return startMode;
            }
            else if (startMode.className != name) {
                let newMode = startMode.parentElement;
                return this.getMode(newMode, name);
            }
        }
    }
    _getClass(object) {
        return Object.prototype.toString.call(object).match(/^\[object\s(.*)\]$/)[1];
    }
    ;
    //返回角度
    _GetSlideAngle(dx, dy) {
        return Math.atan2(dx, dy) * 180 / Math.PI;
    }
    countDeg(cx, cy, pointer_x, pointer_y) {
        let ox = pointer_x - cx;
        let oy = pointer_y - cy;
        let to = Math.abs(ox / oy);
        let angle = Math.atan(to) / (2 * Math.PI) * 360; //鼠标相对于旋转中心的角度
        if (ox < 0 && oy < 0) //相对在左上角，第四象限，js中坐标系是从左上角开始的，这里的象限是正常坐标系  
         {
            angle = -angle;
        }
        else if (ox < 0 && oy > 0) //左下角,3象限  
         {
            angle = -(180 - angle);
        }
        else if (ox > 0 && oy < 0) //右上角，1象限  
         {
            angle = angle;
        }
        else if (ox > 0 && oy > 0) //右下角，2象限  
         {
            angle = 180 - angle;
        }
        return angle;
    }
};
PanelLeftComponent.ctorParameters = () => [
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_2__["PopDivService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_3__["JdesignDataService"] }
];
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [Object])
], PanelLeftComponent.prototype, "panelLeft", null);
PanelLeftComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[panelLeft]',
        template: __webpack_require__(/*! raw-loader!./panel-left.component.html */ "./node_modules/raw-loader/index.js!./src/app/design-pop/panel/panel-left/panel-left.component.html"),
        styles: [__webpack_require__(/*! ./panel-left.component.css */ "./src/app/design-pop/panel/panel-left/panel-left.component.css")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_services_pop_div_service__WEBPACK_IMPORTED_MODULE_2__["PopDivService"],
        _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_3__["JdesignDataService"]])
], PanelLeftComponent);



/***/ }),

/***/ "./src/app/design-pop/panel/panel-left/panel-left.module.ts":
/*!******************************************************************!*\
  !*** ./src/app/design-pop/panel/panel-left/panel-left.module.ts ***!
  \******************************************************************/
/*! exports provided: PanelLeftModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PanelLeftModule", function() { return PanelLeftModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
/* harmony import */ var _panel_left_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./panel-left.component */ "./src/app/design-pop/panel/panel-left/panel-left.component.ts");
/* harmony import */ var _ng_bootstrap_ng_bootstrap__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ng-bootstrap/ng-bootstrap */ "./node_modules/@ng-bootstrap/ng-bootstrap/fesm2015/ng-bootstrap.js");
/* harmony import */ var _product_list_product_list_module__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./product-list/product-list.module */ "./src/app/design-pop/panel/panel-left/product-list/product-list.module.ts");
/* harmony import */ var _type_list_type_list_module__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./type-list/type-list.module */ "./src/app/design-pop/panel/panel-left/type-list/type-list.module.ts");
/* harmony import */ var _panel_propety_img_list_img_list_module__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../panel-propety/img-list/img-list.module */ "./src/app/design-pop/panel/panel-propety/img-list/img-list.module.ts");









let PanelLeftModule = class PanelLeftModule {
};
PanelLeftModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
            _ng_bootstrap_ng_bootstrap__WEBPACK_IMPORTED_MODULE_5__["NgbModule"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"],
            _product_list_product_list_module__WEBPACK_IMPORTED_MODULE_6__["ProductListModule"],
            _type_list_type_list_module__WEBPACK_IMPORTED_MODULE_7__["TypeListModule"],
            _panel_propety_img_list_img_list_module__WEBPACK_IMPORTED_MODULE_8__["ImgListModule"]
        ],
        declarations: [_panel_left_component__WEBPACK_IMPORTED_MODULE_4__["PanelLeftComponent"]],
        exports: [_panel_left_component__WEBPACK_IMPORTED_MODULE_4__["PanelLeftComponent"]]
    })
], PanelLeftModule);



/***/ }),

/***/ "./src/app/design-pop/panel/panel-left/product-list/draw-room/draw-room.component.css":
/*!********************************************************************************************!*\
  !*** ./src/app/design-pop/panel/panel-left/product-list/draw-room/draw-room.component.css ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".content{\r\n    width: 100%;\r\n    height: 100%\r\n}\r\n.title{\r\n    padding: 9px 10px;\r\n    border-bottom: 1px solid #e8e8e8;\r\n    font-weight: 600;\r\n    color: #323232;\r\n    font-size: 14px;\r\n    line-height: 22px;\r\n}\r\n.back{\r\n    padding: 9px 10px;\r\n    border-bottom: 1px solid #e8e8e8;\r\n    font-weight: 600;\r\n    color: #323232;\r\n    font-size: 14px;\r\n    line-height: 22px;\r\n}\r\n#load{\r\n    display: none;\r\n}\r\n.btn .imgCon{\r\n    width: 25px;\r\n    height: 30px;\r\n    display: inline-block;\r\n    background-color: #fff;\r\n    float: left;\r\n    background-color: #3e82f7;\r\n    position: relative;\r\n    border-bottom: 1px solid #3e82f7;\r\n    border-top: 1px solid #3e82f7;\r\n    border-left: 1px solid #3e82f7;\r\n    border-top-left-radius: 4px;\r\n    border-bottom-left-radius: 4px;\r\n    overflow: hidden;\r\n}\r\n.imgCon img{\r\n    width: 34px;\r\n    height: 34px;\r\n    position: absolute;\r\n    top: -2px;\r\n    right: -6px;\r\n    \r\n}\r\n.backName{\r\n    height: 30px;\r\n    line-height: 30px;\r\n    border-top-right-radius: 4px;\r\n    border-bottom-right-radius: 4px;\r\n    display: inline-block;\r\n    background-color: #3e82f7;\r\n    color: #fff;\r\n    float: left;\r\n    position: relative;\r\n    padding: 0 10px;\r\n}\r\n.drawTool{\r\n    width: 100%;\r\n    height: calc(100% - 121px);\r\n    overflow-y: scroll;\r\n}\r\n.drawTool::-webkit-scrollbar {/*滚动条整体样式*/\r\n    width: 4px;     /*高宽分别对应横竖滚动条的尺寸*/\r\n    /* height: 4px; */\r\n}\r\n.drawTool::-webkit-scrollbar-thumb {/*滚动条里面小方块*/\r\n    border-radius: 5px;\r\n    -webkit-box-shadow: inset 0 0 5px rgba(0,0,0,0.2);\r\n    background: rgba(232,232,232,0.2);\r\n}\r\n.drawTool::-webkit-scrollbar-track {/*滚动条里面轨道*/\r\n    -webkit-box-shadow: inset 0 0 5px rgba(0,0,0,0.2);\r\n    border-radius: 0;\r\n    background: rgba(102,102,102,0.1);\r\n}\r\n.listcontainer{\r\n    width: 100%;\r\n    padding: 0 5px;\r\n    border-bottom: 1px solid #e5e5e5;\r\n}\r\n.listcontainer>span{\r\n    display: block;\r\n    width: 100%;\r\n    height: 20px;\r\n    padding-left:6px; \r\n    border-left: 5px solid #3e82f7;\r\n    line-height: 20px;\r\n    text-align: left;\r\n    font-family: '微软雅黑'\r\n}\r\n.icon-container{\r\n    display: inline-block;\r\n    width: calc(33% - 10px);\r\n    /* height: calc(33% + 10px); */\r\n    margin: 5px;\r\n    \r\n    /* float: left; */\r\n}\r\n.icon-container>span{\r\n    display: block;\r\n    width: 100%;\r\n    height: 20px;\r\n    text-align: center;\r\n    line-height: 20px;\r\n    font-family: '微软雅黑'\r\n}\r\n.icon2{\r\n    margin: 0 auto;\r\n    border: 1px solid #e5e5e5;\r\n    width: 100%;\r\n    height:75px;\r\n}\r\n.icon2:hover{\r\n    border: 2px solid lightblue;\r\n    cursor: pointer;\r\n    background-color: white;\r\n}\r\n/* 选中图片时样式 */\r\n.border_out{\r\n    border: 2px solid lightblue;\r\n    background-color: white;\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZGVzaWduLXBvcC9wYW5lbC9wYW5lbC1sZWZ0L3Byb2R1Y3QtbGlzdC9kcmF3LXJvb20vZHJhdy1yb29tLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxXQUFXO0lBQ1g7QUFDSjtBQUNBO0lBQ0ksaUJBQWlCO0lBQ2pCLGdDQUFnQztJQUNoQyxnQkFBZ0I7SUFDaEIsY0FBYztJQUNkLGVBQWU7SUFDZixpQkFBaUI7QUFDckI7QUFDQTtJQUNJLGlCQUFpQjtJQUNqQixnQ0FBZ0M7SUFDaEMsZ0JBQWdCO0lBQ2hCLGNBQWM7SUFDZCxlQUFlO0lBQ2YsaUJBQWlCO0FBQ3JCO0FBQ0E7SUFDSSxhQUFhO0FBQ2pCO0FBQ0E7SUFDSSxXQUFXO0lBQ1gsWUFBWTtJQUNaLHFCQUFxQjtJQUNyQixzQkFBc0I7SUFDdEIsV0FBVztJQUNYLHlCQUF5QjtJQUN6QixrQkFBa0I7SUFDbEIsZ0NBQWdDO0lBQ2hDLDZCQUE2QjtJQUM3Qiw4QkFBOEI7SUFDOUIsMkJBQTJCO0lBQzNCLDhCQUE4QjtJQUM5QixnQkFBZ0I7QUFDcEI7QUFDQTtJQUNJLFdBQVc7SUFDWCxZQUFZO0lBQ1osa0JBQWtCO0lBQ2xCLFNBQVM7SUFDVCxXQUFXOztBQUVmO0FBQ0E7SUFDSSxZQUFZO0lBQ1osaUJBQWlCO0lBQ2pCLDRCQUE0QjtJQUM1QiwrQkFBK0I7SUFDL0IscUJBQXFCO0lBQ3JCLHlCQUF5QjtJQUN6QixXQUFXO0lBQ1gsV0FBVztJQUNYLGtCQUFrQjtJQUNsQixlQUFlO0FBQ25CO0FBQ0E7SUFDSSxXQUFXO0lBQ1gsMEJBQTBCO0lBQzFCLGtCQUFrQjtBQUN0QjtBQUNBLDhCQUE4QixVQUFVO0lBQ3BDLFVBQVUsTUFBTSxpQkFBaUI7SUFDakMsaUJBQWlCO0FBQ3JCO0FBQ0Esb0NBQW9DLFdBQVc7SUFDM0Msa0JBQWtCO0lBQ2xCLGlEQUFpRDtJQUNqRCxpQ0FBaUM7QUFDckM7QUFDQSxvQ0FBb0MsVUFBVTtJQUMxQyxpREFBaUQ7SUFDakQsZ0JBQWdCO0lBQ2hCLGlDQUFpQztBQUNyQztBQUNBO0lBQ0ksV0FBVztJQUNYLGNBQWM7SUFDZCxnQ0FBZ0M7QUFDcEM7QUFFQTtJQUNJLGNBQWM7SUFDZCxXQUFXO0lBQ1gsWUFBWTtJQUNaLGdCQUFnQjtJQUNoQiw4QkFBOEI7SUFDOUIsaUJBQWlCO0lBQ2pCLGdCQUFnQjtJQUNoQjtBQUNKO0FBQ0E7SUFDSSxxQkFBcUI7SUFDckIsdUJBQXVCO0lBQ3ZCLDhCQUE4QjtJQUM5QixXQUFXOztJQUVYLGlCQUFpQjtBQUNyQjtBQUNBO0lBQ0ksY0FBYztJQUNkLFdBQVc7SUFDWCxZQUFZO0lBQ1osa0JBQWtCO0lBQ2xCLGlCQUFpQjtJQUNqQjtBQUNKO0FBQ0E7SUFDSSxjQUFjO0lBQ2QseUJBQXlCO0lBQ3pCLFdBQVc7SUFDWCxXQUFXO0FBQ2Y7QUFDQTtJQUNJLDJCQUEyQjtJQUMzQixlQUFlO0lBQ2YsdUJBQXVCO0FBQzNCO0FBQ0EsWUFBWTtBQUNaO0lBQ0ksMkJBQTJCO0lBQzNCLHVCQUF1QjtBQUMzQiIsImZpbGUiOiJzcmMvYXBwL2Rlc2lnbi1wb3AvcGFuZWwvcGFuZWwtbGVmdC9wcm9kdWN0LWxpc3QvZHJhdy1yb29tL2RyYXctcm9vbS5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmNvbnRlbnR7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIGhlaWdodDogMTAwJVxyXG59XHJcbi50aXRsZXtcclxuICAgIHBhZGRpbmc6IDlweCAxMHB4O1xyXG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNlOGU4ZTg7XHJcbiAgICBmb250LXdlaWdodDogNjAwO1xyXG4gICAgY29sb3I6ICMzMjMyMzI7XHJcbiAgICBmb250LXNpemU6IDE0cHg7XHJcbiAgICBsaW5lLWhlaWdodDogMjJweDtcclxufVxyXG4uYmFja3tcclxuICAgIHBhZGRpbmc6IDlweCAxMHB4O1xyXG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNlOGU4ZTg7XHJcbiAgICBmb250LXdlaWdodDogNjAwO1xyXG4gICAgY29sb3I6ICMzMjMyMzI7XHJcbiAgICBmb250LXNpemU6IDE0cHg7XHJcbiAgICBsaW5lLWhlaWdodDogMjJweDtcclxufVxyXG4jbG9hZHtcclxuICAgIGRpc3BsYXk6IG5vbmU7XHJcbn1cclxuLmJ0biAuaW1nQ29ue1xyXG4gICAgd2lkdGg6IDI1cHg7XHJcbiAgICBoZWlnaHQ6IDMwcHg7XHJcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xyXG4gICAgZmxvYXQ6IGxlZnQ7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjM2U4MmY3O1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICMzZTgyZjc7XHJcbiAgICBib3JkZXItdG9wOiAxcHggc29saWQgIzNlODJmNztcclxuICAgIGJvcmRlci1sZWZ0OiAxcHggc29saWQgIzNlODJmNztcclxuICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDRweDtcclxuICAgIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDRweDtcclxuICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbn1cclxuLmltZ0NvbiBpbWd7XHJcbiAgICB3aWR0aDogMzRweDtcclxuICAgIGhlaWdodDogMzRweDtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHRvcDogLTJweDtcclxuICAgIHJpZ2h0OiAtNnB4O1xyXG4gICAgXHJcbn1cclxuLmJhY2tOYW1le1xyXG4gICAgaGVpZ2h0OiAzMHB4O1xyXG4gICAgbGluZS1oZWlnaHQ6IDMwcHg7XHJcbiAgICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogNHB4O1xyXG4gICAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDRweDtcclxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICMzZTgyZjc7XHJcbiAgICBjb2xvcjogI2ZmZjtcclxuICAgIGZsb2F0OiBsZWZ0O1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgcGFkZGluZzogMCAxMHB4O1xyXG59XHJcbi5kcmF3VG9vbHtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgaGVpZ2h0OiBjYWxjKDEwMCUgLSAxMjFweCk7XHJcbiAgICBvdmVyZmxvdy15OiBzY3JvbGw7XHJcbn1cclxuLmRyYXdUb29sOjotd2Via2l0LXNjcm9sbGJhciB7Lyrmu5rliqjmnaHmlbTkvZPmoLflvI8qL1xyXG4gICAgd2lkdGg6IDRweDsgICAgIC8q6auY5a695YiG5Yir5a+55bqU5qiq56uW5rua5Yqo5p2h55qE5bC65a+4Ki9cclxuICAgIC8qIGhlaWdodDogNHB4OyAqL1xyXG59XHJcbi5kcmF3VG9vbDo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWIgey8q5rua5Yqo5p2h6YeM6Z2i5bCP5pa55Z2XKi9cclxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcclxuICAgIC13ZWJraXQtYm94LXNoYWRvdzogaW5zZXQgMCAwIDVweCByZ2JhKDAsMCwwLDAuMik7XHJcbiAgICBiYWNrZ3JvdW5kOiByZ2JhKDIzMiwyMzIsMjMyLDAuMik7XHJcbn1cclxuLmRyYXdUb29sOjotd2Via2l0LXNjcm9sbGJhci10cmFjayB7Lyrmu5rliqjmnaHph4zpnaLovajpgZMqL1xyXG4gICAgLXdlYmtpdC1ib3gtc2hhZG93OiBpbnNldCAwIDAgNXB4IHJnYmEoMCwwLDAsMC4yKTtcclxuICAgIGJvcmRlci1yYWRpdXM6IDA7XHJcbiAgICBiYWNrZ3JvdW5kOiByZ2JhKDEwMiwxMDIsMTAyLDAuMSk7XHJcbn1cclxuLmxpc3Rjb250YWluZXJ7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIHBhZGRpbmc6IDAgNXB4O1xyXG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNlNWU1ZTU7XHJcbn1cclxuXHJcbi5saXN0Y29udGFpbmVyPnNwYW57XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgaGVpZ2h0OiAyMHB4O1xyXG4gICAgcGFkZGluZy1sZWZ0OjZweDsgXHJcbiAgICBib3JkZXItbGVmdDogNXB4IHNvbGlkICMzZTgyZjc7XHJcbiAgICBsaW5lLWhlaWdodDogMjBweDtcclxuICAgIHRleHQtYWxpZ246IGxlZnQ7XHJcbiAgICBmb250LWZhbWlseTogJ+W+rui9r+mbhem7kSdcclxufVxyXG4uaWNvbi1jb250YWluZXJ7XHJcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICB3aWR0aDogY2FsYygzMyUgLSAxMHB4KTtcclxuICAgIC8qIGhlaWdodDogY2FsYygzMyUgKyAxMHB4KTsgKi9cclxuICAgIG1hcmdpbjogNXB4O1xyXG4gICAgXHJcbiAgICAvKiBmbG9hdDogbGVmdDsgKi9cclxufVxyXG4uaWNvbi1jb250YWluZXI+c3BhbntcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBoZWlnaHQ6IDIwcHg7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBsaW5lLWhlaWdodDogMjBweDtcclxuICAgIGZvbnQtZmFtaWx5OiAn5b6u6L2v6ZuF6buRJ1xyXG59XHJcbi5pY29uMntcclxuICAgIG1hcmdpbjogMCBhdXRvO1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgI2U1ZTVlNTtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgaGVpZ2h0Ojc1cHg7XHJcbn1cclxuLmljb24yOmhvdmVye1xyXG4gICAgYm9yZGVyOiAycHggc29saWQgbGlnaHRibHVlO1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XHJcbn1cclxuLyog6YCJ5Lit5Zu+54mH5pe25qC35byPICovXHJcbi5ib3JkZXJfb3V0e1xyXG4gICAgYm9yZGVyOiAycHggc29saWQgbGlnaHRibHVlO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XHJcbn0iXX0= */"

/***/ }),

/***/ "./src/app/design-pop/panel/panel-left/product-list/draw-room/draw-room.component.ts":
/*!*******************************************************************************************!*\
  !*** ./src/app/design-pop/panel/panel-left/product-list/draw-room/draw-room.component.ts ***!
  \*******************************************************************************************/
/*! exports provided: DrawRoomComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DrawRoomComponent", function() { return DrawRoomComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let DrawRoomComponent = class DrawRoomComponent {
    constructor() { }
    set drawRoom(data) {
        // this._roomData = data;
        // console.log(data)
        this._roomData = data;
    }
    get drawRoom() { return this._roomData; }
    ngOnInit() {
    }
};
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [Object])
], DrawRoomComponent.prototype, "drawRoom", null);
DrawRoomComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[drawRoom]',
        template: __webpack_require__(/*! raw-loader!./draw-room.component.html */ "./node_modules/raw-loader/index.js!./src/app/design-pop/panel/panel-left/product-list/draw-room/draw-room.component.html"),
        styles: [__webpack_require__(/*! ./draw-room.component.css */ "./src/app/design-pop/panel/panel-left/product-list/draw-room/draw-room.component.css")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
], DrawRoomComponent);



/***/ }),

/***/ "./src/app/design-pop/panel/panel-left/product-list/draw-room/draw-room.module.ts":
/*!****************************************************************************************!*\
  !*** ./src/app/design-pop/panel/panel-left/product-list/draw-room/draw-room.module.ts ***!
  \****************************************************************************************/
/*! exports provided: DrawRoomModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DrawRoomModule", function() { return DrawRoomModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _draw_room_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./draw-room.component */ "./src/app/design-pop/panel/panel-left/product-list/draw-room/draw-room.component.ts");




let DrawRoomModule = class DrawRoomModule {
};
DrawRoomModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]
        ],
        declarations: [_draw_room_component__WEBPACK_IMPORTED_MODULE_3__["DrawRoomComponent"]],
        exports: [_draw_room_component__WEBPACK_IMPORTED_MODULE_3__["DrawRoomComponent"]]
    })
], DrawRoomModule);



/***/ }),

/***/ "./src/app/design-pop/panel/panel-left/product-list/mine/mine.component.css":
/*!**********************************************************************************!*\
  !*** ./src/app/design-pop/panel/panel-left/product-list/mine/mine.component.css ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2Rlc2lnbi1wb3AvcGFuZWwvcGFuZWwtbGVmdC9wcm9kdWN0LWxpc3QvbWluZS9taW5lLmNvbXBvbmVudC5jc3MifQ== */"

/***/ }),

/***/ "./src/app/design-pop/panel/panel-left/product-list/mine/mine.component.ts":
/*!*********************************************************************************!*\
  !*** ./src/app/design-pop/panel/panel-left/product-list/mine/mine.component.ts ***!
  \*********************************************************************************/
/*! exports provided: MineComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MineComponent", function() { return MineComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let MineComponent = class MineComponent {
    constructor() { }
    set mine(data) {
        this._mine = data;
    }
    get mine() { return this._mine; }
    ngOnInit() {
    }
};
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [Object])
], MineComponent.prototype, "mine", null);
MineComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[mine]',
        template: __webpack_require__(/*! raw-loader!./mine.component.html */ "./node_modules/raw-loader/index.js!./src/app/design-pop/panel/panel-left/product-list/mine/mine.component.html"),
        styles: [__webpack_require__(/*! ./mine.component.css */ "./src/app/design-pop/panel/panel-left/product-list/mine/mine.component.css")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
], MineComponent);



/***/ }),

/***/ "./src/app/design-pop/panel/panel-left/product-list/mine/mine.module.ts":
/*!******************************************************************************!*\
  !*** ./src/app/design-pop/panel/panel-left/product-list/mine/mine.module.ts ***!
  \******************************************************************************/
/*! exports provided: MineModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MineModule", function() { return MineModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _mine_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./mine.component */ "./src/app/design-pop/panel/panel-left/product-list/mine/mine.component.ts");




let MineModule = class MineModule {
};
MineModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]
        ],
        declarations: [_mine_component__WEBPACK_IMPORTED_MODULE_3__["MineComponent"]],
        exports: [_mine_component__WEBPACK_IMPORTED_MODULE_3__["MineComponent"]]
    })
], MineModule);



/***/ }),

/***/ "./src/app/design-pop/panel/panel-left/product-list/product-list.component.css":
/*!*************************************************************************************!*\
  !*** ./src/app/design-pop/panel/panel-left/product-list/product-list.component.css ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".putModel{\r\n    height: 100%\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZGVzaWduLXBvcC9wYW5lbC9wYW5lbC1sZWZ0L3Byb2R1Y3QtbGlzdC9wcm9kdWN0LWxpc3QuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJO0FBQ0oiLCJmaWxlIjoic3JjL2FwcC9kZXNpZ24tcG9wL3BhbmVsL3BhbmVsLWxlZnQvcHJvZHVjdC1saXN0L3Byb2R1Y3QtbGlzdC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLnB1dE1vZGVse1xyXG4gICAgaGVpZ2h0OiAxMDAlXHJcbn0iXX0= */"

/***/ }),

/***/ "./src/app/design-pop/panel/panel-left/product-list/product-list.component.ts":
/*!************************************************************************************!*\
  !*** ./src/app/design-pop/panel/panel-left/product-list/product-list.component.ts ***!
  \************************************************************************************/
/*! exports provided: ProductListComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProductListComponent", function() { return ProductListComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let ProductListComponent = class ProductListComponent {
    constructor() { }
    set productList(data) {
        this._productList = data;
    }
    get productList() { return this._productList; }
    ngOnInit() {
    }
};
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [Object])
], ProductListComponent.prototype, "productList", null);
ProductListComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[productList]',
        template: __webpack_require__(/*! raw-loader!./product-list.component.html */ "./node_modules/raw-loader/index.js!./src/app/design-pop/panel/panel-left/product-list/product-list.component.html"),
        styles: [__webpack_require__(/*! ./product-list.component.css */ "./src/app/design-pop/panel/panel-left/product-list/product-list.component.css")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
], ProductListComponent);



/***/ }),

/***/ "./src/app/design-pop/panel/panel-left/product-list/product-list.module.ts":
/*!*********************************************************************************!*\
  !*** ./src/app/design-pop/panel/panel-left/product-list/product-list.module.ts ***!
  \*********************************************************************************/
/*! exports provided: ProductListModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProductListModule", function() { return ProductListModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _product_list_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./product-list.component */ "./src/app/design-pop/panel/panel-left/product-list/product-list.component.ts");
/* harmony import */ var _draw_room_draw_room_module__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./draw-room/draw-room.module */ "./src/app/design-pop/panel/panel-left/product-list/draw-room/draw-room.module.ts");
/* harmony import */ var _put_model_put_model_module__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./put-model/put-model.module */ "./src/app/design-pop/panel/panel-left/product-list/put-model/put-model.module.ts");
/* harmony import */ var _mine_mine_module__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./mine/mine.module */ "./src/app/design-pop/panel/panel-left/product-list/mine/mine.module.ts");







let ProductListModule = class ProductListModule {
};
ProductListModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
            _draw_room_draw_room_module__WEBPACK_IMPORTED_MODULE_4__["DrawRoomModule"],
            _put_model_put_model_module__WEBPACK_IMPORTED_MODULE_5__["PutModelModule"],
            _mine_mine_module__WEBPACK_IMPORTED_MODULE_6__["MineModule"]
        ],
        declarations: [_product_list_component__WEBPACK_IMPORTED_MODULE_3__["ProductListComponent"]],
        exports: [_product_list_component__WEBPACK_IMPORTED_MODULE_3__["ProductListComponent"]]
    })
], ProductListModule);



/***/ }),

/***/ "./src/app/design-pop/panel/panel-left/product-list/put-model/put-model.component.css":
/*!********************************************************************************************!*\
  !*** ./src/app/design-pop/panel/panel-left/product-list/put-model/put-model.component.css ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\r\n.put_content{\r\n    height: 100%;\r\n}\r\n.bread{\r\n    padding: 9px 10px;\r\n    border-bottom: 1px solid #e8e8e8;\r\n    font-weight: 600;\r\n    color: #323232;\r\n    font-size: 14px;\r\n    line-height: 22px;\r\n    overflow: hidden;\r\n    /* position: relative; */\r\n}\r\n.hidde_icon{\r\n    margin-left: -18px;\r\n}\r\n.names{\r\n    display: inline-block;\r\n    /* position: absolute; */\r\n    /* margin-left: -18px; */\r\n}\r\n.names span {\r\n    font-size: 13px;\r\n    color: #323232;\r\n    border-bottom: 1px solid lightblue;\r\n}\r\n.search_content{\r\n    margin: 5px 5px 5px 0;\r\n    height: 34px;\r\n    padding-left: 10px;\r\n    width: 100%;\r\n}\r\n.search_for{\r\n    padding:9px 8px;\r\n    height: 32px;\r\n    line-height: 32px;\r\n    font-size: 14px;\r\n    border-color: transparent;\r\n    /* width: 100%; */\r\n}\r\n.main_content{\r\n    width: 100%;\r\n    margin-top: 5px;\r\n    padding-left: 10px;\r\n    height: calc(100% - 80px);\r\n    overflow-y: scroll;\r\n}\r\n.main_content::-webkit-scrollbar {/*滚动条整体样式*/\r\n    width: 4px;     /*高宽分别对应横竖滚动条的尺寸*/\r\n    /* height: 4px; */\r\n}\r\n.main_content::-webkit-scrollbar-thumb {/*滚动条里面小方块*/\r\n    border-radius: 5px;\r\n    -webkit-box-shadow: inset 0 0 5px rgba(0,0,0,0.2);\r\n    background: rgba(232,232,232,0.2);\r\n}\r\n.main_content::-webkit-scrollbar-track {/*滚动条里面轨道*/\r\n    -webkit-box-shadow: inset 0 0 5px rgba(0,0,0,0.2);\r\n    border-radius: 0;\r\n    background: rgba(102,102,102,0.1);\r\n}\r\n.img_content{\r\n    display: inline-block;\r\n    box-sizing: border-box;\r\n    width: calc(50% - 3px);\r\n    max-width: 120px;\r\n    height: 120px;\r\n    margin: 0 3px 3px 0;\r\n    border:1px solid #ddd;\r\n    border-radius: 2px;\r\n    position: relative;\r\n}\r\n.img_content:hover{\r\n    border: 1px solid lightblue;\r\n}\r\n.img_content img {\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n.img_content:hover .xinxi_icon{\r\n    display: block;\r\n}\r\n.xinxi_icon{\r\n    position: absolute;\r\n    top: 0;\r\n    right: 0;\r\n    width: 20px;\r\n    height: 20px;\r\n    fill: white;\r\n    display: none;\r\n}\r\n.detail_container{\r\n    width: 350px;\r\n    position: absolute;\r\n    left: 266px;\r\n    top: 50px;\r\n    background-color: #fff;\r\n    border-radius: 5px;\r\n    overflow: hidden;\r\n}\r\n.detail_container img{\r\n    width: 100%;\r\n    height: 350px;\r\n}\r\n.text_info{\r\n    width: 100%;\r\n    padding: 5px 15px;\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZGVzaWduLXBvcC9wYW5lbC9wYW5lbC1sZWZ0L3Byb2R1Y3QtbGlzdC9wdXQtbW9kZWwvcHV0LW1vZGVsLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBO0lBQ0ksWUFBWTtBQUNoQjtBQUNBO0lBQ0ksaUJBQWlCO0lBQ2pCLGdDQUFnQztJQUNoQyxnQkFBZ0I7SUFDaEIsY0FBYztJQUNkLGVBQWU7SUFDZixpQkFBaUI7SUFDakIsZ0JBQWdCO0lBQ2hCLHdCQUF3QjtBQUM1QjtBQUNBO0lBQ0ksa0JBQWtCO0FBQ3RCO0FBQ0E7SUFDSSxxQkFBcUI7SUFDckIsd0JBQXdCO0lBQ3hCLHdCQUF3QjtBQUM1QjtBQUNBO0lBQ0ksZUFBZTtJQUNmLGNBQWM7SUFDZCxrQ0FBa0M7QUFDdEM7QUFDQTtJQUNJLHFCQUFxQjtJQUNyQixZQUFZO0lBQ1osa0JBQWtCO0lBQ2xCLFdBQVc7QUFDZjtBQUNBO0lBQ0ksZUFBZTtJQUNmLFlBQVk7SUFDWixpQkFBaUI7SUFDakIsZUFBZTtJQUNmLHlCQUF5QjtJQUN6QixpQkFBaUI7QUFDckI7QUFDQTtJQUNJLFdBQVc7SUFDWCxlQUFlO0lBQ2Ysa0JBQWtCO0lBQ2xCLHlCQUF5QjtJQUN6QixrQkFBa0I7QUFDdEI7QUFDQSxrQ0FBa0MsVUFBVTtJQUN4QyxVQUFVLE1BQU0saUJBQWlCO0lBQ2pDLGlCQUFpQjtBQUNyQjtBQUNBLHdDQUF3QyxXQUFXO0lBQy9DLGtCQUFrQjtJQUNsQixpREFBaUQ7SUFDakQsaUNBQWlDO0FBQ3JDO0FBQ0Esd0NBQXdDLFVBQVU7SUFDOUMsaURBQWlEO0lBQ2pELGdCQUFnQjtJQUNoQixpQ0FBaUM7QUFDckM7QUFDQTtJQUNJLHFCQUFxQjtJQUNyQixzQkFBc0I7SUFDdEIsc0JBQXNCO0lBQ3RCLGdCQUFnQjtJQUNoQixhQUFhO0lBQ2IsbUJBQW1CO0lBQ25CLHFCQUFxQjtJQUNyQixrQkFBa0I7SUFDbEIsa0JBQWtCO0FBQ3RCO0FBQ0E7SUFDSSwyQkFBMkI7QUFDL0I7QUFDQTtJQUNJLFdBQVc7SUFDWCxZQUFZO0FBQ2hCO0FBQ0E7SUFDSSxjQUFjO0FBQ2xCO0FBQ0E7SUFDSSxrQkFBa0I7SUFDbEIsTUFBTTtJQUNOLFFBQVE7SUFDUixXQUFXO0lBQ1gsWUFBWTtJQUNaLFdBQVc7SUFDWCxhQUFhO0FBQ2pCO0FBQ0E7SUFDSSxZQUFZO0lBQ1osa0JBQWtCO0lBQ2xCLFdBQVc7SUFDWCxTQUFTO0lBQ1Qsc0JBQXNCO0lBQ3RCLGtCQUFrQjtJQUNsQixnQkFBZ0I7QUFDcEI7QUFDQTtJQUNJLFdBQVc7SUFDWCxhQUFhO0FBQ2pCO0FBQ0E7SUFDSSxXQUFXO0lBQ1gsaUJBQWlCO0FBQ3JCIiwiZmlsZSI6InNyYy9hcHAvZGVzaWduLXBvcC9wYW5lbC9wYW5lbC1sZWZ0L3Byb2R1Y3QtbGlzdC9wdXQtbW9kZWwvcHV0LW1vZGVsLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuLnB1dF9jb250ZW50e1xyXG4gICAgaGVpZ2h0OiAxMDAlO1xyXG59XHJcbi5icmVhZHtcclxuICAgIHBhZGRpbmc6IDlweCAxMHB4O1xyXG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNlOGU4ZTg7XHJcbiAgICBmb250LXdlaWdodDogNjAwO1xyXG4gICAgY29sb3I6ICMzMjMyMzI7XHJcbiAgICBmb250LXNpemU6IDE0cHg7XHJcbiAgICBsaW5lLWhlaWdodDogMjJweDtcclxuICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgICAvKiBwb3NpdGlvbjogcmVsYXRpdmU7ICovXHJcbn1cclxuLmhpZGRlX2ljb257XHJcbiAgICBtYXJnaW4tbGVmdDogLTE4cHg7XHJcbn1cclxuLm5hbWVze1xyXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgLyogcG9zaXRpb246IGFic29sdXRlOyAqL1xyXG4gICAgLyogbWFyZ2luLWxlZnQ6IC0xOHB4OyAqL1xyXG59XHJcbi5uYW1lcyBzcGFuIHtcclxuICAgIGZvbnQtc2l6ZTogMTNweDtcclxuICAgIGNvbG9yOiAjMzIzMjMyO1xyXG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIGxpZ2h0Ymx1ZTtcclxufVxyXG4uc2VhcmNoX2NvbnRlbnR7XHJcbiAgICBtYXJnaW46IDVweCA1cHggNXB4IDA7XHJcbiAgICBoZWlnaHQ6IDM0cHg7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDEwcHg7XHJcbiAgICB3aWR0aDogMTAwJTtcclxufVxyXG4uc2VhcmNoX2ZvcntcclxuICAgIHBhZGRpbmc6OXB4IDhweDtcclxuICAgIGhlaWdodDogMzJweDtcclxuICAgIGxpbmUtaGVpZ2h0OiAzMnB4O1xyXG4gICAgZm9udC1zaXplOiAxNHB4O1xyXG4gICAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcclxuICAgIC8qIHdpZHRoOiAxMDAlOyAqL1xyXG59XHJcbi5tYWluX2NvbnRlbnR7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIG1hcmdpbi10b3A6IDVweDtcclxuICAgIHBhZGRpbmctbGVmdDogMTBweDtcclxuICAgIGhlaWdodDogY2FsYygxMDAlIC0gODBweCk7XHJcbiAgICBvdmVyZmxvdy15OiBzY3JvbGw7XHJcbn1cclxuLm1haW5fY29udGVudDo6LXdlYmtpdC1zY3JvbGxiYXIgey8q5rua5Yqo5p2h5pW05L2T5qC35byPKi9cclxuICAgIHdpZHRoOiA0cHg7ICAgICAvKumrmOWuveWIhuWIq+WvueW6lOaoquerlua7muWKqOadoeeahOWwuuWvuCovXHJcbiAgICAvKiBoZWlnaHQ6IDRweDsgKi9cclxufVxyXG4ubWFpbl9jb250ZW50Ojotd2Via2l0LXNjcm9sbGJhci10aHVtYiB7Lyrmu5rliqjmnaHph4zpnaLlsI/mlrnlnZcqL1xyXG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xyXG4gICAgLXdlYmtpdC1ib3gtc2hhZG93OiBpbnNldCAwIDAgNXB4IHJnYmEoMCwwLDAsMC4yKTtcclxuICAgIGJhY2tncm91bmQ6IHJnYmEoMjMyLDIzMiwyMzIsMC4yKTtcclxufVxyXG4ubWFpbl9jb250ZW50Ojotd2Via2l0LXNjcm9sbGJhci10cmFjayB7Lyrmu5rliqjmnaHph4zpnaLovajpgZMqL1xyXG4gICAgLXdlYmtpdC1ib3gtc2hhZG93OiBpbnNldCAwIDAgNXB4IHJnYmEoMCwwLDAsMC4yKTtcclxuICAgIGJvcmRlci1yYWRpdXM6IDA7XHJcbiAgICBiYWNrZ3JvdW5kOiByZ2JhKDEwMiwxMDIsMTAyLDAuMSk7XHJcbn1cclxuLmltZ19jb250ZW50e1xyXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcclxuICAgIHdpZHRoOiBjYWxjKDUwJSAtIDNweCk7XHJcbiAgICBtYXgtd2lkdGg6IDEyMHB4O1xyXG4gICAgaGVpZ2h0OiAxMjBweDtcclxuICAgIG1hcmdpbjogMCAzcHggM3B4IDA7XHJcbiAgICBib3JkZXI6MXB4IHNvbGlkICNkZGQ7XHJcbiAgICBib3JkZXItcmFkaXVzOiAycHg7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbn1cclxuLmltZ19jb250ZW50OmhvdmVye1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgbGlnaHRibHVlO1xyXG59XHJcbi5pbWdfY29udGVudCBpbWcge1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBoZWlnaHQ6IDEwMCU7XHJcbn1cclxuLmltZ19jb250ZW50OmhvdmVyIC54aW54aV9pY29ue1xyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcbn1cclxuLnhpbnhpX2ljb257XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICB0b3A6IDA7XHJcbiAgICByaWdodDogMDtcclxuICAgIHdpZHRoOiAyMHB4O1xyXG4gICAgaGVpZ2h0OiAyMHB4O1xyXG4gICAgZmlsbDogd2hpdGU7XHJcbiAgICBkaXNwbGF5OiBub25lO1xyXG59XHJcbi5kZXRhaWxfY29udGFpbmVye1xyXG4gICAgd2lkdGg6IDM1MHB4O1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgbGVmdDogMjY2cHg7XHJcbiAgICB0b3A6IDUwcHg7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xyXG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xyXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxufVxyXG4uZGV0YWlsX2NvbnRhaW5lciBpbWd7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIGhlaWdodDogMzUwcHg7XHJcbn1cclxuLnRleHRfaW5mb3tcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgcGFkZGluZzogNXB4IDE1cHg7XHJcbn0iXX0= */"

/***/ }),

/***/ "./src/app/design-pop/panel/panel-left/product-list/put-model/put-model.component.ts":
/*!*******************************************************************************************!*\
  !*** ./src/app/design-pop/panel/panel-left/product-list/put-model/put-model.component.ts ***!
  \*******************************************************************************************/
/*! exports provided: PutModelComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PutModelComponent", function() { return PutModelComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let PutModelComponent = class PutModelComponent {
    constructor() {
        this.imgInfo = null;
    }
    set putModel(data) {
        // console.log(data);
        this._model = data;
    }
    get putModel() { return this._model; }
    ngOnInit() {
    }
    showInfo(e, img) {
        // console.log(img)
        this.imgInfo = img;
    }
    hiddeInfo() {
        this.imgInfo = null;
    }
};
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [Object])
], PutModelComponent.prototype, "putModel", null);
PutModelComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[putModel]',
        template: __webpack_require__(/*! raw-loader!./put-model.component.html */ "./node_modules/raw-loader/index.js!./src/app/design-pop/panel/panel-left/product-list/put-model/put-model.component.html"),
        styles: [__webpack_require__(/*! ./put-model.component.css */ "./src/app/design-pop/panel/panel-left/product-list/put-model/put-model.component.css")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
], PutModelComponent);



/***/ }),

/***/ "./src/app/design-pop/panel/panel-left/product-list/put-model/put-model.module.ts":
/*!****************************************************************************************!*\
  !*** ./src/app/design-pop/panel/panel-left/product-list/put-model/put-model.module.ts ***!
  \****************************************************************************************/
/*! exports provided: PutModelModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PutModelModule", function() { return PutModelModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _put_model_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./put-model.component */ "./src/app/design-pop/panel/panel-left/product-list/put-model/put-model.component.ts");




let PutModelModule = class PutModelModule {
};
PutModelModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]
        ],
        declarations: [_put_model_component__WEBPACK_IMPORTED_MODULE_3__["PutModelComponent"]],
        exports: [_put_model_component__WEBPACK_IMPORTED_MODULE_3__["PutModelComponent"]]
    })
], PutModelModule);



/***/ }),

/***/ "./src/app/design-pop/panel/panel-left/type-list/type-list.component.css":
/*!*******************************************************************************!*\
  !*** ./src/app/design-pop/panel/panel-left/type-list/type-list.component.css ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".hover_panel{\r\n    /* display: none; */\r\n    position: absolute;\r\n    left: 60px;\r\n    z-index: 2;\r\n    background-color: #fff;\r\n    border: 1px solid #ddd;\r\n    border-radius: 5px;\r\n    min-width: 350px;\r\n    padding: 20px;\r\n    -webkit-transform-origin: left bottom;\r\n            transform-origin: left bottom;\r\n    /* max-height: 100%; */\r\n}\r\n.type_panel{\r\n    max-width: 330px;\r\n    /* height: 20px; */\r\n    /* border-left: 5px solid #3e82f7; */\r\n}\r\n.type_panel>span{\r\n    display: block;\r\n    width: 100%;\r\n    height: 20px;\r\n    line-height: 20px;\r\n    font-weight: 700;\r\n    font-size: 13px;\r\n    padding-left: 8px;\r\n    color: black;\r\n    text-align: left;\r\n    border-left: 5px solid #3e82f7;\r\n}\r\n.name_list{\r\n    min-width: 200px;\r\n    padding: 5px;\r\n    text-align: left;\r\n}\r\n.name_list span{\r\n    display: inline-block;\r\n    /* height: 20px; */\r\n    line-height: 20px;\r\n    margin: 5px 10px;\r\n    color:#666\r\n}\r\n.name_list span:hover{\r\n    color:#3e82f7\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZGVzaWduLXBvcC9wYW5lbC9wYW5lbC1sZWZ0L3R5cGUtbGlzdC90eXBlLWxpc3QuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLG1CQUFtQjtJQUNuQixrQkFBa0I7SUFDbEIsVUFBVTtJQUNWLFVBQVU7SUFDVixzQkFBc0I7SUFDdEIsc0JBQXNCO0lBQ3RCLGtCQUFrQjtJQUNsQixnQkFBZ0I7SUFDaEIsYUFBYTtJQUNiLHFDQUE2QjtZQUE3Qiw2QkFBNkI7SUFDN0Isc0JBQXNCO0FBQzFCO0FBQ0E7SUFDSSxnQkFBZ0I7SUFDaEIsa0JBQWtCO0lBQ2xCLG9DQUFvQztBQUN4QztBQUNBO0lBQ0ksY0FBYztJQUNkLFdBQVc7SUFDWCxZQUFZO0lBQ1osaUJBQWlCO0lBQ2pCLGdCQUFnQjtJQUNoQixlQUFlO0lBQ2YsaUJBQWlCO0lBQ2pCLFlBQVk7SUFDWixnQkFBZ0I7SUFDaEIsOEJBQThCO0FBQ2xDO0FBQ0E7SUFDSSxnQkFBZ0I7SUFDaEIsWUFBWTtJQUNaLGdCQUFnQjtBQUNwQjtBQUNBO0lBQ0kscUJBQXFCO0lBQ3JCLGtCQUFrQjtJQUNsQixpQkFBaUI7SUFDakIsZ0JBQWdCO0lBQ2hCO0FBQ0o7QUFDQTtJQUNJO0FBQ0oiLCJmaWxlIjoic3JjL2FwcC9kZXNpZ24tcG9wL3BhbmVsL3BhbmVsLWxlZnQvdHlwZS1saXN0L3R5cGUtbGlzdC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmhvdmVyX3BhbmVse1xyXG4gICAgLyogZGlzcGxheTogbm9uZTsgKi9cclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIGxlZnQ6IDYwcHg7XHJcbiAgICB6LWluZGV4OiAyO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcclxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNkZGQ7XHJcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XHJcbiAgICBtaW4td2lkdGg6IDM1MHB4O1xyXG4gICAgcGFkZGluZzogMjBweDtcclxuICAgIHRyYW5zZm9ybS1vcmlnaW46IGxlZnQgYm90dG9tO1xyXG4gICAgLyogbWF4LWhlaWdodDogMTAwJTsgKi9cclxufVxyXG4udHlwZV9wYW5lbHtcclxuICAgIG1heC13aWR0aDogMzMwcHg7XHJcbiAgICAvKiBoZWlnaHQ6IDIwcHg7ICovXHJcbiAgICAvKiBib3JkZXItbGVmdDogNXB4IHNvbGlkICMzZTgyZjc7ICovXHJcbn1cclxuLnR5cGVfcGFuZWw+c3BhbntcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBoZWlnaHQ6IDIwcHg7XHJcbiAgICBsaW5lLWhlaWdodDogMjBweDtcclxuICAgIGZvbnQtd2VpZ2h0OiA3MDA7XHJcbiAgICBmb250LXNpemU6IDEzcHg7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDhweDtcclxuICAgIGNvbG9yOiBibGFjaztcclxuICAgIHRleHQtYWxpZ246IGxlZnQ7XHJcbiAgICBib3JkZXItbGVmdDogNXB4IHNvbGlkICMzZTgyZjc7XHJcbn1cclxuLm5hbWVfbGlzdHtcclxuICAgIG1pbi13aWR0aDogMjAwcHg7XHJcbiAgICBwYWRkaW5nOiA1cHg7XHJcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xyXG59XHJcbi5uYW1lX2xpc3Qgc3BhbntcclxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgIC8qIGhlaWdodDogMjBweDsgKi9cclxuICAgIGxpbmUtaGVpZ2h0OiAyMHB4O1xyXG4gICAgbWFyZ2luOiA1cHggMTBweDtcclxuICAgIGNvbG9yOiM2NjZcclxufVxyXG4ubmFtZV9saXN0IHNwYW46aG92ZXJ7XHJcbiAgICBjb2xvcjojM2U4MmY3XHJcbn0iXX0= */"

/***/ }),

/***/ "./src/app/design-pop/panel/panel-left/type-list/type-list.component.ts":
/*!******************************************************************************!*\
  !*** ./src/app/design-pop/panel/panel-left/type-list/type-list.component.ts ***!
  \******************************************************************************/
/*! exports provided: TypeListComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TypeListComponent", function() { return TypeListComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let TypeListComponent = class TypeListComponent {
    constructor(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
    }
    set typeList(data) {
        this._typeData = data;
    }
    get typeList() { return this._typeData; }
    ngAfterViewInit() {
        let hover_panel = this.elementRef.nativeElement.querySelector('.hover_panel');
        let con_height = hover_panel.clientHeight;
        if (this._typeData.pos.y < con_height / 2) {
            con_height = 0;
        }
        else if (this._typeData.pos.y + con_height / 2 > window.innerHeight) {
            con_height = window.innerHeight - con_height;
        }
        else {
            con_height = -con_height / 2;
        }
        this.renderer.setElementStyle(this.greetDiv.nativeElement, 'top', con_height + 'px');
    }
    ngOnInit() {
    }
};
TypeListComponent.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Renderer"] }
];
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])('greet', { "static": true }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"])
], TypeListComponent.prototype, "greetDiv", void 0);
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [Object])
], TypeListComponent.prototype, "typeList", null);
TypeListComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[typeList]',
        template: __webpack_require__(/*! raw-loader!./type-list.component.html */ "./node_modules/raw-loader/index.js!./src/app/design-pop/panel/panel-left/type-list/type-list.component.html"),
        styles: [__webpack_require__(/*! ./type-list.component.css */ "./src/app/design-pop/panel/panel-left/type-list/type-list.component.css")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["Renderer"]])
], TypeListComponent);



/***/ }),

/***/ "./src/app/design-pop/panel/panel-left/type-list/type-list.module.ts":
/*!***************************************************************************!*\
  !*** ./src/app/design-pop/panel/panel-left/type-list/type-list.module.ts ***!
  \***************************************************************************/
/*! exports provided: TypeListModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TypeListModule", function() { return TypeListModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _type_list_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./type-list.component */ "./src/app/design-pop/panel/panel-left/type-list/type-list.component.ts");




let TypeListModule = class TypeListModule {
};
TypeListModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]
        ],
        declarations: [_type_list_component__WEBPACK_IMPORTED_MODULE_3__["TypeListComponent"]],
        exports: [_type_list_component__WEBPACK_IMPORTED_MODULE_3__["TypeListComponent"]]
    })
], TypeListModule);



/***/ }),

/***/ "./src/app/design-pop/panel/panel-propety/check-slider/check-slider.component.css":
/*!****************************************************************************************!*\
  !*** ./src/app/design-pop/panel/panel-propety/check-slider/check-slider.component.css ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".check_box{\r\n    width: 100%;\r\n    /* height: 19px; */\r\n    /* display: flex; */\r\n    /* justify-content: center; */\r\n    vertical-align: middle;\r\n    \r\n    box-shadow: inset 0 0 1px 0 rgba(52,58,64,.14);\r\n}\r\n.check_box .title_box {\r\n    width: 100%;\r\n    height: 25px;\r\n    background-color: #e9e9e9;\r\n    box-shadow: inset 0 0 1px 0 rgba(52,58,64,.14);\r\n    /* margin-top: 3px; */\r\n}\r\n.title_box input {\r\n    width:12px;\r\n    height: 12px;\r\n    margin: 6px 10px;\r\n    float: left;\r\n}\r\n.title_box span {\r\n    /* display: inline-block; */\r\n    /* width: 100%; */\r\n    display: inline-block;\r\n    height: 100%;\r\n    font-family: '微软雅黑',Arial,Helvetica,sans-serif;\r\n    /* line-height: 25px; */\r\n    font-size: 12px;\r\n    float: left;\r\n    color: black;\r\n    /* vertical-align: middle; */\r\n    line-height: 25px;\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZGVzaWduLXBvcC9wYW5lbC9wYW5lbC1wcm9wZXR5L2NoZWNrLXNsaWRlci9jaGVjay1zbGlkZXIuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLFdBQVc7SUFDWCxrQkFBa0I7SUFDbEIsbUJBQW1CO0lBQ25CLDZCQUE2QjtJQUM3QixzQkFBc0I7O0lBRXRCLDhDQUE4QztBQUNsRDtBQUNBO0lBQ0ksV0FBVztJQUNYLFlBQVk7SUFDWix5QkFBeUI7SUFDekIsOENBQThDO0lBQzlDLHFCQUFxQjtBQUN6QjtBQUNBO0lBQ0ksVUFBVTtJQUNWLFlBQVk7SUFDWixnQkFBZ0I7SUFDaEIsV0FBVztBQUNmO0FBQ0E7SUFDSSwyQkFBMkI7SUFDM0IsaUJBQWlCO0lBQ2pCLHFCQUFxQjtJQUNyQixZQUFZO0lBQ1osOENBQThDO0lBQzlDLHVCQUF1QjtJQUN2QixlQUFlO0lBQ2YsV0FBVztJQUNYLFlBQVk7SUFDWiw0QkFBNEI7SUFDNUIsaUJBQWlCO0FBQ3JCIiwiZmlsZSI6InNyYy9hcHAvZGVzaWduLXBvcC9wYW5lbC9wYW5lbC1wcm9wZXR5L2NoZWNrLXNsaWRlci9jaGVjay1zbGlkZXIuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5jaGVja19ib3h7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIC8qIGhlaWdodDogMTlweDsgKi9cclxuICAgIC8qIGRpc3BsYXk6IGZsZXg7ICovXHJcbiAgICAvKiBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsgKi9cclxuICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XHJcbiAgICBcclxuICAgIGJveC1zaGFkb3c6IGluc2V0IDAgMCAxcHggMCByZ2JhKDUyLDU4LDY0LC4xNCk7XHJcbn1cclxuLmNoZWNrX2JveCAudGl0bGVfYm94IHtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgaGVpZ2h0OiAyNXB4O1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2U5ZTllOTtcclxuICAgIGJveC1zaGFkb3c6IGluc2V0IDAgMCAxcHggMCByZ2JhKDUyLDU4LDY0LC4xNCk7XHJcbiAgICAvKiBtYXJnaW4tdG9wOiAzcHg7ICovXHJcbn1cclxuLnRpdGxlX2JveCBpbnB1dCB7XHJcbiAgICB3aWR0aDoxMnB4O1xyXG4gICAgaGVpZ2h0OiAxMnB4O1xyXG4gICAgbWFyZ2luOiA2cHggMTBweDtcclxuICAgIGZsb2F0OiBsZWZ0O1xyXG59XHJcbi50aXRsZV9ib3ggc3BhbiB7XHJcbiAgICAvKiBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7ICovXHJcbiAgICAvKiB3aWR0aDogMTAwJTsgKi9cclxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgIGhlaWdodDogMTAwJTtcclxuICAgIGZvbnQtZmFtaWx5OiAn5b6u6L2v6ZuF6buRJyxBcmlhbCxIZWx2ZXRpY2Esc2Fucy1zZXJpZjtcclxuICAgIC8qIGxpbmUtaGVpZ2h0OiAyNXB4OyAqL1xyXG4gICAgZm9udC1zaXplOiAxMnB4O1xyXG4gICAgZmxvYXQ6IGxlZnQ7XHJcbiAgICBjb2xvcjogYmxhY2s7XHJcbiAgICAvKiB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlOyAqL1xyXG4gICAgbGluZS1oZWlnaHQ6IDI1cHg7XHJcbn0iXX0= */"

/***/ }),

/***/ "./src/app/design-pop/panel/panel-propety/check-slider/check-slider.component.ts":
/*!***************************************************************************************!*\
  !*** ./src/app/design-pop/panel/panel-propety/check-slider/check-slider.component.ts ***!
  \***************************************************************************************/
/*! exports provided: CheckSliderComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CheckSliderComponent", function() { return CheckSliderComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let CheckSliderComponent = class CheckSliderComponent {
    constructor() { }
    set checkSlider(data) {
        this._checkData = data;
    }
    get checkSlider() {
        for (let i = 0; i < this._checkData.length; i++) {
            this._checkData[i].newFunc = (params) => {
                this._checkData[i].isCheck == true ? this._checkData[i].isCheck = false : this._checkData[i].isCheck = true;
                this._checkData[i].func(this._checkData[i].isCheck);
                // console.log(this.newData)
            };
        }
        return this._checkData;
    }
    ngOnInit() {
    }
};
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [Object])
], CheckSliderComponent.prototype, "checkSlider", null);
CheckSliderComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[checkSlider]',
        template: __webpack_require__(/*! raw-loader!./check-slider.component.html */ "./node_modules/raw-loader/index.js!./src/app/design-pop/panel/panel-propety/check-slider/check-slider.component.html"),
        styles: [__webpack_require__(/*! ./check-slider.component.css */ "./src/app/design-pop/panel/panel-propety/check-slider/check-slider.component.css")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
], CheckSliderComponent);



/***/ }),

/***/ "./src/app/design-pop/panel/panel-propety/check-slider/check-slider.module.ts":
/*!************************************************************************************!*\
  !*** ./src/app/design-pop/panel/panel-propety/check-slider/check-slider.module.ts ***!
  \************************************************************************************/
/*! exports provided: CheckSliderModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CheckSliderModule", function() { return CheckSliderModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _check_slider_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./check-slider.component */ "./src/app/design-pop/panel/panel-propety/check-slider/check-slider.component.ts");
/* harmony import */ var _slider_box_slider_box_module__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../slider-box/slider-box.module */ "./src/app/design-pop/panel/panel-propety/slider-box/slider-box.module.ts");





let CheckSliderModule = class CheckSliderModule {
};
CheckSliderModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"], _slider_box_slider_box_module__WEBPACK_IMPORTED_MODULE_4__["SliderBoxModule"]
        ],
        declarations: [_check_slider_component__WEBPACK_IMPORTED_MODULE_3__["CheckSliderComponent"]],
        exports: [_check_slider_component__WEBPACK_IMPORTED_MODULE_3__["CheckSliderComponent"]]
    })
], CheckSliderModule);



/***/ }),

/***/ "./src/app/design-pop/panel/panel-propety/img-detail/img-detail.component.css":
/*!************************************************************************************!*\
  !*** ./src/app/design-pop/panel/panel-propety/img-detail/img-detail.component.css ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".imgDiv{\r\n    padding: 5px 10px;\r\n}\r\n.imageDiv{\r\n    width: 100%;\r\n    height: 100px;\r\n}\r\n.imageDiv img{\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZGVzaWduLXBvcC9wYW5lbC9wYW5lbC1wcm9wZXR5L2ltZy1kZXRhaWwvaW1nLWRldGFpbC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksaUJBQWlCO0FBQ3JCO0FBQ0E7SUFDSSxXQUFXO0lBQ1gsYUFBYTtBQUNqQjtBQUNBO0lBQ0ksV0FBVztJQUNYLFlBQVk7QUFDaEIiLCJmaWxlIjoic3JjL2FwcC9kZXNpZ24tcG9wL3BhbmVsL3BhbmVsLXByb3BldHkvaW1nLWRldGFpbC9pbWctZGV0YWlsLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuaW1nRGl2e1xyXG4gICAgcGFkZGluZzogNXB4IDEwcHg7XHJcbn1cclxuLmltYWdlRGl2e1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBoZWlnaHQ6IDEwMHB4O1xyXG59XHJcbi5pbWFnZURpdiBpbWd7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIGhlaWdodDogMTAwJTtcclxufSJdfQ== */"

/***/ }),

/***/ "./src/app/design-pop/panel/panel-propety/img-detail/img-detail.component.ts":
/*!***********************************************************************************!*\
  !*** ./src/app/design-pop/panel/panel-propety/img-detail/img-detail.component.ts ***!
  \***********************************************************************************/
/*! exports provided: ImgDetailComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ImgDetailComponent", function() { return ImgDetailComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let ImgDetailComponent = class ImgDetailComponent {
    constructor() { }
    set imgDetail(data) {
        this._imgData = data;
    }
    get imgDetail() { return this._imgData; }
    ngOnInit() {
    }
};
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [Object])
], ImgDetailComponent.prototype, "imgDetail", null);
ImgDetailComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[imgDetail]',
        template: __webpack_require__(/*! raw-loader!./img-detail.component.html */ "./node_modules/raw-loader/index.js!./src/app/design-pop/panel/panel-propety/img-detail/img-detail.component.html"),
        styles: [__webpack_require__(/*! ./img-detail.component.css */ "./src/app/design-pop/panel/panel-propety/img-detail/img-detail.component.css")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
], ImgDetailComponent);



/***/ }),

/***/ "./src/app/design-pop/panel/panel-propety/img-detail/img-detail.module.ts":
/*!********************************************************************************!*\
  !*** ./src/app/design-pop/panel/panel-propety/img-detail/img-detail.module.ts ***!
  \********************************************************************************/
/*! exports provided: ImgDetailModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ImgDetailModule", function() { return ImgDetailModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _img_detail_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./img-detail.component */ "./src/app/design-pop/panel/panel-propety/img-detail/img-detail.component.ts");




let ImgDetailModule = class ImgDetailModule {
};
ImgDetailModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]
        ],
        declarations: [_img_detail_component__WEBPACK_IMPORTED_MODULE_3__["ImgDetailComponent"]],
        exports: [_img_detail_component__WEBPACK_IMPORTED_MODULE_3__["ImgDetailComponent"]]
    })
], ImgDetailModule);



/***/ }),

/***/ "./src/app/design-pop/panel/panel-propety/img-list/img-list.component.css":
/*!********************************************************************************!*\
  !*** ./src/app/design-pop/panel/panel-propety/img-list/img-list.component.css ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".img_panel{\r\n    width: 336px;\r\n    height: 100%;\r\n    position: absolute;\r\n    /* left: -336px; */\r\n    top: 0;\r\n    background-color: #fff;\r\n    border-right: 1px solid #ddd;\r\n    z-index: 20;\r\n    -webkit-animation: show .5s;\r\n            animation: show .5s\r\n}\r\n@-webkit-keyframes show{\r\n    from{\r\n        left: -336px;\r\n    }\r\n    to{\r\n        left: 0px;\r\n    }\r\n}\r\n@keyframes show{\r\n    from{\r\n        left: -336px;\r\n    }\r\n    to{\r\n        left: 0px;\r\n    }\r\n}\r\n.img_title{\r\n    position: absolute;\r\n    left: 0;\r\n    top: 0;\r\n    width: 100%;\r\n    box-sizing: border-box;\r\n    padding: 15px 20px;\r\n    height: 50px;\r\n    line-height: 20px;\r\n    border-bottom: 1px solid #ddd;\r\n\r\n}\r\n.img_title .name{\r\n    color: #323232;\r\n    font-size: 18px;\r\n}\r\n.img_title .close{\r\n    position: absolute;\r\n    right: 0;\r\n    top: 0;\r\n    width: 50px;\r\n    height: 50px;\r\n    padding: 10px;\r\n}\r\n.close_icon{\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n.img_container{\r\n    width: 100%;\r\n    height: calc(100% - 50px);\r\n    overflow-y: scroll;\r\n    position: absolute;\r\n    top: 50px;\r\n    left: 0;\r\n    padding-left: 5px;\r\n}\r\n.img_container::-webkit-scrollbar {/*滚动条整体样式*/\r\n    width: 4px;     /*高宽分别对应横竖滚动条的尺寸*/\r\n    /* height: 4px; */\r\n}\r\n.img_container::-webkit-scrollbar-thumb {/*滚动条里面小方块*/\r\n    border-radius: 5px;\r\n    -webkit-box-shadow: inset 0 0 5px rgba(0,0,0,0.2);\r\n    background: rgba(232,232,232,0.2);\r\n}\r\n.img_container::-webkit-scrollbar-track {/*滚动条里面轨道*/\r\n    -webkit-box-shadow: inset 0 0 5px rgba(0,0,0,0.2);\r\n    border-radius: 0;\r\n    background: rgba(102,102,102,0.1);\r\n}\r\n.img_container .imgDiv{\r\n    display: inline-block;\r\n    position: relative;\r\n    box-sizing: border-box;\r\n    /* width: calc(50% - 6px / 2); */\r\n    height: 144px;\r\n    width: 144px;\r\n    margin: 0 0px 10px 10px;\r\n}\r\n.imgDiv:hover .border_div{\r\n    border: 1px solid #3e82f7;\r\n}\r\n.imgDiv:hover .xinxi_icon{\r\n    display: block;\r\n}\r\n.imgDiv .border_div{\r\n    width: 100%;\r\n    height: 100%;\r\n    border: 1px solid transparent;\r\n}\r\n.border_div img{\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n.imgDiv .xinxi_icon{\r\n    position: absolute;\r\n    top: 0;\r\n    right: 0;\r\n    width: 20px;\r\n    height: 20px;\r\n    fill: white;\r\n    display: none;\r\n}\r\n.xinxi_icon:hover{\r\n    fill: none\r\n}\r\n.detail_container{\r\n    width: 350px;\r\n    position: absolute;\r\n    left: 336px;\r\n    top: 50px;\r\n    background-color: #fff;\r\n    border-radius: 5px;\r\n    overflow: hidden;\r\n}\r\n.detail_container img{\r\n    width: 100%;\r\n    height: 350px;\r\n}\r\n.text_info{\r\n    width: 100%;\r\n    padding: 5px 15px;\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZGVzaWduLXBvcC9wYW5lbC9wYW5lbC1wcm9wZXR5L2ltZy1saXN0L2ltZy1saXN0LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxZQUFZO0lBQ1osWUFBWTtJQUNaLGtCQUFrQjtJQUNsQixrQkFBa0I7SUFDbEIsTUFBTTtJQUNOLHNCQUFzQjtJQUN0Qiw0QkFBNEI7SUFDNUIsV0FBVztJQUNYLDJCQUFrQjtZQUFsQjtBQUNKO0FBQ0E7SUFDSTtRQUNJLFlBQVk7SUFDaEI7SUFDQTtRQUNJLFNBQVM7SUFDYjtBQUNKO0FBUEE7SUFDSTtRQUNJLFlBQVk7SUFDaEI7SUFDQTtRQUNJLFNBQVM7SUFDYjtBQUNKO0FBQ0E7SUFDSSxrQkFBa0I7SUFDbEIsT0FBTztJQUNQLE1BQU07SUFDTixXQUFXO0lBQ1gsc0JBQXNCO0lBQ3RCLGtCQUFrQjtJQUNsQixZQUFZO0lBQ1osaUJBQWlCO0lBQ2pCLDZCQUE2Qjs7QUFFakM7QUFDQTtJQUNJLGNBQWM7SUFDZCxlQUFlO0FBQ25CO0FBQ0E7SUFDSSxrQkFBa0I7SUFDbEIsUUFBUTtJQUNSLE1BQU07SUFDTixXQUFXO0lBQ1gsWUFBWTtJQUNaLGFBQWE7QUFDakI7QUFDQTtJQUNJLFdBQVc7SUFDWCxZQUFZO0FBQ2hCO0FBQ0E7SUFDSSxXQUFXO0lBQ1gseUJBQXlCO0lBQ3pCLGtCQUFrQjtJQUNsQixrQkFBa0I7SUFDbEIsU0FBUztJQUNULE9BQU87SUFDUCxpQkFBaUI7QUFDckI7QUFDQSxtQ0FBbUMsVUFBVTtJQUN6QyxVQUFVLE1BQU0saUJBQWlCO0lBQ2pDLGlCQUFpQjtBQUNyQjtBQUNBLHlDQUF5QyxXQUFXO0lBQ2hELGtCQUFrQjtJQUNsQixpREFBaUQ7SUFDakQsaUNBQWlDO0FBQ3JDO0FBQ0EseUNBQXlDLFVBQVU7SUFDL0MsaURBQWlEO0lBQ2pELGdCQUFnQjtJQUNoQixpQ0FBaUM7QUFDckM7QUFDQTtJQUNJLHFCQUFxQjtJQUNyQixrQkFBa0I7SUFDbEIsc0JBQXNCO0lBQ3RCLGdDQUFnQztJQUNoQyxhQUFhO0lBQ2IsWUFBWTtJQUNaLHVCQUF1QjtBQUMzQjtBQUNBO0lBQ0kseUJBQXlCO0FBQzdCO0FBQ0E7SUFDSSxjQUFjO0FBQ2xCO0FBQ0E7SUFDSSxXQUFXO0lBQ1gsWUFBWTtJQUNaLDZCQUE2QjtBQUNqQztBQUNBO0lBQ0ksV0FBVztJQUNYLFlBQVk7QUFDaEI7QUFDQTtJQUNJLGtCQUFrQjtJQUNsQixNQUFNO0lBQ04sUUFBUTtJQUNSLFdBQVc7SUFDWCxZQUFZO0lBQ1osV0FBVztJQUNYLGFBQWE7QUFDakI7QUFDQTtJQUNJO0FBQ0o7QUFDQTtJQUNJLFlBQVk7SUFDWixrQkFBa0I7SUFDbEIsV0FBVztJQUNYLFNBQVM7SUFDVCxzQkFBc0I7SUFDdEIsa0JBQWtCO0lBQ2xCLGdCQUFnQjtBQUNwQjtBQUNBO0lBQ0ksV0FBVztJQUNYLGFBQWE7QUFDakI7QUFDQTtJQUNJLFdBQVc7SUFDWCxpQkFBaUI7QUFDckIiLCJmaWxlIjoic3JjL2FwcC9kZXNpZ24tcG9wL3BhbmVsL3BhbmVsLXByb3BldHkvaW1nLWxpc3QvaW1nLWxpc3QuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5pbWdfcGFuZWx7XHJcbiAgICB3aWR0aDogMzM2cHg7XHJcbiAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAvKiBsZWZ0OiAtMzM2cHg7ICovXHJcbiAgICB0b3A6IDA7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xyXG4gICAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgI2RkZDtcclxuICAgIHotaW5kZXg6IDIwO1xyXG4gICAgYW5pbWF0aW9uOiBzaG93IC41c1xyXG59XHJcbkBrZXlmcmFtZXMgc2hvd3tcclxuICAgIGZyb217XHJcbiAgICAgICAgbGVmdDogLTMzNnB4O1xyXG4gICAgfVxyXG4gICAgdG97XHJcbiAgICAgICAgbGVmdDogMHB4O1xyXG4gICAgfVxyXG59XHJcbi5pbWdfdGl0bGV7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICBsZWZ0OiAwO1xyXG4gICAgdG9wOiAwO1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xyXG4gICAgcGFkZGluZzogMTVweCAyMHB4O1xyXG4gICAgaGVpZ2h0OiA1MHB4O1xyXG4gICAgbGluZS1oZWlnaHQ6IDIwcHg7XHJcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2RkZDtcclxuXHJcbn1cclxuLmltZ190aXRsZSAubmFtZXtcclxuICAgIGNvbG9yOiAjMzIzMjMyO1xyXG4gICAgZm9udC1zaXplOiAxOHB4O1xyXG59XHJcbi5pbWdfdGl0bGUgLmNsb3Nle1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgcmlnaHQ6IDA7XHJcbiAgICB0b3A6IDA7XHJcbiAgICB3aWR0aDogNTBweDtcclxuICAgIGhlaWdodDogNTBweDtcclxuICAgIHBhZGRpbmc6IDEwcHg7XHJcbn1cclxuLmNsb3NlX2ljb257XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIGhlaWdodDogMTAwJTtcclxufVxyXG4uaW1nX2NvbnRhaW5lcntcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgaGVpZ2h0OiBjYWxjKDEwMCUgLSA1MHB4KTtcclxuICAgIG92ZXJmbG93LXk6IHNjcm9sbDtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHRvcDogNTBweDtcclxuICAgIGxlZnQ6IDA7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDVweDtcclxufVxyXG4uaW1nX2NvbnRhaW5lcjo6LXdlYmtpdC1zY3JvbGxiYXIgey8q5rua5Yqo5p2h5pW05L2T5qC35byPKi9cclxuICAgIHdpZHRoOiA0cHg7ICAgICAvKumrmOWuveWIhuWIq+WvueW6lOaoquerlua7muWKqOadoeeahOWwuuWvuCovXHJcbiAgICAvKiBoZWlnaHQ6IDRweDsgKi9cclxufVxyXG4uaW1nX2NvbnRhaW5lcjo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWIgey8q5rua5Yqo5p2h6YeM6Z2i5bCP5pa55Z2XKi9cclxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcclxuICAgIC13ZWJraXQtYm94LXNoYWRvdzogaW5zZXQgMCAwIDVweCByZ2JhKDAsMCwwLDAuMik7XHJcbiAgICBiYWNrZ3JvdW5kOiByZ2JhKDIzMiwyMzIsMjMyLDAuMik7XHJcbn1cclxuLmltZ19jb250YWluZXI6Oi13ZWJraXQtc2Nyb2xsYmFyLXRyYWNrIHsvKua7muWKqOadoemHjOmdoui9qOmBkyovXHJcbiAgICAtd2Via2l0LWJveC1zaGFkb3c6IGluc2V0IDAgMCA1cHggcmdiYSgwLDAsMCwwLjIpO1xyXG4gICAgYm9yZGVyLXJhZGl1czogMDtcclxuICAgIGJhY2tncm91bmQ6IHJnYmEoMTAyLDEwMiwxMDIsMC4xKTtcclxufVxyXG4uaW1nX2NvbnRhaW5lciAuaW1nRGl2e1xyXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcclxuICAgIC8qIHdpZHRoOiBjYWxjKDUwJSAtIDZweCAvIDIpOyAqL1xyXG4gICAgaGVpZ2h0OiAxNDRweDtcclxuICAgIHdpZHRoOiAxNDRweDtcclxuICAgIG1hcmdpbjogMCAwcHggMTBweCAxMHB4O1xyXG59XHJcbi5pbWdEaXY6aG92ZXIgLmJvcmRlcl9kaXZ7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjM2U4MmY3O1xyXG59XHJcbi5pbWdEaXY6aG92ZXIgLnhpbnhpX2ljb257XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxufVxyXG4uaW1nRGl2IC5ib3JkZXJfZGl2e1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCB0cmFuc3BhcmVudDtcclxufVxyXG4uYm9yZGVyX2RpdiBpbWd7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIGhlaWdodDogMTAwJTtcclxufVxyXG4uaW1nRGl2IC54aW54aV9pY29ue1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgdG9wOiAwO1xyXG4gICAgcmlnaHQ6IDA7XHJcbiAgICB3aWR0aDogMjBweDtcclxuICAgIGhlaWdodDogMjBweDtcclxuICAgIGZpbGw6IHdoaXRlO1xyXG4gICAgZGlzcGxheTogbm9uZTtcclxufVxyXG4ueGlueGlfaWNvbjpob3ZlcntcclxuICAgIGZpbGw6IG5vbmVcclxufVxyXG4uZGV0YWlsX2NvbnRhaW5lcntcclxuICAgIHdpZHRoOiAzNTBweDtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIGxlZnQ6IDMzNnB4O1xyXG4gICAgdG9wOiA1MHB4O1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcclxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcclxuICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbn1cclxuLmRldGFpbF9jb250YWluZXIgaW1ne1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBoZWlnaHQ6IDM1MHB4O1xyXG59XHJcbi50ZXh0X2luZm97XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIHBhZGRpbmc6IDVweCAxNXB4O1xyXG59Il19 */"

/***/ }),

/***/ "./src/app/design-pop/panel/panel-propety/img-list/img-list.component.ts":
/*!*******************************************************************************!*\
  !*** ./src/app/design-pop/panel/panel-propety/img-list/img-list.component.ts ***!
  \*******************************************************************************/
/*! exports provided: ImgListComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ImgListComponent", function() { return ImgListComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");



let ImgListComponent = class ImgListComponent {
    constructor(popService) {
        this.popService = popService;
        this.imgInfo = null;
    }
    set imgList(data) {
        this._imgData = data;
    }
    get imgList() { return this._imgData; }
    ngOnInit() {
    }
    close(e) {
        this.popService.getMaterial.emit(null);
    }
    showInfo(e, img) {
        // console.log(img)
        this.imgInfo = img;
    }
    hiddeInfo() {
        this.imgInfo = null;
    }
};
ImgListComponent.ctorParameters = () => [
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_2__["PopDivService"] }
];
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [Object])
], ImgListComponent.prototype, "imgList", null);
ImgListComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[imgList]',
        template: __webpack_require__(/*! raw-loader!./img-list.component.html */ "./node_modules/raw-loader/index.js!./src/app/design-pop/panel/panel-propety/img-list/img-list.component.html"),
        styles: [__webpack_require__(/*! ./img-list.component.css */ "./src/app/design-pop/panel/panel-propety/img-list/img-list.component.css")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_services_pop_div_service__WEBPACK_IMPORTED_MODULE_2__["PopDivService"]])
], ImgListComponent);



/***/ }),

/***/ "./src/app/design-pop/panel/panel-propety/img-list/img-list.module.ts":
/*!****************************************************************************!*\
  !*** ./src/app/design-pop/panel/panel-propety/img-list/img-list.module.ts ***!
  \****************************************************************************/
/*! exports provided: ImgListModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ImgListModule", function() { return ImgListModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _img_list_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./img-list.component */ "./src/app/design-pop/panel/panel-propety/img-list/img-list.component.ts");
/* harmony import */ var _ng_bootstrap_ng_bootstrap__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ng-bootstrap/ng-bootstrap */ "./node_modules/@ng-bootstrap/ng-bootstrap/fesm2015/ng-bootstrap.js");





let ImgListModule = class ImgListModule {
};
ImgListModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
            _ng_bootstrap_ng_bootstrap__WEBPACK_IMPORTED_MODULE_4__["NgbModule"]
        ],
        declarations: [_img_list_component__WEBPACK_IMPORTED_MODULE_3__["ImgListComponent"]],
        exports: [_img_list_component__WEBPACK_IMPORTED_MODULE_3__["ImgListComponent"]]
    })
], ImgListModule);



/***/ }),

/***/ "./src/app/design-pop/panel/panel-propety/inline-text/inline-text.component.css":
/*!**************************************************************************************!*\
  !*** ./src/app/design-pop/panel/panel-propety/inline-text/inline-text.component.css ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".txtContainer{\r\n    position: relative;\r\n    height: 45px;\r\n    display: inline-block;\r\n    margin-bottom: 3px;\r\n    margin-left: 6px;\r\n    overflow: hidden;\r\n}\r\n.txtContainer .name{\r\n    color: #808080;\r\n    font-size: 12px;\r\n    line-height: 11px;\r\n    font-weight: normal;\r\n    margin-top: 2px;\r\n    margin-bottom: 2px;\r\n    display: inline-block;\r\n    padding: .2em .6em .3em;\r\n    text-align: center;\r\n    white-space: nowrap;\r\n    vertical-align: baseline;\r\n    border-radius: .25em;\r\n}\r\n.txtContainer input{\r\n    width: 70px;\r\n    height: 25px;\r\n    background: #fafafa;\r\n    border: 1px solid #c3c3c3;\r\n    border-radius: 2px;\r\n    color: #343a40;\r\n    display: inline-block;\r\n    text-indent: 4px;\r\n    padding: 1px 0;\r\n    font-size: 11px;\r\n    margin-top: 10px;\r\n}\r\ninput[type=text]:disabled{\r\n    background-color: rgb(235,235,235)\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZGVzaWduLXBvcC9wYW5lbC9wYW5lbC1wcm9wZXR5L2lubGluZS10ZXh0L2lubGluZS10ZXh0LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxrQkFBa0I7SUFDbEIsWUFBWTtJQUNaLHFCQUFxQjtJQUNyQixrQkFBa0I7SUFDbEIsZ0JBQWdCO0lBQ2hCLGdCQUFnQjtBQUNwQjtBQUNBO0lBQ0ksY0FBYztJQUNkLGVBQWU7SUFDZixpQkFBaUI7SUFDakIsbUJBQW1CO0lBQ25CLGVBQWU7SUFDZixrQkFBa0I7SUFDbEIscUJBQXFCO0lBQ3JCLHVCQUF1QjtJQUN2QixrQkFBa0I7SUFDbEIsbUJBQW1CO0lBQ25CLHdCQUF3QjtJQUN4QixvQkFBb0I7QUFDeEI7QUFDQTtJQUNJLFdBQVc7SUFDWCxZQUFZO0lBQ1osbUJBQW1CO0lBQ25CLHlCQUF5QjtJQUN6QixrQkFBa0I7SUFDbEIsY0FBYztJQUNkLHFCQUFxQjtJQUNyQixnQkFBZ0I7SUFDaEIsY0FBYztJQUNkLGVBQWU7SUFDZixnQkFBZ0I7QUFDcEI7QUFDQTtJQUNJO0FBQ0oiLCJmaWxlIjoic3JjL2FwcC9kZXNpZ24tcG9wL3BhbmVsL3BhbmVsLXByb3BldHkvaW5saW5lLXRleHQvaW5saW5lLXRleHQuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi50eHRDb250YWluZXJ7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICBoZWlnaHQ6IDQ1cHg7XHJcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAzcHg7XHJcbiAgICBtYXJnaW4tbGVmdDogNnB4O1xyXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxufVxyXG4udHh0Q29udGFpbmVyIC5uYW1le1xyXG4gICAgY29sb3I6ICM4MDgwODA7XHJcbiAgICBmb250LXNpemU6IDEycHg7XHJcbiAgICBsaW5lLWhlaWdodDogMTFweDtcclxuICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7XHJcbiAgICBtYXJnaW4tdG9wOiAycHg7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAycHg7XHJcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICBwYWRkaW5nOiAuMmVtIC42ZW0gLjNlbTtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XHJcbiAgICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XHJcbiAgICBib3JkZXItcmFkaXVzOiAuMjVlbTtcclxufVxyXG4udHh0Q29udGFpbmVyIGlucHV0e1xyXG4gICAgd2lkdGg6IDcwcHg7XHJcbiAgICBoZWlnaHQ6IDI1cHg7XHJcbiAgICBiYWNrZ3JvdW5kOiAjZmFmYWZhO1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgI2MzYzNjMztcclxuICAgIGJvcmRlci1yYWRpdXM6IDJweDtcclxuICAgIGNvbG9yOiAjMzQzYTQwO1xyXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgdGV4dC1pbmRlbnQ6IDRweDtcclxuICAgIHBhZGRpbmc6IDFweCAwO1xyXG4gICAgZm9udC1zaXplOiAxMXB4O1xyXG4gICAgbWFyZ2luLXRvcDogMTBweDtcclxufVxyXG5pbnB1dFt0eXBlPXRleHRdOmRpc2FibGVke1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDIzNSwyMzUsMjM1KVxyXG59Il19 */"

/***/ }),

/***/ "./src/app/design-pop/panel/panel-propety/inline-text/inline-text.component.ts":
/*!*************************************************************************************!*\
  !*** ./src/app/design-pop/panel/panel-propety/inline-text/inline-text.component.ts ***!
  \*************************************************************************************/
/*! exports provided: InlineTextComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InlineTextComponent", function() { return InlineTextComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let InlineTextComponent = class InlineTextComponent {
    constructor() { }
    set inlineText(data) {
        // console.log(data)
        this._inlineText = data;
    }
    get inlineText() { return this._inlineText; }
    ngOnInit() {
    }
};
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [Object])
], InlineTextComponent.prototype, "inlineText", null);
InlineTextComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[inlineText]',
        template: __webpack_require__(/*! raw-loader!./inline-text.component.html */ "./node_modules/raw-loader/index.js!./src/app/design-pop/panel/panel-propety/inline-text/inline-text.component.html"),
        styles: [__webpack_require__(/*! ./inline-text.component.css */ "./src/app/design-pop/panel/panel-propety/inline-text/inline-text.component.css")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
], InlineTextComponent);



/***/ }),

/***/ "./src/app/design-pop/panel/panel-propety/inline-text/inline-text.module.ts":
/*!**********************************************************************************!*\
  !*** ./src/app/design-pop/panel/panel-propety/inline-text/inline-text.module.ts ***!
  \**********************************************************************************/
/*! exports provided: InlineTextModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InlineTextModule", function() { return InlineTextModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _inline_text_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./inline-text.component */ "./src/app/design-pop/panel/panel-propety/inline-text/inline-text.component.ts");




let InlineTextModule = class InlineTextModule {
};
InlineTextModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]
        ],
        declarations: [_inline_text_component__WEBPACK_IMPORTED_MODULE_3__["InlineTextComponent"]],
        exports: [_inline_text_component__WEBPACK_IMPORTED_MODULE_3__["InlineTextComponent"]]
    })
], InlineTextModule);



/***/ }),

/***/ "./src/app/design-pop/panel/panel-propety/panel-propety.component.css":
/*!****************************************************************************!*\
  !*** ./src/app/design-pop/panel/panel-propety/panel-propety.component.css ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".mianCotainer{\r\n    position: absolute;\r\n}\r\n.rightProperty{\r\n    width: 230px;\r\n    height: calc(100% - 245px);\r\n    background: rgba(250, 250, 250, 0.7);\r\n    /* border: 1px solid #d6d6d6; */\r\n    border-top: 0;\r\n    padding-top: 10px;\r\n    position: absolute;\r\n    top:210px;\r\n    right: 0;\r\n    z-index: 50;\r\n    border-radius: 2px 0 2px 2px;\r\n    overflow-x:hidden;\r\n    overflow-y:scroll;  \r\n}\r\n.rightProperty::-webkit-scrollbar {\r\n    /* width: 8px;\r\n    border-radius: 3px;\r\n    background-color: #aaaaaa */\r\n    display: none;\r\n}\r\n.property{\r\n    width: 100%;\r\n    /* max-height: 150px; */\r\n    /* margin-bottom: 10px; */\r\n    /* border: 1px solid #d6d6d6;  */\r\n     \r\n}\r\n.superA{\r\n    border: 1px solid #ddd;\r\n    font-size: 16px;\r\n    text-align: center;\r\n    margin-bottom: 5px;\r\n}\r\n\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZGVzaWduLXBvcC9wYW5lbC9wYW5lbC1wcm9wZXR5L3BhbmVsLXByb3BldHkuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGtCQUFrQjtBQUN0QjtBQUNBO0lBQ0ksWUFBWTtJQUNaLDBCQUEwQjtJQUMxQixvQ0FBb0M7SUFDcEMsK0JBQStCO0lBQy9CLGFBQWE7SUFDYixpQkFBaUI7SUFDakIsa0JBQWtCO0lBQ2xCLFNBQVM7SUFDVCxRQUFRO0lBQ1IsV0FBVztJQUNYLDRCQUE0QjtJQUM1QixpQkFBaUI7SUFDakIsaUJBQWlCO0FBQ3JCO0FBQ0E7SUFDSTs7K0JBRTJCO0lBQzNCLGFBQWE7QUFDakI7QUFDQTtJQUNJLFdBQVc7SUFDWCx1QkFBdUI7SUFDdkIseUJBQXlCO0lBQ3pCLGdDQUFnQzs7QUFFcEM7QUFDQTtJQUNJLHNCQUFzQjtJQUN0QixlQUFlO0lBQ2Ysa0JBQWtCO0lBQ2xCLGtCQUFrQjtBQUN0QiIsImZpbGUiOiJzcmMvYXBwL2Rlc2lnbi1wb3AvcGFuZWwvcGFuZWwtcHJvcGV0eS9wYW5lbC1wcm9wZXR5LmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIubWlhbkNvdGFpbmVye1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG59XHJcbi5yaWdodFByb3BlcnR5e1xyXG4gICAgd2lkdGg6IDIzMHB4O1xyXG4gICAgaGVpZ2h0OiBjYWxjKDEwMCUgLSAyNDVweCk7XHJcbiAgICBiYWNrZ3JvdW5kOiByZ2JhKDI1MCwgMjUwLCAyNTAsIDAuNyk7XHJcbiAgICAvKiBib3JkZXI6IDFweCBzb2xpZCAjZDZkNmQ2OyAqL1xyXG4gICAgYm9yZGVyLXRvcDogMDtcclxuICAgIHBhZGRpbmctdG9wOiAxMHB4O1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgdG9wOjIxMHB4O1xyXG4gICAgcmlnaHQ6IDA7XHJcbiAgICB6LWluZGV4OiA1MDtcclxuICAgIGJvcmRlci1yYWRpdXM6IDJweCAwIDJweCAycHg7XHJcbiAgICBvdmVyZmxvdy14OmhpZGRlbjtcclxuICAgIG92ZXJmbG93LXk6c2Nyb2xsOyAgXHJcbn1cclxuLnJpZ2h0UHJvcGVydHk6Oi13ZWJraXQtc2Nyb2xsYmFyIHtcclxuICAgIC8qIHdpZHRoOiA4cHg7XHJcbiAgICBib3JkZXItcmFkaXVzOiAzcHg7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYWFhYWFhICovXHJcbiAgICBkaXNwbGF5OiBub25lO1xyXG59XHJcbi5wcm9wZXJ0eXtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgLyogbWF4LWhlaWdodDogMTUwcHg7ICovXHJcbiAgICAvKiBtYXJnaW4tYm90dG9tOiAxMHB4OyAqL1xyXG4gICAgLyogYm9yZGVyOiAxcHggc29saWQgI2Q2ZDZkNjsgICovXHJcbiAgICAgXHJcbn1cclxuLnN1cGVyQXtcclxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNkZGQ7XHJcbiAgICBmb250LXNpemU6IDE2cHg7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBtYXJnaW4tYm90dG9tOiA1cHg7XHJcbn1cclxuIl19 */"

/***/ }),

/***/ "./src/app/design-pop/panel/panel-propety/panel-propety.component.ts":
/*!***************************************************************************!*\
  !*** ./src/app/design-pop/panel/panel-propety/panel-propety.component.ts ***!
  \***************************************************************************/
/*! exports provided: PanelPropetyComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PanelPropetyComponent", function() { return PanelPropetyComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let PanelPropetyComponent = class PanelPropetyComponent {
    constructor() { }
    set panelPropety(data) {
        this._panelPropety = data;
    }
    get panelPropety() { return this._panelPropety; }
    ngOnInit() {
    }
};
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [Object])
], PanelPropetyComponent.prototype, "panelPropety", null);
PanelPropetyComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[panelPropety]',
        template: __webpack_require__(/*! raw-loader!./panel-propety.component.html */ "./node_modules/raw-loader/index.js!./src/app/design-pop/panel/panel-propety/panel-propety.component.html"),
        styles: [__webpack_require__(/*! ./panel-propety.component.css */ "./src/app/design-pop/panel/panel-propety/panel-propety.component.css")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
], PanelPropetyComponent);



/***/ }),

/***/ "./src/app/design-pop/panel/panel-propety/panel-propety.module.ts":
/*!************************************************************************!*\
  !*** ./src/app/design-pop/panel/panel-propety/panel-propety.module.ts ***!
  \************************************************************************/
/*! exports provided: PanelPropetyModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PanelPropetyModule", function() { return PanelPropetyModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _panel_propety_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./panel-propety.component */ "./src/app/design-pop/panel/panel-propety/panel-propety.component.ts");
/* harmony import */ var _ng_bootstrap_ng_bootstrap__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ng-bootstrap/ng-bootstrap */ "./node_modules/@ng-bootstrap/ng-bootstrap/fesm2015/ng-bootstrap.js");
/* harmony import */ var _slider_box_slider_box_module__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./slider-box/slider-box.module */ "./src/app/design-pop/panel/panel-propety/slider-box/slider-box.module.ts");
/* harmony import */ var _text_box_text_box_module__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./text-box/text-box.module */ "./src/app/design-pop/panel/panel-propety/text-box/text-box.module.ts");
/* harmony import */ var _check_slider_check_slider_module__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./check-slider/check-slider.module */ "./src/app/design-pop/panel/panel-propety/check-slider/check-slider.module.ts");
/* harmony import */ var _select_box_select_box_module__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./select-box/select-box.module */ "./src/app/design-pop/panel/panel-propety/select-box/select-box.module.ts");
/* harmony import */ var _inline_text_inline_text_module__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./inline-text/inline-text.module */ "./src/app/design-pop/panel/panel-propety/inline-text/inline-text.module.ts");
/* harmony import */ var _img_detail_img_detail_module__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./img-detail/img-detail.module */ "./src/app/design-pop/panel/panel-propety/img-detail/img-detail.module.ts");











let PanelPropetyModule = class PanelPropetyModule {
};
PanelPropetyModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
            _ng_bootstrap_ng_bootstrap__WEBPACK_IMPORTED_MODULE_4__["NgbModule"],
            _slider_box_slider_box_module__WEBPACK_IMPORTED_MODULE_5__["SliderBoxModule"],
            _text_box_text_box_module__WEBPACK_IMPORTED_MODULE_6__["TextBoxModule"],
            _check_slider_check_slider_module__WEBPACK_IMPORTED_MODULE_7__["CheckSliderModule"],
            _select_box_select_box_module__WEBPACK_IMPORTED_MODULE_8__["SelectBoxModule"],
            _inline_text_inline_text_module__WEBPACK_IMPORTED_MODULE_9__["InlineTextModule"],
            _img_detail_img_detail_module__WEBPACK_IMPORTED_MODULE_10__["ImgDetailModule"]
        ],
        declarations: [_panel_propety_component__WEBPACK_IMPORTED_MODULE_3__["PanelPropetyComponent"]],
        exports: [_panel_propety_component__WEBPACK_IMPORTED_MODULE_3__["PanelPropetyComponent"]]
    })
], PanelPropetyModule);



/***/ }),

/***/ "./src/app/design-pop/panel/panel-propety/select-box/select-box.component.css":
/*!************************************************************************************!*\
  !*** ./src/app/design-pop/panel/panel-propety/select-box/select-box.component.css ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".select_box{\r\n    line-height: 22px;\r\n    font-size: 12px;\r\n    color: #808080;\r\n    width: auto;\r\n    margin-top: 8px;\r\n}\r\n.title{\r\n    font-size: 12px;\r\n    margin-right: 5px;\r\n    vertical-align: top;\r\n}\r\n.ulcontainer{\r\n    display: inline-block;\r\n    position: relative;\r\n}\r\n.ulcontainer button{\r\n    height: 22px;\r\n    width: 110px;\r\n    font-size: 12px;\r\n    text-align: left;\r\n    padding: 0 0;\r\n    outline: none;\r\n    background-color: #fafafa;\r\n    border: solid 1px #ccc;\r\n    padding-right: 0px;\r\n    border-radius: 2px;\r\n}\r\n.ulcontainer button img {\r\n    margin: 3px 0 0 4px;\r\n    width: 30px;\r\n    height: 15px;\r\n    float: left;\r\n}\r\n.ulcontainer button .text {\r\n    /* margin-left: -5px; */\r\n    line-height: 22px;\r\n    height: 22px;\r\n    width: 60px;\r\n    text-align: center;\r\n    overflow: hidden;\r\n    display: inline-block;\r\n}\r\n.caretcontainer{\r\n    display: inline-block;\r\n    width: 10px;\r\n    float: right;\r\n    background-color: #e4e4e4;\r\n    height: 20px;\r\n}\r\n.caret{\r\n    float: right;\r\n    margin: 9px 2px 0 0;\r\n    border-top: 3px dashed;\r\n    border-right: 3px solid transparent;\r\n    border-left: 3px solid transparent;\r\n    display: inline-block;\r\n    width: 0;\r\n    height: 0;\r\n    vertical-align: middle;\r\n}\r\n.dropDownUl{\r\n    display: block;\r\n    position: absolute;\r\n    top: 0px;\r\n    min-width: 127px;\r\n    max-width: 160px;\r\n    width: -webkit-max-content;\r\n    width: -moz-max-content;\r\n    width: max-content;\r\n    padding: 0px 0;\r\n    border: 1px solid #ccc;\r\n    border-radius: 2px;\r\n    text-align: left;\r\n    box-shadow: 0 1px 8px rgba(0,0,0,0.2);\r\n    background-color: #fafafa;\r\n    z-index: 1000;\r\n    max-height: 136px;\r\n    overflow: auto;\r\n    padding: 5px;\r\n    padding-top: 2px;\r\n    padding-bottom: 2px;\r\n    overflow-x: hidden;\r\n}\r\n.dropdownLi{\r\n    height: 22px;\r\n    max-width: 100%;\r\n    float: left;\r\n    margin: 0 8px;\r\n    overflow: hidden;\r\n    line-height: 22px;\r\n    font-size: 12px;\r\n    cursor: pointer;\r\n    position: relative;\r\n    list-style: none;\r\n}\r\n.dropdownLi:hover {\r\n    background-color: lightblue;\r\n}\r\n.dropdownLi img{\r\n    margin: 3px 0 0 4px;\r\n    width: 40px;\r\n    height: 15px;\r\n    float: left;\r\n}\r\n.roomName{\r\n    display: inline-block;\r\n    width: 50px;\r\n    border: 1px solid #ddd;\r\n    height: 22px;\r\n    position: absolute;\r\n    margin-left: 3px;\r\n    padding-left: 4px;\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZGVzaWduLXBvcC9wYW5lbC9wYW5lbC1wcm9wZXR5L3NlbGVjdC1ib3gvc2VsZWN0LWJveC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksaUJBQWlCO0lBQ2pCLGVBQWU7SUFDZixjQUFjO0lBQ2QsV0FBVztJQUNYLGVBQWU7QUFDbkI7QUFDQTtJQUNJLGVBQWU7SUFDZixpQkFBaUI7SUFDakIsbUJBQW1CO0FBQ3ZCO0FBQ0E7SUFDSSxxQkFBcUI7SUFDckIsa0JBQWtCO0FBQ3RCO0FBQ0E7SUFDSSxZQUFZO0lBQ1osWUFBWTtJQUNaLGVBQWU7SUFDZixnQkFBZ0I7SUFDaEIsWUFBWTtJQUNaLGFBQWE7SUFDYix5QkFBeUI7SUFDekIsc0JBQXNCO0lBQ3RCLGtCQUFrQjtJQUNsQixrQkFBa0I7QUFDdEI7QUFDQTtJQUNJLG1CQUFtQjtJQUNuQixXQUFXO0lBQ1gsWUFBWTtJQUNaLFdBQVc7QUFDZjtBQUNBO0lBQ0ksdUJBQXVCO0lBQ3ZCLGlCQUFpQjtJQUNqQixZQUFZO0lBQ1osV0FBVztJQUNYLGtCQUFrQjtJQUNsQixnQkFBZ0I7SUFDaEIscUJBQXFCO0FBQ3pCO0FBQ0E7SUFDSSxxQkFBcUI7SUFDckIsV0FBVztJQUNYLFlBQVk7SUFDWix5QkFBeUI7SUFDekIsWUFBWTtBQUNoQjtBQUNBO0lBQ0ksWUFBWTtJQUNaLG1CQUFtQjtJQUNuQixzQkFBc0I7SUFDdEIsbUNBQW1DO0lBQ25DLGtDQUFrQztJQUNsQyxxQkFBcUI7SUFDckIsUUFBUTtJQUNSLFNBQVM7SUFDVCxzQkFBc0I7QUFDMUI7QUFDQTtJQUNJLGNBQWM7SUFDZCxrQkFBa0I7SUFDbEIsUUFBUTtJQUNSLGdCQUFnQjtJQUNoQixnQkFBZ0I7SUFDaEIsMEJBQWtCO0lBQWxCLHVCQUFrQjtJQUFsQixrQkFBa0I7SUFDbEIsY0FBYztJQUNkLHNCQUFzQjtJQUN0QixrQkFBa0I7SUFDbEIsZ0JBQWdCO0lBQ2hCLHFDQUFxQztJQUNyQyx5QkFBeUI7SUFDekIsYUFBYTtJQUNiLGlCQUFpQjtJQUNqQixjQUFjO0lBQ2QsWUFBWTtJQUNaLGdCQUFnQjtJQUNoQixtQkFBbUI7SUFDbkIsa0JBQWtCO0FBQ3RCO0FBQ0E7SUFDSSxZQUFZO0lBQ1osZUFBZTtJQUNmLFdBQVc7SUFDWCxhQUFhO0lBQ2IsZ0JBQWdCO0lBQ2hCLGlCQUFpQjtJQUNqQixlQUFlO0lBQ2YsZUFBZTtJQUNmLGtCQUFrQjtJQUNsQixnQkFBZ0I7QUFDcEI7QUFDQTtJQUNJLDJCQUEyQjtBQUMvQjtBQUNBO0lBQ0ksbUJBQW1CO0lBQ25CLFdBQVc7SUFDWCxZQUFZO0lBQ1osV0FBVztBQUNmO0FBQ0E7SUFDSSxxQkFBcUI7SUFDckIsV0FBVztJQUNYLHNCQUFzQjtJQUN0QixZQUFZO0lBQ1osa0JBQWtCO0lBQ2xCLGdCQUFnQjtJQUNoQixpQkFBaUI7QUFDckIiLCJmaWxlIjoic3JjL2FwcC9kZXNpZ24tcG9wL3BhbmVsL3BhbmVsLXByb3BldHkvc2VsZWN0LWJveC9zZWxlY3QtYm94LmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuc2VsZWN0X2JveHtcclxuICAgIGxpbmUtaGVpZ2h0OiAyMnB4O1xyXG4gICAgZm9udC1zaXplOiAxMnB4O1xyXG4gICAgY29sb3I6ICM4MDgwODA7XHJcbiAgICB3aWR0aDogYXV0bztcclxuICAgIG1hcmdpbi10b3A6IDhweDtcclxufVxyXG4udGl0bGV7XHJcbiAgICBmb250LXNpemU6IDEycHg7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDVweDtcclxuICAgIHZlcnRpY2FsLWFsaWduOiB0b3A7XHJcbn1cclxuLnVsY29udGFpbmVye1xyXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG59XHJcbi51bGNvbnRhaW5lciBidXR0b257XHJcbiAgICBoZWlnaHQ6IDIycHg7XHJcbiAgICB3aWR0aDogMTEwcHg7XHJcbiAgICBmb250LXNpemU6IDEycHg7XHJcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xyXG4gICAgcGFkZGluZzogMCAwO1xyXG4gICAgb3V0bGluZTogbm9uZTtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmYWZhZmE7XHJcbiAgICBib3JkZXI6IHNvbGlkIDFweCAjY2NjO1xyXG4gICAgcGFkZGluZy1yaWdodDogMHB4O1xyXG4gICAgYm9yZGVyLXJhZGl1czogMnB4O1xyXG59XHJcbi51bGNvbnRhaW5lciBidXR0b24gaW1nIHtcclxuICAgIG1hcmdpbjogM3B4IDAgMCA0cHg7XHJcbiAgICB3aWR0aDogMzBweDtcclxuICAgIGhlaWdodDogMTVweDtcclxuICAgIGZsb2F0OiBsZWZ0O1xyXG59XHJcbi51bGNvbnRhaW5lciBidXR0b24gLnRleHQge1xyXG4gICAgLyogbWFyZ2luLWxlZnQ6IC01cHg7ICovXHJcbiAgICBsaW5lLWhlaWdodDogMjJweDtcclxuICAgIGhlaWdodDogMjJweDtcclxuICAgIHdpZHRoOiA2MHB4O1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxufVxyXG4uY2FyZXRjb250YWluZXJ7XHJcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICB3aWR0aDogMTBweDtcclxuICAgIGZsb2F0OiByaWdodDtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNlNGU0ZTQ7XHJcbiAgICBoZWlnaHQ6IDIwcHg7XHJcbn1cclxuLmNhcmV0e1xyXG4gICAgZmxvYXQ6IHJpZ2h0O1xyXG4gICAgbWFyZ2luOiA5cHggMnB4IDAgMDtcclxuICAgIGJvcmRlci10b3A6IDNweCBkYXNoZWQ7XHJcbiAgICBib3JkZXItcmlnaHQ6IDNweCBzb2xpZCB0cmFuc3BhcmVudDtcclxuICAgIGJvcmRlci1sZWZ0OiAzcHggc29saWQgdHJhbnNwYXJlbnQ7XHJcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICB3aWR0aDogMDtcclxuICAgIGhlaWdodDogMDtcclxuICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XHJcbn1cclxuLmRyb3BEb3duVWx7XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHRvcDogMHB4O1xyXG4gICAgbWluLXdpZHRoOiAxMjdweDtcclxuICAgIG1heC13aWR0aDogMTYwcHg7XHJcbiAgICB3aWR0aDogbWF4LWNvbnRlbnQ7XHJcbiAgICBwYWRkaW5nOiAwcHggMDtcclxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNjY2M7XHJcbiAgICBib3JkZXItcmFkaXVzOiAycHg7XHJcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xyXG4gICAgYm94LXNoYWRvdzogMCAxcHggOHB4IHJnYmEoMCwwLDAsMC4yKTtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmYWZhZmE7XHJcbiAgICB6LWluZGV4OiAxMDAwO1xyXG4gICAgbWF4LWhlaWdodDogMTM2cHg7XHJcbiAgICBvdmVyZmxvdzogYXV0bztcclxuICAgIHBhZGRpbmc6IDVweDtcclxuICAgIHBhZGRpbmctdG9wOiAycHg7XHJcbiAgICBwYWRkaW5nLWJvdHRvbTogMnB4O1xyXG4gICAgb3ZlcmZsb3cteDogaGlkZGVuO1xyXG59XHJcbi5kcm9wZG93bkxpe1xyXG4gICAgaGVpZ2h0OiAyMnB4O1xyXG4gICAgbWF4LXdpZHRoOiAxMDAlO1xyXG4gICAgZmxvYXQ6IGxlZnQ7XHJcbiAgICBtYXJnaW46IDAgOHB4O1xyXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgIGxpbmUtaGVpZ2h0OiAyMnB4O1xyXG4gICAgZm9udC1zaXplOiAxMnB4O1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgbGlzdC1zdHlsZTogbm9uZTtcclxufVxyXG4uZHJvcGRvd25MaTpob3ZlciB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBsaWdodGJsdWU7XHJcbn1cclxuLmRyb3Bkb3duTGkgaW1ne1xyXG4gICAgbWFyZ2luOiAzcHggMCAwIDRweDtcclxuICAgIHdpZHRoOiA0MHB4O1xyXG4gICAgaGVpZ2h0OiAxNXB4O1xyXG4gICAgZmxvYXQ6IGxlZnQ7XHJcbn1cclxuLnJvb21OYW1le1xyXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgd2lkdGg6IDUwcHg7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjZGRkO1xyXG4gICAgaGVpZ2h0OiAyMnB4O1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgbWFyZ2luLWxlZnQ6IDNweDtcclxuICAgIHBhZGRpbmctbGVmdDogNHB4O1xyXG59Il19 */"

/***/ }),

/***/ "./src/app/design-pop/panel/panel-propety/select-box/select-box.component.ts":
/*!***********************************************************************************!*\
  !*** ./src/app/design-pop/panel/panel-propety/select-box/select-box.component.ts ***!
  \***********************************************************************************/
/*! exports provided: SelectBoxComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SelectBoxComponent", function() { return SelectBoxComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let SelectBoxComponent = class SelectBoxComponent {
    constructor() {
        this.clickEvent = null;
        if (this.clickEvent != null) {
            document.removeEventListener('click', this.clickEvent);
        }
        document.addEventListener('click', this.clickEvent = (e) => {
            e.stopPropagation();
            this._selectData.isShow = false;
        });
    }
    set selectBox(data) {
        this._selectData = data;
    }
    get selectBox() { return this._selectData; }
    ngOnInit() {
    }
    showUl(e, slider) {
        e.stopPropagation();
        slider.isShow = true;
    }
};
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [Object])
], SelectBoxComponent.prototype, "selectBox", null);
SelectBoxComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[selectBox]',
        template: __webpack_require__(/*! raw-loader!./select-box.component.html */ "./node_modules/raw-loader/index.js!./src/app/design-pop/panel/panel-propety/select-box/select-box.component.html"),
        styles: [__webpack_require__(/*! ./select-box.component.css */ "./src/app/design-pop/panel/panel-propety/select-box/select-box.component.css")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
], SelectBoxComponent);



/***/ }),

/***/ "./src/app/design-pop/panel/panel-propety/select-box/select-box.module.ts":
/*!********************************************************************************!*\
  !*** ./src/app/design-pop/panel/panel-propety/select-box/select-box.module.ts ***!
  \********************************************************************************/
/*! exports provided: SelectBoxModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SelectBoxModule", function() { return SelectBoxModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _select_box_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./select-box.component */ "./src/app/design-pop/panel/panel-propety/select-box/select-box.component.ts");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");





let SelectBoxModule = class SelectBoxModule {
};
SelectBoxModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormsModule"]
        ],
        declarations: [_select_box_component__WEBPACK_IMPORTED_MODULE_3__["SelectBoxComponent"]],
        exports: [_select_box_component__WEBPACK_IMPORTED_MODULE_3__["SelectBoxComponent"]]
    })
], SelectBoxModule);



/***/ }),

/***/ "./src/app/design-pop/panel/panel-propety/slider-box/slider-box.component.css":
/*!************************************************************************************!*\
  !*** ./src/app/design-pop/panel/panel-propety/slider-box/slider-box.component.css ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".img-type{\r\n    position: relative;\r\n    /* height: 45px; */\r\n    display: inline-block;\r\n    width: calc(50% - 10px);\r\n    overflow: hidden;\r\n    margin: 0px 5px;\r\n}\r\n.img-type span {\r\n    /* height: 45px; */\r\n    display: inline-block;\r\n    line-height: 45px;\r\n    min-width: 55px;\r\n\r\n}\r\n/* .imgScroll{\r\n    width: 100%;\r\n    max-height: 120px;\r\n    overflow-x:hidden;\r\n    overflow-y:scroll; \r\n}\r\n.imgScroll::-webkit-scrollbar {\r\n    display: none;\r\n} */\r\n.imgContainer{\r\n    position: relative;\r\n    margin: auto;\r\n    width: 35px;\r\n    height: 35px;\r\n    border: #c3c3c3 solid 1px;\r\n    display: inline-block;\r\n    cursor: pointer;\r\n    border-radius: 2px;\r\n}\r\n.imgContainer:hover{\r\n    border-color: #55acee\r\n}\r\n.imgContainer img {\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n/*\r\n.border_out{\r\n    border: 1px solid orangered\r\n} */\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZGVzaWduLXBvcC9wYW5lbC9wYW5lbC1wcm9wZXR5L3NsaWRlci1ib3gvc2xpZGVyLWJveC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksa0JBQWtCO0lBQ2xCLGtCQUFrQjtJQUNsQixxQkFBcUI7SUFDckIsdUJBQXVCO0lBQ3ZCLGdCQUFnQjtJQUNoQixlQUFlO0FBQ25CO0FBQ0E7SUFDSSxrQkFBa0I7SUFDbEIscUJBQXFCO0lBQ3JCLGlCQUFpQjtJQUNqQixlQUFlOztBQUVuQjtBQUNBOzs7Ozs7OztHQVFHO0FBQ0g7SUFDSSxrQkFBa0I7SUFDbEIsWUFBWTtJQUNaLFdBQVc7SUFDWCxZQUFZO0lBQ1oseUJBQXlCO0lBQ3pCLHFCQUFxQjtJQUNyQixlQUFlO0lBQ2Ysa0JBQWtCO0FBQ3RCO0FBQ0E7SUFDSTtBQUNKO0FBQ0E7SUFDSSxXQUFXO0lBQ1gsWUFBWTtBQUNoQjtBQUNBOzs7R0FHRyIsImZpbGUiOiJzcmMvYXBwL2Rlc2lnbi1wb3AvcGFuZWwvcGFuZWwtcHJvcGV0eS9zbGlkZXItYm94L3NsaWRlci1ib3guY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5pbWctdHlwZXtcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgIC8qIGhlaWdodDogNDVweDsgKi9cclxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgIHdpZHRoOiBjYWxjKDUwJSAtIDEwcHgpO1xyXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgIG1hcmdpbjogMHB4IDVweDtcclxufVxyXG4uaW1nLXR5cGUgc3BhbiB7XHJcbiAgICAvKiBoZWlnaHQ6IDQ1cHg7ICovXHJcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICBsaW5lLWhlaWdodDogNDVweDtcclxuICAgIG1pbi13aWR0aDogNTVweDtcclxuXHJcbn1cclxuLyogLmltZ1Njcm9sbHtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgbWF4LWhlaWdodDogMTIwcHg7XHJcbiAgICBvdmVyZmxvdy14OmhpZGRlbjtcclxuICAgIG92ZXJmbG93LXk6c2Nyb2xsOyBcclxufVxyXG4uaW1nU2Nyb2xsOjotd2Via2l0LXNjcm9sbGJhciB7XHJcbiAgICBkaXNwbGF5OiBub25lO1xyXG59ICovXHJcbi5pbWdDb250YWluZXJ7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICBtYXJnaW46IGF1dG87XHJcbiAgICB3aWR0aDogMzVweDtcclxuICAgIGhlaWdodDogMzVweDtcclxuICAgIGJvcmRlcjogI2MzYzNjMyBzb2xpZCAxcHg7XHJcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICBib3JkZXItcmFkaXVzOiAycHg7XHJcbn1cclxuLmltZ0NvbnRhaW5lcjpob3ZlcntcclxuICAgIGJvcmRlci1jb2xvcjogIzU1YWNlZVxyXG59XHJcbi5pbWdDb250YWluZXIgaW1nIHtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgaGVpZ2h0OiAxMDAlO1xyXG59XHJcbi8qXHJcbi5ib3JkZXJfb3V0e1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgb3JhbmdlcmVkXHJcbn0gKi8iXX0= */"

/***/ }),

/***/ "./src/app/design-pop/panel/panel-propety/slider-box/slider-box.component.ts":
/*!***********************************************************************************!*\
  !*** ./src/app/design-pop/panel/panel-propety/slider-box/slider-box.component.ts ***!
  \***********************************************************************************/
/*! exports provided: SliderBoxComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SliderBoxComponent", function() { return SliderBoxComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");



let SliderBoxComponent = class SliderBoxComponent {
    constructor(popService) {
        this.popService = popService;
    }
    set sliderBox(data) {
        // console.log(data)
        for (let i = 0; i < data.length; i++) {
            for (let j = 0; j < data[i].img.length; j++) {
                data[i].img[j].newFunc = (e, params, list) => {
                    for (let i = 0; i < list.img.length; i++) {
                        list.img[i].borderClass = false;
                    }
                    params.borderClass = true;
                    list.FloorImg = params.path;
                    data[i].img[j].func(e, params, list);
                };
            }
        }
        this._sliderData = data;
        // console.log(data)
    }
    get sliderBox() { return this._sliderData; }
    ngOnInit() {
    }
    sendMaterial(e, img) {
        this.popService.getMaterial.emit(img);
    }
};
SliderBoxComponent.ctorParameters = () => [
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_2__["PopDivService"] }
];
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [Object])
], SliderBoxComponent.prototype, "sliderBox", null);
SliderBoxComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[sliderBox]',
        template: __webpack_require__(/*! raw-loader!./slider-box.component.html */ "./node_modules/raw-loader/index.js!./src/app/design-pop/panel/panel-propety/slider-box/slider-box.component.html"),
        styles: [__webpack_require__(/*! ./slider-box.component.css */ "./src/app/design-pop/panel/panel-propety/slider-box/slider-box.component.css")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_services_pop_div_service__WEBPACK_IMPORTED_MODULE_2__["PopDivService"]])
], SliderBoxComponent);



/***/ }),

/***/ "./src/app/design-pop/panel/panel-propety/slider-box/slider-box.module.ts":
/*!********************************************************************************!*\
  !*** ./src/app/design-pop/panel/panel-propety/slider-box/slider-box.module.ts ***!
  \********************************************************************************/
/*! exports provided: SliderBoxModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SliderBoxModule", function() { return SliderBoxModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _slider_box_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./slider-box.component */ "./src/app/design-pop/panel/panel-propety/slider-box/slider-box.component.ts");




let SliderBoxModule = class SliderBoxModule {
};
SliderBoxModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
        ],
        declarations: [_slider_box_component__WEBPACK_IMPORTED_MODULE_3__["SliderBoxComponent"]],
        exports: [_slider_box_component__WEBPACK_IMPORTED_MODULE_3__["SliderBoxComponent"]]
    })
], SliderBoxModule);



/***/ }),

/***/ "./src/app/design-pop/panel/panel-propety/text-box/text-box.component.css":
/*!********************************************************************************!*\
  !*** ./src/app/design-pop/panel/panel-propety/text-box/text-box.component.css ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".inputContainer{\r\n    position: relative;\r\n    height: 45px;\r\n    display: inline-block;\r\n    margin-bottom: 3px;\r\n    margin-left: 6px;\r\n    overflow: hidden;\r\n}\r\n.inputContainer .name{\r\n    position: absolute;\r\n    color: #808080;\r\n    font-size: 11px;\r\n    line-height: 11px;\r\n    left: 0;\r\n    right: 0;\r\n    font-weight: normal;\r\n    margin-top: 2px;\r\n    margin-bottom: 2px;\r\n    display: inline;\r\n    padding: .2em .6em .3em;\r\n    text-align: center;\r\n    white-space: nowrap;\r\n    vertical-align: baseline;\r\n    border-radius: .25em;\r\n}\r\n.danwei{\r\n    position: absolute;\r\n    /* margin-top: 4px; */\r\n    margin-right: 2px;\r\n    top: 2px;\r\n    right: 1px;\r\n    font-size: 11px;\r\n}\r\n.inputContainer input{\r\n    width: 58px;\r\n    height: 22px;\r\n    background: #fafafa;\r\n    border: 1px solid #c3c3c3;\r\n    border-radius: 2px;\r\n    color: #343a40;\r\n    display: block;\r\n    text-indent: 4px;\r\n    padding: 1px 0;\r\n    font-size: 11px;\r\n}\r\ninput[type=text]:disabled{\r\n    background-color: rgb(235,235,235)\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZGVzaWduLXBvcC9wYW5lbC9wYW5lbC1wcm9wZXR5L3RleHQtYm94L3RleHQtYm94LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxrQkFBa0I7SUFDbEIsWUFBWTtJQUNaLHFCQUFxQjtJQUNyQixrQkFBa0I7SUFDbEIsZ0JBQWdCO0lBQ2hCLGdCQUFnQjtBQUNwQjtBQUNBO0lBQ0ksa0JBQWtCO0lBQ2xCLGNBQWM7SUFDZCxlQUFlO0lBQ2YsaUJBQWlCO0lBQ2pCLE9BQU87SUFDUCxRQUFRO0lBQ1IsbUJBQW1CO0lBQ25CLGVBQWU7SUFDZixrQkFBa0I7SUFDbEIsZUFBZTtJQUNmLHVCQUF1QjtJQUN2QixrQkFBa0I7SUFDbEIsbUJBQW1CO0lBQ25CLHdCQUF3QjtJQUN4QixvQkFBb0I7QUFDeEI7QUFDQTtJQUNJLGtCQUFrQjtJQUNsQixxQkFBcUI7SUFDckIsaUJBQWlCO0lBQ2pCLFFBQVE7SUFDUixVQUFVO0lBQ1YsZUFBZTtBQUNuQjtBQUNBO0lBQ0ksV0FBVztJQUNYLFlBQVk7SUFDWixtQkFBbUI7SUFDbkIseUJBQXlCO0lBQ3pCLGtCQUFrQjtJQUNsQixjQUFjO0lBQ2QsY0FBYztJQUNkLGdCQUFnQjtJQUNoQixjQUFjO0lBQ2QsZUFBZTtBQUNuQjtBQUNBO0lBQ0k7QUFDSiIsImZpbGUiOiJzcmMvYXBwL2Rlc2lnbi1wb3AvcGFuZWwvcGFuZWwtcHJvcGV0eS90ZXh0LWJveC90ZXh0LWJveC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmlucHV0Q29udGFpbmVye1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgaGVpZ2h0OiA0NXB4O1xyXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgbWFyZ2luLWJvdHRvbTogM3B4O1xyXG4gICAgbWFyZ2luLWxlZnQ6IDZweDtcclxuICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbn1cclxuLmlucHV0Q29udGFpbmVyIC5uYW1le1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgY29sb3I6ICM4MDgwODA7XHJcbiAgICBmb250LXNpemU6IDExcHg7XHJcbiAgICBsaW5lLWhlaWdodDogMTFweDtcclxuICAgIGxlZnQ6IDA7XHJcbiAgICByaWdodDogMDtcclxuICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7XHJcbiAgICBtYXJnaW4tdG9wOiAycHg7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAycHg7XHJcbiAgICBkaXNwbGF5OiBpbmxpbmU7XHJcbiAgICBwYWRkaW5nOiAuMmVtIC42ZW0gLjNlbTtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XHJcbiAgICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XHJcbiAgICBib3JkZXItcmFkaXVzOiAuMjVlbTtcclxufVxyXG4uZGFud2Vpe1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgLyogbWFyZ2luLXRvcDogNHB4OyAqL1xyXG4gICAgbWFyZ2luLXJpZ2h0OiAycHg7XHJcbiAgICB0b3A6IDJweDtcclxuICAgIHJpZ2h0OiAxcHg7XHJcbiAgICBmb250LXNpemU6IDExcHg7XHJcbn1cclxuLmlucHV0Q29udGFpbmVyIGlucHV0e1xyXG4gICAgd2lkdGg6IDU4cHg7XHJcbiAgICBoZWlnaHQ6IDIycHg7XHJcbiAgICBiYWNrZ3JvdW5kOiAjZmFmYWZhO1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgI2MzYzNjMztcclxuICAgIGJvcmRlci1yYWRpdXM6IDJweDtcclxuICAgIGNvbG9yOiAjMzQzYTQwO1xyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICB0ZXh0LWluZGVudDogNHB4O1xyXG4gICAgcGFkZGluZzogMXB4IDA7XHJcbiAgICBmb250LXNpemU6IDExcHg7XHJcbn1cclxuaW5wdXRbdHlwZT10ZXh0XTpkaXNhYmxlZHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigyMzUsMjM1LDIzNSlcclxufSJdfQ== */"

/***/ }),

/***/ "./src/app/design-pop/panel/panel-propety/text-box/text-box.component.ts":
/*!*******************************************************************************!*\
  !*** ./src/app/design-pop/panel/panel-propety/text-box/text-box.component.ts ***!
  \*******************************************************************************/
/*! exports provided: TextBoxComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextBoxComponent", function() { return TextBoxComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let TextBoxComponent = class TextBoxComponent {
    constructor() { }
    set textBox(data) {
        this._textData = data;
    }
    get textBox() { return this._textData; }
    ngOnInit() {
    }
};
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [Object])
], TextBoxComponent.prototype, "textBox", null);
TextBoxComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[textBox]',
        template: __webpack_require__(/*! raw-loader!./text-box.component.html */ "./node_modules/raw-loader/index.js!./src/app/design-pop/panel/panel-propety/text-box/text-box.component.html"),
        styles: [__webpack_require__(/*! ./text-box.component.css */ "./src/app/design-pop/panel/panel-propety/text-box/text-box.component.css")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
], TextBoxComponent);



/***/ }),

/***/ "./src/app/design-pop/panel/panel-propety/text-box/text-box.module.ts":
/*!****************************************************************************!*\
  !*** ./src/app/design-pop/panel/panel-propety/text-box/text-box.module.ts ***!
  \****************************************************************************/
/*! exports provided: TextBoxModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextBoxModule", function() { return TextBoxModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
/* harmony import */ var _text_box_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./text-box.component */ "./src/app/design-pop/panel/panel-propety/text-box/text-box.component.ts");





let TextBoxModule = class TextBoxModule {
};
TextBoxModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"]
        ],
        declarations: [_text_box_component__WEBPACK_IMPORTED_MODULE_4__["TextBoxComponent"]],
        exports: [_text_box_component__WEBPACK_IMPORTED_MODULE_4__["TextBoxComponent"]]
    })
], TextBoxModule);



/***/ }),

/***/ "./src/app/design-pop/panel/panel-top/panel-top.component.css":
/*!********************************************************************!*\
  !*** ./src/app/design-pop/panel/panel-top/panel-top.component.css ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".topDiv{\r\n    height: 50px;\r\n    text-align: center;\r\n    display:flex; \r\n    justify-content:center;\r\n    /* display: inline-flex; */\r\n    /* position: absolute; */\r\n    /* margin: 10px auto; */\r\n    flex-wrap: wrap;\r\n    justify-content: center;\r\n    -moz-box-pack: center;\r\n    -webkit-moz-box-pack: center;\r\n    -webkit-box-pack: center;\r\n    z-index: 1;\r\n    /* background: #f5f5f5; */\r\n}\r\n\r\n.topBar {\r\n    position: absolute;\r\n    top: 0;\r\n    display:flex; \r\n    background: #f5f5f5;\r\n    border: 1px solid #e5e5e5;\r\n    /* width: 100%; */\r\n    height: 50px;\r\n    flex-wrap: wrap;\r\n    justify-content: center;\r\n    -moz-box-pack: center;\r\n    -webkit-moz-box-pack: center;\r\n    -webkit-box-pack: center;\r\n    padding-left: 0;\r\n    margin-bottom: 0;\r\n    list-style: none;\r\n    float: left;\r\n    border-top: 0;\r\n    z-index: 50;\r\n    border-radius: 0 0 4px 4px;\r\n}\r\n\r\n.icon {\r\n    width: 24px;\r\n    height: 24px;\r\n    vertical-align: -0.15em;\r\n    fill: #808080;\r\n    margin: 0 auto;\r\n}\r\n\r\n.icon1{\r\n    width: 15px;\r\n    height: 15px;\r\n    vertical-align: -0.15em;\r\n    fill: #808080;\r\n    margin: 0 10px 0 auto;\r\n}\r\n\r\n.btn {\r\n    background: transparent;\r\n    font-size: .7rem;\r\n    line-height: 12px;\r\n    color: #696969;\r\n    padding: 0;\r\n}\r\n\r\n.dropdown {\r\n    min-width: 40px;\r\n    padding: 0 5px;\r\n    margin: 0px 0 4px;\r\n}\r\n\r\n.dropdown-menu {\r\n    min-width: 8rem;\r\n    padding: 2px 0;\r\n    left: 5px;\r\n}\r\n\r\n.dropdown-item {\r\n    padding: .1rem .5rem;\r\n    cursor: pointer;\r\n}\r\n\r\n.itemSel{\r\n    width: 100%;\r\n    height: 24px;\r\n    font-size: .7rem;\r\n    position: relative;\r\n    /* background-color: red; */\r\n}\r\n\r\n.radioBox{\r\n    width: 150px;\r\n    position: absolute;\r\n    left: 100%;\r\n    padding: 5px;\r\n    display: none;\r\n    background-color: white;\r\n}\r\n\r\n#item:hover .radioBox{\r\n    display: block;\r\n}\r\n\r\n.radioIndex{\r\n    width: 100%;\r\n    height: 25px;\r\n    line-height: 25px;\r\n}\r\n\r\n.radioIndex:hover{\r\n    background-color:rgba(100, 202, 250, 0.8);\r\n    outline: none;\r\n}\r\n\r\n.dropdown-divider {\r\n    margin: .2rem 0;\r\n}\r\n\r\n.dropdown-menu.show {\r\n    display: none;\r\n}\r\n\r\n.dropdown:hover .dropdown-menu {\r\n    display: block;\r\n}\r\n\r\n.dropdown-toggle::after {\r\n    display: none;\r\n}\r\n\r\n.dropdown-item span{\r\n    display: block;\r\n    float: left;\r\n    height: 100%;\r\n    line-height: 24px;\r\n    font-size: 12px;\r\n    padding-left: 5px;\r\n    /* background-color: black; */\r\n}\r\n\r\n.dropdown-item input{\r\n    float: left;\r\n    margin-top: 6px;\r\n}\r\n\r\n.dropdown-item.img {\r\n    width: 33%;\r\n    float: left;\r\n    clear: none;\r\n}\r\n\r\n.dropdown-item img {\r\n    max-width: 100%;\r\n}\r\n\r\n.dropdown-item:hover,\r\n.dropdown-item:focus {\r\n    background-color: rgba(100, 202, 250, 0.8);\r\n    outline: none;\r\n}\r\n\r\n.dropdown-item.active,\r\n.dropdown-item:active {\r\n    /* background-color: #3e82f7; */\r\n    color: black;\r\n}\r\n\r\n.dropdown-item.disabled,\r\n.dropdown-item:disabled {\r\n    cursor: auto;\r\n    background: transparent;\r\n}\r\n\r\n.iconbox {\r\n    padding: 0;\r\n    width: 34px;\r\n    margin: 0 auto;\r\n    height: 32px;\r\n    border-radius: 4px;\r\n    border: 1px solid transparent;\r\n    padding-top: 3px;\r\n}\r\n\r\n.caret-bottom-r {\r\n    width: 0;\r\n    height: 0;\r\n    display: inline-block;\r\n    vertical-align: top;\r\n    margin-top: 20px;\r\n    margin-left: -2px;\r\n    margin-right: -2px;\r\n    border-bottom: 4px solid #808080;\r\n    border-left: 4px solid transparent;\r\n}\r\n\r\n.btn:hover .iconbox {\r\n    background: rgba(0, 206, 198, 0.08);\r\n    border: 1px solid rgb(0, 206, 198);\r\n    cursor: pointer;\r\n}\r\n\r\n.btn.disabled:hover .iconbox,\r\n.btn:disabled:hover .iconbox {\r\n    background: transparent;\r\n    border: 1px solid transparent;\r\n}\r\n\r\n#loadjson{\r\n    display: none;\r\n}\r\n\r\nlabel{\r\n    margin-bottom: 0;\r\n}\r\n\r\n#loadFile{\r\n    width: 100%;\r\n    height: 24px;\r\n    display: block;\r\n    font-size: .7rem;\r\n    padding: .1rem .5rem;\r\n}\r\n\r\n.saveFile{\r\n    width: 100%;\r\n    height: 24px;\r\n    display: block;\r\n    font-size: .7rem;\r\n    padding: .1rem .5rem; \r\n}\r\n\r\n.saveFile:hover{\r\n    text-decoration: none;\r\n    color:black;\r\n}\r\n\r\n/*# sourceMappingURL=data:application/json;base64, */"

/***/ }),

/***/ "./src/app/design-pop/panel/panel-top/panel-top.component.ts":
/*!*******************************************************************!*\
  !*** ./src/app/design-pop/panel/panel-top/panel-top.component.ts ***!
  \*******************************************************************/
/*! exports provided: PanelTopComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PanelTopComponent", function() { return PanelTopComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let PanelTopComponent = class PanelTopComponent {
    constructor() { }
    set panelTop(data) {
        // console.log(data)
        this._panelTop = data;
    }
    get panelTop() { return this._panelTop; }
    ngOnInit() {
    }
};
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [Object])
], PanelTopComponent.prototype, "panelTop", null);
PanelTopComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[panelTop]',
        template: __webpack_require__(/*! raw-loader!./panel-top.component.html */ "./node_modules/raw-loader/index.js!./src/app/design-pop/panel/panel-top/panel-top.component.html"),
        styles: [__webpack_require__(/*! ./panel-top.component.css */ "./src/app/design-pop/panel/panel-top/panel-top.component.css")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
], PanelTopComponent);



/***/ }),

/***/ "./src/app/design-pop/panel/panel-top/panel-top.module.ts":
/*!****************************************************************!*\
  !*** ./src/app/design-pop/panel/panel-top/panel-top.module.ts ***!
  \****************************************************************/
/*! exports provided: PanelTopModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PanelTopModule", function() { return PanelTopModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _panel_top_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./panel-top.component */ "./src/app/design-pop/panel/panel-top/panel-top.component.ts");
/* harmony import */ var _ng_bootstrap_ng_bootstrap__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ng-bootstrap/ng-bootstrap */ "./node_modules/@ng-bootstrap/ng-bootstrap/fesm2015/ng-bootstrap.js");





let PanelTopModule = class PanelTopModule {
};
PanelTopModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
            _ng_bootstrap_ng_bootstrap__WEBPACK_IMPORTED_MODULE_4__["NgbModule"]
            // PopDivModule
        ],
        declarations: [_panel_top_component__WEBPACK_IMPORTED_MODULE_3__["PanelTopComponent"]],
        exports: [_panel_top_component__WEBPACK_IMPORTED_MODULE_3__["PanelTopComponent"]]
    })
], PanelTopModule);



/***/ }),

/***/ "./src/app/design-pop/panel/panel.module.ts":
/*!**************************************************!*\
  !*** ./src/app/design-pop/panel/panel.module.ts ***!
  \**************************************************/
/*! exports provided: PanelModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PanelModule", function() { return PanelModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _ng_bootstrap_ng_bootstrap__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ng-bootstrap/ng-bootstrap */ "./node_modules/@ng-bootstrap/ng-bootstrap/fesm2015/ng-bootstrap.js");



// import { PanelBottomComponent } from './panel-bottom/panel-bottom.component';
// import { PopDivModule } from '../pop-div/pop-div.module';

let PanelModule = class PanelModule {
};
PanelModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
            // PanelTopModule,
            // PanelRightModule,
            _ng_bootstrap_ng_bootstrap__WEBPACK_IMPORTED_MODULE_3__["NgbModule"]
            // PopDivModule
        ],
        declarations: [],
        exports: []
    })
], PanelModule);



/***/ }),

/***/ "./src/app/design-pop/pop-div/pop-div.module.ts":
/*!******************************************************!*\
  !*** ./src/app/design-pop/pop-div/pop-div.module.ts ***!
  \******************************************************/
/*! exports provided: PopDivModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PopDivModule", function() { return PopDivModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
/* harmony import */ var _right_div_right_div_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./right-div/right-div.component */ "./src/app/design-pop/pop-div/right-div/right-div.component.ts");





let PopDivModule = class PopDivModule {
};
PopDivModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"]
        ],
        declarations: [_right_div_right_div_component__WEBPACK_IMPORTED_MODULE_4__["RightDivComponent"]],
        exports: [_right_div_right_div_component__WEBPACK_IMPORTED_MODULE_4__["RightDivComponent"]]
    })
], PopDivModule);



/***/ }),

/***/ "./src/app/design-pop/pop-div/right-div/right-div.component.css":
/*!**********************************************************************!*\
  !*** ./src/app/design-pop/pop-div/right-div/right-div.component.css ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "/* 右键弹出框的最外部容器 */\r\n.popDiv{\r\n    min-width: 110px;\r\n    background: #fafafa;\r\n    border: 1px solid #d6d6d6;\r\n    box-shadow: 0 2px 7px 0.16px rgba(52,58,64,.25);\r\n    border-radius: 4px;\r\n    color: #444b52;\r\n    font-size: 12px;\r\n    padding: 3px 0;\r\n    display: block;\r\n    position: absolute;\r\n    z-index: 99;\r\n}\r\n/*弹出框内部内容 */\r\n.popContent{\r\n    height: 25px;\r\n    line-height: 25px;\r\n    padding-left: 38px;\r\n    padding-right: 10px;\r\n    cursor: pointer;\r\n    position: relative;\r\n    font-size: 12px;\r\n    cursor: pointer;\r\n    text-align: center;\r\n}\r\n.popContent:hover {\r\n    background-color: rgba(85,172,238,.15)\r\n}\r\n.popContent input[type=file]{\r\n    display: none;\r\n}\r\n.popContent .icon {\r\n    width: 19px;\r\n    height: 19px;\r\n    position: absolute;\r\n    left: 10px;\r\n    fill: #555555;\r\n    top: 3px;\r\n}\r\n.popContent .else{\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n.popContent div{\r\n    overflow: hidden;\r\n    text-align: left;\r\n    text-overflow: ellipsis;\r\n    white-space: nowrap;\r\n}\r\n/* .popContent label{\r\n    overflow: hidden;\r\n    text-align: center;\r\n    text-overflow: ellipsis;\r\n    white-space: nowrap;\r\n} */\r\n.inputContainer{\r\n    position: absolute;\r\n    width: 132px;\r\n    top: -42px;\r\n    min-height: 30px;\r\n    margin-bottom: 5px;\r\n    background: #fafafa;\r\n    border: 1px solid #d6d6d6;\r\n    box-shadow: 0 2px 7px 0.16px rgba(52,58,64,.25);\r\n    border-radius: 4px;\r\n    color: #444b52;\r\n    font-size: 12px;\r\n    padding: 3px 0;\r\n    padding-right: 3px;\r\n}\r\n.inputContainer .card{\r\n    margin: 3px;\r\n    display: flex;\r\n    border: none;\r\n    background: #fafafa;\r\n    /* align-items: center; */\r\n    justify-content: space-around;\r\n}\r\n.wall {\r\n    width: auto;\r\n    line-height: 0;\r\n    font-size: 12px;\r\n    color: gray;\r\n    display: flex;\r\n    align-items: center;\r\n}\r\n.wall span {\r\n    font-size: 12px;\r\n    margin-right: 5px;\r\n    margin-left: 3px;\r\n    vertical-align: super;\r\n}\r\n.wall .drop-icon{\r\n    display: block;\r\n    border: 1px solid #c3c3c3;\r\n    border-radius: 0 5px 5px 0;\r\n    width: 20px;\r\n    float: right;\r\n    background-color: #e4e4e4;\r\n    margin-top: 1px;\r\n    height: 20px;\r\n    margin-left: -20px;\r\n}\r\n.wall select{\r\n    width: 70px;\r\n    border-radius: 5px;\r\n    background: none;\r\n    z-index: 2;\r\n    /* border: none; */\r\n}\r\n.wall select::-ms-expand { display: none; }\r\n.wall input[type=text] {\r\n    width: 70px;\r\n    border: 1px solid lightskyblue;\r\n    border-radius: 5px;\r\n    background: none;\r\n    z-index: 2;\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZGVzaWduLXBvcC9wb3AtZGl2L3JpZ2h0LWRpdi9yaWdodC1kaXYuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxnQkFBZ0I7QUFDaEI7SUFDSSxnQkFBZ0I7SUFDaEIsbUJBQW1CO0lBQ25CLHlCQUF5QjtJQUN6QiwrQ0FBK0M7SUFDL0Msa0JBQWtCO0lBQ2xCLGNBQWM7SUFDZCxlQUFlO0lBQ2YsY0FBYztJQUNkLGNBQWM7SUFDZCxrQkFBa0I7SUFDbEIsV0FBVztBQUNmO0FBQ0EsV0FBVztBQUNYO0lBQ0ksWUFBWTtJQUNaLGlCQUFpQjtJQUNqQixrQkFBa0I7SUFDbEIsbUJBQW1CO0lBQ25CLGVBQWU7SUFDZixrQkFBa0I7SUFDbEIsZUFBZTtJQUNmLGVBQWU7SUFDZixrQkFBa0I7QUFDdEI7QUFDQTtJQUNJO0FBQ0o7QUFDQTtJQUNJLGFBQWE7QUFDakI7QUFDQTtJQUNJLFdBQVc7SUFDWCxZQUFZO0lBQ1osa0JBQWtCO0lBQ2xCLFVBQVU7SUFDVixhQUFhO0lBQ2IsUUFBUTtBQUNaO0FBQ0E7SUFDSSxXQUFXO0lBQ1gsWUFBWTtBQUNoQjtBQUNBO0lBQ0ksZ0JBQWdCO0lBQ2hCLGdCQUFnQjtJQUNoQix1QkFBdUI7SUFDdkIsbUJBQW1CO0FBQ3ZCO0FBQ0E7Ozs7O0dBS0c7QUFFSDtJQUNJLGtCQUFrQjtJQUNsQixZQUFZO0lBQ1osVUFBVTtJQUNWLGdCQUFnQjtJQUNoQixrQkFBa0I7SUFDbEIsbUJBQW1CO0lBQ25CLHlCQUF5QjtJQUN6QiwrQ0FBK0M7SUFDL0Msa0JBQWtCO0lBQ2xCLGNBQWM7SUFDZCxlQUFlO0lBQ2YsY0FBYztJQUNkLGtCQUFrQjtBQUN0QjtBQUNBO0lBQ0ksV0FBVztJQUNYLGFBQWE7SUFDYixZQUFZO0lBQ1osbUJBQW1CO0lBQ25CLHlCQUF5QjtJQUN6Qiw2QkFBNkI7QUFDakM7QUFDQTtJQUNJLFdBQVc7SUFDWCxjQUFjO0lBQ2QsZUFBZTtJQUNmLFdBQVc7SUFDWCxhQUFhO0lBQ2IsbUJBQW1CO0FBQ3ZCO0FBQ0E7SUFDSSxlQUFlO0lBQ2YsaUJBQWlCO0lBQ2pCLGdCQUFnQjtJQUNoQixxQkFBcUI7QUFDekI7QUFDQTtJQUNJLGNBQWM7SUFDZCx5QkFBeUI7SUFDekIsMEJBQTBCO0lBQzFCLFdBQVc7SUFDWCxZQUFZO0lBQ1oseUJBQXlCO0lBQ3pCLGVBQWU7SUFDZixZQUFZO0lBQ1osa0JBQWtCO0FBQ3RCO0FBQ0E7SUFDSSxXQUFXO0lBQ1gsa0JBQWtCO0lBQ2xCLGdCQUFnQjtJQUNoQixVQUFVO0lBQ1Ysa0JBQWtCO0FBQ3RCO0FBQ0EsMkJBQTJCLGFBQWEsRUFBRTtBQUUxQztJQUNJLFdBQVc7SUFDWCw4QkFBOEI7SUFDOUIsa0JBQWtCO0lBQ2xCLGdCQUFnQjtJQUNoQixVQUFVO0FBQ2QiLCJmaWxlIjoic3JjL2FwcC9kZXNpZ24tcG9wL3BvcC1kaXYvcmlnaHQtZGl2L3JpZ2h0LWRpdi5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLyog5Y+z6ZSu5by55Ye65qGG55qE5pyA5aSW6YOo5a655ZmoICovXHJcbi5wb3BEaXZ7XHJcbiAgICBtaW4td2lkdGg6IDExMHB4O1xyXG4gICAgYmFja2dyb3VuZDogI2ZhZmFmYTtcclxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNkNmQ2ZDY7XHJcbiAgICBib3gtc2hhZG93OiAwIDJweCA3cHggMC4xNnB4IHJnYmEoNTIsNTgsNjQsLjI1KTtcclxuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcclxuICAgIGNvbG9yOiAjNDQ0YjUyO1xyXG4gICAgZm9udC1zaXplOiAxMnB4O1xyXG4gICAgcGFkZGluZzogM3B4IDA7XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHotaW5kZXg6IDk5O1xyXG59XHJcbi8q5by55Ye65qGG5YaF6YOo5YaF5a65ICovXHJcbi5wb3BDb250ZW50e1xyXG4gICAgaGVpZ2h0OiAyNXB4O1xyXG4gICAgbGluZS1oZWlnaHQ6IDI1cHg7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDM4cHg7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiAxMHB4O1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgZm9udC1zaXplOiAxMnB4O1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG59XHJcbi5wb3BDb250ZW50OmhvdmVyIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoODUsMTcyLDIzOCwuMTUpXHJcbn1cclxuLnBvcENvbnRlbnQgaW5wdXRbdHlwZT1maWxlXXtcclxuICAgIGRpc3BsYXk6IG5vbmU7XHJcbn1cclxuLnBvcENvbnRlbnQgLmljb24ge1xyXG4gICAgd2lkdGg6IDE5cHg7XHJcbiAgICBoZWlnaHQ6IDE5cHg7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICBsZWZ0OiAxMHB4O1xyXG4gICAgZmlsbDogIzU1NTU1NTtcclxuICAgIHRvcDogM3B4O1xyXG59XHJcbi5wb3BDb250ZW50IC5lbHNle1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBoZWlnaHQ6IDEwMCU7XHJcbn1cclxuLnBvcENvbnRlbnQgZGl2e1xyXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgIHRleHQtYWxpZ246IGxlZnQ7XHJcbiAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcclxuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XHJcbn1cclxuLyogLnBvcENvbnRlbnQgbGFiZWx7XHJcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XHJcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xyXG59ICovXHJcblxyXG4uaW5wdXRDb250YWluZXJ7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICB3aWR0aDogMTMycHg7XHJcbiAgICB0b3A6IC00MnB4O1xyXG4gICAgbWluLWhlaWdodDogMzBweDtcclxuICAgIG1hcmdpbi1ib3R0b206IDVweDtcclxuICAgIGJhY2tncm91bmQ6ICNmYWZhZmE7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjZDZkNmQ2O1xyXG4gICAgYm94LXNoYWRvdzogMCAycHggN3B4IDAuMTZweCByZ2JhKDUyLDU4LDY0LC4yNSk7XHJcbiAgICBib3JkZXItcmFkaXVzOiA0cHg7XHJcbiAgICBjb2xvcjogIzQ0NGI1MjtcclxuICAgIGZvbnQtc2l6ZTogMTJweDtcclxuICAgIHBhZGRpbmc6IDNweCAwO1xyXG4gICAgcGFkZGluZy1yaWdodDogM3B4O1xyXG59XHJcbi5pbnB1dENvbnRhaW5lciAuY2FyZHtcclxuICAgIG1hcmdpbjogM3B4O1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGJvcmRlcjogbm9uZTtcclxuICAgIGJhY2tncm91bmQ6ICNmYWZhZmE7XHJcbiAgICAvKiBhbGlnbi1pdGVtczogY2VudGVyOyAqL1xyXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XHJcbn1cclxuLndhbGwge1xyXG4gICAgd2lkdGg6IGF1dG87XHJcbiAgICBsaW5lLWhlaWdodDogMDtcclxuICAgIGZvbnQtc2l6ZTogMTJweDtcclxuICAgIGNvbG9yOiBncmF5O1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbn1cclxuLndhbGwgc3BhbiB7XHJcbiAgICBmb250LXNpemU6IDEycHg7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDVweDtcclxuICAgIG1hcmdpbi1sZWZ0OiAzcHg7XHJcbiAgICB2ZXJ0aWNhbC1hbGlnbjogc3VwZXI7XHJcbn1cclxuLndhbGwgLmRyb3AtaWNvbntcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgI2MzYzNjMztcclxuICAgIGJvcmRlci1yYWRpdXM6IDAgNXB4IDVweCAwO1xyXG4gICAgd2lkdGg6IDIwcHg7XHJcbiAgICBmbG9hdDogcmlnaHQ7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTRlNGU0O1xyXG4gICAgbWFyZ2luLXRvcDogMXB4O1xyXG4gICAgaGVpZ2h0OiAyMHB4O1xyXG4gICAgbWFyZ2luLWxlZnQ6IC0yMHB4O1xyXG59XHJcbi53YWxsIHNlbGVjdHtcclxuICAgIHdpZHRoOiA3MHB4O1xyXG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xyXG4gICAgYmFja2dyb3VuZDogbm9uZTtcclxuICAgIHotaW5kZXg6IDI7XHJcbiAgICAvKiBib3JkZXI6IG5vbmU7ICovXHJcbn1cclxuLndhbGwgc2VsZWN0OjotbXMtZXhwYW5kIHsgZGlzcGxheTogbm9uZTsgfSBcclxuXHJcbi53YWxsIGlucHV0W3R5cGU9dGV4dF0ge1xyXG4gICAgd2lkdGg6IDcwcHg7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCBsaWdodHNreWJsdWU7XHJcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XHJcbiAgICBiYWNrZ3JvdW5kOiBub25lO1xyXG4gICAgei1pbmRleDogMjtcclxufSJdfQ== */"

/***/ }),

/***/ "./src/app/design-pop/pop-div/right-div/right-div.component.ts":
/*!*********************************************************************!*\
  !*** ./src/app/design-pop/pop-div/right-div/right-div.component.ts ***!
  \*********************************************************************/
/*! exports provided: RightDivComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RightDivComponent", function() { return RightDivComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let RightDivComponent = class RightDivComponent {
    constructor() {
    }
    set rightDiv(datas) {
        // console.log(datas)    
        if (datas == undefined) {
            this._divData = null;
        }
        else {
            if (datas) {
                // 处理点击屏幕边缘时，弹出框的位置处理
                if (window.innerWidth - datas.position.x < 137) {
                    datas.position.x = window.innerWidth - 137;
                }
                if (window.innerHeight - datas.position.y < 25 * datas.body.length + 8) {
                    datas.position.y = window.innerHeight - 25 * datas.body.length - 10;
                }
                else if (datas.position.y < 42) {
                    datas.position.y = 42;
                }
                // 根据鼠标坐标确定弹出框的位置
                this.popStyle = {
                    "top": datas.position.y + 'px',
                    "left": datas.position.x + 'px'
                };
                // this._divData.isWall = datas.isWall;
                // 遍历弹出框主题内容，重写点击事件，判断弹出框的显示和隐藏
                for (let i = 0; i < datas.body.length; i++) {
                    datas.body[i].newFunc = (e) => {
                        datas.body[i].func(e);
                        if (datas.body[i].isShow == false) {
                            this._divData = null;
                        }
                    };
                }
            }
        }
        this._divData = datas;
    }
    get rightDiv() { return this._divData; }
    ngOnInit() {
    }
};
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [Object])
], RightDivComponent.prototype, "rightDiv", null);
RightDivComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[rightDiv]',
        template: __webpack_require__(/*! raw-loader!./right-div.component.html */ "./node_modules/raw-loader/index.js!./src/app/design-pop/pop-div/right-div/right-div.component.html"),
        styles: [__webpack_require__(/*! ./right-div.component.css */ "./src/app/design-pop/pop-div/right-div/right-div.component.css")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
], RightDivComponent);

// export interface  Pos{
//   x:number,
//   y:number
// }
// export interface Pop{
//   icon:any,
//   text:string,
//   func:any,
//   position:Pos
// }


/***/ }),

/***/ "./src/app/design-pop/test/test.component.css":
/*!****************************************************!*\
  !*** ./src/app/design-pop/test/test.component.css ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".test_box{\r\n    width: 150px;\r\n    height: auto;\r\n    border: 1px solid #e5e5e5;\r\n    border-radius: 5px;\r\n    position: absolute;\r\n    z-index: 60;\r\n}\r\n.test_box input{\r\n    width: 80px;\r\n}\r\n.button{\r\n    float: right;\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZGVzaWduLXBvcC90ZXN0L3Rlc3QuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLFlBQVk7SUFDWixZQUFZO0lBQ1oseUJBQXlCO0lBQ3pCLGtCQUFrQjtJQUNsQixrQkFBa0I7SUFDbEIsV0FBVztBQUNmO0FBQ0E7SUFDSSxXQUFXO0FBQ2Y7QUFDQTtJQUNJLFlBQVk7QUFDaEIiLCJmaWxlIjoic3JjL2FwcC9kZXNpZ24tcG9wL3Rlc3QvdGVzdC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLnRlc3RfYm94e1xyXG4gICAgd2lkdGg6IDE1MHB4O1xyXG4gICAgaGVpZ2h0OiBhdXRvO1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgI2U1ZTVlNTtcclxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHotaW5kZXg6IDYwO1xyXG59XHJcbi50ZXN0X2JveCBpbnB1dHtcclxuICAgIHdpZHRoOiA4MHB4O1xyXG59XHJcbi5idXR0b257XHJcbiAgICBmbG9hdDogcmlnaHQ7XHJcbn0iXX0= */"

/***/ }),

/***/ "./src/app/design-pop/test/test.component.ts":
/*!***************************************************!*\
  !*** ./src/app/design-pop/test/test.component.ts ***!
  \***************************************************/
/*! exports provided: TestComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TestComponent", function() { return TestComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let TestComponent = class TestComponent {
    constructor() { }
    set test(data) {
        // console.log(data)
        if (data != null) {
            if (data.pos != null) {
                this.style = {
                    "left": data.pos.x + 'px',
                    "top": data.pos.y + 'px'
                };
            }
            else {
                this.style = {
                    "display": "none"
                };
            }
            this._testData = data;
        }
    }
    get test() { return this._testData; }
    ngOnInit() {
    }
};
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [Object])
], TestComponent.prototype, "test", null);
TestComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[test]',
        template: __webpack_require__(/*! raw-loader!./test.component.html */ "./node_modules/raw-loader/index.js!./src/app/design-pop/test/test.component.html"),
        styles: [__webpack_require__(/*! ./test.component.css */ "./src/app/design-pop/test/test.component.css")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
], TestComponent);



/***/ }),

/***/ "./src/app/design-pop/test/test.module.ts":
/*!************************************************!*\
  !*** ./src/app/design-pop/test/test.module.ts ***!
  \************************************************/
/*! exports provided: TestModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TestModule", function() { return TestModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
/* harmony import */ var _test_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./test.component */ "./src/app/design-pop/test/test.component.ts");





let TestModule = class TestModule {
};
TestModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"]
        ],
        declarations: [_test_component__WEBPACK_IMPORTED_MODULE_4__["TestComponent"]],
        exports: [_test_component__WEBPACK_IMPORTED_MODULE_4__["TestComponent"]]
    })
], TestModule);



/***/ }),

/***/ "./src/app/design-pop/three-tools/three-tools.component.css":
/*!******************************************************************!*\
  !*** ./src/app/design-pop/three-tools/three-tools.component.css ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".three_tools{\r\n    width: auto;\r\n    height: 40px;\r\n    border-radius: 10px;\r\n    position: absolute;\r\n    top: 50px;\r\n    right: 100px;\r\n    z-index: 2;\r\n    background-color: rgba(0, 0, 0, 0.7)\r\n}\r\n.item-tool{\r\n    display: inline-flex;\r\n    height: 40px;\r\n    padding: 0 5px;\r\n    border-radius: 10px;\r\n    /* width: 40px; */\r\n}\r\n.item-tool:hover{\r\n    background-color: black;\r\n}\r\n.btn{\r\n    width: 40px;\r\n    height: 40px;\r\n    padding: 0;\r\n    background-color: transparent;\r\n}\r\n.icon{\r\n    width: 30px;\r\n    height: 30px;\r\n    fill: #fff;\r\n    margin: 5px;\r\n}\r\n.name{\r\n    display: inline-block;\r\n    height: 40px;\r\n    line-height: 40px;\r\n    font-size: 16px;\r\n    color: #fff;\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZGVzaWduLXBvcC90aHJlZS10b29scy90aHJlZS10b29scy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksV0FBVztJQUNYLFlBQVk7SUFDWixtQkFBbUI7SUFDbkIsa0JBQWtCO0lBQ2xCLFNBQVM7SUFDVCxZQUFZO0lBQ1osVUFBVTtJQUNWO0FBQ0o7QUFDQTtJQUNJLG9CQUFvQjtJQUNwQixZQUFZO0lBQ1osY0FBYztJQUNkLG1CQUFtQjtJQUNuQixpQkFBaUI7QUFDckI7QUFDQTtJQUNJLHVCQUF1QjtBQUMzQjtBQUNBO0lBQ0ksV0FBVztJQUNYLFlBQVk7SUFDWixVQUFVO0lBQ1YsNkJBQTZCO0FBQ2pDO0FBQ0E7SUFDSSxXQUFXO0lBQ1gsWUFBWTtJQUNaLFVBQVU7SUFDVixXQUFXO0FBQ2Y7QUFDQTtJQUNJLHFCQUFxQjtJQUNyQixZQUFZO0lBQ1osaUJBQWlCO0lBQ2pCLGVBQWU7SUFDZixXQUFXO0FBQ2YiLCJmaWxlIjoic3JjL2FwcC9kZXNpZ24tcG9wL3RocmVlLXRvb2xzL3RocmVlLXRvb2xzLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIudGhyZWVfdG9vbHN7XHJcbiAgICB3aWR0aDogYXV0bztcclxuICAgIGhlaWdodDogNDBweDtcclxuICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICB0b3A6IDUwcHg7XHJcbiAgICByaWdodDogMTAwcHg7XHJcbiAgICB6LWluZGV4OiAyO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjcpXHJcbn1cclxuLml0ZW0tdG9vbHtcclxuICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xyXG4gICAgaGVpZ2h0OiA0MHB4O1xyXG4gICAgcGFkZGluZzogMCA1cHg7XHJcbiAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xyXG4gICAgLyogd2lkdGg6IDQwcHg7ICovXHJcbn1cclxuLml0ZW0tdG9vbDpob3ZlcntcclxuICAgIGJhY2tncm91bmQtY29sb3I6IGJsYWNrO1xyXG59XHJcbi5idG57XHJcbiAgICB3aWR0aDogNDBweDtcclxuICAgIGhlaWdodDogNDBweDtcclxuICAgIHBhZGRpbmc6IDA7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcclxufVxyXG4uaWNvbntcclxuICAgIHdpZHRoOiAzMHB4O1xyXG4gICAgaGVpZ2h0OiAzMHB4O1xyXG4gICAgZmlsbDogI2ZmZjtcclxuICAgIG1hcmdpbjogNXB4O1xyXG59XHJcbi5uYW1le1xyXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgaGVpZ2h0OiA0MHB4O1xyXG4gICAgbGluZS1oZWlnaHQ6IDQwcHg7XHJcbiAgICBmb250LXNpemU6IDE2cHg7XHJcbiAgICBjb2xvcjogI2ZmZjtcclxufSJdfQ== */"

/***/ }),

/***/ "./src/app/design-pop/three-tools/three-tools.component.ts":
/*!*****************************************************************!*\
  !*** ./src/app/design-pop/three-tools/three-tools.component.ts ***!
  \*****************************************************************/
/*! exports provided: ThreeToolsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ThreeToolsComponent", function() { return ThreeToolsComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let ThreeToolsComponent = class ThreeToolsComponent {
    constructor() { }
    set threeTools(data) {
        this._threeTools = [
            {
                name: "自定义",
                hover: "自定义",
                icon: '#icon-zidingyi',
                func: (e) => {
                    console.log('name' + 1);
                }
            },
            {
                hover: "旋转",
                icon: '#icon-xuanzhuan',
                func: (e) => {
                    console.log('name' + 1);
                }
            },
            {
                hover: "翻转",
                icon: '#icon-fanzhuan',
                func: (e) => {
                    console.log('name' + 1);
                }
            },
            {
                hover: "替换",
                icon: '#icon-tihuan',
                func: (e) => {
                    console.log('name' + 1);
                }
            },
            {
                hover: "删除",
                icon: '#icon-shanchu',
                func: (e) => {
                    console.log('name' + 1);
                }
            },
            {
                hover: "信息",
                icon: '#icon-110',
                func: (e) => {
                    console.log('name' + 1);
                }
            }
        ];
    }
    get threeTools() { return this._threeTools; }
    ngOnInit() {
    }
};
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [Object])
], ThreeToolsComponent.prototype, "threeTools", null);
ThreeToolsComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[threeTools]',
        template: __webpack_require__(/*! raw-loader!./three-tools.component.html */ "./node_modules/raw-loader/index.js!./src/app/design-pop/three-tools/three-tools.component.html"),
        styles: [__webpack_require__(/*! ./three-tools.component.css */ "./src/app/design-pop/three-tools/three-tools.component.css")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
], ThreeToolsComponent);



/***/ }),

/***/ "./src/app/design-pop/three-tools/three-tools.module.ts":
/*!**************************************************************!*\
  !*** ./src/app/design-pop/three-tools/three-tools.module.ts ***!
  \**************************************************************/
/*! exports provided: ThreeToolsModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ThreeToolsModule", function() { return ThreeToolsModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _three_tools_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./three-tools.component */ "./src/app/design-pop/three-tools/three-tools.component.ts");
/* harmony import */ var _ng_bootstrap_ng_bootstrap__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ng-bootstrap/ng-bootstrap */ "./node_modules/@ng-bootstrap/ng-bootstrap/fesm2015/ng-bootstrap.js");





let ThreeToolsModule = class ThreeToolsModule {
};
ThreeToolsModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
            _ng_bootstrap_ng_bootstrap__WEBPACK_IMPORTED_MODULE_4__["NgbModule"]
        ],
        declarations: [_three_tools_component__WEBPACK_IMPORTED_MODULE_3__["ThreeToolsComponent"]],
        exports: [_three_tools_component__WEBPACK_IMPORTED_MODULE_3__["ThreeToolsComponent"]]
    })
], ThreeToolsModule);



/***/ }),

/***/ "./src/app/design-pop/toggle-window/toggle-window.component.css":
/*!**********************************************************************!*\
  !*** ./src/app/design-pop/toggle-window/toggle-window.component.css ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".D2_3D_container{\r\n    width: 1px;\r\n    /* height: 200px; */\r\n    position: absolute;\r\n    top: 0;\r\n    right: 200px;\r\n    /* /* border-radius: 2px; */\r\n    border-left: 1px solid #ddd;\r\n    background-color: #ddd;\r\n    z-index: 40;\r\n}\r\n/*\r\n.window_container{\r\n    width: 200px;\r\n    height: 100%;\r\n    position: absolute;\r\n    left: 0;\r\n    top: 0;\r\n} */\r\n.toggle_window{\r\n    /* width: 20px;\r\n    height: 100%; */\r\n    background-color: #f5f5f5;\r\n    /* float: left; */\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0px;\r\n}\r\n.reduce{\r\n    position: absolute;\r\n    bottom: 0;\r\n}\r\n.enlarge{\r\n    position: absolute;\r\n    bottom: 25px;\r\n}\r\n.resize{\r\n    position: absolute;\r\n    right: -20px;\r\n    bottom: 0;\r\n    cursor: sw-resize !important;\r\n}\r\n.iconbox {\r\n    padding: 0;\r\n    width: 20px;\r\n    margin: 0 auto;\r\n    height: 20px;\r\n    border-radius: 4px;\r\n    /* transform: rotate(90deg); */\r\n    /* border: 1px solid transparent; */\r\n    /* padding-top: 3px; */\r\n}\r\n.caret-bottom-r {\r\n    width: 0;\r\n    height: 0;\r\n    display: inline-block;\r\n    vertical-align: top;\r\n    margin-top: 20px;\r\n    margin-left: -2px;\r\n    margin-right: -2px;\r\n    border-bottom: 4px solid #808080;\r\n    border-left: 4px solid transparent;\r\n}\r\n/* .btn:hover .iconbox {\r\n    background: rgba(0, 206, 198, 0.08);\r\n    border: 1px solid rgb(0, 206, 198);\r\n    cursor: pointer;\r\n} */\r\n.btn.disabled:hover .iconbox,\r\n.btn:disabled:hover .iconbox {\r\n    background: transparent;\r\n    border: 1px solid transparent;\r\n}\r\n.btn {\r\n    background: transparent;\r\n    font-size: .7rem;\r\n    line-height: 12px;\r\n    color: #696969;\r\n    padding: 0;\r\n    width: 20px;\r\n    height: 20px;\r\n}\r\n.icon {\r\n    width: 20px;\r\n    height: 20px;\r\n    vertical-align: -0.15em;\r\n    fill: #808080;\r\n    margin: 0 auto;\r\n}\r\n.icon_resize{\r\n    -webkit-transform: rotate(90deg);\r\n            transform: rotate(90deg)\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZGVzaWduLXBvcC90b2dnbGUtd2luZG93L3RvZ2dsZS13aW5kb3cuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLFVBQVU7SUFDVixtQkFBbUI7SUFDbkIsa0JBQWtCO0lBQ2xCLE1BQU07SUFDTixZQUFZO0lBQ1osMkJBQTJCO0lBQzNCLDJCQUEyQjtJQUMzQixzQkFBc0I7SUFDdEIsV0FBVztBQUNmO0FBQ0E7Ozs7Ozs7R0FPRztBQUNIO0lBQ0k7bUJBQ2U7SUFDZix5QkFBeUI7SUFDekIsaUJBQWlCO0lBQ2pCLGtCQUFrQjtJQUNsQixNQUFNO0lBQ04sU0FBUztBQUNiO0FBQ0E7SUFDSSxrQkFBa0I7SUFDbEIsU0FBUztBQUNiO0FBQ0E7SUFDSSxrQkFBa0I7SUFDbEIsWUFBWTtBQUNoQjtBQUNBO0lBQ0ksa0JBQWtCO0lBQ2xCLFlBQVk7SUFDWixTQUFTO0lBQ1QsNEJBQTRCO0FBQ2hDO0FBQ0E7SUFDSSxVQUFVO0lBQ1YsV0FBVztJQUNYLGNBQWM7SUFDZCxZQUFZO0lBQ1osa0JBQWtCO0lBQ2xCLDhCQUE4QjtJQUM5QixtQ0FBbUM7SUFDbkMsc0JBQXNCO0FBQzFCO0FBRUE7SUFDSSxRQUFRO0lBQ1IsU0FBUztJQUNULHFCQUFxQjtJQUNyQixtQkFBbUI7SUFDbkIsZ0JBQWdCO0lBQ2hCLGlCQUFpQjtJQUNqQixrQkFBa0I7SUFDbEIsZ0NBQWdDO0lBQ2hDLGtDQUFrQztBQUN0QztBQUVBOzs7O0dBSUc7QUFFSDs7SUFFSSx1QkFBdUI7SUFDdkIsNkJBQTZCO0FBQ2pDO0FBQ0E7SUFDSSx1QkFBdUI7SUFDdkIsZ0JBQWdCO0lBQ2hCLGlCQUFpQjtJQUNqQixjQUFjO0lBQ2QsVUFBVTtJQUNWLFdBQVc7SUFDWCxZQUFZO0FBQ2hCO0FBQ0E7SUFDSSxXQUFXO0lBQ1gsWUFBWTtJQUNaLHVCQUF1QjtJQUN2QixhQUFhO0lBQ2IsY0FBYztBQUNsQjtBQUNBO0lBQ0ksZ0NBQXVCO1lBQXZCO0FBQ0oiLCJmaWxlIjoic3JjL2FwcC9kZXNpZ24tcG9wL3RvZ2dsZS13aW5kb3cvdG9nZ2xlLXdpbmRvdy5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLkQyXzNEX2NvbnRhaW5lcntcclxuICAgIHdpZHRoOiAxcHg7XHJcbiAgICAvKiBoZWlnaHQ6IDIwMHB4OyAqL1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgdG9wOiAwO1xyXG4gICAgcmlnaHQ6IDIwMHB4O1xyXG4gICAgLyogLyogYm9yZGVyLXJhZGl1czogMnB4OyAqL1xyXG4gICAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAjZGRkO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2RkZDtcclxuICAgIHotaW5kZXg6IDQwO1xyXG59XHJcbi8qXHJcbi53aW5kb3dfY29udGFpbmVye1xyXG4gICAgd2lkdGg6IDIwMHB4O1xyXG4gICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgbGVmdDogMDtcclxuICAgIHRvcDogMDtcclxufSAqL1xyXG4udG9nZ2xlX3dpbmRvd3tcclxuICAgIC8qIHdpZHRoOiAyMHB4O1xyXG4gICAgaGVpZ2h0OiAxMDAlOyAqL1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2Y1ZjVmNTtcclxuICAgIC8qIGZsb2F0OiBsZWZ0OyAqL1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgdG9wOiAwO1xyXG4gICAgbGVmdDogMHB4O1xyXG59XHJcbi5yZWR1Y2V7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICBib3R0b206IDA7XHJcbn1cclxuLmVubGFyZ2V7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICBib3R0b206IDI1cHg7XHJcbn1cclxuLnJlc2l6ZXtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHJpZ2h0OiAtMjBweDtcclxuICAgIGJvdHRvbTogMDtcclxuICAgIGN1cnNvcjogc3ctcmVzaXplICFpbXBvcnRhbnQ7XHJcbn1cclxuLmljb25ib3gge1xyXG4gICAgcGFkZGluZzogMDtcclxuICAgIHdpZHRoOiAyMHB4O1xyXG4gICAgbWFyZ2luOiAwIGF1dG87XHJcbiAgICBoZWlnaHQ6IDIwcHg7XHJcbiAgICBib3JkZXItcmFkaXVzOiA0cHg7XHJcbiAgICAvKiB0cmFuc2Zvcm06IHJvdGF0ZSg5MGRlZyk7ICovXHJcbiAgICAvKiBib3JkZXI6IDFweCBzb2xpZCB0cmFuc3BhcmVudDsgKi9cclxuICAgIC8qIHBhZGRpbmctdG9wOiAzcHg7ICovXHJcbn1cclxuXHJcbi5jYXJldC1ib3R0b20tciB7XHJcbiAgICB3aWR0aDogMDtcclxuICAgIGhlaWdodDogMDtcclxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgIHZlcnRpY2FsLWFsaWduOiB0b3A7XHJcbiAgICBtYXJnaW4tdG9wOiAyMHB4O1xyXG4gICAgbWFyZ2luLWxlZnQ6IC0ycHg7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IC0ycHg7XHJcbiAgICBib3JkZXItYm90dG9tOiA0cHggc29saWQgIzgwODA4MDtcclxuICAgIGJvcmRlci1sZWZ0OiA0cHggc29saWQgdHJhbnNwYXJlbnQ7XHJcbn1cclxuXHJcbi8qIC5idG46aG92ZXIgLmljb25ib3gge1xyXG4gICAgYmFja2dyb3VuZDogcmdiYSgwLCAyMDYsIDE5OCwgMC4wOCk7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCByZ2IoMCwgMjA2LCAxOTgpO1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG59ICovXHJcblxyXG4uYnRuLmRpc2FibGVkOmhvdmVyIC5pY29uYm94LFxyXG4uYnRuOmRpc2FibGVkOmhvdmVyIC5pY29uYm94IHtcclxuICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgdHJhbnNwYXJlbnQ7XHJcbn1cclxuLmJ0biB7XHJcbiAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcclxuICAgIGZvbnQtc2l6ZTogLjdyZW07XHJcbiAgICBsaW5lLWhlaWdodDogMTJweDtcclxuICAgIGNvbG9yOiAjNjk2OTY5O1xyXG4gICAgcGFkZGluZzogMDtcclxuICAgIHdpZHRoOiAyMHB4O1xyXG4gICAgaGVpZ2h0OiAyMHB4O1xyXG59XHJcbi5pY29uIHtcclxuICAgIHdpZHRoOiAyMHB4O1xyXG4gICAgaGVpZ2h0OiAyMHB4O1xyXG4gICAgdmVydGljYWwtYWxpZ246IC0wLjE1ZW07XHJcbiAgICBmaWxsOiAjODA4MDgwO1xyXG4gICAgbWFyZ2luOiAwIGF1dG87XHJcbn1cclxuLmljb25fcmVzaXple1xyXG4gICAgdHJhbnNmb3JtOiByb3RhdGUoOTBkZWcpXHJcbn0iXX0= */"

/***/ }),

/***/ "./src/app/design-pop/toggle-window/toggle-window.component.ts":
/*!*********************************************************************!*\
  !*** ./src/app/design-pop/toggle-window/toggle-window.component.ts ***!
  \*********************************************************************/
/*! exports provided: ToggleWindowComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ToggleWindowComponent", function() { return ToggleWindowComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let ToggleWindowComponent = class ToggleWindowComponent {
    constructor(el) {
        this.el = el;
        this.position = {
            startPosition: {
                x: 0,
                y: 0
            },
            endPosition: {
                x: 0,
                y: 0
            }
        };
    }
    set toggleWindow(data) {
        // console.log(data)
        if (data != null) {
            this.domStyle = {
                "height": data.size.height + 'px',
                "right": data.size.width + 'px'
            };
        }
        this._windowData = data;
    }
    get toggleWindow() { return this._windowData; }
    ngOnInit() {
    }
    ngAfterViewInit() {
    }
    toggleView(e) {
        this._windowData.toggle();
    }
    resizeStartView(e) {
        this.position.startPosition = {
            x: e.clientX,
            y: e.clientY
        };
        document.addEventListener('mousemove', this.moveEvent = (e) => {
            this._windowData.zoomResize({ x: -(e.clientX - this.position.startPosition.x), y: e.clientY - this.position.startPosition.y });
            this.domStyle = {
                "height": this._windowData.size.height + 'px',
                "right": this._windowData.size.width + 'px'
            };
            this.position.startPosition = {
                x: e.clientX,
                y: e.clientY
            };
            // console.log(this._windowData.size)
        });
        document.addEventListener('mouseup', this.upEvent = (e) => {
            document.removeEventListener('mousemove', this.moveEvent);
            document.removeEventListener('mouseup', this.upEvent);
        });
    }
};
ToggleWindowComponent.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] }
];
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [Object])
], ToggleWindowComponent.prototype, "toggleWindow", null);
ToggleWindowComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-toggle-window',
        template: __webpack_require__(/*! raw-loader!./toggle-window.component.html */ "./node_modules/raw-loader/index.js!./src/app/design-pop/toggle-window/toggle-window.component.html"),
        styles: [__webpack_require__(/*! ./toggle-window.component.css */ "./src/app/design-pop/toggle-window/toggle-window.component.css")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]])
], ToggleWindowComponent);



/***/ }),

/***/ "./src/app/design-pop/toggle-window/toggle-window.module.ts":
/*!******************************************************************!*\
  !*** ./src/app/design-pop/toggle-window/toggle-window.module.ts ***!
  \******************************************************************/
/*! exports provided: ToggleWindowModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ToggleWindowModule", function() { return ToggleWindowModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _toggle_window_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./toggle-window.component */ "./src/app/design-pop/toggle-window/toggle-window.component.ts");
/* harmony import */ var _view_container_directive__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./view-container.directive */ "./src/app/design-pop/toggle-window/view-container.directive.ts");





let ToggleWindowModule = class ToggleWindowModule {
};
ToggleWindowModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]
        ],
        declarations: [_toggle_window_component__WEBPACK_IMPORTED_MODULE_3__["ToggleWindowComponent"], _view_container_directive__WEBPACK_IMPORTED_MODULE_4__["ViewContainerDirective"]],
        exports: [_toggle_window_component__WEBPACK_IMPORTED_MODULE_3__["ToggleWindowComponent"], _view_container_directive__WEBPACK_IMPORTED_MODULE_4__["ViewContainerDirective"]]
    })
], ToggleWindowModule);



/***/ }),

/***/ "./src/app/design-pop/toggle-window/view-container.directive.ts":
/*!**********************************************************************!*\
  !*** ./src/app/design-pop/toggle-window/view-container.directive.ts ***!
  \**********************************************************************/
/*! exports provided: ViewContainerDirective */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ViewContainerDirective", function() { return ViewContainerDirective; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let ViewContainerDirective = class ViewContainerDirective {
    constructor(
    // private templateRef: TemplateRef<any>,
    viewContainer, el) {
        this.viewContainer = viewContainer;
        this.el = el;
    }
    set appViewContainer(data) {
        //  console.log(data);
        if (data != null) {
            //  console.log(data)
            if (data.isZoom == true) {
                if (data.isStretch == true) {
                    if (data.divSize.width / data.divSize.height > data.zoomSize.width / data.zoomSize.height) {
                        this.el.nativeElement.style.cssText = `
   width:${data.divSize.height * (data.zoomSize.width / data.zoomSize.height)}px;height:${data.divSize.height}px;transform:scale(${data.zoomSize.height / data.divSize.height},${data.zoomSize.height / data.divSize.height});transform-origin:right top;z-index:${data.zIndex}`;
                    }
                    else {
                        this.el.nativeElement.style.cssText = `
   width:${data.divSize.width}px;height:${data.divSize.width / (data.zoomSize.width / data.zoomSize.height)}px;transform:scale(${data.zoomSize.width / data.divSize.width},${data.zoomSize.width / data.divSize.width});transform-origin:right top;z-index:${data.zIndex}`;
                    }
                }
                else {
                    this.el.nativeElement.style.cssText = `
        width:${data.zoomSize.width}px;height:${data.zoomSize.height}px;z-index:${data.zIndex}`;
                    // console.log(111)
                }
            }
            else {
                this.el.nativeElement.style.cssText = `
      width:${data.divSize.width}px;height:${data.divSize.height}px;z-index:${data.zIndex}`;
            }
        }
    }
    ngOnInit() {
        // console.log(this.templateRef)
    }
};
ViewContainerDirective.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewContainerRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] }
];
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [Object])
], ViewContainerDirective.prototype, "appViewContainer", null);
ViewContainerDirective = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"])({
        selector: '[appViewContainer]'
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewContainerRef"],
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]])
], ViewContainerDirective);



/***/ }),

/***/ "./src/app/designStyleData/hotKey.config.ts/hotKey.data.ts":
/*!*****************************************************************!*\
  !*** ./src/app/designStyleData/hotKey.config.ts/hotKey.data.ts ***!
  \*****************************************************************/
/*! exports provided: HotKeyData */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HotKeyData", function() { return HotKeyData; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");

class HotKeyData {
    constructor(dataService) {
        this.dataService = dataService;
        this.shortKeyData = [];
        this.shortKeyData = this.dataService.cache.hotKeys;
        /* 删除系列============================ */
        this.shortKeyData.push({
            keys: ["Delete"],
            downFunc: (obj) => {
                this.dataService.cache.shortFuncs['delWall'](obj);
                this.dataService.cache.shortFuncs['saveAction']();
            },
            isObj: this.dataService.cache.shortFuncs['isWall'],
            status: this.dataService.cache.shortFuncs["isNormal"]
        });
        this.shortKeyData.push({
            keys: ["Delete"],
            downFunc: (obj) => {
                this.dataService.cache.shortFuncs['delDW'](obj);
                this.dataService.cache.shortFuncs['saveAction']();
            },
            isObj: this.dataService.cache.shortFuncs['isDW'],
            status: this.dataService.cache.shortFuncs["isNormal"]
        });
        this.shortKeyData.push({
            keys: ["Delete"],
            downFunc: (obj) => {
                this.dataService.cache.shortFuncs['delCornWin'](obj);
                this.dataService.cache.shortFuncs['saveAction']();
            },
            isObj: this.dataService.cache.shortFuncs['isCornWin'],
            status: this.dataService.cache.shortFuncs["isNormal"]
        });
        this.shortKeyData.push({
            keys: ["Delete"],
            downFunc: (obj) => {
                this.dataService.cache.shortFuncs['delFurn'](obj);
                this.dataService.cache.shortFuncs['saveAction']();
            },
            isObj: this.dataService.cache.shortFuncs['isFurn'],
            status: this.dataService.cache.shortFuncs["isNormal"]
        });
        this.shortKeyData.push({
            keys: ["Delete"],
            downFunc: (obj) => {
                this.dataService.cache.shortFuncs['delLUWin'](obj);
                this.dataService.cache.shortFuncs['saveAction']();
            },
            isObj: this.dataService.cache.shortFuncs['isLUWin'],
            status: this.dataService.cache.shortFuncs["isNormal"]
        });
        /* 是否吸附 */
        this.shortKeyData.push({
            keys: ["Control"],
            downFunc: this.dataService.cache.shortFuncs['cancelAbosrb'],
            upFunc: this.dataService.cache.shortFuncs['setAbosrb'],
        });
        // 摄像机上下左右移动
        this.shortKeyData.push({
            keys: ["w"],
            downFunc: this.dataService.cache.shortFuncs["cameraForwardStart"],
            upFunc: this.dataService.cache.shortFuncs["cameraForwardStop"]
        });
        this.shortKeyData.push({
            keys: ["a"],
            downFunc: this.dataService.cache.shortFuncs["cameraLeftStart"],
            upFunc: this.dataService.cache.shortFuncs["cameraLeftStop"]
        });
        this.shortKeyData.push({
            keys: ["s"],
            downFunc: this.dataService.cache.shortFuncs["cameraBackwardStart"],
            upFunc: this.dataService.cache.shortFuncs["cameraBackwardStop"]
        });
        this.shortKeyData.push({
            keys: ["d"],
            downFunc: this.dataService.cache.shortFuncs["cameraRightStart"],
            upFunc: this.dataService.cache.shortFuncs["cameraRightStop"]
        });
        this.shortKeyData.push({
            keys: ["q"],
            downFunc: this.dataService.cache.shortFuncs["cameraMoveUpStart"],
            upFunc: this.dataService.cache.shortFuncs["cameraMoveUpStop"]
        });
        this.shortKeyData.push({
            keys: ["e"],
            downFunc: this.dataService.cache.shortFuncs["cameraMoveDownStart"],
            upFunc: this.dataService.cache.shortFuncs["cameraMoveDownStop"]
        });
        this.shortKeyData.push({
            keys: ["Control", "z"],
            downFunc: this.dataService.cache.shortFuncs["undoData"],
        });
        this.shortKeyData.push({
            keys: ["Control", "y"],
            downFunc: this.dataService.cache.shortFuncs["redoData"],
        });
    }
}
HotKeyData.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] }
];


/***/ }),

/***/ "./src/app/designStyleData/panel/bottom-panel/bottom.panel.ts":
/*!********************************************************************!*\
  !*** ./src/app/designStyleData/panel/bottom-panel/bottom.panel.ts ***!
  \********************************************************************/
/*! exports provided: BottomData, Point, Rect */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BottomData", function() { return BottomData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Point", function() { return Point; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Rect", function() { return Rect; });
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");



class BottomData {
    constructor(popService, dataService, domService) {
        this.popService = popService;
        this.dataService = dataService;
        this.domService = domService;
        this.setBottomData();
    }
    setBottomData() {
        let data = {
            "camera": {
                name: "保存相机视角",
                icon: "#icon-camera",
                func: (e, imgArry) => {
                    let img = {
                        path: "./assets/img/freeicon/free.png",
                        func: (e) => {
                            console.log('tutuutututut');
                        }
                    };
                    imgArry.img.push(img);
                    this.popService.getMaterial.emit(imgArry);
                },
                cameraImg: {
                    name: "相机视角",
                    img: []
                }
            },
            "center": {
                name: "居中",
                icon: "#icon-juzhong",
                func: (e) => {
                    this.dataService.floorplan.setCenter();
                    this.domService.allSvg.emit();
                    // }
                }
            },
            "vertical": {
                name: "正交",
                icon: "#icon-zhijiao",
                isDown: true,
                func: (e) => {
                    data['vertical'].isDown = !data['vertical'].isDown;
                    this.dataService.cache.wall.isOrthogonal = data['vertical'].isDown;
                }
            }
        };
        this.popService.panelBottom.emit(data);
        this.dataService.cache.hotKeys.push({
            keys: ["F8"],
            downFunc: () => {
                console.log('xxx');
                data['vertical'].isDown = !data['vertical'].isDown;
                this.dataService.cache.wall.isOrthogonal = data['vertical'].isDown;
            },
        });
        this.dataService.cache.hotKeys.push({
            keys: ["Control", "0"],
            downFunc: () => {
                this.dataService.floorplan.setCenter();
                this.domService.allSvg.emit();
            }
        });
    }
}
BottomData.ctorParameters = () => [
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_0__["PopDivService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__["JdesignDataService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_2__["DomUpdateService"] }
];
class Point {
}
class Rect {
}


/***/ }),

/***/ "./src/app/designStyleData/panel/designStyleData.panel.ts":
/*!****************************************************************!*\
  !*** ./src/app/designStyleData/panel/designStyleData.panel.ts ***!
  \****************************************************************/
/*! exports provided: DesignStyleDataPanel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DesignStyleDataPanel", function() { return DesignStyleDataPanel; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");
/* harmony import */ var _left_panel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./left.panel */ "./src/app/designStyleData/panel/left.panel.ts");
/* harmony import */ var _leftBuild_panel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./leftBuild.panel */ "./src/app/designStyleData/panel/leftBuild.panel.ts");
/* harmony import */ var _services_http_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../services/http.service */ "./src/app/services/http.service.ts");
/* harmony import */ var _topData_panel__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./topData.panel */ "./src/app/designStyleData/panel/topData.panel.ts");
/* harmony import */ var _rightData_panel__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./rightData.panel */ "./src/app/designStyleData/panel/rightData.panel.ts");
/* harmony import */ var _right_panel_wall_panel__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./right-panel/wall.panel */ "./src/app/designStyleData/panel/right-panel/wall.panel.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");
/* harmony import */ var _right_panel_platfond_panel__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./right-panel/platfond.panel */ "./src/app/designStyleData/panel/right-panel/platfond.panel.ts");
/* harmony import */ var _right_panel_floor_panel__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./right-panel/floor.panel */ "./src/app/designStyleData/panel/right-panel/floor.panel.ts");
/* harmony import */ var _right_panel_cornerWindow_panel__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./right-panel/cornerWindow.panel */ "./src/app/designStyleData/panel/right-panel/cornerWindow.panel.ts");
/* harmony import */ var _right_panel_door_panel__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./right-panel/door.panel */ "./src/app/designStyleData/panel/right-panel/door.panel.ts");
/* harmony import */ var _right_panel_Lwindow_panel__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./right-panel/Lwindow.panel */ "./src/app/designStyleData/panel/right-panel/Lwindow.panel.ts");
/* harmony import */ var _right_panel_window_panel__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./right-panel/window.panel */ "./src/app/designStyleData/panel/right-panel/window.panel.ts");
/* harmony import */ var _right_panel_frog_panel__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./right-panel/frog.panel */ "./src/app/designStyleData/panel/right-panel/frog.panel.ts");
/* harmony import */ var _bottom_panel_bottom_panel__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./bottom-panel/bottom.panel */ "./src/app/designStyleData/panel/bottom-panel/bottom.panel.ts");
/* harmony import */ var _node_modules_angular_platform_browser__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../../../node_modules/@angular/platform-browser */ "./node_modules/@angular/platform-browser/fesm2015/platform-browser.js");
/* harmony import */ var _right_panel_Uwindow_panel__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./right-panel/Uwindow.panel */ "./src/app/designStyleData/panel/right-panel/Uwindow.panel.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _right_panel_paramsModel_panel__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./right-panel/paramsModel.panel */ "./src/app/designStyleData/panel/right-panel/paramsModel.panel.ts");






















class DesignStyleDataPanel {
    constructor(dataService, popService, calService, httpService, DUService, domService, sanitizer) {
        this.dataService = dataService;
        this.popService = popService;
        this.calService = calService;
        this.httpService = httpService;
        this.DUService = DUService;
        this.domService = domService;
        this.sanitizer = sanitizer;
        let getRightData = new _rightData_panel__WEBPACK_IMPORTED_MODULE_7__["RightDataPanel"](httpService);
        let mainLeft = new _left_panel__WEBPACK_IMPORTED_MODULE_3__["LeftPanel"](popService, httpService, DUService, dataService);
        let buildLeft = new _leftBuild_panel__WEBPACK_IMPORTED_MODULE_4__["LeftBuildPanel"](popService, dataService, calService, DUService, domService);
        let topData = new _topData_panel__WEBPACK_IMPORTED_MODULE_6__["TopDataPanel"](popService, dataService, this.domService, sanitizer);
        let bottomData = new _bottom_panel_bottom_panel__WEBPACK_IMPORTED_MODULE_17__["BottomData"](popService, dataService, domService);
        let wallData = new _right_panel_wall_panel__WEBPACK_IMPORTED_MODULE_8__["WallPanel"](popService, dataService, domService);
        let roomData = new _right_panel_platfond_panel__WEBPACK_IMPORTED_MODULE_10__["PlatFondPanel"](popService, dataService);
        let floorData = new _right_panel_floor_panel__WEBPACK_IMPORTED_MODULE_11__["FloorPanel"](popService, dataService, domService);
        let cornerWindowData = new _right_panel_cornerWindow_panel__WEBPACK_IMPORTED_MODULE_12__["CornerWindowPanel"](popService, dataService, domService);
        let doorData = new _right_panel_door_panel__WEBPACK_IMPORTED_MODULE_13__["DoorPanel"](popService, dataService, domService);
        let windowData = new _right_panel_window_panel__WEBPACK_IMPORTED_MODULE_15__["WindowPanel"](popService, dataService, domService);
        let LwindowData = new _right_panel_Lwindow_panel__WEBPACK_IMPORTED_MODULE_14__["LwindowPanel"](popService, dataService, domService);
        let UwindowData = new _right_panel_Uwindow_panel__WEBPACK_IMPORTED_MODULE_19__["UwindowPanel"](popService, dataService, domService);
        let paramsModelData = new _right_panel_paramsModel_panel__WEBPACK_IMPORTED_MODULE_21__["ParamsModelPanel"](popService, dataService, domService);
        let frogData = new _right_panel_frog_panel__WEBPACK_IMPORTED_MODULE_16__["FrogPanel"](popService, dataService);
    }
}
DesignStyleDataPanel.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_2__["PopDivService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_20__["CalculatorsService"] },
    { type: _services_http_service__WEBPACK_IMPORTED_MODULE_5__["HttpService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_1__["JdesignUtil2dService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_9__["DomUpdateService"] },
    { type: _node_modules_angular_platform_browser__WEBPACK_IMPORTED_MODULE_18__["DomSanitizer"] }
];


/***/ }),

/***/ "./src/app/designStyleData/panel/left.panel.ts":
/*!*****************************************************!*\
  !*** ./src/app/designStyleData/panel/left.panel.ts ***!
  \*****************************************************/
/*! exports provided: LeftPanel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LeftPanel", function() { return LeftPanel; });
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");
/* harmony import */ var _services_http_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../services/http.service */ "./src/app/services/http.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");




class LeftPanel {
    constructor(popService, httpService, DUService, dataService) {
        this.popService = popService;
        this.httpService = httpService;
        this.DUService = DUService;
        this.dataService = dataService;
        this.allData = {
            mouseleave: (e) => {
            },
            mainData: []
        };
        this._newData = [];
        // this.allData.mainData = new allData.mainData(popService);
        // console.log(this.allData.mainData.allData.mainData)
        this.getLeftData();
        this.getURLData(this.httpService.dataUrls.furnitureModelUrl);
    }
    // 一级菜单数据和下拉类型列表二级菜单数据
    getLeftData() {
        this._leftData = {
            // 全局属性定义
            global: {
                mouseleave: (e) => {
                }
            },
            // 左侧数据类型及下拉列表数据
            data: [
                {
                    name: "户型",
                    type: "room",
                    isWasSelect: true,
                    icon: "#icon-icond",
                    sendToNext: (e, data) => {
                        this.popService.getLeftData.emit(data);
                    }
                },
                {
                    name: "公共素材库",
                    type: "matter",
                    icon: "#icon-moxing",
                    dropList: [],
                    sendToNext: (e, params) => {
                        let nameArr = [];
                        let dataArr = [];
                        for (let i = 0; i < this.allData.mainData.length; i++) {
                            if (nameArr.indexOf(this.allData.mainData[i].first) < 0) {
                                nameArr.push(this.allData.mainData[i].first);
                            }
                        }
                        for (let j = 0; j < nameArr.length; j++) {
                            // 下拉列表类型数据
                            let newData = {
                                name: nameArr[j],
                                getData: (e, params) => {
                                    e.stopPropagation();
                                    let dataArr = [];
                                    for (let i = 0; i < this.allData.mainData.length; i++) {
                                        if (this.allData.mainData[i].first == params.name) {
                                            dataArr.push(this.allData.mainData[i]);
                                        }
                                    }
                                    let data = {
                                        title: "公共素材库",
                                        type: "matter",
                                        bread: ["公共素材库", params.name],
                                        imgData: dataArr
                                    };
                                    this.popService.getLeftData.emit(data);
                                },
                                mouseLeave: (e, params) => {
                                    params.isShow = false;
                                    this.hoverData(e, null);
                                },
                                mouseHover: (e, params) => {
                                    params.isShow = true;
                                    this.hoverData(e, params);
                                }
                            };
                            dataArr.push(newData);
                        }
                        params.dropList = dataArr;
                        // 应该出现的数据列表数据
                        let data = {
                            title: "公共素材库",
                            type: "matter",
                            bread: ["公共素材库"],
                            imgData: this.allData.mainData
                        };
                        this.popService.getLeftData.emit(data);
                    }
                },
                {
                    name: "我的",
                    type: "mine",
                    icon: "#icon-wode",
                    sendToNext: (e, data) => {
                        this.popService.getLeftData.emit(data);
                    }
                }
            ]
        };
        this.popService.sendLeftData.emit(this._leftData);
    }
    // 悬浮菜单数据和展示数据
    hoverData(e, data) {
        if (data == null) {
            this._hover_data = null;
        }
        else {
            // 二级菜单名称数据
            let secondNameArr = [];
            let thirdNameArr = [];
            for (let i = 0; i < this.allData.mainData.length; i++) {
                if (this.allData.mainData[i].first == data.name) {
                    if (secondNameArr.indexOf(this.allData.mainData[i].second) < 0) {
                        secondNameArr.push(this.allData.mainData[i].second);
                    }
                }
            }
            for (let j = 0; j < secondNameArr.length; j++) {
                let newArr = {
                    name: secondNameArr[j],
                    getData: (e, params) => {
                        e.stopPropagation();
                        let dataArr = [];
                        for (let i = 0; i < this.allData.mainData.length; i++) {
                            if (this.allData.mainData[i].second == params.name) {
                                dataArr.push(this.allData.mainData[i]);
                            }
                        }
                        let newdata = {
                            title: "公共素材库",
                            type: "matter",
                            bread: ["公共素材库", data.name, params.name],
                            imgData: dataArr
                        };
                        this.popService.getLeftData.emit(newdata);
                    },
                    thirdNameArr: [],
                    typeList: []
                };
                for (let i = 0; i < this.allData.mainData.length; i++) {
                    if (this.allData.mainData[i].second == secondNameArr[j]) {
                        if (this.allData.mainData[i].third !== undefined) {
                            if (newArr.thirdNameArr.indexOf(this.allData.mainData[i].third) < 0) {
                                newArr.thirdNameArr.push(this.allData.mainData[i].third);
                            }
                        }
                    }
                }
                for (let i = 0; i < newArr.thirdNameArr.length; i++) {
                    let thirdData = {
                        name: newArr.thirdNameArr[i],
                        func: (e, params) => {
                            e.stopPropagation();
                            let dataArr = [];
                            for (let i = 0; i < this.allData.mainData.length; i++) {
                                if (this.allData.mainData[i].third == params.name) {
                                    dataArr.push(this.allData.mainData[i]);
                                }
                            }
                            let newdata = {
                                title: "公共素材库",
                                type: "matter",
                                bread: ["公共素材库", data.name, newArr.name, params.name],
                                imgData: dataArr
                            };
                            this.popService.getLeftData.emit(newdata);
                        }
                    };
                    newArr.typeList.push(thirdData);
                }
                thirdNameArr.push(newArr);
            }
            this._hover_data = {
                pos: {
                    x: e.clientX,
                    y: e.clientY
                },
                data: thirdNameArr
            };
        }
        this.popService.hoverLeftData.emit(this._hover_data);
    }
    // 解析ison文件  重构数据
    getURLData(url) {
        url = this.httpService.getRealUrl(url, this.httpService.dataUrls.mainUrl);
        this.httpService.getRes(url, 3, true).subscribe((datas) => {
            this.DUService.obj.changeObjUrlByattrs(datas, this.httpService.dataUrls.modelMainUrl, ["svgUrl", "imgUrl", "modelUrl"]);
            for (let i = 0; i < datas.length; i++) {
                let newData = {
                    id: datas[i]['id'],
                    imgUrl: datas[i]['imgUrl'],
                    svg: datas[i]['svgUrl'],
                    first: datas[i]['first'],
                    second: datas[i]['scend'],
                    third: datas[i]['third'],
                    bread: [datas[i]['first'], datas[i]['scend'], datas[i]['third']],
                    func: (e, params) => {
                        this._leftData.global.mouseleave = (e) => {
                            let obj = {
                                url2D: datas[i]['svgUrl'],
                                size: datas[i]['size'],
                                url3D: datas[i]['modelUrl'],
                                hgUrl: datas[i]['hgUrl'],
                                floorHeight: datas[i]['floorHeight']
                            };
                            this.dataService.cache.shortFuncs["addFurn"](obj);
                            this._leftData.global.mouseleave = () => {
                            };
                        };
                    }
                };
                this.allData.mainData.push(newData);
            }
        });
    }
}
LeftPanel.ctorParameters = () => [
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_0__["PopDivService"] },
    { type: _services_http_service__WEBPACK_IMPORTED_MODULE_1__["HttpService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_3__["JdesignDataService"] }
];


/***/ }),

/***/ "./src/app/designStyleData/panel/leftBuild.panel.ts":
/*!**********************************************************!*\
  !*** ./src/app/designStyleData/panel/leftBuild.panel.ts ***!
  \**********************************************************/
/*! exports provided: LeftBuildPanel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LeftBuildPanel", function() { return LeftBuildPanel; });
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");





class LeftBuildPanel {
    constructor(popService, dataService, calService, DUService, domService) {
        this.popService = popService;
        this.dataService = dataService;
        this.calService = calService;
        this.DUService = DUService;
        this.domService = domService;
        this.buildDataInit();
        this.popService.getLeftData.subscribe((data) => {
            this.getData(data);
        });
    }
    buildDataInit() {
        this._initData = {
            mouseleave: (e) => { },
            title: "开始画户型",
            type: "room",
            importBack: {
                name: "上传户型临摹图",
                icon: "./assets/img/freeicon/back.png",
                newFunc: (e) => {
                    // console.log(222)
                    this.dataService.cache.shortFuncs['openBackImg'](e);
                }
            },
            drawData: [
                {
                    title: "画墙",
                    data: [
                        {
                            name: "画中墙", icon: "./assets/img/freeicon/free.png", borderClass: false, func: (e, params) => {
                                for (let i = 0; i < this._initData.drawData[0].data.length; i++) {
                                    this._initData.drawData[0].data[i].borderClass = false;
                                }
                                this._initData.drawData[0].data[0].borderClass = true;
                                this.dataService.cache.shortFuncs['setDrawWall']();
                            }
                        },
                        {
                            name: "画内墙", icon: "./assets/img/freeicon/middleWall.png", borderClass: false, func: (e, params) => {
                                for (let i = 0; i < this._initData.drawData[0].data.length; i++) {
                                    this._initData.drawData[0].data[i].borderClass = false;
                                }
                                this._initData.drawData[0].data[1].borderClass = true;
                                this.dataService.cache.shortFuncs["setDrawInWall"]();
                            }
                        },
                        {
                            name: "画房间", icon: "./assets/img/freeicon/area.png", borderClass: false, func: (e, params) => {
                                for (let i = 0; i < this._initData.drawData[0].data.length; i++) {
                                    this._initData.drawData[0].data[i].borderClass = false;
                                }
                                this._initData.drawData[0].data[2].borderClass = true;
                                this.dataService.cache.shortFuncs["setDrawRoom"]();
                            }
                        }
                    ]
                },
                {
                    title: "门窗",
                    data: [
                        {
                            name: "单开门", icon: "./assets/img/freeicon/men.png", func: (e, params) => {
                                this._initData.mouseleave = (e) => {
                                    this.dataService.cache.shortFuncs['addOneDoor']();
                                    this._initData.mouseleave = () => { };
                                };
                            }
                        },
                        {
                            name: "双开门", icon: "./assets/img/freeicon/doors.png", func: (e, params) => {
                                this._initData.mouseleave = (e) => {
                                    this.dataService.cache.shortFuncs['addTwoDoor']();
                                    this._initData.mouseleave = () => { };
                                };
                            }
                        },
                        {
                            name: "子母门", icon: "./assets/img/freeicon/largeSmall.png", func: (e, params) => {
                                this.dataService.cache.shortFuncs['addSonDoor']();
                            }
                        },
                        {
                            name: "移门", icon: "./assets/img/freeicon/moveDoor.png", func: (e, params) => {
                                this._initData.mouseleave = (e) => {
                                    this.dataService.cache.shortFuncs['addPullDoor']();
                                    this._initData.mouseleave = () => { };
                                };
                            }
                        },
                        {
                            name: "窗", icon: "./assets/img/freeicon/wind.png", func: (e, params) => {
                                this._initData.mouseleave = (e) => {
                                    this.dataService.cache.shortFuncs["addNormalWin"]();
                                    this._initData.mouseleave = () => { };
                                };
                            }
                        },
                        {
                            name: "飘窗", icon: "./assets/img/freeicon/piaowindow.png", func: (e, params) => {
                                this._initData.mouseleave = (e) => {
                                    this.dataService.cache.shortFuncs["addBayWin"]();
                                    this._initData.mouseleave = () => { };
                                };
                            }
                        },
                        {
                            name: "L型窗", icon: "./assets/img/freeicon/LWindow.png", func: (e, params) => {
                                this._initData.mouseleave = (e) => {
                                    this.dataService.cache.shortFuncs['createLWin']();
                                    this._initData.mouseleave = () => { };
                                };
                            }
                        },
                        {
                            name: "转角飘窗", icon: "./assets/img/freeicon/scrollWindow.png", func: (e, params) => {
                                this._initData.mouseleave = (e) => {
                                    this.dataService.cache.shortFuncs["addCornerWin"]();
                                    this._initData.mouseleave = () => { };
                                };
                            }
                        },
                        {
                            name: "U型窗", icon: "./assets/img/freeicon/UWindow.png", func: (e, params) => {
                                this._initData.mouseleave = (e) => {
                                    this.dataService.cache.shortFuncs['createUWin']();
                                    this._initData.mouseleave = () => { };
                                };
                            }
                        },
                        {
                            name: "落地窗", icon: "./assets/img/freeicon/underWindow.png", func: (e, params) => {
                                this._initData.mouseleave = (e) => {
                                    this.dataService.cache.shortFuncs["addFloorWin"]();
                                    this._initData.mouseleave = () => { };
                                };
                            }
                        },
                        {
                            name: "转角飘窗(参数化)", icon: "./assets/img/freeicon/scrollWindow.png", func: (e, params) => {
                                this._initData.mouseleave = (e) => {
                                    let data = this.DUService.obj.clone(this.dataService.cache.baseData.j2d['cornerWin']);
                                    let originData = this.DUService.obj.clone(data);
                                    let obj = this.calService.paramModel.createNew({
                                        j2d: this.DUService.parseJ2D.getobjData(data),
                                        originJ2d: this.DUService.parseJ2D.getobjData(originData),
                                        absorbData: {
                                            objID: undefined,
                                            objType: 'point',
                                            type: "pointAnd2Walls",
                                            minDistance: this.dataService.cmd.floorplan.absorb.minDistance * 2, calParams: {
                                                "leftThickness": "leftBoxDepth",
                                                'rightThickness': "rightBoxDepth",
                                                "radian": "radian"
                                            },
                                            realPosX: "{{x}}",
                                            realPosY: "{{y}}",
                                        },
                                        inputData: [
                                            { inputName: "左宽度", j2dName: "leftWidth" },
                                            { inputName: "左厚度", j2dName: "leftThickness" },
                                            { inputName: "右宽度", j2dName: "rightWidth" },
                                            { inputName: "右厚度", j2dName: "rightThickness" },
                                            { inputName: "左框厚度", j2dName: "leftBoxThickness" },
                                            { inputName: "右框厚度", j2dName: "rightBoxThickness" }
                                        ]
                                    });
                                    this.dataService.cache.common.choose = obj;
                                    this.setNormal();
                                    this._initData.mouseleave = () => { };
                                };
                            }
                        },
                        {
                            name: "L型窗(参数化)", icon: "./assets/img/freeicon/scrollWindow.png", func: (e, params) => {
                                this._initData.mouseleave = (e) => {
                                    let data = this.DUService.obj.clone(this.dataService.cache.baseData.j2d['LWin']);
                                    let originData = this.DUService.obj.clone(data);
                                    let obj = this.calService.paramModel.createNew({
                                        j2d: this.DUService.parseJ2D.getobjData(data),
                                        originJ2d: this.DUService.parseJ2D.getobjData(originData),
                                        absorbData: {
                                            objID: undefined,
                                            objType: 'point',
                                            type: "pointAnd2Walls",
                                            minDistance: this.dataService.cmd.floorplan.absorb.minDistance * 2, calParams: {
                                                "leftThickness": "leftThickness",
                                                'rightThickness': "rightThickness",
                                                "radian": "radian"
                                            },
                                            realPosX: "{{x}}",
                                            realPosY: "{{y}}",
                                        },
                                        inputData: [
                                            { inputName: "左宽度", j2dName: "leftWidth" },
                                            { inputName: "右宽度", j2dName: "rightWidth" }
                                        ]
                                    });
                                    this.dataService.cache.common.choose = obj;
                                    this.setNormal();
                                    this._initData.mouseleave = () => { };
                                };
                            }
                        },
                        {
                            name: "U型窗(参数化)", icon: "./assets/img/freeicon/scrollWindow.png", func: (e, params) => {
                                this._initData.mouseleave = (e) => {
                                    let data = this.DUService.obj.clone(this.dataService.cache.baseData.j2d['UWin']);
                                    let originData = this.DUService.obj.clone(data);
                                    let obj = this.calService.paramModel.createNew({
                                        j2d: this.DUService.parseJ2D.getobjData(data),
                                        originJ2d: this.DUService.parseJ2D.getobjData(originData),
                                        absorbData: {
                                            objID: undefined,
                                            objType: 'wall',
                                            type: "wallAnd2walls",
                                            minDistance: this.dataService.cmd.floorplan.absorb.minDistance * 2, calParams: {
                                                "centerThickness": "centerThickness",
                                                'centerWidth': "centerWidth",
                                                "leftThickness": "leftThickness",
                                                "leftRadian": "leftRadian",
                                                'rightThickness': "rightThickness",
                                                "rightRadian": "rightRadian"
                                            },
                                            realPosX: "{{x}}",
                                            realPosY: "{{y}}",
                                        },
                                        inputData: [
                                            { inputName: "左宽度", j2dName: "leftWidth" },
                                            { inputName: "右宽度", j2dName: "rightWidth" }
                                        ]
                                    });
                                    this.dataService.cache.common.choose = obj;
                                    this.setNormal();
                                    this._initData.mouseleave = () => { };
                                };
                            }
                        }
                    ]
                },
                {
                    title: "结构部件",
                    data: [
                        {
                            name: "柱子", icon: "./assets/img/freeicon/zhu.png", func: (e, params) => {
                                this._initData.mouseleave = (e) => {
                                    let obj = {
                                        size: { width: 500, height: 500, height3D: 2800 },
                                        floorHeight: 0,
                                        url2D: "./assets/img/test/zhuzi.png"
                                    };
                                    this.dataService.cache.shortFuncs["addBuild"](obj);
                                    this._initData.mouseleave = () => { };
                                };
                            }
                        },
                        {
                            name: "烟道", icon: "./assets/img/freeicon/frog.png", func: (e, params) => {
                                this._initData.mouseleave = (e) => {
                                    let obj = {
                                        size: { width: 500, height: 500, height3D: 2800 },
                                        floorHeight: 0,
                                        url2D: "./assets/img/test/yandao.jpg"
                                    };
                                    this.dataService.cache.shortFuncs["addBuild"](obj);
                                    this._initData.mouseleave = () => { };
                                };
                            }
                        },
                        {
                            name: "门洞", icon: "./assets/img/freeicon/doorDong.png", func: (e, params) => {
                                this.dataService.cache.shortFuncs["addNoDoor"]();
                            }
                        }
                    ]
                }
            ]
        };
        this.popService.clickLeftData.emit(this._initData);
        this.dataService.cache.hotKeys.push({
            keys: ["r"],
            downFunc: () => {
                for (let i = 0; i < this._initData.drawData[0].data.length; i++) {
                    this._initData.drawData[0].data[i].borderClass = false;
                }
                this._initData.drawData[0].data[2].borderClass = true;
                this.dataService.cache.shortFuncs["setDrawRoom"]();
            },
        });
        this.dataService.cache.hotKeys.push({
            keys: ["l"],
            downFunc: () => {
                for (let i = 0; i < this._initData.drawData[0].data.length; i++) {
                    this._initData.drawData[0].data[i].borderClass = false;
                }
                this._initData.drawData[0].data[1].borderClass = true;
                this.dataService.cache.shortFuncs["setDrawInWall"]();
            },
        });
        this.dataService.cache.hotKeys.push({
            keys: ["Control", "l"],
            downFunc: () => {
                for (let i = 0; i < this._initData.drawData[0].data.length; i++) {
                    this._initData.drawData[0].data[i].borderClass = false;
                }
                this._initData.drawData[0].data[0].borderClass = true;
                this.dataService.cache.shortFuncs["setDrawWall"]();
            },
        });
    }
    getData(data) {
        if (data != null) {
            if (data.type == 'room') {
                this._build_data = this._initData;
            }
            else if (data.type == 'matter') {
                this._build_data = data;
            }
            else if (data.type == 'mine') {
                this._build_data = {
                    type: 'mine'
                };
            }
            this.popService.clickLeftData.emit(this._build_data);
        }
    }
    setNormal() {
        this.dataService.cache.common.mode = 'normal';
        this.dataService.cache.common.blockON = true;
        this.dataService.cache.common.firstPos = null;
        this.dataService.cmd.cowall.hide = true;
        this.domUpdate();
    }
    domUpdate() {
        this.domService.allSvg.emit();
        this.popService.inputBoxs.emit([]);
        this.popService.buttons.emit(null);
    }
}
LeftBuildPanel.ctorParameters = () => [
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_0__["PopDivService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__["JdesignDataService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__["CalculatorsService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_3__["JdesignUtil2dService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_4__["DomUpdateService"] }
];


/***/ }),

/***/ "./src/app/designStyleData/panel/right-panel/Lwindow.panel.ts":
/*!********************************************************************!*\
  !*** ./src/app/designStyleData/panel/right-panel/Lwindow.panel.ts ***!
  \********************************************************************/
/*! exports provided: LwindowPanel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LwindowPanel", function() { return LwindowPanel; });
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");



class LwindowPanel {
    constructor(popService, dataService, domService) {
        this.popService = popService;
        this.dataService = dataService;
        this.domService = domService;
        popService.panelRight.subscribe((data) => {
            // console.log(data)
            if (data == null) {
                this.popService.panelRightData.emit(null);
            }
            else {
                if (data.type == 'LWin') {
                    // this.popService.panelRightData.emit(null)
                    this.setRoomData(data);
                }
            }
        });
    }
    setRoomData(obj) {
        let data = [
            {
                type: "input",
                data: [
                    {
                        name: "边a",
                        isEditable: false,
                        value: obj.j2d.params["leftWidth"].formula,
                        func: (e, params) => {
                            let distance = parseFloat(params.value);
                            obj.j2d.params["leftWidth"].formula = distance;
                            this.domService.allSvg.emit();
                            this.dataService.cache.shortFuncs['saveAction']();
                        }
                    },
                    {
                        name: "边b",
                        isEditable: false,
                        value: obj.j2d.params["rightWidth"].formula,
                        func: (e, params) => {
                            let distance = parseFloat(params.value);
                            obj.j2d.params["rightWidth"].formula = distance;
                            this.domService.allSvg.emit();
                            this.dataService.cache.shortFuncs['saveAction']();
                        }
                    },
                    {
                        name: "高度",
                        isEditable: false,
                        value: obj.height3D,
                        func: (e, params) => {
                            obj.height3D = params.value;
                            this.dataService.cache.shortFuncs['saveAction']();
                        }
                    },
                    {
                        name: "离地高度",
                        isEditable: false,
                        value: obj.floorHeight,
                        func: (e, params) => {
                            obj.floorHeight = params.value;
                            this.dataService.cache.shortFuncs['saveAction']();
                        }
                    }
                ]
            },
            {
                type: "img",
                data: {
                    img: this.dataService.icon.getIco('L窗示意图'),
                    detail: "在室内往飘窗方向看，从左到右依次为a,b"
                }
            }
        ];
        this.popService.panelRightData.emit(data);
    }
    callBackRoofImgArr(obj, arr) {
        // let argument = {};
        // let imgArr = []
        // for (let i = 0; i < arr.length; i++) {
        //     if (i == obj.GetMaterialSelectIndex()) {
        //         argument = {
        //             path: arr[i],
        //             details: '',
        //             borderClass: true,
        //             func: (e, params) => {
        //                 obj.SetModelTexture(params.path);
        //                 obj.SetMaterialSelectIndex(i)
        //             }
        //         }
        //     }
        //     else {
        //         argument = {
        //             path: arr[i],
        //             details: '',
        //             func: (e, params) => {
        //                 obj.SetModelTexture(params.path);
        //                 obj.SetMaterialSelectIndex(i)
        //             }
        //         }
        //     }
        //     imgArr.push(argument);
        // }
        // return imgArr;
    }
}
LwindowPanel.ctorParameters = () => [
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_0__["PopDivService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__["JdesignDataService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_2__["DomUpdateService"] }
];


/***/ }),

/***/ "./src/app/designStyleData/panel/right-panel/Uwindow.panel.ts":
/*!********************************************************************!*\
  !*** ./src/app/designStyleData/panel/right-panel/Uwindow.panel.ts ***!
  \********************************************************************/
/*! exports provided: UwindowPanel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UwindowPanel", function() { return UwindowPanel; });
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");



class UwindowPanel {
    constructor(popService, dataService, domService) {
        this.popService = popService;
        this.dataService = dataService;
        this.domService = domService;
        popService.panelRight.subscribe((data) => {
            // console.log(data)
            if (data == null) {
                this.popService.panelRightData.emit(null);
            }
            else {
                if (data.type == 'UWin') {
                    // this.popService.panelRightData.emit(null)
                    this.setRoomData(data);
                }
            }
        });
    }
    setRoomData(obj) {
        let data = [
            {
                type: "input",
                data: [
                    {
                        name: "边a",
                        isEditable: false,
                        value: obj.j2d.params["leftWidth"].formula,
                        func: (e, params) => {
                            let distance = parseFloat(params.value);
                            obj.j2d.params["leftWidth"].formula = distance;
                            this.domService.allSvg.emit();
                            this.dataService.cache.shortFuncs['saveAction']();
                        }
                    },
                    {
                        name: "边b",
                        isEditable: false,
                        value: obj.j2d.params["rightWidth"].formula,
                        func: (e, params) => {
                            let distance = parseFloat(params.value);
                            obj.j2d.params["rightWidth"].formula = distance;
                            this.domService.allSvg.emit();
                            this.dataService.cache.shortFuncs['saveAction']();
                        }
                    },
                    {
                        name: "高度",
                        isEditable: false,
                        value: obj.height3D,
                        func: (e, params) => {
                            obj.height3D = params.value;
                            this.dataService.cache.shortFuncs['saveAction']();
                        }
                    },
                    {
                        name: "离地高度",
                        isEditable: false,
                        value: obj.floorHeight,
                        func: (e, params) => {
                            obj.floorHeight = params.value;
                            this.dataService.cache.shortFuncs['saveAction']();
                        }
                    }
                ]
            },
            {
                type: "img",
                data: {
                    img: this.dataService.icon.getIco('U型窗示意图'),
                    detail: "在室内往飘窗方向看，从左到右依次为a,b"
                }
            }
        ];
        this.popService.panelRightData.emit(data);
    }
    callBackRoofImgArr(obj, arr) {
        // let argument = {};
        // let imgArr = []
        // for (let i = 0; i < arr.length; i++) {
        //     if (i == obj.GetMaterialSelectIndex()) {
        //         argument = {
        //             path: arr[i],
        //             details: '',
        //             borderClass: true,
        //             func: (e, params) => {
        //                 obj.SetModelTexture(params.path);
        //                 obj.SetMaterialSelectIndex(i)
        //             }
        //         }
        //     }
        //     else {
        //         argument = {
        //             path: arr[i],
        //             details: '',
        //             func: (e, params) => {
        //                 obj.SetModelTexture(params.path);
        //                 obj.SetMaterialSelectIndex(i)
        //             }
        //         }
        //     }
        //     imgArr.push(argument);
        // }
        // return imgArr;
    }
}
UwindowPanel.ctorParameters = () => [
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_0__["PopDivService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__["JdesignDataService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_2__["DomUpdateService"] }
];


/***/ }),

/***/ "./src/app/designStyleData/panel/right-panel/cornerWindow.panel.ts":
/*!*************************************************************************!*\
  !*** ./src/app/designStyleData/panel/right-panel/cornerWindow.panel.ts ***!
  \*************************************************************************/
/*! exports provided: CornerWindowPanel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CornerWindowPanel", function() { return CornerWindowPanel; });
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");



class CornerWindowPanel {
    constructor(popService, dataService, domService) {
        this.popService = popService;
        this.dataService = dataService;
        this.domService = domService;
        popService.panelRight.subscribe((data) => {
            if (data == null) {
                this.popService.panelRightData.emit(null);
            }
            else {
                if (data.type == 'cornerWin') {
                    this.setCornerWindowData(data);
                }
            }
        });
    }
    // z转角飘窗
    setCornerWindowData(obj) {
        console.log(obj.floorHeight);
        // console.log(this.dataService.json.marblePics)
        let data = [
            {
                type: "input",
                data: [
                    {
                        name: "边a",
                        isEditable: false,
                        value: obj.LWidth,
                        func: (e, params) => {
                            obj.LWidth = parseInt(params.value);
                            obj.act3D.end();
                            this.dataService.cache.cornerWin.moveEnd(obj);
                            this.dataService.cache.common.choose = obj;
                            this.dataService.cache.shortFuncs['saveAction']();
                        }
                    },
                    {
                        name: "边b",
                        isEditable: false,
                        value: obj.LDepth,
                        func: (e, params) => {
                            obj.LDepth = parseInt(params.value);
                            obj.act3D.end();
                            this.dataService.cache.cornerWin.moveEnd(obj);
                            this.dataService.cache.common.choose = obj;
                            this.dataService.cache.shortFuncs['saveAction']();
                        }
                    },
                    {
                        name: "高度",
                        isEditable: false,
                        value: obj.height3D,
                        func: (e, params) => {
                            obj.height3D = parseInt(params.value);
                            obj.act3D.end();
                            this.dataService.cache.cornerWin.moveEnd(obj);
                            this.dataService.cache.common.choose = obj;
                            this.dataService.cache.shortFuncs['saveAction']();
                        }
                    },
                    {
                        name: "边c",
                        isEditable: false,
                        value: obj.DDepth,
                        func: (e, params) => {
                            obj.DDepth = parseInt(params.value);
                            obj.act3D.end();
                            this.dataService.cache.cornerWin.moveEnd(obj);
                            this.dataService.cache.common.choose = obj;
                            this.dataService.cache.shortFuncs['saveAction']();
                        }
                    },
                    {
                        name: "边d",
                        isEditable: false,
                        value: obj.DWidth,
                        func: (e, params) => {
                            obj.DWidth = parseInt(params.value);
                            obj.act3D.end();
                            this.dataService.cache.cornerWin.moveEnd(obj);
                            this.dataService.cache.common.choose = obj;
                            this.dataService.cache.shortFuncs['saveAction']();
                        }
                    },
                    {
                        name: "离地高度",
                        isEditable: false,
                        value: obj.floorHeight,
                        func: (e, params) => {
                            obj.floorHeight = parseInt(params.value);
                            obj.act3D.end();
                            this.dataService.cache.cornerWin.moveEnd(obj);
                            this.dataService.cache.common.choose = obj;
                            this.dataService.cache.shortFuncs['saveAction']();
                        }
                    }
                ]
            },
            {
                type: "img",
                data: {
                    img: this.dataService.icon.getIco('转角飘窗示意图'),
                    detail: "在室内往飘窗方向看，从左到右依次为a,b,c,d"
                }
            },
            {
                type: "slider",
                data: [
                    {
                        name: "飘窗材质",
                        img: this.callBackCornerWinImgArr(obj, this.dataService.json.marblePics)
                    }
                ]
            }
        ];
        this.popService.panelRightData.emit(data);
    }
    callBackCornerWinImgArr(obj, arr) {
        let argument = {};
        let imgArr = [];
        for (let i = 0; i < arr.length; i++) {
            if (i == obj.getBaywindowStillMatIndex()) {
                argument = {
                    path: arr[i],
                    details: '',
                    borderClass: true,
                    func: (e, params) => {
                        obj.SetBaywindowStillTexture(params.path);
                        obj.SetBaywindowStillMatIndex(i);
                        this.dataService.cache.shortFuncs['saveAction']();
                    }
                };
            }
            else {
                argument = {
                    path: arr[i],
                    details: '',
                    func: (e, params) => {
                        obj.SetBaywindowStillTexture(params.path);
                        obj.SetBaywindowStillMatIndex(i);
                        this.dataService.cache.shortFuncs['saveAction']();
                    }
                };
            }
            imgArr.push(argument);
        }
        return imgArr;
    }
}
CornerWindowPanel.ctorParameters = () => [
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_0__["PopDivService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__["JdesignDataService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_2__["DomUpdateService"] }
];


/***/ }),

/***/ "./src/app/designStyleData/panel/right-panel/door.panel.ts":
/*!*****************************************************************!*\
  !*** ./src/app/designStyleData/panel/right-panel/door.panel.ts ***!
  \*****************************************************************/
/*! exports provided: DoorPanel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DoorPanel", function() { return DoorPanel; });
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");



class DoorPanel {
    constructor(popService, dataService, domService) {
        this.popService = popService;
        this.dataService = dataService;
        this.domService = domService;
        popService.panelRight.subscribe((data) => {
            // console.log(data)
            if (data == null) {
                this.popService.panelRightData.emit(null);
            }
            else {
                if (data.type == 'door') {
                    this.setDoorData(data);
                }
            }
        });
    }
    setDoorData(obj) {
        let data = [
            {
                type: "input",
                data: [
                    {
                        name: "宽度",
                        isEditable: false,
                        value: obj.size.width,
                        func: (e, params) => {
                            obj.size.width = parseInt(params.value);
                            this.dataService.cache.doorWin.move(obj, obj.pos);
                            this.popService.inputBoxs.emit(null);
                            this.dataService.cache.doorWin.displayLabel = false;
                            this.domService.allSvg.emit();
                            this.dataService.cache.shortFuncs['saveAction']();
                        }
                    },
                    {
                        name: "高度",
                        isEditable: false,
                        value: obj.size.height3D,
                        func: (e, params) => {
                            obj.size.height3D = parseInt(params.value);
                            this.dataService.cache.doorWin.move(obj, obj.pos);
                            this.popService.inputBoxs.emit(null);
                            this.dataService.cache.doorWin.displayLabel = false;
                            this.domService.allSvg.emit();
                            this.dataService.cache.shortFuncs['saveAction']();
                        }
                    },
                    {
                        name: "离地高度",
                        isEditable: false,
                        value: obj.floorHeight,
                        func: (e, params) => {
                            obj.floorHeight = parseInt(params.value);
                            this.dataService.cache.doorWin.move(obj, obj.pos);
                            this.popService.inputBoxs.emit(null);
                            this.dataService.cache.doorWin.displayLabel = false;
                            this.domService.allSvg.emit();
                            console.log(obj.floorHeight);
                            this.dataService.cache.shortFuncs['saveAction']();
                            // this.dataService.cache.shortFuncs['saveAction']()
                        }
                    }
                ]
            }
        ];
        this.popService.panelRightData.emit(data);
    }
    callBackRoofImgArr(obj, arr) {
        let argument = {};
        let imgArr = [];
        for (let i = 0; i < arr.length; i++) {
            if (i == obj.GetMaterialSelectIndex()) {
                argument = {
                    path: arr[i],
                    details: '',
                    borderClass: true,
                    func: (e, params) => {
                        obj.SetModelTexture(params.path);
                        obj.SetMaterialSelectIndex(i);
                    }
                };
            }
            else {
                argument = {
                    path: arr[i],
                    details: '',
                    func: (e, params) => {
                        obj.SetModelTexture(params.path);
                        obj.SetMaterialSelectIndex(i);
                    }
                };
            }
            imgArr.push(argument);
        }
        return imgArr;
    }
}
DoorPanel.ctorParameters = () => [
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_0__["PopDivService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__["JdesignDataService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_2__["DomUpdateService"] }
];


/***/ }),

/***/ "./src/app/designStyleData/panel/right-panel/floor.panel.ts":
/*!******************************************************************!*\
  !*** ./src/app/designStyleData/panel/right-panel/floor.panel.ts ***!
  \******************************************************************/
/*! exports provided: FloorPanel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FloorPanel", function() { return FloorPanel; });
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");



class FloorPanel {
    constructor(popService, dataService, domService) {
        this.popService = popService;
        this.dataService = dataService;
        this.domService = domService;
        this._floorRecorder = [];
        this.floorImg = null;
        popService.panelRight.subscribe((data) => {
            if (data == null) {
                this.popService.panelRightData.emit(null);
            }
            else {
                if (data.type == 'floor') {
                    this.setFloorData(data);
                }
            }
        });
    }
    checkFloorRecorder(id) {
        if (this._floorRecorder[id] == undefined)
            this._floorRecorder[id] = { roomtype: 0 };
    }
    setFloorData(obj) {
        let roomTypeArr = [];
        let room = obj.getRoom();
        // 地板贴图
        let floorImg = this.callBackFloorImgArr(obj, this.dataService.json.floorPics);
        this.checkFloorRecorder(obj.id);
        for (let i = 0; i < this.dataService.json.roomType.length; i++) {
            let roomtype = {
                name: this.dataService.json.roomType[i].name,
                floor: this.dataService.json.roomType[i].floorNum,
                func: (e, params, slider) => {
                    slider.currentData = this._floorRecorder[obj.id].roomtype = i;
                    slider.isHaveInput.value = params.name;
                    obj.SetModelTexture(this.dataService.json.floorPics[this.dataService.json.roomType[i].floorNum]);
                    obj.SetMaterialSelectIndex(this.dataService.json.roomType[i].floorNum);
                    // 更新当前显示图片数据
                    data[2].data[0].FloorImg = this.dataService.json.floorPics[this.dataService.json.roomType[i].floorNum];
                    floorImg = this.callBackFloorImgArr(obj, this.dataService.json.floorPics);
                    // 更改图片索引后  重新
                    data[2].data[0].img = floorImg;
                    this.dataService.cache.shortFuncs['setRoomType'](room, params.name);
                }
            };
            roomTypeArr.push(roomtype);
        }
        let data = [
            {
                type: "select",
                data: {
                    name: "房间类型",
                    isShow: false,
                    isHaveInput: {
                        value: room.roomName,
                        func: (e, params) => {
                            // e.stopPropagation();
                            this.dataService.cache.shortFuncs['setRoomType'](room, params.value);
                            this.dataService.cache.shortFuncs['saveAction']();
                            this.dataService.cache.common.choose = obj;
                        }
                    },
                    currentData: this._floorRecorder[obj.id].roomtype,
                    chance: roomTypeArr
                }
            },
            {
                type: "inline",
                data: {
                    name: "面积",
                    isEditable: true,
                    value: room.areaCache.toFixed(2) + 'm²'
                }
            },
            {
                type: "slider",
                data: [
                    {
                        name: "地板贴图",
                        img: floorImg,
                        FloorImg: this.dataService.json.floorPics[obj.GetMaterialSelectIndex()]
                    },
                ]
            },
        ];
        this.popService.panelRightData.emit(data);
    }
    callBackFloorImgArr(obj, arr) {
        let argument = {};
        let imgArr = [];
        for (let i = 0; i < arr.length; i++) {
            if (i == obj.GetMaterialSelectIndex()) {
                argument = {
                    path: arr[i],
                    details: '',
                    borderClass: true,
                    func: (e, params, list) => {
                        obj.SetModelTexture(params.path);
                        obj.SetMaterialSelectIndex(i);
                        // for(let i=0;i<list.img.length;i++){
                        //     list.img[i].borderClass = false;
                        // }
                        // params.borderClass = true;
                        // list.FloorImg = params.path;
                        this.dataService.cache.shortFuncs['saveAction']();
                    }
                };
            }
            else {
                argument = {
                    path: arr[i],
                    details: '',
                    func: (e, params, list) => {
                        obj.SetModelTexture(params.path);
                        obj.SetMaterialSelectIndex(i);
                        // for(let i=0;i<list.img.length;i++){
                        //     list.img[i].borderClass = false;
                        // }
                        // params.borderClass = true;
                        // list.FloorImg = params.path;
                        this.dataService.cache.shortFuncs['saveAction']();
                    }
                };
            }
            imgArr.push(argument);
        }
        return imgArr;
    }
}
FloorPanel.ctorParameters = () => [
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_0__["PopDivService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__["JdesignDataService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_2__["DomUpdateService"] }
];


/***/ }),

/***/ "./src/app/designStyleData/panel/right-panel/frog.panel.ts":
/*!*****************************************************************!*\
  !*** ./src/app/designStyleData/panel/right-panel/frog.panel.ts ***!
  \*****************************************************************/
/*! exports provided: FrogPanel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FrogPanel", function() { return FrogPanel; });
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");


class FrogPanel {
    constructor(popService, dataService) {
        this.popService = popService;
        this.dataService = dataService;
        popService.panelRight.subscribe((data) => {
            // console.log(data)
            if (data == null) {
                this.popService.panelRightData.emit(null);
            }
            else {
                if (data.type == 'build') {
                    this.setFrogData(data);
                }
            }
        });
    }
    setFrogData(obj) {
        let data = [
            {
                type: "check",
                data: [
                    {
                        isCheck: false,
                        name: "地脚线",
                        func: (params) => {
                            obj.MakeKickLine(this.dataService.json.footLine[0].vertexData);
                            this.dataService.cache.shortFuncs['saveAction']();
                        },
                    }
                ]
            }
        ];
        this.popService.panelRightData.emit(data);
    }
}
FrogPanel.ctorParameters = () => [
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_0__["PopDivService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__["JdesignDataService"] }
];


/***/ }),

/***/ "./src/app/designStyleData/panel/right-panel/paramsModel.panel.ts":
/*!************************************************************************!*\
  !*** ./src/app/designStyleData/panel/right-panel/paramsModel.panel.ts ***!
  \************************************************************************/
/*! exports provided: ParamsModelPanel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ParamsModelPanel", function() { return ParamsModelPanel; });
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");



class ParamsModelPanel {
    constructor(popService, dataService, domService) {
        this.popService = popService;
        this.dataService = dataService;
        this.domService = domService;
        popService.panelRight.subscribe((data) => {
            // console.log(data)
            if (data == null) {
                this.popService.panelRightData.emit(null);
            }
            else {
                if (data.type == 'paramsModel') {
                    // this.popService.panelRightData.emit(null)
                    this.setData(data);
                }
            }
        });
    }
    setData(obj) {
        let inputs = [];
        if (obj.inputData) {
            for (let i = 0; i < obj.inputData.length; i++) {
                let input = {
                    name: obj.inputData[i].inputName,
                    isEditable: false,
                    value: obj.j2d.params[obj.inputData[i].j2dName].formula,
                    func: (e, params) => {
                        let distance = parseFloat(params.value);
                        obj.j2d.params[obj.inputData[i].j2dName].formula = distance;
                        this.domService.allSvg.emit();
                        this.dataService.cache.shortFuncs['saveAction']();
                    }
                };
                inputs.push(input);
            }
        }
        let data = [
            {
                type: "input",
                data: [...inputs]
            }
        ];
        this.popService.panelRightData.emit(data);
    }
}
ParamsModelPanel.ctorParameters = () => [
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_0__["PopDivService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__["JdesignDataService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_2__["DomUpdateService"] }
];


/***/ }),

/***/ "./src/app/designStyleData/panel/right-panel/platfond.panel.ts":
/*!*********************************************************************!*\
  !*** ./src/app/designStyleData/panel/right-panel/platfond.panel.ts ***!
  \*********************************************************************/
/*! exports provided: PlatFondPanel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlatFondPanel", function() { return PlatFondPanel; });
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");


class PlatFondPanel {
    constructor(popService, dataService) {
        this.popService = popService;
        this.dataService = dataService;
        popService.panelRight.subscribe((data) => {
            // console.log(data)
            if (data == null) {
                this.popService.panelRightData.emit(null);
            }
            else {
                if (data.type == 'roof') {
                    this.setRoomData(data);
                }
            }
        });
    }
    //天花板
    setRoomData(obj) {
        let data = [
            {
                type: "slider",
                data: [
                    {
                        name: "天花板贴图",
                        img: this.callBackRoofImgArr(obj, this.dataService.json.roofPics)
                    },
                ]
            },
        ];
        this.popService.panelRightData.emit(data);
    }
    callBackRoofImgArr(obj, arr) {
        let argument = {};
        let imgArr = [];
        for (let i = 0; i < arr.length; i++) {
            if (i == obj.GetMaterialSelectIndex()) {
                argument = {
                    path: arr[i],
                    details: '',
                    borderClass: true,
                    func: (e, params) => {
                        obj.SetModelTexture(params.path);
                        obj.SetMaterialSelectIndex(i);
                        this.dataService.cache.shortFuncs['saveAction']();
                    }
                };
            }
            else {
                argument = {
                    path: arr[i],
                    details: '',
                    func: (e, params) => {
                        obj.SetModelTexture(params.path);
                        obj.SetMaterialSelectIndex(i);
                        this.dataService.cache.shortFuncs['saveAction']();
                    }
                };
            }
            imgArr.push(argument);
        }
        return imgArr;
    }
}
PlatFondPanel.ctorParameters = () => [
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_0__["PopDivService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__["JdesignDataService"] }
];


/***/ }),

/***/ "./src/app/designStyleData/panel/right-panel/wall.panel.ts":
/*!*****************************************************************!*\
  !*** ./src/app/designStyleData/panel/right-panel/wall.panel.ts ***!
  \*****************************************************************/
/*! exports provided: WallPanel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WallPanel", function() { return WallPanel; });
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");



class WallPanel {
    constructor(popService, dataService, domService) {
        this.popService = popService;
        this.dataService = dataService;
        this.domService = domService;
        this.wallArr = [];
        popService.panelRight.subscribe((data) => {
            // console.log(data.id)
            if (data == null) {
                this.popService.panelRightData.emit(null);
            }
            else {
                if (data.type == 'wall') {
                    // console.log(data)
                    this.setWallData(data);
                }
                else if (data.type == 'cowall') {
                    console.log(data.GetKickLineProfileMatIndex);
                    this.setCoWallData(data);
                }
            }
        });
    }
    // 2d墙
    setWallData(obj) {
        let thickness = obj.thickness;
        let data = [
            {
                type: "input",
                data: [
                    {
                        name: "长度",
                        isEditable: true,
                        value: obj.getInLineDistance()
                    },
                    {
                        name: "厚度",
                        isEditable: false,
                        value: thickness,
                        func: (e, params) => {
                            this.dataService.cache.shortFuncs['fixWallThickness'](obj, parseInt(params.value));
                            // console.log(params.value)
                        }
                    },
                    {
                        name: "高度",
                        isEditable: true,
                        value: obj.wallHeight
                    },
                ]
            },
            {
                type: "select",
                data: {
                    name: "墙体类型",
                    isShow: false,
                    currentData: obj.wallType,
                    chance: [
                        {
                            icon: "./assets/img/freeicon/通用.svg",
                            name: "通用墙",
                            func: (e, params, slider) => {
                                slider.currentData = 0;
                                this.dataService.cache.shortFuncs['setWallType'](obj, 0);
                                this.dataService.cache.shortFuncs['saveAction']();
                            }
                        },
                        {
                            icon: "./assets/img/freeicon/承重.svg",
                            name: "承重墙",
                            func: (e, params, slider) => {
                                slider.currentData = 1;
                                this.dataService.cache.shortFuncs['setWallType'](obj, 1);
                                this.dataService.cache.shortFuncs['saveAction']();
                            }
                        },
                        {
                            icon: "./assets/img/freeicon/轻钢.svg",
                            name: "轻钢龙骨石膏板墙",
                            func: (e, params, slider) => {
                                slider.currentData = 2;
                                this.dataService.cache.shortFuncs['setWallType'](obj, 2);
                                this.dataService.cache.shortFuncs['saveAction']();
                            }
                        },
                        {
                            icon: "./assets/img/freeicon/轻质墙.svg",
                            name: "轻质砖墙",
                            func: (e, params, slider) => {
                                slider.currentData = 3;
                                this.dataService.cache.shortFuncs['setWallType'](obj, 3);
                                this.dataService.cache.shortFuncs['saveAction']();
                            }
                        },
                        {
                            icon: "./assets/img/freeicon/钢筋.svg",
                            name: "钢筋混凝土墙",
                            func: (e, params, slider) => {
                                slider.currentData = 4;
                                this.dataService.cache.shortFuncs['setWallType'](obj, 4);
                                this.dataService.cache.shortFuncs['saveAction']();
                            }
                        }
                    ]
                }
            }
        ];
        this.popService.panelRightData.emit(data);
    }
    setCoWallData(obj) {
        let wall = obj.getWall();
        let thickness = wall.thickness;
        let data = [
            {
                type: "input",
                data: [
                    {
                        name: "长度",
                        isEditable: true,
                        value: obj.getInLineDistance()
                    },
                    {
                        name: "厚度",
                        isEditable: false,
                        value: thickness,
                        func: (e, params) => {
                            this.dataService.cache.shortFuncs['fixWallThickness'](wall, parseInt(params.value));
                            this.dataService.cache.shortFuncs['saveAction']();
                            // console.log(params.value)
                        }
                    },
                    {
                        name: "高度",
                        isEditable: true,
                        value: wall.wallHeight
                    },
                ]
            },
            {
                type: "slider",
                data: [
                    {
                        name: "材质贴图",
                        img: this.CallBackImgArr(obj, this.dataService.json.wallPaper, 'wall'),
                        FloorImg: this.dataService.json.wallPaper[obj.GetMaterialSelectIndex()]
                    },
                ]
            },
            {
                type: "check",
                data: [
                    {
                        isCheck: obj.CurrentSelectHasKickLine(),
                        name: "地脚线",
                        func: (params) => {
                            if (!obj.CurrentSelectHasKickLine()) {
                                obj.MakeKickLine(this.dataService.json.footLine[0].vertexData);
                            }
                            else {
                                obj.DestroyKickLine();
                            }
                            this.dataService.cache.shortFuncs['saveAction']();
                        },
                        haveSlider: [
                            {
                                name: "材质图",
                                img: this.CallBackImgArr(obj, this.dataService.json.footLinePics, 'foot'),
                                FloorImg: this.dataService.json.footLinePics[obj.GetKickLineProfileMatIndex()]
                            },
                            {
                                name: "轮廓图",
                                img: this.callBackMatImgArr(obj, this.dataService.json.footLine, 'foot'),
                                FloorImg: this.dataService.json.footLine[obj.GetKickLineProfileMatIndex()]
                            }
                        ]
                    },
                    {
                        isCheck: obj.CurrentSelectHasPlasterCornice(),
                        name: "石膏线",
                        func: (params) => {
                            if (!obj.CurrentSelectHasPlasterCornice()) {
                                obj.MakePlasterCornice(this.dataService.json.plasterCornice[0].vertexData);
                            }
                            else {
                                obj.DestroyPlasterCornice();
                            }
                            this.dataService.cache.shortFuncs['saveAction']();
                        },
                        haveSlider: [
                            {
                                name: "材质图",
                                img: this.CallBackImgArr(obj, this.dataService.json.plasterLinePics, 'top'),
                                FloorImg: this.dataService.json.plasterLinePics[obj.GetPlasterCorniceProfileMatIndex()]
                            },
                            {
                                name: "轮廓图",
                                img: this.callBackMatImgArr(obj, this.dataService.json.plasterCornice, 'top'),
                                FloorImg: this.dataService.json.plasterLinePics[obj.GetPlasterCorniceProfileMatIndex()]
                            }
                        ]
                    },
                ]
            }
        ];
        this.popService.panelRightData.emit(data);
    }
    // 设置材质贴图
    CallBackImgArr(obj, arr, type) {
        let argument = {};
        let imgArr = [];
        let imgIndex;
        let imgFunc;
        if (type == 'wall') {
            // 获取墙的被选择的贴图index
            imgIndex = obj.GetMaterialSelectIndex();
            imgFunc = (i, params) => {
                // 给墙设置贴图
                obj.SetModelTexture(params.path);
                // 给墙的贴图设置index
                obj.SetMaterialSelectIndex(i);
            };
        }
        else if (type == 'foot') {
            // 获取墙的被选择的贴图index
            imgIndex = obj.GetKickLineProfileMatIndex();
            imgFunc = (i, params) => {
                obj.SetCurrentSelectKickLineMat(params.path);
                obj.SetKickLineProfileMatIndex(i);
            };
        }
        else if (type == 'top') {
            imgIndex = obj.GetPlasterCorniceProfileMatIndex();
            imgFunc = (i, params) => {
                obj.SetCurrentPlasterCorniceMat(params.path);
                obj.SetPlasterCorniceProfileMatIndex(i);
            };
        }
        for (let i = 0; i < arr.length; i++) {
            if (i == imgIndex) {
                argument = {
                    path: arr[i],
                    details: '',
                    borderClass: true,
                    func: (e, params) => {
                        imgFunc(i, params);
                    }
                };
            }
            else {
                argument = {
                    path: arr[i],
                    details: '',
                    func: (e, params) => {
                        imgFunc(i, params);
                    }
                };
            }
            imgArr.push(argument);
        }
        return imgArr;
    }
    // 设置轮廓图
    callBackMatImgArr(obj, arr, type) {
        let footImg = [];
        let newData = {};
        let footIndex;
        let footFunc;
        if (type == 'foot') {
            footIndex = obj.GetKickLineProfileIndex();
            footFunc = (arr, i) => {
                obj.DestroyKickLine();
                obj.MakeKickLine(arr[i].vertexData);
                obj.SetKickLineProfileIndex(i);
            };
        }
        else if (type == 'top') {
            footIndex = obj.GetPlasterCorniceProfileIndex();
            footFunc = (arr, i) => {
                obj.DestroyPlasterCornice();
                obj.MakePlasterCornice(arr[i].vertexData);
                obj.SetPlasterCorniceProfileIndex(i);
            };
        }
        for (let i = 0; i < arr.length; i++) {
            if (i == footIndex) {
                newData = {
                    path: arr[i].imgUrl,
                    borderClass: true,
                    func: (e) => {
                        footFunc(arr, i);
                    }
                };
            }
            else {
                newData = {
                    path: arr[i].imgUrl,
                    func: (e) => {
                        footFunc(arr, i);
                    }
                };
            }
            footImg.push(newData);
        }
        return footImg;
    }
}
WallPanel.ctorParameters = () => [
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_0__["PopDivService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__["JdesignDataService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_2__["DomUpdateService"] }
];


/***/ }),

/***/ "./src/app/designStyleData/panel/right-panel/window.panel.ts":
/*!*******************************************************************!*\
  !*** ./src/app/designStyleData/panel/right-panel/window.panel.ts ***!
  \*******************************************************************/
/*! exports provided: WindowPanel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WindowPanel", function() { return WindowPanel; });
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");



class WindowPanel {
    constructor(popService, dataService, domService) {
        this.popService = popService;
        this.dataService = dataService;
        this.domService = domService;
        popService.panelRight.subscribe((data) => {
            // console.log(data)
            // console.log(data)
            if (data == null) {
                this.popService.panelRightData.emit(null);
            }
            else {
                if (data.type == 'win' && data.plankType == 'normal') {
                    this.setWindowData(data);
                }
            }
        });
    }
    setWindowData(obj) {
        let data = [
            {
                type: "input",
                data: [
                    {
                        name: "宽度",
                        isEditable: false,
                        value: obj.size.width,
                        func: (e, params) => {
                            obj.size.width = parseInt(params.value);
                            this.dataService.cache.doorWin.move(obj, obj.pos);
                            this.popService.inputBoxs.emit(null);
                            this.dataService.cache.doorWin.displayLabel = false;
                            this.domService.allSvg.emit();
                            this.dataService.cache.shortFuncs['saveAction']();
                        }
                    },
                    {
                        name: "高度",
                        isEditable: false,
                        value: obj.size.height3D,
                        func: (e, params) => {
                            obj.size.height3D = parseInt(params.value);
                            this.dataService.cache.doorWin.move(obj, obj.pos);
                            this.popService.inputBoxs.emit(null);
                            this.dataService.cache.doorWin.displayLabel = false;
                            this.domService.allSvg.emit();
                            console.log(obj.size.height3D);
                            this.dataService.cache.shortFuncs['saveAction']();
                        }
                    },
                    {
                        name: "离地高度",
                        isEditable: false,
                        value: obj.floorHeight,
                        func: (e, params) => {
                            obj.floorHeight = parseInt(params.value);
                            this.dataService.cache.doorWin.move(obj, obj.pos);
                            this.popService.inputBoxs.emit(null);
                            this.dataService.cache.doorWin.displayLabel = false;
                            this.domService.allSvg.emit();
                            this.dataService.cache.shortFuncs['saveAction']();
                        }
                    }
                ]
            }
        ];
        this.popService.panelRightData.emit(data);
    }
}
WindowPanel.ctorParameters = () => [
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_0__["PopDivService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__["JdesignDataService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_2__["DomUpdateService"] }
];


/***/ }),

/***/ "./src/app/designStyleData/panel/rightData.panel.ts":
/*!**********************************************************!*\
  !*** ./src/app/designStyleData/panel/rightData.panel.ts ***!
  \**********************************************************/
/*! exports provided: RightDataPanel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RightDataPanel", function() { return RightDataPanel; });
/* harmony import */ var _services_http_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../services/http.service */ "./src/app/services/http.service.ts");

class RightDataPanel {
    constructor(httpService) {
        this.httpService = httpService;
        this.rightURL = './init/panelRightWallImg.json';
        this.getRightData(this.rightURL);
    }
    getRightData(url) {
        url = this.httpService.getRealUrl(url);
        this.httpService.getRes(url, 3, true).subscribe((datas) => {
            return datas;
        });
    }
}
RightDataPanel.ctorParameters = () => [
    { type: _services_http_service__WEBPACK_IMPORTED_MODULE_0__["HttpService"] }
];


/***/ }),

/***/ "./src/app/designStyleData/panel/topData.panel.ts":
/*!********************************************************!*\
  !*** ./src/app/designStyleData/panel/topData.panel.ts ***!
  \********************************************************/
/*! exports provided: TopDataPanel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TopDataPanel", function() { return TopDataPanel; });
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");
/* harmony import */ var _node_modules_angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../node_modules/@angular/platform-browser */ "./node_modules/@angular/platform-browser/fesm2015/platform-browser.js");




class TopDataPanel {
    constructor(popService, dataService, domService, sanitizer) {
        this.popService = popService;
        this.dataService = dataService;
        this.domService = domService;
        this.sanitizer = sanitizer;
        let data = this.getTopMenu();
        // this.popService.panelTop.emit(data)
    }
    /* 获取 */
    getTopMenu() {
        let data = [
            {
                icon: "#icon-wenjian2",
                text: "文件",
                dropList: [
                    {
                        "name": "打开",
                        load: true,
                        func: (e, list) => {
                            let files = e.target.files;
                            let oneFile = files[0];
                            if (oneFile != undefined) {
                                let fileReader = new FileReader();
                                // fileReader.readAsDataURL(oneFile);
                                fileReader.readAsText(oneFile, 'utf-8');
                                fileReader.onload = () => {
                                    let jsonObj = JSON.parse(fileReader.result);
                                    this.dataService.cache.shortFuncs["openData"](jsonObj);
                                    e.target.value = '';
                                };
                            }
                            // console.log('top')
                        }
                    },
                    {
                        "name": "保存",
                        load: false,
                        href: null,
                        textName: this.dataService.cmd.floorplan.designName + ".prj",
                        func: (e, list) => {
                            list.href = this.sanitizer.bypassSecurityTrustResourceUrl(window.URL.createObjectURL(new Blob([this.dataService.cache.shortFuncs["saveData"]()])));
                            // let data = this.dataService.cache.shortFuncs["saveData"]()
                            // console.log(data)
                        }
                    }
                ]
            },
            {
                icon: "#icon-chexiao",
                text: "撤销",
                hot: "(Ctrl Z)",
                func: (e) => {
                    e.stopPropagation();
                    this.dataService.cache.shortFuncs["undoData"]();
                },
                isBack: () => {
                    return this.dataService.cache.shortFuncs['getUndoNum']();
                },
                result: 1
            },
            {
                icon: "#icon-huifu",
                text: "还原",
                hot: "(Ctrl Y)",
                func: (e) => {
                    this.dataService.cache.shortFuncs["redoData"]();
                },
                isBack: () => {
                    return this.dataService.cache.shortFuncs['getRedoNum']();
                },
                result: 0
            },
            {
                icon: "#icon-xianshi",
                text: "显示",
                dropList: [
                    {
                        "name": "面积",
                        "isSelect": true,
                        func: (e, list) => {
                            e.stopPropagation();
                            list.isSelect == true ? list.isSelect = false : list.isSelect = true;
                            this.dataService.cache.floorplan.display.area = list.isSelect;
                            this.domService.svgRoom.emit();
                        }
                    },
                    {
                        "name": "尺寸",
                        list: [
                            {
                                "name": "墙内线",
                                isSelect: true,
                                func: (e, list, drop) => {
                                    e.stopPropagation();
                                    // e.preventDefault()
                                    for (let i = 0; i < drop.length; i++) {
                                        drop[i].isSelect = false;
                                    }
                                    list.isSelect = true;
                                    // this.dataService.cache.floorplan.display.outLabel_inLine = list.isSelect
                                    // this.domService.svgCowall.emit()
                                    this.dataService.cache.floorplan.display.inLabel = true;
                                    this.dataService.cache.floorplan.display.inLabel_inOrCenterWall = true;
                                    this.domService.svgCowall.emit();
                                }
                            },
                            {
                                "name": "墙中线",
                                isSelect: false,
                                func: (e, list, drop) => {
                                    e.stopPropagation();
                                    // e.preventDefault()
                                    for (let i = 0; i < drop.length; i++) {
                                        drop[i].isSelect = false;
                                    }
                                    list.isSelect = true;
                                    // this.dataService.cache.floorplan.display.outLabel_outLine = list.isSelect
                                    // this.domService.svgCowall.emit()
                                    this.dataService.cache.floorplan.display.inLabel = true;
                                    this.dataService.cache.floorplan.display.inLabel_inOrCenterWall = false;
                                    this.domService.svgCowall.emit();
                                }
                            },
                            {
                                "name": "不显示",
                                isSelect: false,
                                func: (e, list, drop) => {
                                    e.stopPropagation();
                                    // e.preventDefault()
                                    for (let i = 0; i < drop.length; i++) {
                                        drop[i].isSelect = false;
                                    }
                                    list.isSelect = true;
                                    // this.dataService.cache.floorplan.display.outLabel_outLine = list.isSelect
                                    this.dataService.cache.floorplan.display.inLabel = false;
                                    this.domService.svgCowall.emit();
                                }
                            },
                        ],
                    },
                    {
                        name: "外尺寸",
                        list: [
                            {
                                "name": "显示",
                                isSelect: false,
                                func: (e, list, drop) => {
                                    e.stopPropagation();
                                    // e.preventDefault()
                                    for (let i = 0; i < drop.length; i++) {
                                        drop[i].isSelect = false;
                                    }
                                    list.isSelect = true;
                                    // this.dataService.cache.floorplan.display.outLabel_inLine = list.isSelect
                                    // this.domService.svgCowall.emit()
                                    this.dataService.cache.floorplan.display.outLabel = true;
                                    this.domService.svgCowall.emit();
                                },
                            },
                            {
                                "name": "隐藏",
                                isSelect: true,
                                func: (e, list, drop) => {
                                    e.stopPropagation();
                                    // e.preventDefault()
                                    for (let i = 0; i < drop.length; i++) {
                                        drop[i].isSelect = false;
                                    }
                                    list.isSelect = true;
                                    // this.dataService.cache.floorplan.display.outLabel_inLine = list.isSelect
                                    // this.domService.svgCowall.emit()
                                    this.dataService.cache.floorplan.display.outLabel = false;
                                    this.domService.svgCowall.emit();
                                }
                            }
                        ],
                    },
                    // {
                    //     "name": "外尺寸(内墙)",
                    //     "isSelect": true,
                    //     func: (e, list) => {
                    //         e.stopPropagation()
                    //         list.isSelect == true ? list.isSelect = false : list.isSelect = true;
                    //         this.dataService.cache.floorplan.display.outLabel_inLine = list.isSelect
                    //         this.domService.svgCowall.emit()
                    //     }
                    // },
                    // {
                    //     "name": "外尺寸(墙厚度)",
                    //     "isSelect": true,
                    //     func: (e, list) => {
                    //         e.stopPropagation()
                    //         list.isSelect == true ? list.isSelect = false : list.isSelect = true;
                    //         this.dataService.cache.floorplan.display.outLabel_thickness = list.isSelect
                    //         this.domService.svgCowall.emit()
                    //     }
                    // },
                    // {
                    //     "name": "外尺寸(外墙)",
                    //     "isSelect": true,
                    //     func: (e, list) => {
                    //         e.stopPropagation()
                    //         list.isSelect == true ? list.isSelect = false : list.isSelect = true;
                    //         this.dataService.cache.floorplan.display.outLabel_outLine = list.isSelect
                    //         this.domService.svgCowall.emit()
                    //     }
                    // },
                    {
                        "name": "房间类型",
                        "isSelect": true,
                        func: (e, list) => {
                            e.stopPropagation();
                            list.isSelect == true ? list.isSelect = false : list.isSelect = true;
                            this.dataService.cache.floorplan.display.roomType = list.isSelect;
                            this.domService.svgRoom.emit();
                        }
                    },
                    {
                        "name": "网格",
                        "isSelect": true,
                        func: (e, list) => {
                            e.stopPropagation();
                            list.isSelect == true ? list.isSelect = false : list.isSelect = true;
                            this.dataService.cache.floorplan.display.grid = list.isSelect;
                            this.domService.svgBack.emit();
                        }
                    },
                    {
                        "name": "背景",
                        "isSelect": true,
                        func: (e, list) => {
                            e.stopPropagation();
                            list.isSelect == true ? list.isSelect = false : list.isSelect = true;
                            this.dataService.cache.floorplan.display.roomImg = list.isSelect;
                            this.domService.mainSvg.emit();
                            this.domService.allSvg.emit();
                        }
                    },
                    {
                        "name": "房型图",
                        "isSelect": true,
                        func: (e, list) => {
                            e.stopPropagation();
                            list.isSelect == true ? list.isSelect = false : list.isSelect = true;
                            this.dataService.cache.floorplan.display.roomSvg = list.isSelect;
                            this.domService.mainSvg.emit();
                        }
                    },
                    {
                        "name": "地板",
                        "isSelect": true,
                        func: (e, list) => {
                            e.stopPropagation();
                            list.isSelect == true ? list.isSelect = false : list.isSelect = true;
                            this.dataService.cache.floorplan.display.floor = list.isSelect;
                            this.domService.svgRoom.emit();
                        }
                    }
                ]
            },
            {
                icon: "#icon-bangzhu",
                text: "帮助",
                hot: ",3d视图中 W(前移),A(左移),S(后移),D(右移),Q(上移),E(下移)",
                isBack: () => {
                    return 0;
                },
                func: () => {
                }
            },
        ];
        this.popService.panelTop.emit(data);
    }
}
TopDataPanel.ctorParameters = () => [
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_0__["PopDivService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__["JdesignDataService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_2__["DomUpdateService"] },
    { type: _node_modules_angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__["DomSanitizer"] }
];


/***/ }),

/***/ "./src/app/designStyleData/rightMenu/DW.rightMenu.ts":
/*!***********************************************************!*\
  !*** ./src/app/designStyleData/rightMenu/DW.rightMenu.ts ***!
  \***********************************************************/
/*! exports provided: DWRightMenu */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DWRightMenu", function() { return DWRightMenu; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");
/* harmony import */ var _services_right_menu_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/right-menu.service */ "./src/app/services/right-menu.service.ts");



class DWRightMenu {
    constructor(dataService, popService, rightService) {
        this.dataService = dataService;
        this.popService = popService;
        this.rightService = rightService;
    }
    getMenu(e, DW) {
        let data = [
            {
                icon: this.popService.rigthClickData.删除背景图.ico,
                text: "删除",
                hot: "(Delete)",
                func: () => {
                    this.dataService.cache.shortFuncPlus('delDW', DW);
                    this.dataService.cache.shortFuncs['saveAction']();
                },
                isShow: false
            }
        ];
        return data;
    }
}
DWRightMenu.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_1__["PopDivService"] },
    { type: _services_right_menu_service__WEBPACK_IMPORTED_MODULE_2__["RightMenuService"] }
];


/***/ }),

/***/ "./src/app/designStyleData/rightMenu/back.rightMenu.ts":
/*!*************************************************************!*\
  !*** ./src/app/designStyleData/rightMenu/back.rightMenu.ts ***!
  \*************************************************************/
/*! exports provided: BackRightMenu */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BackRightMenu", function() { return BackRightMenu; });
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");
/* harmony import */ var _services_right_menu_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../services/right-menu.service */ "./src/app/services/right-menu.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");



class BackRightMenu {
    constructor(dataSerive, popService, rightService) {
        this.dataSerive = dataSerive;
        this.popService = popService;
        this.rightService = rightService;
        this.rightService.back.subscribe((obj) => {
            if (obj != null)
                return this.backMenu(obj.e);
            return this.backMenu(null);
        });
    }
    backMenu(e) {
        if (e == null) {
            this.popService.rightClick.emit(null);
            return false;
        }
        let data = {
            position: {
                x: e.clientX,
                y: e.clientY
            },
            body: [
                {
                    icon: this.popService.rigthClickData.背景图修改.ico,
                    text: "背景图修改",
                    func: (e) => {
                        this.dataSerive.cache.shortFuncPlus('changeBack', e);
                    },
                    type: this.dataSerive.floorplan.backImg == null ? 'file' : undefined,
                    isShow: false
                },
                {
                    icon: this.popService.rigthClickData.删除背景图.ico,
                    text: "删除背景图",
                    hot: "(Delete)",
                    func: () => {
                        this.dataSerive.cache.shortFuncPlus('delBack');
                    },
                    isShow: false
                }
            ]
        };
        this.popService.rightClick.emit(data);
        return true;
    }
}
BackRightMenu.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__["JdesignDataService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_0__["PopDivService"] },
    { type: _services_right_menu_service__WEBPACK_IMPORTED_MODULE_1__["RightMenuService"] }
];


/***/ }),

/***/ "./src/app/designStyleData/rightMenu/cornWin.rightMenu.ts":
/*!****************************************************************!*\
  !*** ./src/app/designStyleData/rightMenu/cornWin.rightMenu.ts ***!
  \****************************************************************/
/*! exports provided: CornWinRightMenu */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CornWinRightMenu", function() { return CornWinRightMenu; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_right_menu_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../services/right-menu.service */ "./src/app/services/right-menu.service.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");



class CornWinRightMenu {
    constructor(dataService, popService, rightService) {
        this.dataService = dataService;
        this.popService = popService;
        this.rightService = rightService;
        this.rightService.cornWin.subscribe((obj) => {
            if (obj) {
                return this.cornWin(obj.e, obj.cornerWin);
            }
            return this.cornWin(null);
        });
    }
    /** 飘窗 */
    cornWin(e, cornerWin) {
        if (e == null) {
            this.popService.rightClick.emit(null);
            return false;
        }
        let data = {
            position: {
                x: e.clientX,
                y: e.clientY
            },
            body: [
                {
                    icon: this.popService.rigthClickData.删除背景图.ico,
                    text: "删除",
                    hot: "(Delete)",
                    func: () => {
                        this.dataService.cache.shortFuncPlus('delCornWin', cornerWin);
                        this.dataService.cache.shortFuncs['saveAction']();
                    },
                    isShow: false
                }
            ]
        };
        this.popService.rightClick.emit(data);
        return true;
    }
}
CornWinRightMenu.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_2__["PopDivService"] },
    { type: _services_right_menu_service__WEBPACK_IMPORTED_MODULE_1__["RightMenuService"] }
];


/***/ }),

/***/ "./src/app/designStyleData/rightMenu/designStyleData.rightMenu.ts":
/*!************************************************************************!*\
  !*** ./src/app/designStyleData/rightMenu/designStyleData.rightMenu.ts ***!
  \************************************************************************/
/*! exports provided: DesignStyleDataRightMenu */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DesignStyleDataRightMenu", function() { return DesignStyleDataRightMenu; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");
/* harmony import */ var _services_right_menu_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/right-menu.service */ "./src/app/services/right-menu.service.ts");
/* harmony import */ var _wall_rightMenu__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./wall.rightMenu */ "./src/app/designStyleData/rightMenu/wall.rightMenu.ts");
/* harmony import */ var _back_rightMenu__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./back.rightMenu */ "./src/app/designStyleData/rightMenu/back.rightMenu.ts");
/* harmony import */ var _door_rightMenu__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./door.rightMenu */ "./src/app/designStyleData/rightMenu/door.rightMenu.ts");
/* harmony import */ var _win_rightMenu__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./win.rightMenu */ "./src/app/designStyleData/rightMenu/win.rightMenu.ts");
/* harmony import */ var _furniture_rightMenu__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./furniture.rightMenu */ "./src/app/designStyleData/rightMenu/furniture.rightMenu.ts");
/* harmony import */ var _point_rightMenu__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./point.rightMenu */ "./src/app/designStyleData/rightMenu/point.rightMenu.ts");
/* harmony import */ var _room_rightMenu__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./room.rightMenu */ "./src/app/designStyleData/rightMenu/room.rightMenu.ts");
/* harmony import */ var _cornWin_rightMenu__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./cornWin.rightMenu */ "./src/app/designStyleData/rightMenu/cornWin.rightMenu.ts");
/* harmony import */ var _panel_designStyleData_panel__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../panel/designStyleData.panel */ "./src/app/designStyleData/panel/designStyleData.panel.ts");
/* harmony import */ var _services_http_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../services/http.service */ "./src/app/services/http.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");
/* harmony import */ var _node_modules_angular_platform_browser__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../../node_modules/@angular/platform-browser */ "./node_modules/@angular/platform-browser/fesm2015/platform-browser.js");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../services/calculators.service */ "./src/app/services/calculators.service.ts");

















class DesignStyleDataRightMenu {
    constructor(dataService, popService, rightService, calService, httpService, DUService, domService, sanitizer) {
        this.dataService = dataService;
        this.popService = popService;
        this.rightService = rightService;
        this.calService = calService;
        this.httpService = httpService;
        this.DUService = DUService;
        this.domService = domService;
        this.sanitizer = sanitizer;
        let wall = new _wall_rightMenu__WEBPACK_IMPORTED_MODULE_4__["WallRightMenu"](dataService, popService, rightService);
        let back = new _back_rightMenu__WEBPACK_IMPORTED_MODULE_5__["BackRightMenu"](dataService, popService, rightService);
        let door = new _door_rightMenu__WEBPACK_IMPORTED_MODULE_6__["DoorRightMenu"](dataService, popService, rightService);
        let win = new _win_rightMenu__WEBPACK_IMPORTED_MODULE_7__["WinRightMenu"](dataService, popService, rightService);
        let furniture = new _furniture_rightMenu__WEBPACK_IMPORTED_MODULE_8__["FurnitureRightMenu"](dataService, popService, rightService);
        let point = new _point_rightMenu__WEBPACK_IMPORTED_MODULE_9__["PointRightMenu"](dataService, popService, rightService);
        let room = new _room_rightMenu__WEBPACK_IMPORTED_MODULE_10__["RoomRightMenu"](dataService, popService, rightService);
        let cornWin = new _cornWin_rightMenu__WEBPACK_IMPORTED_MODULE_11__["CornWinRightMenu"](dataService, popService, rightService);
        let designStyleDataPanel = new _panel_designStyleData_panel__WEBPACK_IMPORTED_MODULE_12__["DesignStyleDataPanel"](dataService, popService, calService, httpService, DUService, domService, sanitizer);
    }
}
DesignStyleDataRightMenu.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_2__["PopDivService"] },
    { type: _services_right_menu_service__WEBPACK_IMPORTED_MODULE_3__["RightMenuService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_16__["CalculatorsService"] },
    { type: _services_http_service__WEBPACK_IMPORTED_MODULE_13__["HttpService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_1__["JdesignUtil2dService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_14__["DomUpdateService"] },
    { type: _node_modules_angular_platform_browser__WEBPACK_IMPORTED_MODULE_15__["DomSanitizer"] }
];


/***/ }),

/***/ "./src/app/designStyleData/rightMenu/door.rightMenu.ts":
/*!*************************************************************!*\
  !*** ./src/app/designStyleData/rightMenu/door.rightMenu.ts ***!
  \*************************************************************/
/*! exports provided: DoorRightMenu */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DoorRightMenu", function() { return DoorRightMenu; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_right_menu_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../services/right-menu.service */ "./src/app/services/right-menu.service.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");
/* harmony import */ var _DW_rightMenu__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./DW.rightMenu */ "./src/app/designStyleData/rightMenu/DW.rightMenu.ts");




class DoorRightMenu extends _DW_rightMenu__WEBPACK_IMPORTED_MODULE_3__["DWRightMenu"] {
    constructor(dataService, popService, rightService) {
        super(dataService, popService, rightService);
        this.dataService = dataService;
        this.popService = popService;
        this.rightService = rightService;
        this.rightService.door.subscribe((obj) => {
            if (obj != null)
                return this.doorMenu(obj.e, obj.door);
            return this.doorMenu(null);
        });
    }
    /** 菜单 */
    doorMenu(e, door) {
        if (e == null) {
            this.popService.rightClick.emit(null);
            return false;
        }
        let data = {
            position: {
                x: e.clientX,
                y: e.clientY
            },
            body: []
        };
        data.body.push(...this.getMenu(e, door));
        this.popService.rightClick.emit(data);
        return true;
    }
}
DoorRightMenu.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_2__["PopDivService"] },
    { type: _services_right_menu_service__WEBPACK_IMPORTED_MODULE_1__["RightMenuService"] }
];


/***/ }),

/***/ "./src/app/designStyleData/rightMenu/furniture.rightMenu.ts":
/*!******************************************************************!*\
  !*** ./src/app/designStyleData/rightMenu/furniture.rightMenu.ts ***!
  \******************************************************************/
/*! exports provided: FurnitureRightMenu */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FurnitureRightMenu", function() { return FurnitureRightMenu; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_right_menu_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../services/right-menu.service */ "./src/app/services/right-menu.service.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");



class FurnitureRightMenu {
    constructor(dataService, popService, rightService) {
        this.dataService = dataService;
        this.popService = popService;
        this.rightService = rightService;
        this.rightService.furniture.subscribe((obj) => {
            if (obj != null)
                return this.furnitureMenu(obj.e, obj.furniture);
            return this.furnitureMenu(null);
        });
    }
    /** 菜单 */
    furnitureMenu(e, furniture) {
        if (e == null) {
            this.popService.rightClick.emit(null);
            return false;
        }
        let data = {
            position: {
                x: e.clientX,
                y: e.clientY
            },
            body: [
                {
                    icon: this.popService.rigthClickData.删除背景图.ico,
                    text: "删除",
                    hot: "(Delete)",
                    func: () => {
                        this.dataService.cache.shortFuncPlus('delFurn', furniture);
                        this.dataService.cache.shortFuncs['saveAction']();
                    },
                    isShow: false
                }
            ]
        };
        this.popService.rightClick.emit(data);
        return true;
    }
}
FurnitureRightMenu.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_2__["PopDivService"] },
    { type: _services_right_menu_service__WEBPACK_IMPORTED_MODULE_1__["RightMenuService"] }
];


/***/ }),

/***/ "./src/app/designStyleData/rightMenu/point.rightMenu.ts":
/*!**************************************************************!*\
  !*** ./src/app/designStyleData/rightMenu/point.rightMenu.ts ***!
  \**************************************************************/
/*! exports provided: PointRightMenu */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PointRightMenu", function() { return PointRightMenu; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_right_menu_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../services/right-menu.service */ "./src/app/services/right-menu.service.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");



class PointRightMenu {
    constructor(dataService, popService, rightService) {
        this.dataService = dataService;
        this.popService = popService;
        this.rightService = rightService;
        this.rightService.point.subscribe((obj) => {
            if (obj != null)
                return this.pointMenu(obj.e, obj.point);
            return this.pointMenu(null);
        });
    }
    /** 点的右键功能 */
    pointMenu(e, point) {
        if (e == null || !this.dataService.cache.shortFuncs['isCombineWall'](point)) {
            this.popService.rightClick.emit(null);
            return false;
        }
        let data = {
            position: {
                x: e.clientX,
                y: e.clientY
            },
            body: [
                {
                    icon: this.popService.rigthClickData.拆分墙.ico,
                    text: "连接墙体",
                    func: () => {
                        this.dataService.cache.shortFuncPlus('combineWall', point);
                        this.dataService.cache.shortFuncs['saveAction']();
                    },
                    isShow: false
                }
            ]
        };
        this.popService.rightClick.emit(data);
        return true;
    }
}
PointRightMenu.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_2__["PopDivService"] },
    { type: _services_right_menu_service__WEBPACK_IMPORTED_MODULE_1__["RightMenuService"] }
];


/***/ }),

/***/ "./src/app/designStyleData/rightMenu/room.rightMenu.ts":
/*!*************************************************************!*\
  !*** ./src/app/designStyleData/rightMenu/room.rightMenu.ts ***!
  \*************************************************************/
/*! exports provided: RoomRightMenu */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RoomRightMenu", function() { return RoomRightMenu; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_right_menu_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../services/right-menu.service */ "./src/app/services/right-menu.service.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");



class RoomRightMenu {
    constructor(dataService, popService, rightService) {
        this.dataService = dataService;
        this.popService = popService;
        this.rightService = rightService;
        // this.rightService.room.subscribe((obj: { e: any, room?: JRoom }) => {
        //     if (obj != null)
        //         return this.roomMenu(obj.e, obj.room)
        //     return this.roomMenu(null)
        // })
    }
    /** room右键菜单 */
    roomMenu(e, room) {
        if (e == null) {
            this.popService.rightClick.emit(null);
            return false;
        }
        let data = {
            position: {
                x: e.clientX,
                y: e.clientY
            },
            body: [
                {
                    icon: this.popService.rigthClickData.变成阳台.ico,
                    text: "变成阳台",
                    func: () => {
                        this.dataService.cache.shortFuncPlus('balconyRoom', room);
                        this.dataService.cache.shortFuncs['saveAction']();
                    },
                    isShow: false
                },
                {
                    icon: this.popService.rigthClickData.变成正常.ico,
                    text: "变成正常",
                    func: () => {
                        this.dataService.cache.shortFuncPlus('changeNormalRoom', room);
                        this.dataService.cache.shortFuncs['saveAction']();
                    },
                    isShow: false
                },
                {
                    icon: this.popService.rigthClickData.地板测试.ico,
                    text: "地板测试",
                    func: () => {
                        this.dataService.cache.shortFuncPlus('testFloor', room);
                        this.dataService.cache.shortFuncs['saveAction']();
                    },
                    isShow: false
                }
            ]
        };
        this.popService.rightClick.emit(data);
        return true;
    }
}
RoomRightMenu.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_2__["PopDivService"] },
    { type: _services_right_menu_service__WEBPACK_IMPORTED_MODULE_1__["RightMenuService"] }
];


/***/ }),

/***/ "./src/app/designStyleData/rightMenu/wall.rightMenu.ts":
/*!*************************************************************!*\
  !*** ./src/app/designStyleData/rightMenu/wall.rightMenu.ts ***!
  \*************************************************************/
/*! exports provided: WallRightMenu */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WallRightMenu", function() { return WallRightMenu; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_right_menu_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../services/right-menu.service */ "./src/app/services/right-menu.service.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");



class WallRightMenu {
    constructor(dataService, popService, rightService) {
        this.dataService = dataService;
        this.popService = popService;
        this.rightService = rightService;
        this.rightService.wall.subscribe((obj) => {
            if (obj != null)
                return this.wallMenu(obj.e, obj.wall);
            return this.wallMenu(null);
        });
    }
    /** 墙的右键功能 */
    wallMenu(e, wall) {
        if (e == null) {
            this.popService.rightClick.emit(null);
            return false;
        }
        let data = {
            position: {
                x: e.clientX,
                y: e.clientY
            },
            body: [
                {
                    icon: this.popService.rigthClickData.拆分墙.ico,
                    text: "拆分墙",
                    func: () => {
                        this.dataService.cache.shortFuncPlus('cutWall', wall);
                        this.dataService.cache.shortFuncs['saveAction']();
                    },
                    isShow: false
                },
                {
                    icon: this.popService.rigthClickData.删除背景图.ico,
                    text: "删除",
                    hot: "(Delete)",
                    func: () => {
                        this.dataService.cache.shortFuncPlus('delWall', wall);
                        this.dataService.cache.shortFuncs['saveAction']();
                    },
                    isShow: false
                }
            ],
            isWall: false
        };
        if (wall.getCowallArr().length == 1 || wall.arcDistance != 0) {
            let obj = {
                icon: this.popService.rigthClickData.转弧墙.ico,
                text: "直弧互转",
                func: () => {
                    this.dataService.cache.shortFuncPlus('transArcWall', wall);
                    this.dataService.cache.shortFuncs['saveAction']();
                },
                isHidde: false,
                isShow: false
            };
            data.body.splice(0, 0, obj);
        }
        this.popService.rightClick.emit(data);
        return true;
    }
}
WallRightMenu.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_2__["PopDivService"] },
    { type: _services_right_menu_service__WEBPACK_IMPORTED_MODULE_1__["RightMenuService"] }
];


/***/ }),

/***/ "./src/app/designStyleData/rightMenu/win.rightMenu.ts":
/*!************************************************************!*\
  !*** ./src/app/designStyleData/rightMenu/win.rightMenu.ts ***!
  \************************************************************/
/*! exports provided: WinRightMenu */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WinRightMenu", function() { return WinRightMenu; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_right_menu_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../services/right-menu.service */ "./src/app/services/right-menu.service.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");
/* harmony import */ var _DW_rightMenu__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./DW.rightMenu */ "./src/app/designStyleData/rightMenu/DW.rightMenu.ts");




class WinRightMenu extends _DW_rightMenu__WEBPACK_IMPORTED_MODULE_3__["DWRightMenu"] {
    constructor(dataService, popService, rightService) {
        super(dataService, popService, rightService);
        this.dataService = dataService;
        this.popService = popService;
        this.rightService = rightService;
        this.rightService.win.subscribe((obj) => {
            if (obj != null)
                return this.winMenu(obj.e, obj.win);
            return this.winMenu(null);
        });
    }
    /** 墙的右键功能 */
    winMenu(e, win) {
        if (e == null) {
            this.popService.rightClick.emit(null);
            return false;
        }
        let data = {
            position: {
                x: e.clientX,
                y: e.clientY
            },
            body: []
        };
        data.body.push(...this.getMenu(e, win));
        this.popService.rightClick.emit(data);
        return true;
    }
}
WinRightMenu.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_2__["PopDivService"] },
    { type: _services_right_menu_service__WEBPACK_IMPORTED_MODULE_1__["RightMenuService"] }
];


/***/ }),

/***/ "./src/app/designStyleData/shortFunc/DW.shortFunc.ts":
/*!***********************************************************!*\
  !*** ./src/app/designStyleData/shortFunc/DW.shortFunc.ts ***!
  \***********************************************************/
/*! exports provided: DWShortFunc */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DWShortFunc", function() { return DWShortFunc; });
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");




class DWShortFunc {
    constructor(popService, dataService, calService, domService) {
        this.popService = popService;
        this.dataService = dataService;
        this.calService = calService;
        this.domService = domService;
        /* 删除门窗 */
        this.dataService.cache.shortFuncs['delDW'] = (obj) => {
            this.delDW(obj);
        };
        /* 是否门窗 */
        this.dataService.cache.shortFuncs["isDW"] = (obj) => {
            if (obj.type == "door" || obj.type == "win")
                return true;
            return false;
        };
        /* 添加 */
    }
    /* 删除门窗 */
    delDW(DW) {
        // DW.wallID = null
        if (DW.type == 'door') {
            let door = this.dataService.doors[DW.id];
            this.calService.door.delWall(door);
            this.calService.door.del(door);
        }
        else if (DW.type == 'win') {
            let win = this.dataService.wins[DW.id];
            this.calService.win.delWall(win);
            this.calService.win.del(win);
        }
        this.dataService.cache.common.choose = this.dataService.floorplan;
        this.popService.inputBoxs.emit([]);
        this.popService.buttons.emit(null);
        this.domService.allSvg.emit();
    }
}
DWShortFunc.ctorParameters = () => [
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_0__["PopDivService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__["JdesignDataService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__["CalculatorsService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_3__["DomUpdateService"] }
];


/***/ }),

/***/ "./src/app/designStyleData/shortFunc/LUWin.shortFunc.ts":
/*!**************************************************************!*\
  !*** ./src/app/designStyleData/shortFunc/LUWin.shortFunc.ts ***!
  \**************************************************************/
/*! exports provided: LUWinShortFunc */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LUWinShortFunc", function() { return LUWinShortFunc; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");





class LUWinShortFunc {
    constructor(dataService, calService, domService, popService, DUService) {
        this.dataService = dataService;
        this.calService = calService;
        this.domService = domService;
        this.popService = popService;
        this.DUService = DUService;
        this.dataService.cache.shortFuncs["createLWin"] = () => {
            this.createNewLWin();
        };
        this.dataService.cache.shortFuncs['createUWin'] = () => {
            this.createNewUWin();
        };
        this.dataService.cache.shortFuncs['delLUWin'] = (obj) => {
            this.delObj(obj);
        };
        this.dataService.cache.shortFuncs['isLUWin'] = (obj) => {
            return this.isLUWin(obj);
        };
    }
    createNewLWin() {
        let j2d = this.DUService.obj.clone(this.dataService.cache.baseData.j2d['LWin']);
        j2d = this.DUService.parseJ2D.getobjData(j2d);
        let LWin = this.calService.LWin.createNew({
            j2d: j2d,
            radian: 0,
            floorHeight: 1000,
            height3D: 500
        });
        this.dataService.cache.common.choose = LWin;
        this.setNormal();
    }
    createNewUWin() {
        let j2d = this.DUService.obj.clone(this.dataService.cache.baseData.j2d['UWin']);
        j2d = this.DUService.parseJ2D.getobjData(j2d);
        let UWin = this.calService.UWin.createNew({
            j2d: j2d,
            centerRadian: 0,
            radian: 0,
            floorHeight: 1000,
            height3D: 500
        });
        this.dataService.cache.common.choose = UWin;
        this.setNormal();
    }
    setNormal() {
        this.dataService.cache.common.mode = 'normal';
        this.dataService.cache.common.blockON = true;
        this.dataService.cache.common.firstPos = null;
        this.dataService.cmd.cowall.hide = true;
        this.domUpdate();
    }
    isLUWin(obj) {
        switch (obj.type) {
            case "LWin":
            case "UWin":
                return true;
            default:
                return false;
        }
    }
    delObj(obj) {
        switch (obj.type) {
            case "LWin":
                delete this.dataService.LWins[obj.id];
            case "UWin":
                delete this.dataService.UWins[obj.id];
        }
        this.domUpdate();
    }
    /** dom更新 */
    domUpdate() {
        this.domService.allSvg.emit();
        this.popService.inputBoxs.emit([]);
        this.popService.buttons.emit(null);
    }
}
LUWinShortFunc.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_1__["CalculatorsService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_2__["DomUpdateService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_3__["PopDivService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_4__["JdesignUtil2dService"] }
];


/***/ }),

/***/ "./src/app/designStyleData/shortFunc/back.shortFunc.ts":
/*!*************************************************************!*\
  !*** ./src/app/designStyleData/shortFunc/back.shortFunc.ts ***!
  \*************************************************************/
/*! exports provided: BackShortFunc */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BackShortFunc", function() { return BackShortFunc; });
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");




class BackShortFunc {
    constructor(popService, dataService, calService, domService) {
        this.popService = popService;
        this.dataService = dataService;
        this.calService = calService;
        this.domService = domService;
        /* 打开背景图 */
        this.dataService.cache.shortFuncs['openBackImg'] = (e) => {
            this.openBackImg(e);
        };
        /* 修改背景图 */
        this.dataService.cache.shortFuncs['setBackImg'] = (e, img, ratio) => {
            this.setBackImg(e, img, ratio);
        };
        /* 修改背景图 */
        this.dataService.cache.shortFuncs['delBack'] = () => {
            this.delBackImg();
        };
        /* 改变背景图 */
        this.dataService.cache.shortFuncs['changeBack'] = (e) => {
            this.fixBackImg(e);
        };
    }
    /** 打开背景图 */
    openBackImg(e) {
        let files = e.target.files;
        let oneFile = files[0];
        let imageType = /image.*/;
        if (oneFile != undefined && oneFile.type.match(imageType)) {
            let fileReader = new FileReader();
            fileReader.readAsDataURL(oneFile);
            fileReader.onload = () => {
                let img = new Image();
                img.onload = () => {
                    let data = {
                        url: fileReader.result,
                        width: img.width,
                        height: img.height,
                        distance: 1000,
                        func: (e, img, ratio) => {
                            this.setBackImg(e, img, ratio);
                        }
                    };
                    this.popService.backImg.emit(data);
                };
                img.src = fileReader.result;
                e.target.value = '';
            };
        }
    }
    /** 设置背景图 */
    setBackImg(e, img, ratio) {
        this.dataService.cache.common.mode = 'normal';
        this.dataService.cache.common.blockON = true;
        this.dataService.cache.common.firstPos = null;
        ratio = ratio / this.dataService.cmd.floorplan.mm;
        let imgWidth = img.width * ratio;
        let imgHeight = img.height * ratio;
        let multiple = this.dataService.cache.floorplan.multiple;
        let smallLeft = -this.dataService.cmd.floorplan.left - (this.dataService.cmd.back.size.width / 2 / multiple * (multiple - 1));
        let smallTop = -this.dataService.cmd.floorplan.top - (this.dataService.cmd.back.size.height / 2 / multiple * (multiple - 1));
        let imgMoveLeft = (smallLeft + e.clientX) * multiple - (imgWidth / 2);
        let imgMoveTop = (smallTop + e.clientY) * multiple - (imgHeight / 2);
        this.dataService.floorplan.backImg = {
            url: img.url,
            width: imgWidth,
            height: imgHeight,
            left: imgMoveLeft,
            top: imgMoveTop
        };
        this.dataService.cache.common.choose = this.dataService.floorplan;
        this.dataService.floorplan.mode = 'backImg';
        this.domUpdate();
    }
    /* 删除背景图 */
    delBackImg() {
        this.dataService.floorplan.backImg = null;
        this.popService.backImg.emit(null);
    }
    /* 修改背景图 */
    fixBackImg(e) {
        console.log('ccc');
        if (this.dataService.floorplan.backImg == null) {
            this.dataService.cache.shortFuncs['openBackImg'](e);
        }
        else {
            let data = {
                url: this.dataService.floorplan.backImg.url,
                width: this.dataService.floorplan.backImg.width,
                height: this.dataService.floorplan.backImg.height,
                distance: 1000,
                func: (e, img, ratio) => {
                    this.dataService.cache.shortFuncs['setBackImg'](e, img, ratio);
                }
            };
            this.popService.backImg.emit(data);
        }
    }
    /** dom更新 */
    domUpdate() {
        this.domService.allSvg.emit();
        this.popService.inputBoxs.emit([]);
        this.popService.buttons.emit(null);
    }
}
BackShortFunc.ctorParameters = () => [
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_0__["PopDivService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__["JdesignDataService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__["CalculatorsService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_3__["DomUpdateService"] }
];


/***/ }),

/***/ "./src/app/designStyleData/shortFunc/build.shortFunc.ts":
/*!**************************************************************!*\
  !*** ./src/app/designStyleData/shortFunc/build.shortFunc.ts ***!
  \**************************************************************/
/*! exports provided: BuildShortFunc */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BuildShortFunc", function() { return BuildShortFunc; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");




class BuildShortFunc {
    constructor(dataService, calService, domService, popService) {
        this.dataService = dataService;
        this.calService = calService;
        this.domService = domService;
        this.popService = popService;
        /* 添加建筑物 */
        this.dataService.cache.shortFuncs["addBuild"] = (obj) => {
            let build = this.calService.geometry.createNew('build', obj);
            this.dataService.cache.common.choose = build;
            this.dataService.cache.common.mode = 'normal';
            this.dataService.cache.common.blockON = true;
            this.dataService.cache.common.firstPos = null;
            this.dataService.cmd.cowall.hide = true;
            this.domService.allSvg.emit();
            this.popService.inputBoxs.emit([]);
            this.popService.buttons.emit(null);
        };
        /* 删除建筑物 */
        this.dataService.cache.shortFuncs['delBuild'] = (obj) => {
            this.calService.geometry.del(obj);
            this.domService.allSvg.emit();
        };
    }
}
BuildShortFunc.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_1__["CalculatorsService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_2__["DomUpdateService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_3__["PopDivService"] }
];


/***/ }),

/***/ "./src/app/designStyleData/shortFunc/camera.shortFuncs.ts":
/*!****************************************************************!*\
  !*** ./src/app/designStyleData/shortFunc/camera.shortFuncs.ts ***!
  \****************************************************************/
/*! exports provided: CameraShortFuncs */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CameraShortFuncs", function() { return CameraShortFuncs; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");



class CameraShortFuncs {
    constructor(dataService, domService, DUService) {
        this.dataService = dataService;
        this.domService = domService;
        this.DUService = DUService;
        let moveDistance = 30;
        this.setMoveUp(moveDistance);
        this.setMoveDown(moveDistance);
        this.setMoveLeft(moveDistance);
        this.setMoveRight(moveDistance);
        this.dataService.cache.shortFuncs['cameraUp'] = (distance) => {
            this.setCameraMove(distance, -Math.PI / 2);
        };
        this.dataService.cache.shortFuncs['cameraDown'] = (distance) => {
            this.setCameraMove(distance, Math.PI / 2);
        };
    }
    /** 向前 */
    setMoveUp(distance) {
        this.keyControlCameraMove(distance, -Math.PI / 2, "cameraForwardStart", "cameraForwardStop");
    }
    /** 向后 */
    setMoveDown(distance) {
        this.keyControlCameraMove(distance, Math.PI / 2, "cameraBackwardStart", "cameraBackwardStop");
    }
    /** 向左 */
    setMoveLeft(distance) {
        this.keyControlCameraMove(distance, Math.PI, "cameraLeftStart", "cameraLeftStop");
    }
    /** 向右 */
    setMoveRight(distance) {
        this.keyControlCameraMove(distance, 0, "cameraRightStart", "cameraRightStop");
    }
    /** 键盘 控制相机移动 */
    keyControlCameraMove(distance, fixRadian, downKey, upKey) {
        let move = false;
        let func = () => {
            if (move) {
                this.setCameraMove(distance, fixRadian);
            }
        };
        this.dataService.cache.shortFuncs[downKey] = () => {
            move = true;
        };
        this.dataService.cache.shortFuncs[upKey] = () => {
            move = false;
        };
        this.dataService.cache.AnimationFuncs.push(func);
    }
    /** 设置相机移动 */
    setCameraMove(distance, fixRadian) {
        this.dataService.camera.pos = this.DUService.pos.getRayPos(this.dataService.camera.pos, this.dataService.camera.radian + fixRadian, distance);
        this.domService.svgCamera.emit();
        this.dataService.camera.strongUpdate3D();
    }
}
CameraShortFuncs.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_1__["DomUpdateService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"] }
];


/***/ }),

/***/ "./src/app/designStyleData/shortFunc/common.shortFunc.ts":
/*!***************************************************************!*\
  !*** ./src/app/designStyleData/shortFunc/common.shortFunc.ts ***!
  \***************************************************************/
/*! exports provided: CommonShortFunc */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CommonShortFunc", function() { return CommonShortFunc; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");




class CommonShortFunc {
    constructor(dataService, calService, domService, popService) {
        this.dataService = dataService;
        this.calService = calService;
        this.domService = domService;
        this.popService = popService;
        /* 测试1 */
        this.dataService.cache.shortFuncs['test1'] = (obj) => {
            if (obj) {
                console.log(`测试1,有对象`);
                console.log(obj);
                console.log('=========');
            }
            else {
                console.log(`测试1,没有对象`);
                console.log('=========');
            }
        };
        /* 测试2 */
        this.dataService.cache.shortFuncs['test2'] = (obj) => {
            if (obj) {
                console.log(`测试2,有对象`);
                console.log(obj);
                console.log('=========');
            }
            else {
                console.log(`测试2,没有对象`);
                console.log('=========');
            }
        };
        /* 保存数据 */
        this.dataService.cache.shortFuncs["saveData"] = () => {
            let data = this.calService.undoRedo.readData();
            let text = JSON.stringify(data);
            return text;
        };
        /* 动作保存 */
        this.dataService.cache.shortFuncs['saveAction'] = () => {
            this.calService.undoRedo.save();
        };
        /* 打开数据 */
        this.dataService.cache.shortFuncs['openData'] = (data) => {
            this.calService.undoRedo.open(data, () => {
                // this.dataService.cache.cowall.update3D.emit()
            }, () => {
                this.calService.wall.arcInit();
                this.domService.svgWall.emit();
            }, (maxNum) => {
                if (this.dataService.cmd.floorplan.nextID < (maxNum + 100)) {
                    this.dataService.cmd.floorplan.nextID = maxNum + 100;
                }
                this.calService.room.resetCowalls();
                this.dataService.cache.floorplan.dataEmit.emit();
            });
            this.domUpdate();
        };
        /* 撤销数据 */
        this.dataService.cache.shortFuncs["undoData"] = () => {
            this.dataService.cache.common.choose = this.dataService.floorplan;
            this.calService.undoRedo.undo(() => {
                // this.dataService.cache.cowall.update3D.emit()
            }, () => {
                this.calService.wall.arcInit();
                this.domService.svgWall.emit();
            }, () => {
                this.dataService.cache.floorplan.dataEmit.emit();
                this.dataService.cache.cowall.update3D.emit();
            });
            this.domUpdate();
        };
        /* 获取撤销个数 */
        this.dataService.cache.shortFuncs['getUndoNum'] = () => {
            return this.dataService.cache.undoData.length;
        };
        /* 还原数据 */
        this.dataService.cache.shortFuncs["redoData"] = () => {
            this.dataService.cache.common.choose = this.dataService.floorplan;
            this.calService.undoRedo.redo(() => {
                // this.dataService.cache.cowall.update3D.emit()
            }, () => {
                this.calService.wall.arcInit();
                this.domService.svgWall.emit();
            }, () => {
                this.dataService.cache.floorplan.dataEmit.emit();
            });
            this.domUpdate();
        };
        /* 获取还原个数 */
        this.dataService.cache.shortFuncs['getRedoNum'] = () => {
            return this.dataService.cache.redoData.length;
        };
        /* 是否为普通模式 */
        this.dataService.cache.shortFuncs["isNormal"] = () => {
            return this.dataService.cache.common.mode == "normal";
        };
        /* 是否为画墙模式 */
        this.dataService.cache.shortFuncs["isDrawWall"] = () => {
            return this.dataService.cache.common.mode == "drawWall";
        };
        /* 取消吸附 */
        this.dataService.cache.shortFuncs["cancelAbosrb"] = () => {
            this.dataService.cache.common.isAbosrb = false;
        };
        /* 开启吸附 */
        this.dataService.cache.shortFuncs["setAbosrb"] = () => {
            this.dataService.cache.common.isAbosrb = true;
        };
        /* 是否为画空间模式 */
        this.dataService.cache.shortFuncs["isDrawRoom"] = () => {
            return this.dataService.cache.common.mode == 'drawRoom';
        };
        /* 设置normal模式 */
        this.dataService.cache.shortFuncs["setNormal"] = () => {
            this.dataService.cache.common.mode = 'normal';
            this.dataService.cache.common.blockON = true;
            this.dataService.cache.common.firstPos = null;
            this.dataService.cmd.cowall.hide = true;
            this.domUpdate();
        };
        /* 设置画墙模式 */
        this.dataService.cache.shortFuncs['setDrawWall'] = () => {
            this.drawWall();
            this.dataService.cache.wall.location = 0;
            this.dataService.cache.common.isAbosrb = true;
        };
        /* 设置画内墙模式 */
        this.dataService.cache.shortFuncs["setDrawInWall"] = () => {
            this.drawWall();
            this.dataService.cache.wall.location = -1;
        };
        /* 设置画空间模式 */
        this.dataService.cache.shortFuncs["setDrawRoom"] = () => {
            this.dataService.cache.mode.drawRoom.emit();
            this.dataService.cache.common.choose = null;
            this.dataService.cache.common.mode = 'drawRoom';
            this.dataService.cache.common.blockON = true;
            this.domUpdate();
        };
    }
    /** dom更新 */
    domUpdate() {
        this.domService.allSvg.emit();
        this.initData();
    }
    /* 画墙 */
    drawWall() {
        this.dataService.cache.mode.drawWall.emit();
        this.dataService.cache.common.mode = 'drawWall';
        this.dataService.cache.common.blockON = true;
        this.dataService.cache.common.choose = null;
        this.domUpdate();
    }
    /** 数据初始化 */
    initData() {
        this.dataService.cache.cowall.update3D.emit();
        this.popService.inputBoxs.emit([]);
        this.popService.buttons.emit(null);
        this.popService.rightClick.emit(null);
    }
}
CommonShortFunc.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_1__["CalculatorsService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_2__["DomUpdateService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_3__["PopDivService"] }
];


/***/ }),

/***/ "./src/app/designStyleData/shortFunc/cornWin.shortFunc.ts":
/*!****************************************************************!*\
  !*** ./src/app/designStyleData/shortFunc/cornWin.shortFunc.ts ***!
  \****************************************************************/
/*! exports provided: CornWinShortFunc */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CornWinShortFunc", function() { return CornWinShortFunc; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");




class CornWinShortFunc {
    constructor(dataService, calService, domService, popService) {
        this.dataService = dataService;
        this.calService = calService;
        this.domService = domService;
        this.popService = popService;
        /* 删除转角飘窗 */
        this.dataService.cache.shortFuncs['delCornWin'] = (obj) => {
            this.delCornWin(obj);
        };
        /* 是否为转角飘窗 */
        this.dataService.cache.shortFuncs["isCornWin"] = (obj) => {
            return obj.type == 'cornerWin';
        };
        /* 添加转角飘窗 */
        this.dataService.cache.shortFuncs["addCornerWin"] = () => {
            this.addCornerWin();
        };
    }
    /* 删除转角飘窗 */
    delCornWin(cornerWin) {
        this.calService.cornerWin.del(cornerWin);
        this.domService.allSvg.emit();
    }
    /* 添加转角飘窗 */
    addCornerWin() {
        let data = {
            LDepth: 1600,
            LWidth: 1600,
            DDepth: 1600,
            DWidth: 1600,
            outThickness: 60,
            outWallThickness: this.dataService.cmd.wall.thickness,
            height3D: 1500,
            floorHeight: 500
        };
        let cornerWin = this.calService.cornerWin.createNew(data);
        this.dataService.cache.common.choose = cornerWin;
        this.setNormal();
    }
    setNormal() {
        this.dataService.cache.common.mode = 'normal';
        this.dataService.cache.common.blockON = true;
        this.dataService.cache.common.firstPos = null;
        this.dataService.cmd.cowall.hide = true;
        this.domUpdate();
    }
    /** dom更新 */
    domUpdate() {
        this.domService.allSvg.emit();
        this.popService.inputBoxs.emit([]);
        this.popService.buttons.emit(null);
    }
}
CornWinShortFunc.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_1__["CalculatorsService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_2__["DomUpdateService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_3__["PopDivService"] }
];


/***/ }),

/***/ "./src/app/designStyleData/shortFunc/design.shortFunc.ts":
/*!***************************************************************!*\
  !*** ./src/app/designStyleData/shortFunc/design.shortFunc.ts ***!
  \***************************************************************/
/*! exports provided: DesignShortFunc */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DesignShortFunc", function() { return DesignShortFunc; });
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");
/* harmony import */ var _back_shortFunc__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./back.shortFunc */ "./src/app/designStyleData/shortFunc/back.shortFunc.ts");
/* harmony import */ var _cornWin_shortFunc__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./cornWin.shortFunc */ "./src/app/designStyleData/shortFunc/cornWin.shortFunc.ts");
/* harmony import */ var _door_shortFunc__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./door.shortFunc */ "./src/app/designStyleData/shortFunc/door.shortFunc.ts");
/* harmony import */ var _win_shortFunc__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./win.shortFunc */ "./src/app/designStyleData/shortFunc/win.shortFunc.ts");
/* harmony import */ var _DW_shortFunc__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./DW.shortFunc */ "./src/app/designStyleData/shortFunc/DW.shortFunc.ts");
/* harmony import */ var _furniture_shortFunc__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./furniture.shortFunc */ "./src/app/designStyleData/shortFunc/furniture.shortFunc.ts");
/* harmony import */ var _point_shortFunc__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./point.shortFunc */ "./src/app/designStyleData/shortFunc/point.shortFunc.ts");
/* harmony import */ var _room_shortFunc__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./room.shortFunc */ "./src/app/designStyleData/shortFunc/room.shortFunc.ts");
/* harmony import */ var _wall_shortFunc__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./wall.shortFunc */ "./src/app/designStyleData/shortFunc/wall.shortFunc.ts");
/* harmony import */ var _common_shortFunc__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./common.shortFunc */ "./src/app/designStyleData/shortFunc/common.shortFunc.ts");
/* harmony import */ var _camera_shortFuncs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./camera.shortFuncs */ "./src/app/designStyleData/shortFunc/camera.shortFuncs.ts");
/* harmony import */ var _build_shortFunc__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./build.shortFunc */ "./src/app/designStyleData/shortFunc/build.shortFunc.ts");
/* harmony import */ var _LUWin_shortFunc__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./LUWin.shortFunc */ "./src/app/designStyleData/shortFunc/LUWin.shortFunc.ts");


















class DesignShortFunc {
    constructor(popService, dataService, DUService, calService, domService) {
        this.popService = popService;
        this.dataService = dataService;
        this.DUService = DUService;
        this.calService = calService;
        this.domService = domService;
        let back = new _back_shortFunc__WEBPACK_IMPORTED_MODULE_5__["BackShortFunc"](popService, dataService, calService, domService);
        let cornWin = new _cornWin_shortFunc__WEBPACK_IMPORTED_MODULE_6__["CornWinShortFunc"](dataService, calService, domService, popService);
        let door = new _door_shortFunc__WEBPACK_IMPORTED_MODULE_7__["DoorShortFunc"](dataService, calService, domService, popService);
        let win = new _win_shortFunc__WEBPACK_IMPORTED_MODULE_8__["WinShortFunc"](dataService, calService, domService, popService);
        let DW = new _DW_shortFunc__WEBPACK_IMPORTED_MODULE_9__["DWShortFunc"](popService, dataService, calService, domService);
        let furniture = new _furniture_shortFunc__WEBPACK_IMPORTED_MODULE_10__["FurnitureShortFunc"](dataService, calService, domService, popService);
        let point = new _point_shortFunc__WEBPACK_IMPORTED_MODULE_11__["PointShortFunc"](dataService, DUService, calService, domService);
        let room = new _room_shortFunc__WEBPACK_IMPORTED_MODULE_12__["RoomShortFunc"](dataService, calService, domService);
        let wall = new _wall_shortFunc__WEBPACK_IMPORTED_MODULE_13__["WallShortFunc"](dataService, calService, domService, popService);
        let common = new _common_shortFunc__WEBPACK_IMPORTED_MODULE_14__["CommonShortFunc"](dataService, calService, domService, popService);
        let camera = new _camera_shortFuncs__WEBPACK_IMPORTED_MODULE_15__["CameraShortFuncs"](dataService, domService, DUService);
        let build = new _build_shortFunc__WEBPACK_IMPORTED_MODULE_16__["BuildShortFunc"](dataService, calService, domService, popService);
        let LWin = new _LUWin_shortFunc__WEBPACK_IMPORTED_MODULE_17__["LUWinShortFunc"](dataService, calService, domService, popService, DUService);
    }
}
DesignShortFunc.ctorParameters = () => [
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_0__["PopDivService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_3__["CalculatorsService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_4__["DomUpdateService"] }
];


/***/ }),

/***/ "./src/app/designStyleData/shortFunc/door.shortFunc.ts":
/*!*************************************************************!*\
  !*** ./src/app/designStyleData/shortFunc/door.shortFunc.ts ***!
  \*************************************************************/
/*! exports provided: DoorShortFunc */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DoorShortFunc", function() { return DoorShortFunc; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");




class DoorShortFunc {
    constructor(dataService, calService, domService, popService) {
        this.dataService = dataService;
        this.calService = calService;
        this.domService = domService;
        this.popService = popService;
        /* 删除门 */
        this.dataService.cache.shortFuncs["delDoor"] = (obj) => {
            this.delDoor(obj);
        };
        /* 是否为门 */
        this.dataService.cache.shortFuncs['isDoor'] = (obj) => {
            return obj.type == 'door';
        };
        /* 添加单门 */
        this.dataService.cache.shortFuncs['addOneDoor'] = () => {
            this.addOneDoor();
            this.dataService.cache.doorWin.displayLabel = true;
        };
        /* 添加双门 */
        this.dataService.cache.shortFuncs['addTwoDoor'] = () => {
            this.addTwoDoor();
            this.dataService.cache.doorWin.displayLabel = true;
        };
        /* 添加移门 */
        this.dataService.cache.shortFuncs['addPullDoor'] = () => {
            this.addPullDoor();
            this.dataService.cache.doorWin.displayLabel = true;
        };
        /* 添加字母门 */
        this.dataService.cache.shortFuncs['addSonDoor'] = () => {
            this.addSonDoor();
            this.dataService.cache.doorWin.displayLabel = true;
        };
        /* 添加门洞 */
        this.dataService.cache.shortFuncs["addNoDoor"] = () => {
            this.addNoDoor();
            this.dataService.cache.doorWin.displayLabel = true;
        };
    }
    /* 删除门 */
    delDoor(obj) {
        this.calService.door.delWall(obj);
        this.calService.door.del(obj);
        this.popService.inputBoxs.emit([]);
        this.popService.buttons.emit(null);
    }
    /* 添加单门 */
    addOneDoor() {
        let size = { width: 800, height: 240, height3D: 2000 };
        let modelUrl = 'https://www.3dhome360.com/LZN/model/door/door3/door3.DAE';
        let plankImg = this.dataService.cmd.door.onePlankUrl;
        let plankType = 'normal';
        let floorHeight = 0;
        let door = this.calService.door.createNewNormal({ size: size, svgImg: plankImg, plankType: plankType, modelUrl: modelUrl, floorHeight: floorHeight });
        this.dataService.cache.common.choose = door;
        this.setNormal();
    }
    /* 添加门洞 */
    addNoDoor() {
        let size = { width: 800, height: 240, height3D: 2000 };
        let plankType = 'normal';
        let floorHeight = 0;
        let door = this.calService.door.createNewNormal({ size: size, style: plankType, isHaveFrame: false, floorHeight: floorHeight });
        this.dataService.cache.common.choose = door;
        this.setNormal();
    }
    /* 添加双门 */
    addTwoDoor() {
        let size = { width: 1200, height: 240, height3D: 2000 };
        let modelUrl = 'https://www.3dhome360.com/LZN/model/door/door3/door3.DAE';
        let plankImg = this.dataService.cmd.door.twoPlankUrl;
        let plankType = "twoDoor";
        let floorHeight = 0;
        let door = this.calService.door.createNewNormal({ size: size, svgImg: plankImg, plankType: plankType, modelUrl: modelUrl, floorHeight: floorHeight });
        this.dataService.cache.common.choose = door;
        this.setNormal();
    }
    /* 添加子母门 */
    addSonDoor() {
        let size = { width: 1200, height: 240, height3D: 2000 };
        let modelUrl = 'https://www.3dhome360.com/LZN/model/door/door3/door3.DAE';
        let plankImg = this.dataService.cmd.door.momSonPlankUrl;
        let plankType = "twoDoor";
        let floorHeight = 0;
        let door = this.calService.door.createNewNormal({ size: size, svgImg: plankImg, plankType: plankType, modelUrl: modelUrl, floorHeight: floorHeight });
        this.dataService.cache.common.choose = door;
        this.setNormal();
    }
    /* 添加移门 */
    addPullDoor() {
        let size = { width: 1600, height: 240, height3D: 2000 };
        let modelUrl = 'https://www.3dhome360.com/LZN/model/door/door3/door3.DAE';
        let plankImg = this.dataService.cmd.door.pullPlankUrl;
        let plankType = "pullDoor";
        let floorHeight = 0;
        let door = this.calService.door.createNewNormal({ size: size, svgImg: plankImg, plankType: plankType, modelUrl: modelUrl, floorHeight: floorHeight });
        this.dataService.cache.common.choose = door;
        this.setNormal();
    }
    setNormal() {
        this.dataService.cache.common.mode = 'normal';
        this.dataService.cache.common.blockON = true;
        this.dataService.cache.common.firstPos = null;
        this.dataService.cmd.cowall.hide = true;
        this.domUpdate();
    }
    /** dom更新 */
    domUpdate() {
        this.domService.allSvg.emit();
        this.popService.inputBoxs.emit([]);
        this.popService.buttons.emit(null);
    }
}
DoorShortFunc.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_1__["CalculatorsService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_2__["DomUpdateService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_3__["PopDivService"] }
];


/***/ }),

/***/ "./src/app/designStyleData/shortFunc/furniture.shortFunc.ts":
/*!******************************************************************!*\
  !*** ./src/app/designStyleData/shortFunc/furniture.shortFunc.ts ***!
  \******************************************************************/
/*! exports provided: FurnitureShortFunc */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FurnitureShortFunc", function() { return FurnitureShortFunc; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");




class FurnitureShortFunc {
    constructor(dataService, calService, domService, popService) {
        this.dataService = dataService;
        this.calService = calService;
        this.domService = domService;
        this.popService = popService;
        /* 删除家居 */
        this.dataService.cache.shortFuncs["delFurn"] = (obj) => {
            this.delFurniture(obj);
        };
        /* 是否为家居 */
        this.dataService.cache.shortFuncs["isFurn"] = (obj) => {
            return obj.type == 'furniture';
        };
        /* 添加家居 */
        this.dataService.cache.shortFuncs["addFurn"] = (obj) => {
            let furniture = this.calService.geometry.createNew('furniture', obj);
            this.dataService.cache.common.choose = furniture;
            this.dataService.cache.common.mode = 'normal';
            this.dataService.cache.common.blockON = true;
            this.dataService.cache.common.firstPos = null;
            this.dataService.cmd.cowall.hide = true;
            this.domService.allSvg.emit();
            this.popService.inputBoxs.emit([]);
            this.popService.buttons.emit(null);
        };
    }
    /* 删除家居 */
    delFurniture(furniture) {
        this.calService.geometry.del(furniture);
        this.domService.allSvg.emit();
    }
}
FurnitureShortFunc.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_1__["CalculatorsService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_2__["DomUpdateService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_3__["PopDivService"] }
];


/***/ }),

/***/ "./src/app/designStyleData/shortFunc/point.shortFunc.ts":
/*!**************************************************************!*\
  !*** ./src/app/designStyleData/shortFunc/point.shortFunc.ts ***!
  \**************************************************************/
/*! exports provided: PointShortFunc */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PointShortFunc", function() { return PointShortFunc; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");




class PointShortFunc {
    constructor(dataService, DUService, calService, domService) {
        this.dataService = dataService;
        this.DUService = DUService;
        this.calService = calService;
        this.domService = domService;
        this.dataService.cache.shortFuncs["combineWall"] = (obj) => {
            this.combineWalls(obj);
        };
        this.dataService.cache.shortFuncs['isCombineWall'] = (obj) => {
            return this.isCombineWalls(obj);
        };
    }
    /** 连接墙体 */
    combineWalls(point) {
        try {
            this.calService.point.combineWalls(point);
        }
        catch (e) {
            console.log(e);
        }
        this.domService.allSvg.emit();
    }
    /* 是否可连接 */
    isCombineWalls(point) {
        let wallArr = point.getWallArr();
        if (wallArr.length == 2) {
            let radianA = wallArr[0].getRadian();
            let radianB = wallArr[1].getRadian();
            if (this.DUService.pos.isParallelRadian(radianA, radianB)) {
                return true;
            }
            else {
                return false;
            }
        }
        /** 不等于两个墙的时候 */
        else {
            return false;
        }
    }
}
PointShortFunc.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_1__["JdesignUtil2dService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__["CalculatorsService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_3__["DomUpdateService"] }
];


/***/ }),

/***/ "./src/app/designStyleData/shortFunc/room.shortFunc.ts":
/*!*************************************************************!*\
  !*** ./src/app/designStyleData/shortFunc/room.shortFunc.ts ***!
  \*************************************************************/
/*! exports provided: RoomShortFunc */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RoomShortFunc", function() { return RoomShortFunc; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");



class RoomShortFunc {
    constructor(dataService, calService, domService) {
        this.dataService = dataService;
        this.calService = calService;
        this.domService = domService;
        this.dataService.cache.shortFuncs["testFloor"] = (obj) => {
            console.log('没有了');
        };
        /* 阳台转换 */
        this.dataService.cache.shortFuncs["balconyRoom"] = (obj) => {
            this.changeBalcony(obj);
        };
        this.dataService.cache.shortFuncs["changeNormalRoom"] = (obj) => {
            this.changeNormal(obj);
        };
        /* 改变房间名 */
        this.dataService.cache.shortFuncs['setRoomType'] = (room, type) => {
            room.roomName = type;
            this.domService.allSvg.emit();
        };
        /* 获取名字 */
        // this.dataService.cache.shortFuncs
    }
    /* 变阳台 */
    changeBalcony(room) {
        let wallArr = room.getWallArr();
        let cowallArr = null;
        for (let i = 0; i < wallArr.length; i++) {
            cowallArr = wallArr[i].getCowallArr();
            if (cowallArr.length == 1) {
                wallArr[i].mode = 'balcony';
            }
        }
        this.domService.svgRoom.emit();
        this.domService.svgWall.emit();
    }
    /* 变正常 */
    changeNormal(room) {
        let wallArr = room.getWallArr();
        for (let i = 0; i < wallArr.length; i++) {
            wallArr[i].mode = 'normal';
        }
        this.domService.svgRoom.emit();
        this.domService.svgWall.emit();
    }
}
RoomShortFunc.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_1__["CalculatorsService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_2__["DomUpdateService"] }
];


/***/ }),

/***/ "./src/app/designStyleData/shortFunc/wall.shortFunc.ts":
/*!*************************************************************!*\
  !*** ./src/app/designStyleData/shortFunc/wall.shortFunc.ts ***!
  \*************************************************************/
/*! exports provided: WallShortFunc */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WallShortFunc", function() { return WallShortFunc; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");




class WallShortFunc {
    constructor(dataService, calService, domService, popService) {
        this.dataService = dataService;
        this.calService = calService;
        this.domService = domService;
        this.popService = popService;
        /* 拆分墙 */
        this.dataService.cache.shortFuncs["cutWall"] = (wall) => {
            this.cutWall(wall);
        };
        /* 删除 */
        this.dataService.cache.shortFuncs["delWall"] = (wall) => {
            this.delWall(wall);
        };
        /* 转弧形墙 */
        this.dataService.cache.shortFuncs["transArcWall"] = (wall) => {
            this.transArcWall(wall);
        };
        /* 是否为墙 */
        this.dataService.cache.shortFuncs["isWall"] = (wall) => {
            return wall.type == 'wall';
        };
        /* 是否为弧墙 */
        this.dataService.cache.shortFuncs["isArcWall"] = (wall) => {
            return wall.arcDistance != 0;
        };
        /* 是否为直墙 */
        this.dataService.cache.shortFuncs["isStraightWall"] = (wall) => {
            return wall.arcDistance == 0;
        };
        /*获取墙类型 */
        this.dataService.cache.shortFuncs['getWallType'] = (obj) => {
            return obj.wallType;
        };
        /* 设置墙类型 */
        this.dataService.cache.shortFuncs['setWallType'] = (obj, num) => {
            obj.wallType = num;
            this.domService.allSvg.emit();
        };
        /* 修改墙厚度 */
        this.dataService.cache.shortFuncs['fixWallThickness'] = (obj, thickness) => {
            obj.thickness = thickness;
            this.dataService.cache.floorplan.dataEmit.emit();
            // this.domService.svgWall.emit()
            // this.domService.svgCowall.emit()
            this.domService.allSvg.emit();
            this.dataService.cache.shortFuncs['setWallInput'](obj);
            this.dataService.cache.cowall.update3D.emit();
        };
        /* 获取墙之间相邻的数量 */
        this.dataService.cache.shortFuncs['getWallNearLen'] = (obj) => {
            let points = obj.getPointArr();
            let len = (points[0].getWallArr().length - 1) + (points[1].getWallArr().length - 1);
            return len;
        };
    }
    /* 删除墙 */
    delWall(wall) {
        this.dataService.cache.common.choose = this.dataService.floorplan;
        this.calService.createRoom.createRoomByDelWall(wall);
        this.dataService.cache.floorplan.dataEmit.emit();
        this.initData();
    }
    /** 分墙 */
    cutWall(wall) {
        try {
            this.calService.wall.cut.cutByPer(wall, 0.5);
        }
        catch (e) {
            console.log(e);
        }
        this.dataService.cache.floorplan.dataEmit.emit();
        this.domService.allSvg.emit();
        this.dataService.cache.cowall.update3D.emit();
    }
    /* 转弧墙 */
    transArcWall(wall) {
        if (wall.arcDistance == 0) {
            let distance = wall.getDistance();
            distance = distance / 3;
            wall.transArc(distance);
            // this.calService.wall.transArcWall(wall, distance)
        }
        else {
            wall.arcDistance = 0;
        }
        this.dataService.cache.floorplan.dataEmit.emit();
        this.initData();
    }
    initData() {
        // this.domService.svgPoint.emit()
        // this.domService.svgWall.emit()
        // this.domService.svgCowall.emit()
        // this.domService.svgRoom.emit()
        this.domService.allSvg.emit();
        this.popService.inputBoxs.emit([]);
        this.popService.buttons.emit(undefined);
        this.dataService.cache.wall.update3D.emit();
        this.dataService.cache.cowall.update3D.emit();
    }
}
WallShortFunc.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_1__["CalculatorsService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_2__["DomUpdateService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_3__["PopDivService"] }
];


/***/ }),

/***/ "./src/app/designStyleData/shortFunc/win.shortFunc.ts":
/*!************************************************************!*\
  !*** ./src/app/designStyleData/shortFunc/win.shortFunc.ts ***!
  \************************************************************/
/*! exports provided: WinShortFunc */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WinShortFunc", function() { return WinShortFunc; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");




class WinShortFunc {
    constructor(dataService, calService, domService, popService) {
        this.dataService = dataService;
        this.calService = calService;
        this.domService = domService;
        this.popService = popService;
        /* 删除窗 */
        this.dataService.cache.shortFuncs['delWin'] = (obj) => {
            this.delWin(obj);
        };
        /* 是否为窗 */
        this.dataService.cache.shortFuncs['isWin'] = (obj) => {
            return obj.type == 'win';
        };
        /* 添加普通窗 */
        this.dataService.cache.shortFuncs["addNormalWin"] = () => {
            this.addNormalWin();
            this.dataService.cache.doorWin.displayLabel = true;
        };
        /* 添加飘窗 */
        this.dataService.cache.shortFuncs["addBayWin"] = () => {
            this.addBayWin();
            this.dataService.cache.doorWin.displayLabel = true;
        };
        /* 添加落地窗 */
        this.dataService.cache.shortFuncs["addFloorWin"] = () => {
            this.addFloorWin();
            this.dataService.cache.doorWin.displayLabel = true;
        };
    }
    /* 删除窗 */
    delWin(obj) {
        this.calService.win.delWall(obj);
        this.calService.win.del(obj);
        this.popService.inputBoxs.emit([]);
        this.popService.buttons.emit(null);
        this.domService.allSvg.emit();
    }
    /* 添加窗 */
    addNormalWin() {
        let floorHeight = 500;
        let size = { width: 800, height: 240, height3D: 1500 };
        let win = this.calService.win.createNewNormal({ size: size, svgImg: this.dataService.cmd.win.normalWinUrl, plankType: 'normal', floorHeight: floorHeight });
        this.dataService.cache.common.choose = win;
        this.setNormal();
    }
    /* 添加飘窗 */
    addBayWin() {
        let floorHeight = 500;
        let size = { width: 1600, height: 240, height3D: 1500 };
        let outThickness = 600;
        let outBoxThickness = 60;
        let win = this.calService.win.createNewNormal({
            size: size,
            svgImg: this.dataService.cmd.win.normalWinUrl,
            plankType: 'bayWin',
            floorHeight: floorHeight,
            outThickness: outThickness,
            outBoxThickness: outBoxThickness
        });
        this.dataService.cache.common.choose = win;
        this.setNormal();
    }
    /* 添加落地窗 */
    addFloorWin() {
        let size = { width: 2000, height: 240, height3D: 2800 };
        let floorHeight = 0;
        let win = this.calService.win.createNewNormal({
            svgImg: this.dataService.cmd.win.floorWinUrl,
            size: size,
            plankType: "normal",
            floorHeight: floorHeight
        });
        this.dataService.cache.common.choose = win;
        this.setNormal();
    }
    setNormal() {
        this.dataService.cache.common.mode = 'normal';
        this.dataService.cache.common.blockON = true;
        this.dataService.cache.common.firstPos = null;
        this.dataService.cmd.cowall.hide = true;
        this.domUpdate();
    }
    /** dom更新 */
    domUpdate() {
        this.domService.allSvg.emit();
        this.popService.inputBoxs.emit([]);
        this.popService.buttons.emit(null);
    }
}
WinShortFunc.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_1__["CalculatorsService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_2__["DomUpdateService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_3__["PopDivService"] }
];


/***/ }),

/***/ "./src/app/services/calculators.service.ts":
/*!*************************************************!*\
  !*** ./src/app/services/calculators.service.ts ***!
  \*************************************************/
/*! exports provided: CalculatorsService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CalculatorsService", function() { return CalculatorsService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _svg_common_calculator_wall_cal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../svg/common/calculator/wall.cal */ "./src/app/svg/common/calculator/wall.cal.ts");
/* harmony import */ var _svg_common_calculator_cowall_cal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../svg/common/calculator/cowall.cal */ "./src/app/svg/common/calculator/cowall.cal.ts");
/* harmony import */ var _jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _svg_common_calculator_point_cal__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../svg/common/calculator/point.cal */ "./src/app/svg/common/calculator/point.cal.ts");
/* harmony import */ var _svg_common_calculator_room_cal__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../svg/common/calculator/room.cal */ "./src/app/svg/common/calculator/room.cal.ts");
/* harmony import */ var _svg_common_calculator_pos_cal__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../svg/common/calculator/pos.cal */ "./src/app/svg/common/calculator/pos.cal.ts");
/* harmony import */ var _svg_common_calculator_adsorb_cal__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../svg/common/calculator/adsorb.cal */ "./src/app/svg/common/calculator/adsorb.cal.ts");
/* harmony import */ var _svg_common_calculator_line_cal__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../svg/common/calculator/line.cal */ "./src/app/svg/common/calculator/line.cal.ts");
/* harmony import */ var _svg_common_calculator_createRoom_cal__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../svg/common/calculator/createRoom.cal */ "./src/app/svg/common/calculator/createRoom.cal.ts");
/* harmony import */ var _svg_common_calculator_door_cal__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../svg/common/calculator/door.cal */ "./src/app/svg/common/calculator/door.cal.ts");
/* harmony import */ var _svg_common_calculator_win_cal__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../svg/common/calculator/win.cal */ "./src/app/svg/common/calculator/win.cal.ts");
/* harmony import */ var _svg_common_calculator_furniture_cal__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../svg/common/calculator/furniture.cal */ "./src/app/svg/common/calculator/furniture.cal.ts");
/* harmony import */ var _svg_common_calculator_cornerWin_cal__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../svg/common/calculator/cornerWin.cal */ "./src/app/svg/common/calculator/cornerWin.cal.ts");
/* harmony import */ var _svg_common_calculator_floorplan_cal__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../svg/common/calculator/floorplan.cal */ "./src/app/svg/common/calculator/floorplan.cal.ts");
/* harmony import */ var _svg_common_calculator_transData_cal__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../svg/common/calculator/transData.cal */ "./src/app/svg/common/calculator/transData.cal.ts");
/* harmony import */ var _svg_common_calculator_geometry_cal__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../svg/common/calculator/geometry.cal */ "./src/app/svg/common/calculator/geometry.cal.ts");
/* harmony import */ var _svg_common_calculator_build_cal__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../svg/common/calculator/build.cal */ "./src/app/svg/common/calculator/build.cal.ts");
/* harmony import */ var _svg_common_calculator_LWin_cal__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../svg/common/calculator/LWin.cal */ "./src/app/svg/common/calculator/LWin.cal.ts");
/* harmony import */ var _svg_common_calculator_undo_redo_cal__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../svg/common/calculator/undo.redo.cal */ "./src/app/svg/common/calculator/undo.redo.cal.ts");
/* harmony import */ var _svg_common_calculator_uWin_cal__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../svg/common/calculator/uWin.cal */ "./src/app/svg/common/calculator/uWin.cal.ts");
/* harmony import */ var _svg_common_calculator_paramsModel_cal__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../svg/common/calculator/paramsModel.cal */ "./src/app/svg/common/calculator/paramsModel.cal.ts");
























let CalculatorsService = class CalculatorsService {
    constructor(dataService, DUService) {
        this.dataService = dataService;
        this.DUService = DUService;
        this._wallCal = new _svg_common_calculator_wall_cal__WEBPACK_IMPORTED_MODULE_3__["WallCal"](this, this.dataService, this.DUService);
        this._cowallCal = new _svg_common_calculator_cowall_cal__WEBPACK_IMPORTED_MODULE_4__["CowallCal"](this, this.dataService, this.DUService);
        this._pointCal = new _svg_common_calculator_point_cal__WEBPACK_IMPORTED_MODULE_6__["PointCal"](this, this.dataService, this.DUService);
        this._roomCal = new _svg_common_calculator_room_cal__WEBPACK_IMPORTED_MODULE_7__["RoomCal"](this.dataService, this.DUService, this);
        this._posCal = new _svg_common_calculator_pos_cal__WEBPACK_IMPORTED_MODULE_8__["PosCal"](this.dataService, this.DUService, this);
        this._absorbCal = new _svg_common_calculator_adsorb_cal__WEBPACK_IMPORTED_MODULE_9__["AdsorbCal"](this.dataService, this.DUService, this);
        this._lineCal = new _svg_common_calculator_line_cal__WEBPACK_IMPORTED_MODULE_10__["LineCal"](this, this.dataService, this.DUService);
        this._createRoomCal = new _svg_common_calculator_createRoom_cal__WEBPACK_IMPORTED_MODULE_11__["CreateRoomCal"](this.dataService, this.DUService, this);
        this._doorCal = new _svg_common_calculator_door_cal__WEBPACK_IMPORTED_MODULE_12__["DoorCal"](this.dataService, this.DUService, this);
        this._winCal = new _svg_common_calculator_win_cal__WEBPACK_IMPORTED_MODULE_13__["WinCal"](this.dataService, this.DUService, this);
        this._furnitureCal = new _svg_common_calculator_furniture_cal__WEBPACK_IMPORTED_MODULE_14__["FurnitureCal"](this.dataService, this.DUService, this);
        this._cornerWinCal = new _svg_common_calculator_cornerWin_cal__WEBPACK_IMPORTED_MODULE_15__["CornerWinCal"](this, this.dataService, this.DUService);
        this._floorplanCal = new _svg_common_calculator_floorplan_cal__WEBPACK_IMPORTED_MODULE_16__["FloorplanCal"](this.dataService, this.DUService, this);
        this._transDataCal = new _svg_common_calculator_transData_cal__WEBPACK_IMPORTED_MODULE_17__["TransDataCal"](this, this.dataService, this.DUService);
        this._geometryCal = new _svg_common_calculator_geometry_cal__WEBPACK_IMPORTED_MODULE_18__["GeometryCal"](this.dataService, this.DUService, this);
        this._buildCal = new _svg_common_calculator_build_cal__WEBPACK_IMPORTED_MODULE_19__["BuildCal"](this.dataService, this.DUService, this);
        this._LWinCal = new _svg_common_calculator_LWin_cal__WEBPACK_IMPORTED_MODULE_20__["LWinCal"](this.dataService, this.DUService, this);
        this._UWinCal = new _svg_common_calculator_uWin_cal__WEBPACK_IMPORTED_MODULE_22__["UWinCal"](this.dataService, this.DUService, this);
        this._undoRedoCal = new _svg_common_calculator_undo_redo_cal__WEBPACK_IMPORTED_MODULE_21__["UndoRedoCal"](this.dataService, this.DUService, this, 20);
        this._paramsModelCal = new _svg_common_calculator_paramsModel_cal__WEBPACK_IMPORTED_MODULE_23__["ParamsModelCal"](this.dataService, this.DUService, this);
    }
    /** 墙计算器 */
    get wall() {
        return this._wallCal;
    }
    /** cowall计算器 */
    get cowall() {
        return this._cowallCal;
    }
    /** point计算器 */
    get point() {
        return this._pointCal;
    }
    /** 空间计算器 */
    get room() {
        return this._roomCal;
    }
    /** 坐标运算器 */
    get pos() {
        return this._posCal;
    }
    /** 吸附运算 */
    get absorb() {
        return this._absorbCal;
    }
    /* 线段计算器 */
    get line() {
        return this._lineCal;
    }
    /* 生成房间运算 */
    get createRoom() {
        return this._createRoomCal;
    }
    /* 门运算器 */
    get door() {
        return this._doorCal;
    }
    /* 窗运算器 */
    get win() {
        return this._winCal;
    }
    /* 家具运算器 */
    get furniture() {
        return this._furnitureCal;
    }
    /* 物体运算器 */
    get geometry() {
        return this._geometryCal;
    }
    /* 建筑物 */
    get build() {
        return this._buildCal;
    }
    /* 转角飘窗运算器 */
    get cornerWin() {
        return this._cornerWinCal;
    }
    /* 房型图运算器 */
    get floorplan() {
        return this._floorplanCal;
    }
    /* L型窗运算器 */
    get LWin() {
        return this._LWinCal;
    }
    /* u型窗运算器 */
    get UWin() {
        return this._UWinCal;
    }
    /* 数据转换运算器 */
    get transData() {
        return this._transDataCal;
    }
    /* 撤销还原运算器 */
    get undoRedo() {
        return this._undoRedoCal;
    }
    /* 参数化模型运算器 */
    get paramModel() {
        return this._paramsModelCal;
    }
};
CalculatorsService.ctorParameters = () => [
    { type: _jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__["JdesignDataService"] },
    { type: _jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_5__["JdesignUtil2dService"] }
];
CalculatorsService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__["JdesignDataService"],
        _jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_5__["JdesignUtil2dService"]])
], CalculatorsService);



/***/ }),

/***/ "./src/app/services/data3d.service.ts":
/*!********************************************!*\
  !*** ./src/app/services/data3d.service.ts ***!
  \********************************************/
/*! exports provided: Data3dService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Data3dService", function() { return Data3dService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let Data3dService = class Data3dService {
    constructor() { }
};
Data3dService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
], Data3dService);



/***/ }),

/***/ "./src/app/services/dom-update.service.ts":
/*!************************************************!*\
  !*** ./src/app/services/dom-update.service.ts ***!
  \************************************************/
/*! exports provided: DomUpdateService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DomUpdateService", function() { return DomUpdateService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let DomUpdateService = class DomUpdateService {
    constructor() {
        /* svg主要更新 */
        this.allSvg = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /** svg背景更新 */
        this.svgBack = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /** svg点更新 */
        this.svgPoint = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /** svg主页面更新 */
        this.mainSvg = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /** svg墙更新 */
        this.svgWall = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /** svg影子墙更新 */
        this.svgWallShadow = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /** svg有序墙更新 */
        this.svgCowall = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /** svg影子有序墙更新 */
        this.svgCowallShadow = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /** svg空间更新 */
        this.svgRoom = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /** svg影子空间更新 */
        this.svgRoomShadow = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /** 遮挡层更新 */
        this.svgBlock = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /** 吸附线更新 */
        this.absorbLine = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /* 测试svg更新 */
        this.testSvg = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /* 门更新 */
        this.svgDoor = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /* 标签更新 */
        this.svgLabels = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /* 相机更新 */
        this.svgCamera = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /* 窗更新 */
        this.svgWin = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /* 家具更新 */
        this.svgGeometry = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /* 转角飘窗更新 */
        this.svgCornerWin = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /* LU窗更新 */
        this.svgLUWin = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /* 参数化模型更新 */
        this.svgParamsModel = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /* 3d更新 */
        this.three = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /* svg初始化完成 */
        this.svgInit = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /* three初始化完成 */
        this.threeInit = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        let key = null;
        let ingore = ['allSvg', 'constructor', 'three', 'svgInit', 'threeInit', "mainSvg"];
        /* 检测 */
        let checkDom = (key, ingoreArr) => {
            for (let i = 0; i < ingoreArr.length; i++) {
                if (key == ingoreArr[i])
                    return false;
            }
            return true;
        };
        /* 添加 */
        let arr = [];
        for (key in this) {
            if (checkDom(key, ingore)) {
                arr.push(key);
            }
        }
        /* 触发 */
        this.allSvg.subscribe(() => {
            for (let i = 0; i < arr.length; i++) {
                this[arr[i]].emit();
            }
        });
    }
};
DomUpdateService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
], DomUpdateService);



/***/ }),

/***/ "./src/app/services/hot-key.service.ts":
/*!*********************************************!*\
  !*** ./src/app/services/hot-key.service.ts ***!
  \*********************************************/
/*! exports provided: HotKeyService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HotKeyService", function() { return HotKeyService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let HotKeyService = class HotKeyService {
    constructor() { }
};
HotKeyService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
], HotKeyService);



/***/ }),

/***/ "./src/app/services/http.service.ts":
/*!******************************************!*\
  !*** ./src/app/services/http.service.ts ***!
  \******************************************/
/*! exports provided: HttpService, UrlType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HttpService", function() { return HttpService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UrlType", function() { return UrlType; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");




let HttpService = class HttpService {
    constructor(http) {
        this.http = http;
    }
    get dataUrls() { return this._dataUrls; }
    set dataUrls(data) { this._dataUrls = data; }
    /**
     * 获取资源
     * @param url 路径
     * @param retryInt
     * @param isMain 是否为主要路径,默认为false,如果不为主要路径,则路径自动加前缀mainUrl
     */
    getRes(url, retryInt = 3, isMain = false) {
        url = isMain ? url : this.getRealUrl(url);
        return this.http.get(url).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["retry"])(retryInt));
    }
    /* 获取真实路径 */
    getRealUrl(url, mainUrl) {
        mainUrl = mainUrl ? mainUrl : this.dataUrls.mainUrl;
        url = url[0] == '/' ? mainUrl + url : mainUrl + '/' + url;
        return url;
    }
};
HttpService.ctorParameters = () => [
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] }
];
HttpService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"]])
], HttpService);

class UrlType {
}


/***/ }),

/***/ "./src/app/services/jdesign-data.service.ts":
/*!**************************************************!*\
  !*** ./src/app/services/jdesign-data.service.ts ***!
  \**************************************************/
/*! exports provided: JdesignDataService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JdesignDataService", function() { return JdesignDataService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _data_design_data__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../data/design.data */ "./src/app/data/design.data.ts");
/* harmony import */ var _svg_common_jdesign_JJSON__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../svg/common/jdesign/JJSON */ "./src/app/svg/common/jdesign/JJSON.ts");




let JdesignDataService = class JdesignDataService {
    constructor() {
        this._camera = null;
        this._json = new _svg_common_jdesign_JJSON__WEBPACK_IMPORTED_MODULE_3__["JJSON"];
    }
    /** floorPlan */
    get floorplan() {
        return this._floorplan;
    }
    set floorplan(data) {
        this._floorplan = data;
    }
    get camera() {
        return this._camera;
    }
    set camera(data) {
        this._camera = data;
    }
    /** cmd */
    get cmd() {
        return this._cmd;
    }
    set cmd(data) {
        this._cmd = data;
    }
    /** icon */
    get icon() { return this._icon; }
    set icon(data) { this._icon = data; }
    /** 缓存 */
    get cache() { return _data_design_data__WEBPACK_IMPORTED_MODULE_2__["cache"]; }
    /* json */
    get json() { return this._json; }
    set json(data) { this._json = data; }
    // private _common: JCommon
    // /** common */
    // get common() { return this._common }
    // set common(data) {
    //   this._common = data
    // }
    /** 点================================================== */
    get points() {
        return _data_design_data__WEBPACK_IMPORTED_MODULE_2__["points"];
    }
    /** points操作 */
    doPoints() {
        let type = 'points';
        let obj = [];
        /* 获取有两个的cowall的点 */
        obj['twoCowalls'] = () => {
            let points = [];
            for (let key in this.points) {
                if (this.points[key].cowallIDs.length == 2) {
                    points.push(this.points[key]);
                }
            }
            return points;
        };
        let func = this.getFunc(type, obj);
        return func;
    }
    /** 有序墙=========================================== */
    get cowalls() {
        return _data_design_data__WEBPACK_IMPORTED_MODULE_2__["cowalls"];
    }
    /** cowall操作 */
    doCowalls() {
        let type = 'cowalls';
        let func = this.getFunc(type);
        return func;
    }
    /** 墙==================================================== */
    get walls() {
        return _data_design_data__WEBPACK_IMPORTED_MODULE_2__["walls"];
    }
    /** wall操作 */
    doWalls() {
        let type = 'walls';
        let func = this.getFunc(type);
        return func;
    }
    /** 空间========================================================== */
    get rooms() {
        return _data_design_data__WEBPACK_IMPORTED_MODULE_2__["rooms"];
    }
    /** room操作 */
    doRooms() {
        let type = 'rooms';
        let func = this.getFunc(type);
        return func;
    }
    /** 地板================================================================ */
    get floors() {
        return _data_design_data__WEBPACK_IMPORTED_MODULE_2__["floors"];
    }
    /** 地板操作 */
    doFloors() {
        let type = 'floors';
        let func = this.getFunc(type);
        return func;
    }
    /* 天花 */
    get roofs() {
        return _data_design_data__WEBPACK_IMPORTED_MODULE_2__["roofs"];
    }
    /* 天花操作 */
    doRoofs() {
        let type = 'roofs';
        let func = this.getFunc(type);
        return func;
    }
    /** 门===================================================================== */
    get doors() {
        return _data_design_data__WEBPACK_IMPORTED_MODULE_2__["doors"];
    }
    /** 门操作 */
    doDoors() {
        let type = 'doors';
        let func = this.getFunc(type);
        return func;
    }
    /** 窗====================================================================== */
    get wins() {
        return _data_design_data__WEBPACK_IMPORTED_MODULE_2__["wins"];
    }
    /** 窗操作 */
    doWins() {
        let type = 'wins';
        let func = this.getFunc(type);
        return func;
    }
    /** 家具==================================================================== */
    get furnitures() {
        return _data_design_data__WEBPACK_IMPORTED_MODULE_2__["furnitures"];
    }
    /** 家具操作 */
    doFurnitures() {
        let type = 'furnitures';
        let func = this.getFunc(type);
        return func;
    }
    /** 建筑物=========================================================== */
    get builds() {
        return _data_design_data__WEBPACK_IMPORTED_MODULE_2__["builds"];
    }
    /** 建筑物操作 */
    doBuilds() {
        let type = 'builds';
        let func = this.getFunc(type);
        return func;
    }
    /** 转角飘窗 */
    get cornerWins() {
        return _data_design_data__WEBPACK_IMPORTED_MODULE_2__["cornerWins"];
    }
    /** 转角飘窗操作 */
    doCornerWins() {
        let type = 'cornerWins';
        let func = this.getFunc(type);
        return func;
    }
    /* L窗 */
    get LWins() {
        return _data_design_data__WEBPACK_IMPORTED_MODULE_2__["LWins"];
    }
    /* L窗操作 */
    doLWins() {
        let type = 'LWins';
        let func = this.getFunc(type);
        return func;
    }
    /* U窗 */
    get UWins() {
        return _data_design_data__WEBPACK_IMPORTED_MODULE_2__["UWins"];
    }
    /* U窗操作 */
    doUWins() {
        let type = 'UWins';
        let func = this.getFunc(type);
        return func;
    }
    get paramsModels() {
        return _data_design_data__WEBPACK_IMPORTED_MODULE_2__["paramsModels"];
    }
    doParamsModels() {
        let type = 'paramsModels';
        let func = this.getFunc(type);
        return func;
    }
    /** 方法操作======================================================================== */
    /** 设置清空 */
    setClean(type) {
        let data = [];
        let key = null;
        for (key in _data_design_data__WEBPACK_IMPORTED_MODULE_2__[type]) {
            delete _data_design_data__WEBPACK_IMPORTED_MODULE_2__[type][key];
        }
    }
    /** 获取数组 */
    getArr(type, ...reObjs) {
        let data = [];
        let key = null;
        for (key in _data_design_data__WEBPACK_IMPORTED_MODULE_2__[type]) {
            let same = false;
            for (let i = 0; i < reObjs.length; i++) {
                /* 删除排除的 */
                if (reObjs[i].id == key) {
                    same = true;
                    reObjs.splice(i, 1);
                    break;
                }
            }
            /* 不相同则添加 */
            if (!same)
                data.push(_data_design_data__WEBPACK_IMPORTED_MODULE_2__[type][key]);
        }
        return data;
    }
    /** 统一数组 */
    getFunc(type, funcPlus) {
        let func = {
            /** 清除 */
            clear: () => {
                this.setClean(type);
                return func;
            },
            /** 数组 */
            arr: (...reObj) => {
                let data = this.getArr(type, ...reObj);
                return data;
            },
            urgentUpdate: (...reObj) => {
                let idArr = [];
                for (let key in _data_design_data__WEBPACK_IMPORTED_MODULE_2__[type]) {
                    _data_design_data__WEBPACK_IMPORTED_MODULE_2__[type][key].urgentUpdate.emit();
                }
            },
            /** 其他 */
            other: funcPlus ? funcPlus : null
            /* 数组id */
        };
        return func;
    }
};
JdesignDataService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
], JdesignDataService);



/***/ }),

/***/ "./src/app/services/jdesign-util2d.service.ts":
/*!****************************************************!*\
  !*** ./src/app/services/jdesign-util2d.service.ts ***!
  \****************************************************/
/*! exports provided: JdesignUtil2dService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JdesignUtil2dService", function() { return JdesignUtil2dService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _data_util2d_data__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../data/util2d.data */ "./src/app/data/util2d.data.ts");



let JdesignUtil2dService = class JdesignUtil2dService {
    constructor() {
    }
    /** 坐标工具 */
    get pos() { return _data_util2d_data__WEBPACK_IMPORTED_MODULE_2__["newPosUtil"]; }
    /** 运算工具 */
    get cal() { return _data_util2d_data__WEBPACK_IMPORTED_MODULE_2__["newCalUtil"]; }
    /** svg工具 */
    get svg() {
        return _data_util2d_data__WEBPACK_IMPORTED_MODULE_2__["newSvgUtil"];
    }
    /** 打印工具 */
    get out() {
        return _data_util2d_data__WEBPACK_IMPORTED_MODULE_2__["newConsoleUtil"];
    }
    /* 对象工具 */
    get obj() {
        return _data_util2d_data__WEBPACK_IMPORTED_MODULE_2__["newObjUtil"];
    }
    /* 吸附工具 */
    get absorb() {
        return _data_util2d_data__WEBPACK_IMPORTED_MODULE_2__["newAbsorbUtil"];
    }
    get parseJ2D() {
        return _data_util2d_data__WEBPACK_IMPORTED_MODULE_2__["newParseJ2D"];
    }
};
JdesignUtil2dService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
], JdesignUtil2dService);



/***/ }),

/***/ "./src/app/services/message.service.ts":
/*!*********************************************!*\
  !*** ./src/app/services/message.service.ts ***!
  \*********************************************/
/*! exports provided: MessageService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MessageService", function() { return MessageService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let MessageService = class MessageService {
    constructor() { }
};
MessageService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
], MessageService);



/***/ }),

/***/ "./src/app/services/pop-div.service.ts":
/*!*********************************************!*\
  !*** ./src/app/services/pop-div.service.ts ***!
  \*********************************************/
/*! exports provided: PopDivService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PopDivService", function() { return PopDivService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _data_pop_data__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../data/pop.data */ "./src/app/data/pop.data.ts");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");




let PopDivService = class PopDivService {
    constructor(http) {
        this.http = http;
        this._inputBoxsCache = [];
        this._buttonsCache = null;
        /** 右键菜单 */
        this.rightClick = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /** 顶边菜单 */
        this.panelTop = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /** 独立输入框 */
        this.inputBoxs = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /* 信息提示框 */
        this.message = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /* 背景图框架 */
        this.backImg = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /* 按键 */
        this.buttons = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /* 视图缩放 */
        this.thumbnail = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /* 右边菜单 */
        this.panelRight = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /* 接受传过来的右边菜单 */
        this.panelRightData = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /* 正在加载页面 */
        this.loadingPage = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /* 左边按钮 */
        this.leftBtn = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /* 左边产品列表 */
        this.leftMenuType = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /* 左边细节 */
        this.leftProduct = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /* 左边列表 */
        this.leftMenuList = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /* 左边画图工具 */
        this.panelLeftDraw = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /* 左边沙发数据 */
        this.panelLeftSofaData = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /* 左边数据 */
        this.panelLeft = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**新的左边数据 */
        this.sendLeftData = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**点击图标后的数据更新 */
        this.clickLeftData = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**点击左侧图标获得数据 */
        this.getLeftData = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /*** 鼠标悬停和离开家具类型时*/
        this.hoverLeftData = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**点击更换材质图片时触发 */
        this.getMaterial = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /* 测试输入按钮 */
        this.testInputBtn = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**底部按钮***/
        this.panelBottom = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**提示信息*/
        this.cueInfo = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        this.inputBoxs.subscribe((data) => {
            if (data == null || data.length == 0) {
                this.inputBoxsCache = [];
            }
        });
        this.buttons.subscribe((data) => {
            if (data == null)
                this.buttonsCache = null;
        });
    }
    get transPos() { return this._transPos; }
    set transPos(data) { this._transPos = data; }
    /** 右键菜单图标数据 */
    get rigthClickData() {
        return _data_pop_data__WEBPACK_IMPORTED_MODULE_2__["popRightData"];
    }
    /** 顶上菜单图标数据 */
    get panelTopData() {
        return _data_pop_data__WEBPACK_IMPORTED_MODULE_2__["panelTopData"];
    }
    /** 获取panelTopFuncData */
    getPanelTopFuncData() {
        return _data_pop_data__WEBPACK_IMPORTED_MODULE_2__["PanelTopFuncData"];
    }
    /** 自定义inputBox容器 */
    get inputBoxsCache() {
        return this._inputBoxsCache;
    }
    set inputBoxsCache(data) {
        this._inputBoxsCache = data;
    }
    /** inputBox转换器 */
    setInputBoxs() {
        if (this.inputBoxsCache.length == 0)
            return this.inputBoxs.emit([]);
        let newDatas = [];
        let data = null;
        for (let i = 0; i < this.inputBoxsCache.length; i++) {
            data = {
                position: this.transPos(this.inputBoxsCache[i].pos),
                index: this.inputBoxsCache[i].index,
                value: this.inputBoxsCache[i].value,
                css: {
                    "width": 50,
                    "height": 18
                },
                isAutoFocus: this.inputBoxsCache[i].focus == undefined ? false : this.inputBoxsCache[i].focus,
                func: this.inputBoxsCache[i].func,
                focus: this.inputBoxsCache[i].focus
            };
            newDatas.push(data);
        }
        return this.inputBoxs.emit(newDatas);
    }
    /* 自定义按钮容器 */
    get buttonsCache() { return this._buttonsCache; }
    set buttonsCache(data) { this._buttonsCache = data; }
    /* 按钮转换器 */
    setButtons() {
        if (this.buttonsCache == null)
            return this.buttons.emit(null);
        let newData = {
            outArea: this.buttonsCache.outArea,
            content: this.buttonsCache.content,
        };
        newData.outArea.position = this.transPos(newData.outArea.position);
        return this.buttons.emit(newData);
    }
};
PopDivService.ctorParameters = () => [
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_3__["HttpClient"] }
];
PopDivService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_3__["HttpClient"]])
], PopDivService);



/***/ }),

/***/ "./src/app/services/right-menu.service.ts":
/*!************************************************!*\
  !*** ./src/app/services/right-menu.service.ts ***!
  \************************************************/
/*! exports provided: RightMenuService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RightMenuService", function() { return RightMenuService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let RightMenuService = class RightMenuService {
    constructor() {
        /** 点右键 */
        this.point = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /** 墙右键 */
        this.wall = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /** 空间右键 */
        this.room = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /** 背景右键 */
        this.back = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /** 门右键 */
        this.door = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /** 窗右键 */
        this.win = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /** 家具 */
        this.furniture = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /** 转角飘窗 */
        this.cornWin = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
    }
};
RightMenuService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
], RightMenuService);



/***/ }),

/***/ "./src/app/services/save-data.service.ts":
/*!***********************************************!*\
  !*** ./src/app/services/save-data.service.ts ***!
  \***********************************************/
/*! exports provided: SaveDataService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SaveDataService", function() { return SaveDataService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let SaveDataService = class SaveDataService {
    constructor() { }
};
SaveDataService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
], SaveDataService);



/***/ }),

/***/ "./src/app/svg/common/Util/AbsorbUtil.ts":
/*!***********************************************!*\
  !*** ./src/app/svg/common/Util/AbsorbUtil.ts ***!
  \***********************************************/
/*! exports provided: AbsorbUtil, ArcLineType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AbsorbUtil", function() { return AbsorbUtil; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ArcLineType", function() { return ArcLineType; });
/* harmony import */ var _PosUtil__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PosUtil */ "./src/app/svg/common/Util/PosUtil.ts");

/** 吸附工具类 */
class AbsorbUtil {
    /**
     * 点与线段吸附
     * @param point
     * @param lines
     * @param minstance 不写则返回最短的
     */
    constructor(posUtil) {
        this.posUtil = posUtil;
    }
    /**
     * 基本吸附框架,
     * @param minDistance 最小值,没有时,直接返回最小值,有则比较,比较大则为undefined
     * @param arr 数组
     * @param absorbFunc 需要添加的算法  { pos: DC.Pos, powDistance: number }
     * @returns index为lines的下标,distance为最小距离,pos为吸附坐标,没有将返回undefined
     */
    commonAbsorb(arr, absorbFunc, minDistance) {
        /** 没有数据返回undefined */
        if (arr.length == 0)
            return undefined;
        let mainIndex = undefined;
        let mainDistance = undefined;
        let mainPos = undefined;
        /** 对比 */
        for (let i = 0; i < arr.length; i++) {
            let msg = absorbFunc(arr[i]);
            if (msg && (mainDistance == undefined || mainDistance > msg.distance)) {
                mainIndex = i;
                mainDistance = msg.distance;
                mainPos = msg.pos;
            }
            if (msg && msg.isBreak) {
                break;
            }
        }
        /** 判断是否比minstance */
        /** 如果没有minstance或者比最小还小,直接返回 */
        if (minDistance == undefined || (mainDistance != undefined && mainDistance <= minDistance)) {
            return {
                index: mainIndex,
                distance: mainDistance,
                pos: mainPos
            };
        }
        /** 否则返回undefined */
        else {
            return undefined;
        }
    }
    /**
     * 点与线段(直线)吸附
     * @param point
     * @param lines
     * @param isStraight 是否为直线,false为线段,true为直线
     * @param minDistance 最小值,没有时,直接返回最小值,有则比较,比较大则为undefined
     * @returns index为lines的下标,distance为最小距离,pos为吸附坐标,没有将返回undefined
     */
    pointAndLines(point, lines, isStraight, minDistance) {
        let func = (line) => {
            let pos = undefined;
            /** 直线 */
            if (isStraight) {
                pos = this.posUtil.getRightAngleIntersect(point, line[0], line[1]);
            }
            /** 线段 */
            else {
                pos = this.posUtil.getPointToLinePos(point, line[0], line[1]);
            }
            let distance = this.posUtil.getDistance(point, pos);
            return {
                pos: pos,
                distance: distance
            };
        };
        return this.commonAbsorb(lines, func, minDistance);
    }
    /**
     * 点与点吸附
     * @param point
     * @param pointArr
     * @param minDistance 最小值,没有时,直接返回最小值,有则比较,比较大则为undefined
     * @returns index为lines的下标,distance为最小距离,pos为吸附坐标,没有将返回undefined
     */
    pointAndPoints(point, pointArr, minDistance) {
        let func = (pointShadow) => {
            let distance = this.posUtil.getDistance(point, pointShadow);
            return {
                distance: distance,
                pos: pointShadow
            };
        };
        return this.commonAbsorb(pointArr, func, minDistance);
    }
    /**
     * 线弧度吸附
     * @param lineStart
     * @param lineEnd
     * @param radian
     * @param minDistance
     * @returns 返回吸附的坐标,没有返回undefined
     */
    lineAndRadian(lineStart, lineEnd, radian, minDistance) {
        let rayPos = this.posUtil.getRayPos(lineStart, radian, 10);
        let msg = this.pointAndLines(lineEnd, [[lineStart, rayPos]], true, minDistance);
        if (msg != undefined) {
            return msg.pos;
        }
        return undefined;
    }
    /**
     * 点与弧线吸附
     * @param pos
     * @param lines
     * @param minDistance
     * @returns 返回lines中最近的下标,没有返回undefined
     */
    pointAndArcLines(pos, lines, minDistance) {
        let minDifferenDistance = undefined;
        /** 获取面积 */
        let getAreaFunc = (posA, posB, posC) => {
            let area = ((posA.x * (posB.y - posC.y)) + (posB.x * (posC.y - posA.y)) + (posC.x * (posA.y - posB.y))) / 2;
            return area;
        };
        /** 是否有更小值 */
        let isMinFunc = (line, minLine) => {
            let vector = { x: pos.x - line.circlePos.x, y: pos.y - line.circlePos.y };
            let distance = Math.sqrt(Math.pow(vector.x, 2) + Math.pow(vector.y, 2));
            let differenDistance = Math.abs(distance - line.radius);
            if (minDistance == undefined || differenDistance < minDistance) {
                if ((minDifferenDistance == undefined || differenDistance < minDifferenDistance) && getAreaFunc(line.lineStart, pos, line.lineEnd) > 0) {
                    if (minLine == undefined || distance < minLine.radius) {
                        minDifferenDistance = differenDistance;
                        return true;
                    }
                    else
                        return false;
                }
            }
            return false;
        };
        let minLine = undefined;
        let index = undefined;
        for (let i = 0; i < lines.length; i++) {
            let a = isMinFunc(lines[i], minLine);
            /** 有更小值 */
            if (a) {
                index = i;
                minLine = lines[i];
            }
        }
        return index;
    }
    /**
     * 射线与线吸附
     * @param rayLine 射线(有分先后)
     * @param lines 线集合
     * @param minDistance 最小距离,没有默认返回计算的最小距离
     * @returns 返回lines中最近的下标,没有返回undefined
     */
    rayLineAndLine(rayLine, lines, minDistance) {
        let rayDistance = this.posUtil.getDistance(rayLine[0], rayLine[1]);
        let newLine = this.posUtil.getlongLine(rayLine);
        let func = (line) => {
            /** 先相交获取点 */
            let intersectPos = this.posUtil.getIntersect(newLine[0], newLine[1], line[0], line[1], false);
            /** 要有相交才有可能开始 */
            if (intersectPos) {
                /** 先判断是否同向 */
                let vector = this.posUtil.vector2D(rayLine[0]).sub(rayLine[1]);
                let intersectVector = this.posUtil.vector2D(rayLine[0]).sub(intersectPos);
                let a = vector.Multiply(intersectVector);
                /** 反方向就不能吸附 */
                if (a < 0)
                    return undefined;
                /** 比较长度 */
                let intersectDistance = this.posUtil.getDistance(rayLine[0], intersectPos);
                let b = Math.abs(rayDistance - intersectDistance);
                return {
                    distance: b,
                    pos: intersectPos
                };
            }
            return undefined;
        };
        return this.commonAbsorb(lines, func, minDistance);
    }
    /**
     * 线与线吸附,先判断是否相交(最优先,有就返回),再判断线段与另外的线段形成的扩大矩形进行碰撞 ,有返回
     * @param mainLine
     * @param lines
     * @param rectDistance 形成扩大矩形进行碰撞,最大值不要超过(999999)
     * @returns 返回的distance为负值,相交时distance为-9999999999999
     */
    lineAndLine(mainLine, lines, rectDistance) {
        let func = (line) => {
            // let intersectPos = this.posUtil.getIntersect(mainLine[0], mainLine[1], line[0], line[1], false)
            // /* 相交就可以立刻返回了 */
            // if (intersectPos) {
            //     return {
            //         distance: -9999999999999,
            //         pos: intersectPos,
            //         isBreak: true
            //     }
            // }
            // else {
            let minDistance = undefined;
            let minPos = undefined;
            /* 生成 */
            let rect = this.getRectPos(line, rectDistance);
            let newLine = [rect[3], rect[0]];
            /* 是否整线段都在rect里面 */
            let a = this.posUtil.isInPosArrByPos(mainLine[0], rect);
            let b = this.posUtil.isInPosArrByPos(mainLine[1], rect);
            /* 判断 */
            if (a && b) {
                return {
                    distance: -99999999,
                    pos: mainLine[0],
                    isBreak: true
                };
            }
            /* 不是的话继续运算 */
            /* 循环遍历 */
            for (let i = 0; i < rect.length - 1; i++) {
                let intersectPos = this.posUtil.getIntersect(mainLine[0], mainLine[1], newLine[0], newLine[1], false);
                if (intersectPos) {
                    let checkPos = a ? mainLine[0] : mainLine[1];
                    let checkDistance = -this.posUtil.getDistance(checkPos, intersectPos);
                    if (minDistance == undefined || minDistance > checkDistance) {
                        minDistance = checkDistance;
                        minPos = intersectPos;
                    }
                }
                newLine = [rect[i], rect[i + 1]];
                // }
            }
            /* 有值就记录 */
            if (minPos) {
                return {
                    distance: minDistance,
                    pos: minPos
                };
            }
            /* 没有返回空值 */
            return undefined;
        };
        return this.commonAbsorb(lines, func);
    }
    /* 获取扩大矩形点,用于线与线吸附 */
    getRectPos(line, rectDistance) {
        line = this.posUtil.getlongLine(line, rectDistance);
        let newLineA = this.posUtil.getPosTrans(line[0], line[1], rectDistance);
        let newLineB = this.posUtil.getPosTrans(line[0], line[1], -rectDistance);
        let newPoints = [];
        newPoints.push(newLineA[0], newLineA[1], newLineB[1], newLineB[0]);
        let area = this.posUtil.getArea(...newPoints);
        if (area < 0)
            newPoints = newPoints.reverse();
        return newPoints;
    }
}
AbsorbUtil.ctorParameters = () => [
    { type: _PosUtil__WEBPACK_IMPORTED_MODULE_0__["PosUtil"] }
];
class ArcLineType {
}


/***/ }),

/***/ "./src/app/svg/common/Util/CalUtil.ts":
/*!********************************************!*\
  !*** ./src/app/svg/common/Util/CalUtil.ts ***!
  \********************************************/
/*! exports provided: CalUtil */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CalUtil", function() { return CalUtil; });
/** 运算工具类 */
class CalUtil {
    /** 字符串数组序数化 */
    getStringArrByNum(obj) {
        let newArr = [];
        let key = null;
        for (key in obj) {
            newArr.push(obj[key]);
        }
        return newArr;
    }
    /** 数组去重复(多个重复不在话下) */
    unique(arr) {
        let result = [], hash = {};
        for (let i = 0, elem; (elem = arr[i]) != null; i++) {
            if (!hash[elem]) {
                result.push(elem);
                hash[elem] = true;
            }
        }
        return result;
    }
    /** 数组去重复(多个重复不在话下) */
    uniqueByAttr(arr, attr) {
        let result = [], hash = {};
        for (let i = 0, elem; (elem = arr[i]) != null; i++) {
            if (!hash[elem[attr]]) {
                result.push(elem);
                hash[elem[attr]] = true;
            }
        }
        return result;
    }
    /* 删除空值数组 */
    removeUndefined(arr) {
        for (let i = arr.length - 1; i >= 0; i--) {
            if (arr[i] == undefined) {
                arr.splice(i, 1);
            }
        }
    }
    /** 是否包含 包含返回位置i,不包含返回null */
    isInclude(arr, text) {
        for (let i = 0; i < arr.length; i++) {
            if (arr[i] == text)
                return i;
        }
        return null;
    }
    /** 数组元素是否包含 不包含返回null,包含返回第一个位置下标 */
    isIncludeByAttr(attr, text, ...arr) {
        for (let i = 0; i < arr.length; i++) {
            if (arr[i][attr] == text)
                return i;
        }
        return null;
    }
    /** 删除指定元素(可以删除多个相同的) */
    removeByValue(arr, value) {
        for (let i = arr.length - 1; i >= 0; i--) {
            if (arr[i] == value) {
                arr.splice(i, 1);
            }
        }
    }
    /** 通过属性删除指定元素(可以删除多个相同的) */
    removeByAttr(arr, attr, value) {
        for (let i = arr.length - 1; i >= 0; i--) {
            if (arr[i][attr] == value) {
                arr.splice(i, 1);
            }
        }
    }
    /** 数组值是否都一样 */
    isSameArr(arr) {
        let value = arr[0];
        for (let i = 1; i < arr.length; i++) {
            if (value != arr[i])
                return false;
        }
        return true;
    }
    /** 数组参数是否都一样 */
    isSameArrByAttr(arr, attr) {
        let value = arr[0][attr];
        for (let i = 0; i < arr.length; i++) {
            if (value != arr[i][attr]) {
                return false;
            }
        }
        return true;
    }
    /**  冒泡排序 从小到大 慢稳定 */
    bubbleSort(arr) {
        let len = arr.length;
        for (let i = 0; i < len; i++) {
            for (let j = 0; j < len - 1 - i; j++) {
                if (arr[j] > arr[j + 1]) { // 相邻元素两两对比
                    let temp = arr[j + 1]; // 元素交换
                    arr[j + 1] = arr[j];
                    arr[j] = temp;
                }
            }
        }
    }
    /** 冒泡排序属性版 从小到大 */
    bubbleSortByAttr(arr, attr) {
        let len = arr.length;
        for (let i = 0; i < len; i++) {
            for (let j = 0; j < len - 1 - i; j++) {
                if (arr[j][attr] > arr[j + 1][attr]) { // 相邻元素两两对比
                    let temp = arr[j + 1]; // 元素交换
                    arr[j + 1] = arr[j];
                    arr[j] = temp;
                }
            }
        }
    }
    /** 冒泡排序 从小到大 单独属性排列版 */
    bubbleSortBySingleAttr(arr, attr) {
        let newArr = this.getNewAttrArray(arr, attr);
        this.bubbleSort(newArr);
        return newArr;
    }
    /** 冒泡排序对照返回ID版 从小到大 */
    bubbleSortID(arr) {
        let arrID = [];
        let len = arr.length;
        for (let i = 0; i < len; i++)
            arrID.push(i);
        for (let i = 0; i < len; i++) {
            for (let j = 0; j < len - 1 - i; j++) {
                if (arr[j] > arr[j + 1]) { // 相邻元素两两对比
                    let temp = arr[j + 1]; // 元素交换
                    arr[j + 1] = arr[j];
                    arr[j] = temp;
                    let tempID = arrID[j + 1];
                    arrID[j + 1] = arrID[j];
                    arrID[j] = tempID;
                }
            }
        }
        return arrID;
    }
    /** 快速排序 从小到大 快但是不稳定 */
    quickSort(array) {
        //let array = [8,4,6,2,7,9,3,5,74,5];
        //let array = [0,1,2,44,4,324,5,65,6,6,34,4,5,6,2,43,5,6,62,43,5,1,4,51,56,76,7,7,2,1,45,4,6,7];
        let i = 0;
        let j = array.length - 1;
        let Sort = function (i, j) {
            // 结束条件
            if (i == j) {
                return;
            }
            ;
            let key = array[i];
            let stepi = i; // 记录开始位置
            let stepj = j; // 记录结束位置
            while (j > i) {
                // j <<-------------- 向前查找
                if (array[j] >= key) {
                    j--;
                }
                else {
                    array[i] = array[j];
                    //i++ ------------>>向后查找
                    while (j > ++i) {
                        if (array[i] > key) {
                            array[j] = array[i];
                            break;
                        }
                    }
                }
            }
            // 如果第一个取出的 key 是最小的数
            if (stepi == i) {
                Sort(++i, stepj);
                return;
            }
            // 最后一个空位留给 key
            array[i] = key;
            // 递归
            Sort(stepi, i);
            Sort(j, stepj);
        };
        Sort(i, j);
        //cb(array)
    }
    /**  快速排列 从小到大 单独属性排列版 */
    quickSortBySingleAttr(array, attr) {
        let newArray = this.getNewAttrArray(array, attr);
        this.quickSort(newArray);
        return newArray;
    }
    /** 获取对象多层属性 */
    getObjAttrs(obj, attrs) {
        let newObj = null;
        for (let i = 0; i < attrs.length; i++) {
            if (newObj == null)
                newObj = obj[attrs[0]];
            else
                newObj = newObj[attrs[i]];
        }
        return newObj;
    }
    /**  对象属性组成新的数组 */
    getNewAttrArray(array, attr) {
        let a = [];
        for (let i = 0; i < array.length; i++) {
            a.push(array[i][attr]);
        }
        return a;
    }
    /** 获取关联数组的key */
    getArrayKeys(stringArray, name) {
        let objKeys = [];
        for (let key in stringArray) {
            objKeys.push(key);
        }
        return objKeys;
    }
    /* 字符串找数字 */
    getNumFromString(str) {
        let newStr = str.replace(/[^0-9]/ig, "");
        let num = parseInt(newStr);
        return num;
    }
}


/***/ }),

/***/ "./src/app/svg/common/Util/CommonUtil.ts":
/*!***********************************************!*\
  !*** ./src/app/svg/common/Util/CommonUtil.ts ***!
  \***********************************************/
/*! exports provided: CommonUtil */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CommonUtil", function() { return CommonUtil; });
class CommonUtil {
    /**网络请求文件数据
* readyCallback为数据回调的方法
*/
    loadFile(url, readyCallback, progressCallback, failCallback) {
        let length = 0;
        if (document.implementation && document.implementation.createDocument) {
            var request = new XMLHttpRequest();
            request.onreadystatechange = function () {
                if (request.readyState === 4) {
                    if (request.status === 0 || request.status === 200) {
                        if (request.response) {
                            readyCallback(request.response);
                        }
                        else {
                            if (failCallback) {
                                failCallback({ type: 'error', url: url });
                            }
                            else {
                                console.error("空文件或者文件不存在(" + url + ")");
                            }
                        }
                    }
                    else {
                        if (failCallback) {
                            failCallback({ type: 'error', url: url });
                        }
                        else {
                            console.error('无法加载' + url + '" (' + request.status + ')');
                        }
                    }
                }
                else if (request.readyState === 3) {
                    if (progressCallback) {
                        if (length === 0) {
                            length = request.getResponseHeader("Content-Length");
                        }
                        progressCallback({ total: length, loaded: request.responseText.length });
                    }
                }
            };
            request.open("GET", url, true);
            request.send(null);
        }
        else {
            alert("发生了其他错误!");
        }
    }
    /** 快速排序 */
    quickSort(array) {
        //let array = [8,4,6,2,7,9,3,5,74,5];
        //let array = [0,1,2,44,4,324,5,65,6,6,34,4,5,6,2,43,5,6,62,43,5,1,4,51,56,76,7,7,2,1,45,4,6,7];
        let i = 0;
        let j = array.length - 1;
        let Sort = function (i, j) {
            // 结束条件
            if (i == j) {
                return;
            }
            ;
            let key = array[i];
            let stepi = i; // 记录开始位置
            let stepj = j; // 记录结束位置
            while (j > i) {
                // j <<-------------- 向前查找
                if (array[j] >= key) {
                    j--;
                }
                else {
                    array[i] = array[j];
                    //i++ ------------>>向后查找
                    while (j > ++i) {
                        if (array[i] > key) {
                            array[j] = array[i];
                            break;
                        }
                    }
                }
            }
            // 如果第一个取出的 key 是最小的数
            if (stepi == i) {
                Sort(++i, stepj);
                return;
            }
            // 最后一个空位留给 key
            array[i] = key;
            // 递归
            Sort(stepi, i);
            Sort(j, stepj);
        };
        Sort(i, j);
        //cb(array)
    }
    /**  冒泡排序 */
    bubbleSort(arr) {
        var len = arr.length;
        for (var i = 0; i < len; i++) {
            for (var j = 0; j < len - 1 - i; j++) {
                if (arr[j] > arr[j + 1]) { // 相邻元素两两对比
                    var temp = arr[j + 1]; // 元素交换
                    arr[j + 1] = arr[j];
                    arr[j] = temp;
                }
            }
        }
        return arr;
    }
    /**  冒泡排序参照回调版 relArray相对array改变*/
    bubbleSortRel(array, relArray, cb) {
        let i = 0, len = array.length, j, d, e;
        for (; i < len; i++) {
            for (j = 0; j < len; j++) {
                if (array[i] < array[j]) {
                    d = array[j];
                    array[j] = array[i];
                    array[i] = d;
                    e = relArray[j];
                    relArray[j] = relArray[i];
                    relArray[i] = e;
                }
            }
        }
        cb();
    }
    /** 冒泡排序对照返回ID版 */
    bubbleSortID(arr) {
        let arrID = [];
        let len = arr.length;
        for (let i = 0; i < len; i++)
            arrID.push(i);
        for (let i = 0; i < len; i++) {
            for (let j = 0; j < len - 1 - i; j++) {
                if (arr[j] > arr[j + 1]) { // 相邻元素两两对比
                    let temp = arr[j + 1]; // 元素交换
                    arr[j + 1] = arr[j];
                    arr[j] = temp;
                    let tempID = arrID[j + 1];
                    arrID[j + 1] = arrID[j];
                    arrID[j] = tempID;
                }
            }
        }
        return arrID;
    }
    /**  快速排列加强版 */
    quickSortS(array, attrs, cb) {
        let newArray = new Array(array.length);
        this.createNewAttrArray(array, attrs, (newArray) => {
            let i = 0;
            let j = newArray.length - 1;
            let Sort = (i, j) => {
                // 结束条件
                if (i == j) {
                    return;
                }
                ;
                let key = newArray[i];
                let c = array[i];
                let stepi = i; // 记录开始位置
                let stepj = j; // 记录结束位置
                while (j > i) {
                    // j <<-------------- 向前查找
                    if (newArray[j] >= key) {
                        j--;
                    }
                    else {
                        newArray[i] = newArray[j];
                        array[i] = array[j];
                        //i++ ------------>>向后查找
                        while (j > ++i) {
                            if (newArray[i] > key) {
                                newArray[j] = newArray[i];
                                array[j] = array[i];
                                break;
                            }
                        }
                    }
                }
                // 如果第一个取出的 key 是最小的数
                if (stepi == i) {
                    Sort(++i, stepj);
                    return;
                }
                // 最后一个空位留给 key
                newArray[i] = key;
                array[i] = c;
                // 递归
                Sort(stepi, i);
                Sort(j, stepj);
            };
            Sort(i, j);
            cb();
        });
    }
    /**  获取对象属性 */
    getObjAttr(obj, attr) {
        return obj[attr];
    }
    /** 获取对象多层属性 */
    getObjAttrs(obj, attrs) {
        let newObj = null;
        for (let i = 0; i < attrs.length; i++) {
            if (newObj == null)
                newObj = obj[attrs[0]];
            else
                newObj = newObj[attrs[i]];
        }
        return newObj;
    }
    /**  数组属性组成新的数组 */
    createNewAttrArray(array, attr, cb) {
        let a = [];
        for (let i = 0; i < array.length; i++) {
            a.push(this.getObjAttrs(array[i], attr));
        }
        cb(a);
    }
    /** 获取关联数组的key */
    getArrayKeys(stringArray, name) {
        let objKeys = [];
        for (let key in stringArray) {
            objKeys.push(key);
        }
        return objKeys;
    }
    /** 克隆 */
    clone(obj) {
        let o;
        switch (typeof obj) {
            case 'undefined': break;
            case 'string':
                o = obj + '';
                break;
            case 'number':
                o = obj - 0;
                break;
            case 'boolean':
                o = obj;
                break;
            case 'object':
                if (obj === null) {
                    o = null;
                }
                else {
                    if (obj instanceof Array) {
                        o = [];
                        // let i=0;i<obj.length;i++
                        for (let i = 0; i < obj.length; i++) {
                            o.push(this.clone(obj[i]));
                        }
                    }
                    else {
                        o = {};
                        for (let k in obj) {
                            o[k] = this.clone(obj[k]);
                        }
                    }
                }
                break;
            default:
                o = obj;
                break;
        }
        return o;
    }
    /** 克隆数组版 对应无法普通clone*/
    cloneArr(obj) {
        let newObj = new Array();
        for (let key in obj) {
            newObj[key] = this.clone(obj[key]);
        }
        return newObj;
    }
}


/***/ }),

/***/ "./src/app/svg/common/Util/JParseJ2D.ts":
/*!**********************************************!*\
  !*** ./src/app/svg/common/Util/JParseJ2D.ts ***!
  \**********************************************/
/*! exports provided: JParseJ2D */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JParseJ2D", function() { return JParseJ2D; });
/* harmony import */ var _parseJ2D__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parseJ2D */ "./src/app/svg/common/Util/parseJ2D.ts");

class JParseJ2D extends _parseJ2D__WEBPACK_IMPORTED_MODULE_0__["ParseJ2D"] {
    getpointsObjByTags(j2d) {
    }
}


/***/ }),

/***/ "./src/app/svg/common/Util/ObjUtil.ts":
/*!********************************************!*\
  !*** ./src/app/svg/common/Util/ObjUtil.ts ***!
  \********************************************/
/*! exports provided: ObjUtil */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ObjUtil", function() { return ObjUtil; });
class ObjUtil {
    /** 克隆 */
    clone(obj) {
        let o;
        switch (typeof obj) {
            case 'undefined': break;
            case 'string':
                o = obj + '';
                break;
            case 'number':
                o = obj - 0;
                break;
            case 'boolean':
                o = obj;
                break;
            case 'object':
                if (obj === null) {
                    o = null;
                }
                else {
                    if (obj instanceof Array) {
                        o = [];
                        // let i=0;i<obj.length;i++
                        for (let i = 0; i < obj.length; i++) {
                            o.push(this.clone(obj[i]));
                        }
                    }
                    else {
                        o = {};
                        for (let k in obj) {
                            o[k] = this.clone(obj[k]);
                        }
                    }
                }
                break;
            default:
                o = obj;
                break;
        }
        return o;
    }
    strongClone(obj) {
        let o;
        switch (typeof obj) {
            case 'undefined': break;
            case 'string':
                o = obj + '';
                break;
            case 'number':
                o = obj - 0;
                break;
            case 'boolean':
                o = obj;
                break;
            case 'object':
                if (obj === null) {
                    o = null;
                }
                else {
                    if (obj instanceof Array) {
                        o = [];
                        let int = 0;
                        // let i=0;i<obj.length;i++
                        for (let i = 0; i < obj.length; i++) {
                            int++;
                            o.push(this.strongClone(obj[i]));
                        }
                        if (int == 0) {
                            for (let key in obj) {
                                o[key] = (this.strongClone(obj[key]));
                            }
                        }
                    }
                    else {
                        o = {};
                        for (let k in obj) {
                            o[k] = this.strongClone(obj[k]);
                        }
                    }
                }
                break;
            default:
                o = obj;
                break;
        }
        return o;
    }
    /**
     * 还原数据
     * @param targetObj 要还原的目标数据
     * @param redoObj 用于还原的输入数据
     */
    redo(targetObj, redoObj) {
        if (targetObj == undefined)
            targetObj = redoObj;
        else {
            for (let key in redoObj) {
                switch (typeof redoObj[key]) {
                    case 'undefined': break;
                    case 'string':
                    case 'number':
                    case 'boolean':
                        targetObj[key] = redoObj[key];
                        break;
                    case 'object':
                        if (redoObj[key] === null) {
                            targetObj[key] = null;
                        }
                        else {
                            if (redoObj[key] instanceof Array) {
                                for (let i = 0; i < redoObj[key].length; i++) {
                                    if (targetObj[key][i] == undefined)
                                        targetObj[key].push([]);
                                    this.redo(targetObj[key][i], redoObj[key][i]);
                                }
                            }
                            else {
                                this.redo(targetObj[key], redoObj[key]);
                            }
                        }
                }
            }
        }
    }
    /** 克隆数组版 对应无法普通clone*/
    cloneArr(obj) {
        let newObj = new Array();
        for (let key in obj) {
            newObj[key] = this.clone(obj[key]);
        }
        return newObj;
    }
    /**
     * 用于修改链接(可属性追踪)
     * @param datas
     * @param mainUrl
     * @param attrArr 如果有属性,则修改属性,否则直接修改字符串
     */
    changeObjUrlByattrs(datas, mainUrl, attrArr) {
        for (let i = 0; i < datas.length; i++) {
            if (attrArr) {
                for (let j = 0; j < attrArr.length; j++) {
                    if (datas[i][attrArr[j]].indexOf(".") != -1 && datas[i][attrArr[j]].indexOf("/") != -1) {
                        datas[i][attrArr[j]] = datas[i][attrArr[j]][0] == '/' ? mainUrl + datas[i][attrArr[j]] : mainUrl + '/' + datas[i][attrArr[j]];
                    }
                }
            }
            else {
                if (datas[i].indexOf(".") != -1 && datas[i].indexOf("/") != -1) {
                    datas[i] = datas[i][0] == '/' ? mainUrl + datas[i] : mainUrl + '/' + datas[i];
                }
            }
        }
    }
    /** 用于修改链接(标记追踪) */
    changeObjUrlByflag(data, mainUrl, flag) {
        let flagLength = flag.length;
        if (data != null) {
            for (let key in data) {
                switch (typeof data[key]) {
                    case 'string':
                        let str = data[key];
                        let a = str.slice(0, flagLength);
                        if (a == flag) {
                            a = str.slice(flagLength);
                            a = a[0] == '/' ? mainUrl + a : mainUrl + '/' + a;
                            data[key] = a;
                        }
                        break;
                    case "object":
                        this.changeObjUrlByflag(data[key], mainUrl, flag);
                        break;
                }
            }
        }
    }
    getAllQueryString() {
        let text = window.location.search.substr(1);
        let textArr = text.split('&&');
        let objArr = [];
        for (let i = 0; i < textArr.length; i++) {
            let arr = textArr[i].split('=');
            let key = arr[0].toLowerCase();
            objArr[key] = arr[1];
        }
        return objArr;
    }
    /** 访问链接对象超级版 */
    getQueryStringSuper(name) {
        name = name.toLowerCase();
        let obj = this.getAllQueryString();
        return obj[name];
    }
    gethash() {
        let url = window.location.hash;
        if (url == '') {
            return undefined;
        }
        else {
            let urls = url.split('#')[1];
            return urls;
        }
    }
    /** 访问链接对象 */
    getQueryString(name) {
        var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)");
        var text = window.location.search.substr(1);
        // console.log(text)
        var r = text.match(reg);
        // console.log(r)
        if (r != null)
            return decodeURI(r[2]);
        return null;
    }
    /**
     * 对比两个类不同的类型
     * @param mainType 用来对比的类型
     * @param checkType 要对比的类型
     * @param args 实现的参数
     * @param ignoreTypes
     */
    getDifferClassType(mainType, checkType, obj = { ignoreTypes: [] }) {
        let mainObj = obj.mainArgs != undefined ? new mainType(...obj.mainArgs) : new mainType();
        let checkObj = obj.mainArgs != undefined ? new checkType(...obj.checkArgs) : new checkType();
        let mainArr = [];
        let checkArr = [];
        /* 收集 */
        for (let mainKey in mainObj) {
            if (mainObj[mainKey] == undefined) {
                let same = false;
                for (let i = 0; i < obj.ignoreTypes.length; i++) {
                    if (obj.ignoreTypes[i] == mainKey) {
                        same = true;
                        break;
                    }
                }
                if (!same)
                    mainArr[mainKey] = true;
            }
        }
        /* 筛选 */
        for (let checkKey in checkObj) {
            if (!mainArr[checkKey]) {
                checkArr.push(checkKey);
            }
        }
        return checkArr;
    }
}


/***/ }),

/***/ "./src/app/svg/common/Util/PosUtil.ts":
/*!********************************************!*\
  !*** ./src/app/svg/common/Util/PosUtil.ts ***!
  \********************************************/
/*! exports provided: PosUtil */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PosUtil", function() { return PosUtil; });
class PosUtil {
    /** 获取中心点 */
    getCenterPos(posStart, posEnd) {
        return {
            x: (posStart.x + posEnd.x) / 2,
            y: (posStart.y + posEnd.y) / 2
        };
    }
    /** 根据百分比获取某条线段上某点坐标 */
    getPosByLinePer(posStart, posEnd, per) {
        let distance = this.getDistance(posStart, posEnd);
        let newDistance = distance * per;
        let radian = this.getRadian(posStart, posEnd);
        let newPos = this.getRayPos(posStart, radian, newDistance);
        return newPos;
    }
    /** 通过rect原点获取中心点 */
    getCenterPosByRect(pos, size) {
        return {
            x: pos.x + (size.width / 2),
            y: pos.y + (size.height / 2)
        };
    }
    /** 通过rect中心点获取原点 */
    getOriginPosByRect(centerpos, size) {
        return {
            x: centerpos.x - (size.width / 2),
            y: centerpos.y - (size.height / 2)
        };
    }
    /** 两点生成四点 回调为有序四点的ID*/
    getRectByTwoPos(posStart, posEnd) {
        let posA = { x: posEnd.x, y: posStart.y };
        let posB = { x: posStart.x, y: posEnd.y };
        return [posStart, posA, posEnd, posB];
    }
    /** 三角距离确定弧度(弧度为A与B夹角即c角) */
    getTriangleRadianByDistance(distanceA, distanceB, distanceC) {
        let cosC = (Math.pow(distanceA, 2) + Math.pow(distanceB, 2) - Math.pow(distanceC, 2)) / (2 * distanceA * distanceB);
        return Math.acos(cosC);
    }
    /** 三角坐标确定折角 */
    getTriangleRadianByPos(posStart, posCenter, posEnd) {
        let radian0 = this.getRadian(posStart, posCenter);
        let radian1 = this.getRadian(posCenter, posEnd);
        let newRadian = radian0 - radian1 + Math.PI;
        return newRadian;
    }
    /** 获取弧度 当点坐标相同时的时候返回null*/
    getRadian(posStart, posEnd) {
        if (!posStart || !posEnd)
            return undefined;
        let Y = posEnd.y - posStart.y;
        let X = posEnd.x - posStart.x;
        if (Y == 0 && X == 0)
            return undefined;
        else
            return Math.atan2(Y, X);
    }
    /**
     * 获取角度拨正值
     * @param rotate
     * @param isAbs 绝对正,得到值必为为正,否则一半180,一半180,默认fasle
     */
    getAbsRotate(rotate, isAbs = false) {
        if (!isAbs) {
            while (rotate < -180) {
                rotate = rotate + 360;
            }
            while (rotate > 180) {
                rotate = rotate - 360;
            }
            return rotate;
        }
        else {
            while (rotate < 0) {
                rotate = rotate + 360;
            }
            while (rotate > 360) {
                rotate = rotate - 360;
            }
        }
        return rotate;
    }
    /**
     * 获取弧度拨正值
     * @param radian
     * @param isAbs 绝对正,得到值必为为正(0~360),否则一半正180,一半负180,默认false
     */
    getAbsRadian(radian, isAbs = false) {
        if (!isAbs) {
            while (radian < -Math.PI) {
                radian = radian + (Math.PI * 2);
            }
            while (radian >= Math.PI) {
                radian = radian - (Math.PI * 2);
            }
            return radian;
        }
        else {
            while (radian < 0) {
                radian = radian + (Math.PI * 2);
            }
            while (radian >= (Math.PI * 2)) {
                radian = radian - (Math.PI * 2);
            }
        }
        return radian;
    }
    /**
     * 获取移动的坐标
     * @param distance 距离
     * @param radian 弧度
     */
    getPlusPos(distance, radian) {
        let Y = Math.sin(radian) * distance;
        let X = Math.cos(radian) * distance;
        let newPos = { x: X, y: Y };
        return newPos;
    }
    /** 获取角度 当点坐标相同时的时候返回null*/
    getRotate(posStart, posEnd) {
        let radian = this.getRadian(posStart, posEnd);
        if (radian == null)
            return null;
        let rotate = radian * 180 / Math.PI;
        return rotate;
    }
    /** 获取两点坐标平方距离 */
    getPowDistance(posStart, posEnd) {
        let powDistance = Math.pow((posEnd.y - posStart.y), 2) + Math.pow((posEnd.x - posStart.x), 2);
        return powDistance;
    }
    /** 获取两点的距离 */
    getDistance(posStart, posEnd) {
        let powDistance = this.getPowDistance(posStart, posEnd);
        let distance = Math.sqrt(powDistance);
        return distance;
    }
    /** 获取两点坐标距离方向版  pos2,pos3为原来线段*/
    getPosDistanceDirect(posContrast, posStart, posEnd) {
        /** 原来距离 */
        let distance = this.getDistance(posContrast, posStart);
        /** 线段距离 */
        let lineDistance = this.getDistance(posStart, posEnd);
        /** 判断是否为负距离依据 */
        let newDistance = this.getDistance(posContrast, posEnd);
        if (newDistance > distance && newDistance > lineDistance)
            distance *= -1;
        return distance;
    }
    /** 获取坐标组中最大最小坐标 [max,min]*/
    getLimitPosArr(...posArr) {
        let maxX = posArr[0].x, maxY = posArr[0].y, minX = posArr[0].x, minY = posArr[0].y;
        let pos = null;
        for (pos of posArr) {
            if (pos.x > maxX)
                maxX = pos.x;
            if (pos.x < minX)
                minX = pos.x;
            if (pos.y > maxY)
                maxY = pos.y;
            if (pos.y < minY)
                minY = pos.y;
        }
        return [{ x: maxX, y: maxY }, { x: minX, y: minY }];
    }
    /** 获取旋转点坐标 绕中心点旋转*/
    getRotatePos(centerPos, mainPos, radian) {
        /** x1=x cosB-y sinB ; y1=x sinB+ y cosB */
        let newPos = {
            x: ((mainPos.x - centerPos.x) * Math.cos(radian)) - ((mainPos.y - centerPos.y) * Math.sin(radian)) + centerPos.x,
            y: ((mainPos.x - centerPos.x) * Math.sin(radian)) + ((mainPos.y - centerPos.y) * Math.cos(radian)) + centerPos.y
        };
        return newPos;
    }
    /** 已知斜边两点,求等腰直角的点 */
    getIsoscelesRightAngle(posStart, posEnd) {
        let radian = this.getRadian(posStart, posEnd);
        let centerPos = this.getCenterPos(posStart, posEnd);
        let distance = this.getDistance(posStart, posEnd);
        let newPos = this.getRayPos(centerPos, radian + (Math.PI / 2), distance);
        return newPos;
    }
    /** 射线算法 */
    getRayPos(pos, radian, distance) {
        let newPos = { x: pos.x + (distance * Math.cos(radian)), y: pos.y + (distance * Math.sin(radian)) };
        return newPos;
    }
    /** 判断两条由两点形成的直线是否相交 true返回delta, false返回false*/
    isIntersect(lineAPosStart, lineAPosEnd, lineBPosStart, lineBPosEnd) {
        let delta = (lineAPosEnd.x - lineAPosStart.x) * (lineBPosStart.y - lineBPosEnd.y) - (lineBPosStart.x - lineBPosEnd.x) * (lineAPosEnd.y - lineAPosStart.y);
        return delta;
    }
    /** 坐标是否相同 */
    isSamePos(posA, posB, errorValue = 0.0001) {
        if (posA == null || posB == null)
            return false;
        else if ((posA.x + errorValue > posB.x && posA.x - errorValue < posB.x) && (posA.y + errorValue > posB.y && posA.y - errorValue < posB.y))
            return true;
        else
            return false;
    }
    /**
     * 判断两线是否水平
     * @param lineAStart
     * @param lineAEnd
     * @param lineBStart
     * @param lineBEnd
     * @param minRadian 优先通过弧度判断是否平行线,如果不平行,直接0
     * @param minDistance 再通过距离判断是否水平
     *  @returns 返回num(0是不为水平线,1是正平行线,-1是反平行线)
     */
    isHorizontalLine(lineA, lineB, minRadian, minDistance) {
        if (lineA.radian == undefined)
            lineA.radian = this.getRadian(lineA.posArr[0], lineA.posArr[1]);
        if (lineB.radian == undefined)
            lineB.radian = this.getRadian(lineB.posArr[0], lineB.posArr[1]);
        let obj = { isH: 0, distance: undefined };
        /** 测是正方向 */
        let check = this.isSameRadian(lineA.radian, lineB.radian, minRadian);
        if (check)
            obj.isH = 1;
        /** 测试反反向 */
        else {
            check = this.isSameRadian(lineA.radian, lineB.radian + Math.PI, minRadian);
            if (check)
                obj.isH = -1;
        }
        /** 如果不平行,那就是真的不平行了 */
        if (obj.isH == 0)
            return obj;
        let otherDistanceA = this.getRightAngleDistance(lineB.posArr[0], lineA.posArr[0], lineA.posArr[1]);
        let otherDistanceB = this.getRightAngleDistance(lineB.posArr[1], lineA.posArr[0], lineA.posArr[1]);
        if (otherDistanceA < minDistance && otherDistanceB < minDistance) {
            if (otherDistanceA < otherDistanceB)
                obj.distance = otherDistanceA;
            else
                obj.distance = otherDistanceB;
        }
        return obj;
    }
    /** 计算两条由两点形成的线段或直线相交点，默认直线true，线段不相交返回null*/
    getIntersect(lineAPosStart, lineAPosEnd, lineBPosStart, lineBPosEnd, isStraight = true) {
        let p = null;
        let r, u;
        let delta = this.isIntersect(lineAPosStart, lineAPosEnd, lineBPosStart, lineBPosEnd);
        /** 判断是否平行 */
        if (delta != 0) {
            r = ((lineBPosStart.x - lineAPosStart.x) * (lineBPosStart.y - lineBPosEnd.y) - (lineBPosStart.x - lineBPosEnd.x) * (lineBPosStart.y - lineAPosStart.y)) / delta;
            u = ((lineAPosEnd.x - lineAPosStart.x) * (lineBPosStart.y - lineAPosStart.y) - (lineBPosStart.x - lineAPosStart.x) * (lineAPosEnd.y - lineAPosStart.y)) / delta;
            /** 线段 */
            if (!isStraight) {
                /** 判断相交点是否在线段内 */
                if ((r >= 0 && r <= 1) && (u >= 0 && u <= 1)) {
                    p = { x: lineAPosStart.x + r * (lineAPosEnd.x - lineAPosStart.x), y: lineAPosStart.y + r * (lineAPosEnd.y - lineAPosStart.y) };
                }
            }
            /** 直线 */
            else {
                p = { x: lineAPosStart.x + r * (lineAPosEnd.x - lineAPosStart.x), y: lineAPosStart.y + r * (lineAPosEnd.y - lineAPosStart.y) };
            }
        }
        return p;
    }
    /** 计算两条由两点组成直线平移后相交点 distance2为空时,默认为distance1  */
    getIntersectPosByMove(lineAPosStart, lineAPosEnd, lineBPosStart, lineBPosEnd, lineADistance, lineBDistance = lineADistance) {
        /**  if (distance2 == undefined)
             distance2 = distance1 */
        if (this.isSamePos(lineAPosStart, lineAPosEnd))
            return null;
        if (this.isSamePos(lineBPosStart, lineBPosEnd))
            return null;
        let line1, line2;
        line1 = this.getPosTrans(lineAPosStart, lineAPosEnd, lineADistance);
        line2 = this.getPosTrans(lineBPosStart, lineBPosEnd, lineBDistance);
        return this.getIntersect(line1[0], line1[1], line2[0], line2[1], true);
    }
    /** 计算两点垂直平移后的值 返回{ pos1:posType, pos2:posType }*/
    getPosTrans(posStart, posEnd, distance) {
        if (posStart.x == posEnd.x && posStart.y == posEnd.y)
            return null;
        let distanceX = distance;
        let distanceY = distance;
        /** 保证平移朝向线段方向的左边 */
        if (posEnd.y < posStart.y && posEnd.x < posStart.x) {
            distanceX = -distance;
            distanceY = distance;
        }
        else if (posEnd.y <= posStart.y && posEnd.x >= posStart.x) {
            distanceX = -distance;
            distanceY = -distance;
        }
        else if (posEnd.y > posStart.y && posEnd.x > posStart.x) {
            distanceY = -distance;
            distanceX = distance;
        }
        let radian = this.getRadian(posStart, posEnd);
        /** 绝对值保证距离值不受正负改变 */
        let a1 = posStart.x + (distanceX * Math.abs(Math.sin(radian)));
        let b1 = posStart.y + (distanceY * Math.abs(Math.cos(radian)));
        let a2 = posEnd.x + (distanceX * Math.abs(Math.sin(radian)));
        let b2 = posEnd.y + (distanceY * Math.abs(Math.cos(radian)));
        // let lineArray:Pos[] = { pos1: { x: a1, y: b1 }, pos2: { x: a2, y: b2 } }
        let lineArray = [{ x: a1, y: b1 }, { x: a2, y: b2 }];
        return lineArray;
    }
    /** 获取相对坐标 */
    getRelativePos(pos, rect) {
        return { x: ((pos.x - rect.width / 2) / rect.scale) + rect.width / 2 - rect.left / rect.scale, y: ((pos.y - rect.height / 2) / rect.scale) + rect.height / 2 - rect.top / rect.scale };
    }
    /** 求点与直线垂直相交点 */
    getRightAngleIntersect(pos, linePosStart, linePosEnd, isStraight = true) {
        if (this.isSamePos(linePosStart, linePosEnd))
            return linePosStart;
        /** 获取线段的弧度 */
        let radian = this.getRadian(linePosStart, linePosEnd);
        /** 垂直直线 */
        let newPos = this.getRayPos(pos, radian + (Math.PI / 2), 10);
        let newLine = this.getlongLine([newPos, pos]);
        /** 相交得点 */
        let intersectPos = this.getIntersect(newLine[0], newLine[1], linePosStart, linePosEnd, isStraight);
        return intersectPos;
    }
    /** 求点与直线垂直距离  */
    getRightAngleDistance(pos, linePosStart, linePosEnd) {
        let newPos = this.getRightAngleIntersect(pos, linePosStart, linePosEnd);
        let distance = this.getDistance(pos, newPos);
        return distance;
    }
    /** 获取矩形坐标点 从左上往右开始循环*/
    getRectPosByCenter(centerPos, size, radian = 0) {
        /** x1=x cosB-y sinB ; y1=x sinB+ y cosB */
        let posLU = this.getVertexPosByCenter(centerPos, size, 'LU', radian);
        let posLD = this.getVertexPosByCenter(centerPos, size, 'LD', radian);
        let posRU = this.getVertexPosByCenter(centerPos, size, 'RU', radian);
        let posRD = this.getVertexPosByCenter(centerPos, size, 'RD', radian);
        let posArr = [posLU, posRU, posRD, posLD];
        return posArr;
    }
    /** 两点获取矩形 顺序的话由左上向右递归*/
    getRectPosByTwoPos(firstPos, lastPos, sort = false) {
        let posArr = [];
        if (!sort) {
            posArr = [{ x: firstPos.x, y: firstPos.y }, { x: lastPos.x, y: lastPos.y }];
        }
        else {
            let maxX = firstPos.x > lastPos.x ? firstPos.x : lastPos.x;
            let minX = firstPos.x > lastPos.x ? lastPos.x : firstPos.x;
            let maxY = firstPos.y > lastPos.y ? firstPos.y : lastPos.y;
            let minY = firstPos.y > lastPos.y ? lastPos.y : firstPos.y;
            posArr = [{ x: minX, y: minY }, { x: maxX, y: maxY }];
        }
        let posA = { x: posArr[1].x, y: posArr[0].y };
        let posB = { x: posArr[0].x, y: posArr[1].y };
        let newPosArr = [posArr[0], posA, posArr[1], posB];
        return newPosArr;
    }
    /** 获取矩形顶点坐标
     * 类型选项:LU,LD,RU,RD
     * */
    getVertexPosByCenter(centerPos, size, type, radian = 0) {
        switch (type) {
            case 'LU':
                let posLU = { x: centerPos.x - (size.width / 2), y: centerPos.y - (size.height / 2) };
                let newPosLU = this.getRotatePos(centerPos, posLU, radian);
                return newPosLU;
            case 'LD':
                let posLD = { x: centerPos.x - (size.width / 2), y: centerPos.y + (size.height / 2) };
                let newPosLD = this.getRotatePos(centerPos, posLD, radian);
                return newPosLD;
            case 'RU':
                let posRU = { x: centerPos.x + (size.width / 2), y: centerPos.y - (size.height / 2) };
                let newPosRU = this.getRotatePos(centerPos, posRU, radian);
                return newPosRU;
            case 'RD':
                let posRD = { x: centerPos.x + (size.width / 2), y: centerPos.y + (size.height / 2) };
                let newPosRD = this.getRotatePos(centerPos, posRD, radian);
                return newPosRD;
            default:
                console.log('选择方向错误');
                return null;
        }
    }
    /* 获取线段 */
    getLines(posArr) {
        if (!posArr || posArr.length < 2)
            return [];
        let lines = [[posArr[posArr.length - 1], posArr[0]]];
        for (let i = 0; i < posArr.length - 1; i++) {
            lines.push([posArr[i], posArr[i + 1]]);
        }
        return lines;
    }
    /** 计算点坐标是否在坐标集合围成空间内 mistake面积误差 */
    isInPosArrByPos(pos, posArr, mistake = 0.1) {
        let area = this.getArea(...posArr);
        let newArea = 0;
        for (let i = 0; i < posArr.length - 1; i++) {
            newArea += Math.abs(this.getTriangleArea(pos, posArr[i], posArr[i + 1]));
        }
        newArea += Math.abs(this.getTriangleArea(pos, posArr[posArr.length - 1], posArr[0]));
        let a = newArea - area;
        if ((a >= 0 && a < mistake) || (a <= 0 && a > -mistake))
            return true;
        else
            return false;
    }
    getTriangleAreaByDistance(a, b, c) {
        let p = (a + b + c) / 2;
        let area = Math.sqrt(p * (p - a) * (p - b) * (p - c));
        return area;
    }
    /** 获取多边形的中心点(矩形获取法) */
    getCenterPosByPolygon(...posArr) {
        /** 矩形获取法 */
        let rectFunc = () => {
            let maxPos = { x: posArr[0].x, y: posArr[0].y };
            let minPos = { x: posArr[0].x, y: posArr[0].y };
            for (let i = 1; i < posArr.length; i++) {
                if (maxPos.x < posArr[i].x)
                    maxPos.x = posArr[i].x;
                if (maxPos.y < posArr[i].y)
                    maxPos.y = posArr[i].y;
                if (minPos.x > posArr[i].x)
                    minPos.x = posArr[i].x;
                if (minPos.y > posArr[i].y)
                    minPos.y = posArr[i].y;
            }
            let centerPos = this.getCenterPos(maxPos, minPos);
            return centerPos;
        };
        let centerPos = rectFunc();
        return centerPos;
    }
    /** 获取三角形面积 */
    getTriangleArea(posA, posB, posC) {
        let area = ((posA.x * (posB.y - posC.y)) + (posB.x * (posC.y - posA.y)) + (posC.x * (posA.y - posB.y))) / 2;
        return area;
    }
    /** 获取三角形内心 */
    getTriangleCenterPos(posA, posB, posC) {
        let x = (posA.x + posB.x + posC.x) / 3;
        let y = (posA.y + posB.y + posC.y) / 3;
        return { x: x, y: y };
    }
    /** 获取面积 */
    getArea(...pos) {
        let area = 0;
        /** 至少要构成三角形 */
        if (pos.length < 3) {
            return 0;
        }
        else {
            for (let i = 1; i < pos.length - 1; i++) {
                let newArea = this.getTriangleArea(pos[0], pos[i], pos[i + 1]);
                area += newArea;
            }
            return area;
        }
    }
    /** 删除同点的线 */
    removeSamePosLine(lineArr) {
        for (let i = lineArr.length - 1; i >= 0; i--) {
            if (lineArr[i][0].x == lineArr[i][1].x && lineArr[i][0].y == lineArr[i][1].y) {
                lineArr.splice(i, 1);
            }
        }
    }
    /** 弧度是否平行 */
    isParallelRadian(radianA, radianB, errorValue = 0.0001) {
        let value = radianB - radianA;
        value = value % Math.PI;
        value = Math.abs(value);
        if (value <= errorValue || value >= Math.PI - errorValue) {
            return true;
        }
        return false;
    }
    /** 获取点和半径形成的线段 */
    getLineByCenterPos(centerPos, radius, radian) {
        let newPosA = this.getRayPos(centerPos, radian, radius);
        let newPosB = this.getRayPos(centerPos, radian + Math.PI, radius);
        return [newPosA, newPosB];
    }
    /** 坐标射线顺序排列 返回排列顺序 */
    getPosRaySort(posStart, ...posArr) {
        let distanceArr = [];
        let arrNum = [];
        let pos = null;
        let distance = null;
        /** 收集长度 */
        for (let i = 0; i < posArr.length; i++) {
            distance = this.getPowDistance(posStart, posArr[i]);
            distanceArr.push({ distance: distance, id: i });
        }
        /** 比较长度 */
        let distanceMin = null;
        let distanceMinNum = null;
        let loop = distanceArr.length;
        for (let i = 0; i < loop; i++) {
            distanceMin = distanceArr[0].distance;
            distanceMinNum = distanceArr[0].id;
            for (let j = 0; j < distanceArr.length; j++) {
                if (distanceArr[j].distance < distanceMin) {
                    distanceMin = distanceArr[j].distance;
                    distanceMinNum = distanceArr[j].id;
                }
            }
            arrNum.push(distanceMinNum);
            distanceArr.splice(distanceMinNum, 1);
        }
        //console.log(arrNum)
        return arrNum;
    }
    /** 获取矩阵简单版 */
    getTransformStringByRM(obj) {
        obj.movePos = obj.movePos ? obj.movePos : { x: 0, y: 0 };
        let sinA = 0;
        let cosA = 1;
        if (obj.radian != undefined) {
            sinA = Math.sin(obj.radian);
            cosA = Math.cos(obj.radian);
        }
        let string = this.getTransfromString(cosA, sinA, -sinA, cosA, obj.movePos.x, obj.movePos.y);
        return string;
    }
    /** 获取矩阵字符串 */
    getTransfromString(cosA, sinA, unsinB, cosB, x, y) {
        let string = "matrix(" + cosA + "," + sinA + "," + unsinB + "," + cosB + "," + x + "," + y + ")";
        return string;
    }
    /** 获取点到线段最近的点 */
    getPointToLinePos(pos, lineStart, lineEnd) {
        if (this.isSamePos(lineStart, lineEnd))
            return lineStart;
        let cross = ((lineEnd.x - lineStart.x) * (pos.x - lineStart.x)) + ((lineEnd.y - lineStart.y) * (pos.y - lineStart.y));
        let d = ((lineEnd.x - lineStart.x) * (lineEnd.x - lineStart.x)) + ((lineEnd.y - lineStart.y) * (lineEnd.y - lineStart.y));
        if (cross < 0) {
            return lineStart;
        }
        else if (cross > d) {
            return lineEnd;
        }
        else {
            let newPos = this.getRightAngleIntersect(pos, lineStart, lineEnd);
            return newPos;
        }
    }
    /** 坐标排序 */
    getPosArrSort(posStart, ...posArr) {
        let newArr = [posArr[0]];
        let distanceArr = [this.getDistance(posStart, posArr[0])];
        let distance = null;
        let same = 0;
        for (let i = 1; i < posArr.length; i++) {
            distance = this.getDistance(posStart, posArr[i]);
            for (let j = 0; j < distanceArr.length; j++) {
                if (distance > distanceArr[j]) {
                    same = j;
                }
            }
            newArr.splice(same, 0, posArr[i]);
            distanceArr.splice(same, 0, distance);
            same = 0;
        }
        return newArr;
    }
    /** 向量运算 */
    vector2D(vector) {
        let vec = {
            x: vector.x,
            y: vector.y,
            /** 相加 */
            add: (newVector) => {
                vec.x += newVector.x;
                vec.y += newVector.y;
                return vec;
            },
            /** 相减 */
            sub: (newVector) => {
                vec.x -= newVector.x;
                vec.y -= newVector.y;
                return vec;
            },
            /** 相反 */
            oppsite: (newVector) => {
                vec.x = -vec.x;
                vec.y = -vec.y;
                return vec;
            },
            /** 点乘 */
            Multiply: (newVector) => {
                return (vec.x * newVector.x) + (vec.y * newVector.y);
            },
            //旋转
            rotate: (radian) => {
                var vx = vec.x, vy = vec.y, cosVal = Math.cos(radian), sinVal = Math.sin(radian);
                vec.x = vx * cosVal - vy * sinVal;
                vec.y = vx * sinVal + vy * cosVal;
                return vec;
            },
            // 缩放
            scale: (scale) => {
                vec.x *= scale;
                vec.y *= scale;
                return vec;
            },
            /** 长度 */
            length: () => {
                return Math.sqrt(Math.pow(vec.x, 2) + Math.pow(vec.y, 2));
            },
            /** 弧度 */
            radian: () => {
                if (vec.x == 0 && vec.y == 0)
                    return null;
                return Math.atan2(vec.y, vec.x);
            },
            /** 获取弧度差 vec-newVector */
            differRadian: (newVector) => {
                let radian = vec.radian();
                let newRadian = this.vector2D(newVector).radian();
                return radian - newRadian;
            },
            /** vec在newVector的投影 */
            projection: (newVector) => {
                let differRadian = vec.differRadian(newVector);
                vec.x = vec.x * Math.cos(differRadian);
                vec.y = vec.y * Math.cos(differRadian);
                return vec;
            }
            /** 单位向量 */
        };
        return vec;
    }
    /** 判断点是否在线段内
     * @param errorValue 误差距离
     */
    isInLine(lineStart, lineEnd, pos, errorValue = 0.001) {
        let newPos = this.getPointToLinePos(pos, lineStart, lineEnd);
        let newDistance = this.getDistance(newPos, pos);
        if (newDistance < errorValue)
            return true;
        else
            return false;
    }
    /**
     * 弧度是否相同(先调整弧度为正常值再比较)
     * @param radianA
     * @param radianB
     * @param errorValue 误差值
     */
    isSameRadian(radianA, radianB, errorValue = 0.0001) {
        let a = this.getAbsRadian(radianA, true);
        let b = this.getAbsRadian(radianB, true);
        if (a > b - errorValue && a < b + errorValue) {
            return true;
        }
        return false;
    }
    /** 判断点在线段内外 点必须在直线上*/
    isLineOut(lineStart, lineEnd, pos) {
        let out = false;
        /** 线的向量 */
        let vector = {
            x: lineEnd.x - lineStart.x,
            y: lineEnd.y - lineStart.y,
        };
        /** 点到线头的向量 */
        let newVector = {
            x: pos.x - lineStart.x,
            y: pos.y - lineStart.y,
        };
        /** 用向量点乘判断内外 */
        let a = this.vector2D(vector).Multiply(newVector);
        if (a <= 0) {
            out = true;
        }
        else {
            let b = this.vector2D(newVector).sub(vector).Multiply(vector);
            if (b >= 0) {
                out = true;
            }
        }
        return out;
    }
    /**
     * 获取开始点与线弧度最小的线(只与沿开头到结尾的线比)
     * @param posStart
     * @param posEnd
     * @param lineArr
     * @returns 返回线的标记
     */
    getNearLine(posStart, posEnd, lineArr) {
        let mainRadian = this.getRadian(posStart, posEnd);
        mainRadian = this.getAbsRadian(mainRadian, true);
        for (let i = 0; i < lineArr.length; i++) {
            let lineRadian = this.getRadian(lineArr[i][0], lineArr[i][1]);
        }
    }
    /**
     * 获得弧形与线段相交点
     * @param lineStart 直线的开头
     * @param lineEnd  直线的结尾
     * @param radius  弧线的弧度
     * @param circlePos 弧线的半径
     * @returns 返回值[正方向,负方向]
     */
    getArcLineIntersect(lineStart, lineEnd, radius, circlePos) {
        let radian = this.getRadian(lineStart, lineEnd);
        let rayPos = this.getRayPos(circlePos, radian + (Math.PI / 2), 10);
        let intersectPos = this.getIntersect(lineStart, lineEnd, rayPos, circlePos);
        let circleIntersectPowDistance = this.getPowDistance(circlePos, intersectPos);
        let circleRPowDistnace = Math.pow(radius, 2);
        let DifferencePowDistance = circleRPowDistnace - circleIntersectPowDistance;
        // if (DifferencePowDistance < 0) {
        //     return null
        // }
        let distance = Math.sqrt(DifferencePowDistance);
        let posA = this.getRayPos(intersectPos, radian, distance);
        let posB = this.getRayPos(intersectPos, radian, -distance);
        return [posA, posB];
    }
    /**
     * 圆圆相交
     * @param mainRadius 主要圆半径
     * @param mainCirclePos 主要圆点坐标
     * @param otherRadius 辅助相切圆半径
     * @param otherCirclePos 辅助相切圆点坐标
     * @returns [正方向,反方向]
     */
    getArcArcIntersect(mainRadius, mainCirclePos, otherRadius, otherCirclePos) {
        let radian = this.getRadian(mainCirclePos, otherCirclePos);
        let distance = this.getDistance(mainCirclePos, otherCirclePos);
        let newRadian = this.getTriangleRadianByDistance(mainRadius, distance, otherRadius);
        let newPosA = this.getRayPos(mainCirclePos, radian + newRadian, mainRadius);
        let newPosB = this.getRayPos(mainCirclePos, radian - newRadian, mainRadius);
        return [newPosA, newPosB];
    }
    /** 获取扇形面积 */
    getSectorArea(lineDistance, r) {
        let arcDistance = 2 * Math.asin(lineDistance / (2 * r)) * r;
        let area = arcDistance * r / 2;
        return area;
    }
    /** 获取弧形面积 */
    getArcArea(lineDistance, r, isBig = false) {
        let area = this.getSectorArea(lineDistance, r);
        let triangleArea = this.getTriangleAreaByDistance(lineDistance, r, r);
        area -= triangleArea;
        if (isBig) {
            area = Math.PI * r * r - area;
        }
        return area;
    }
    /** 获取弧度极限的弧度(limitRadian一定为正)  */
    getLimitRadian(mainRadian, limitRadian) {
        let newRadian = this.getAbsRadian(mainRadian);
        let otherLimitRadian = limitRadian - Math.PI;
        if ((newRadian >= limitRadian && newRadian < Math.PI) ||
            newRadian >= -Math.PI && newRadian <= otherLimitRadian) {
            newRadian += Math.PI;
        }
        return newRadian;
    }
    /* 获取两点的成弧度的距离 */
    getTwoPosRadianDistance(presentPos, prevPos, radian, isAbs = true) {
        let line = [{ x: 0, y: 0 }];
        line = [line[0], this.getRayPos(line[0], radian, 10)];
        let newPresentPos = this.getRightAngleIntersect(presentPos, line[0], line[1]);
        let newPrevPos = this.getRightAngleIntersect(prevPos, line[0], line[1]);
        let distance = this.getDistance(newPresentPos, newPrevPos);
        if (isAbs)
            return distance;
        let a = line[1].x;
        let b = newPresentPos.x - newPrevPos.x;
        if (Math.abs(a) < 0.01) {
            a = line[1].y;
            b = newPresentPos.y - newPrevPos.y;
        }
        if ((a > 0 && b > 0) || (a < 0 && b < 0)) {
            return distance;
        }
        return -distance;
    }
    /**
     * 获取线延长线(两头延申)
     * @param line
     * @param distance ,默认999999999
     */
    getlongLine(line, distance = 99999999999) {
        let radian = this.getRadian(line[0], line[1]);
        let newPosA = this.getRayPos(line[1], radian, distance);
        let newPosB = this.getRayPos(line[0], radian, -distance);
        return [newPosB, newPosA];
    }
    /**
     * 获取同向的线段
     * @param mainLine
     * @param transLine
     */
    getSameTrendLine(mainLine, transLine) {
        let mainRadian = this.getRadian(mainLine[0], mainLine[1]);
        let transRadian = this.getRadian(transLine[0], transLine[1]);
        let differRadian = mainRadian - transRadian;
        differRadian = this.getAbsRadian(differRadian);
        if (differRadian > Math.PI / 2 || differRadian < -Math.PI / 2) {
            return [transLine[1], transLine[0]];
        }
        return [transLine[0], transLine[1]];
    }
    /** 获取最近坐标,包括首尾两边,尽量在同一条线上 */
    getNearPosArr(mainPos, vectorPos, posArr) {
        /** 头最小距离坐标 */
        let startMinPos = null;
        let startInt = null;
        let startMinDistance = null;
        /** 尾最小距离坐标 */
        let endMinPos = null;
        let endInt = null;
        let endMinDistance = null;
        /** 初始向量,作为向量正负衡量标准 */
        let mainVector = {
            x: vectorPos.x - mainPos.x,
            y: vectorPos.y - mainPos.y
        };
        let Vector = null;
        let distance = null;
        for (let i = 0; i < posArr.length; i++) {
            Vector = {
                x: posArr[i].x - mainPos.x,
                y: posArr[i].y - mainPos.y
            };
            let a = this.vector2D(mainVector).Multiply(Vector);
            distance = this.getPowDistance(posArr[i], mainPos);
            /** 负数为反方向 */
            if (a < 0) {
                if (startMinDistance == null || distance < startMinDistance) {
                    startMinPos = posArr[i];
                    startMinDistance = distance;
                    startInt = i;
                }
            }
            /** 正数为正方向 */
            else {
                if (endMinDistance == null || distance < endMinDistance) {
                    endMinPos = posArr[i];
                    endMinDistance = distance;
                    endInt = i;
                }
            }
        }
        return {
            StartPos: startMinPos,
            endPos: endMinPos,
            startInt: startInt,
            endInt: endInt
        };
    }
}


/***/ }),

/***/ "./src/app/svg/common/Util/SvgUtil.ts":
/*!********************************************!*\
  !*** ./src/app/svg/common/Util/SvgUtil.ts ***!
  \********************************************/
/*! exports provided: SvgUtil */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SvgUtil", function() { return SvgUtil; });
class SvgUtil {
    /** 获取圆弧path */
    getArcPathString(x, y, r, a0, a1, ccw) {
        x = +x, y = +y, r = +r;
        let dx = r * Math.cos(a0), dy = r * Math.sin(a0), x0 = x + dx, y0 = y + dy, cw = 1 ^ ccw, da = ccw ? a0 - a1 : a1 - a0, pathString = "", tau = 2 * Math.PI, tauEpsilon = tau - 1e-6;
        // Is the radius negative? Error.
        if (r < 0)
            throw new Error("negative radius: " + r);
        pathString += "M" + x0 + "," + y0;
        // Does the angle go the wrong way? Flip the direction.
        if (da < 0)
            da = da % tau + tau;
        // Is this a complete circle? Draw two arcs to complete the circle.
        if (da > tauEpsilon) {
            pathString += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (x0) + "," + (y0);
        }
        // Is this arc non-empty? Draw an arc!
        else if (da > 1e-6) {
            pathString += "A" + r + "," + r + ",0," + (+(da >= Math.PI)) + "," + cw + "," + (x + r * Math.cos(a1)) + "," + (y + r * Math.sin(a1));
        }
        return pathString;
    }
    /**  获取path中指定的坐标*/
    getPosByPath(pathString, num) {
        if (pathString == null || pathString == '')
            return null;
        let pathArray = pathString.split(',');
        let mainStr = pathArray[num];
        if (mainStr[0] == 'Z')
            return null;
        mainStr = mainStr.substr(1, mainStr.length - 1);
        let arr = mainStr.split(' ');
        let pos = { x: parseFloat(arr[0]), y: parseFloat(arr[1]) };
        return pos;
    }
    /**  组成path z为否为密封*/
    getPath(z, ...posArr) {
        if (posArr.length == 0 || posArr[0] == null) {
            return '';
        }
        let path = 'M' + posArr[0].x + ' ' + posArr[0].y;
        for (let i = 1; i < posArr.length; i++) {
            path += ',' + 'L' + posArr[i].x + ' ' + posArr[i].y;
        }
        if (z)
            path += ',' + 'Z';
        return path;
    }
    /** 获取多段path */
    getPaths(...obj) {
        let path = '';
        for (let i = 0; i < obj.length; i++) {
            path += this.getPath(obj[i].z, ...obj[i].posArr);
        }
        return path;
    }
    /** 获得追加的path */
    getAddPath(pos, isStart = false) {
        let string = `${pos.x} ${pos.y}`;
        if (isStart) {
            let path = `M${string}`;
            return path;
        }
        else {
            let path = `,L${string}`;
            return path;
        }
    }
    /**
     * 获取圆弧
     * @param radius
     * @param lineEnd
     * @param isBigArc 选择大小弧(默认false,小弧)
     * @param isReverse 选择顺逆时针(默认false,逆时针)
     * @returns 返回{path:字符串,radius:圆的半径}
     */
    getArcPath(radius, lineEnd, isBigArc = false, isReverse = false) {
        let bigArc = isBigArc ? 1 : 0;
        let reverse = isReverse ? 1 : 0;
        let AString = `A${radius} ${radius},0 ${bigArc} ${reverse},${lineEnd.x} ${lineEnd.y}`;
        return AString;
    }
}


/***/ }),

/***/ "./src/app/svg/common/Util/consoleUtil.ts":
/*!************************************************!*\
  !*** ./src/app/svg/common/Util/consoleUtil.ts ***!
  \************************************************/
/*! exports provided: ConsoleUtil */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConsoleUtil", function() { return ConsoleUtil; });
class ConsoleUtil {
    constructor() {
        this._logOn = true;
    }
    get logOn() { return this._logOn; }
    set logOn(data) { this._logOn = data; }
    /** 打印数组 */
    logArr(arr, offLine) {
        if (this.logOn) {
            for (let i = 0; i < arr.length; i++) {
                console.log(arr[i]);
            }
            this.logOffLine(offLine);
        }
    }
    /** 阻隔线 */
    logOffLine(str = '=') {
        if (this.logOn) {
            this.logCopy(str, 20);
        }
    }
    /** 文字叠加 */
    logCopy(str, int) {
        if (this.logOn) {
            let text = '';
            for (let i = 0; i < int; i++) {
                text += str;
            }
            console.log(text);
        }
    }
    colorLog(text, color = 'red') {
        if (this.logOn) {
            console.log("%c" + text, "color:" + color);
        }
    }
    /** 红色 */
    redLog(text) {
        if (this.logOn) {
            this.colorLog(text, "red");
        }
    }
    /** 属性输出 */
    attrLog(attr, arr, offLine) {
        if (this.logOn) {
            for (let i = 0; i < arr.length; i++) {
                console.log(arr[i][attr]);
            }
            this.logOffLine(offLine);
        }
    }
}


/***/ }),

/***/ "./src/app/svg/common/Util/parseJ2D.ts":
/*!*********************************************!*\
  !*** ./src/app/svg/common/Util/parseJ2D.ts ***!
  \*********************************************/
/*! exports provided: ParseJ2D */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ParseJ2D", function() { return ParseJ2D; });
class ParseJ2D {
    constructor() {
    }
    getobjData(obj) {
        if (obj.params[0] != undefined) {
            // console.log(obj.params[obj.params[0].name])
            if (obj.params != undefined && obj.modelName != 'point' && obj.params[obj.params[0].name] == undefined) {
                let paramsArr = {};
                for (let j = 0; j < obj.params.length; j++) {
                    let repParams = {
                        name: obj.params[j].name,
                        cName: obj.params[j].cName,
                        formula: obj.params[j].formula,
                    };
                    paramsArr[obj.params[j].name] = repParams;
                }
                obj.params = paramsArr;
            }
            if (obj.childs != undefined && obj.childs.length != 0) {
                for (let i = 0; i < obj.childs.length; i++) {
                    this.getobjData(obj.childs[i]);
                }
            }
        }
        return obj;
    }
    getRealData(obj, param) {
        let paramsArr = [];
        // console.log(param)
        if (obj.length == undefined || obj.length == 0) {
            for (let j in obj) {
                let params = obj[j].formula;
                if (param.length == undefined || param.length == 0) {
                    for (let key in param) {
                        params = this.replace(params, param[key].name, param[key].formula);
                    }
                }
                else {
                    for (let k = 0; k < param.length; k++) {
                        params = this.replace(params, param[k].name, param[k].formula);
                    }
                }
                params = eval(params);
                let repParams = {
                    name: obj[j].name,
                    cName: obj[j].cName,
                    formula: params,
                };
                paramsArr[obj[j].name] = repParams;
            }
        }
        else {
            for (let j = 0; j < obj.length; j++) {
                let params = obj[j].formula;
                if (params.length == undefined || param.length == 0) {
                    for (let key in param) {
                        params = this.replace(params, param[key].name, param[key].formula);
                    }
                }
                else {
                    for (let k = 0; k < param.length; k++) {
                        params = this.replace(params, param[k].name, param[k].formula);
                    }
                }
                // console.log(params)
                params = eval(params);
                let repParams = {
                    name: obj[j].name,
                    cName: obj[j].cName,
                    formula: params,
                };
                paramsArr.push(repParams);
            }
        }
        return paramsArr;
    }
    getRealPoint(obj, params) {
        let pointArr = [];
        // this.pointArry = []
        for (let i = 0; i < obj.length; i++) {
            if (obj[i].modelName == 'point') {
                let pointX = obj[i].params[0].formula;
                let pointY = obj[i].params[1].formula;
                if (params.length == undefined || params.length == 0) {
                    for (let key in params) {
                        // console.log(params[key])
                        pointX = this.replace(pointX, params[key].name, params[key].formula);
                        pointY = this.replace(pointY, params[key].name, params[key].formula);
                    }
                }
                else {
                    for (let j = 0; j < params.length; j++) {
                        pointX = this.replace(pointX, params[j].name, params[j].formula);
                        pointY = this.replace(pointY, params[j].name, params[j].formula);
                    }
                }
                // console.log(pointX)
                pointX = eval(pointX);
                pointY = -eval(pointY);
                let point = {
                    x: pointX,
                    y: pointY,
                    type: "point"
                };
                // this.pointArry.push(point)
                pointArr.push(point);
            }
            else {
                let R = obj[i].params[2].formula;
                if (params.length == undefined || params.length == 0) {
                    for (let key in params) {
                        R = this.replace(R, params[key].name, params[key].formula);
                    }
                }
                else {
                    for (let j = 0; j < params.length; j++) {
                        R = this.replace(R, params[j].name, params[j].formula);
                    }
                }
                R = eval(R);
                let point = {
                    x: obj[i].params[0].formula,
                    y: obj[i].params[1].formula,
                    r: R,
                    cir: obj[i].params[3].formula,
                    io: obj[i].params[4].formula,
                    arc: obj[i],
                    type: "arc"
                };
                pointArr.push(point);
            }
        }
        // console.log(pointArr)
        return pointArr;
    }
    replace(strings, beReplace, replace) {
        if (typeof strings != "string") {
            strings = strings + "";
        }
        if (strings.match('-')) {
            strings = strings.replace(new RegExp('-', "gmi"), '-1*');
        }
        return strings.replace(new RegExp('{{' + beReplace + '}}', "gmi"), replace);
    }
    getAllPoints(obj, repParams, pointArr) {
        repParams = repParams == undefined ? obj.params : repParams;
        pointArr = pointArr == undefined ? [] : pointArr;
        if (obj.childs != undefined) {
            let stringParams = obj.params;
            if (obj.childs[0] != undefined && obj.childs[0].modelName == 'point') {
                // let numberParams = this.getRealData(stringParams,repParams);
                let realPoint = this.getRealPoint(obj.childs, repParams);
                return realPoint;
                // pointArr.push(realPoint)
            }
            else {
                let arry = [];
                let point;
                for (let i = 0; i < obj.childs.length; i++) {
                    pointArr = [];
                    let nextParams = this.getRealData(obj.childs[i].params, repParams);
                    // console.log(nextParams)
                    point = this.getAllPoints(obj.childs[i], nextParams, pointArr);
                    // console.log(point)
                    if (point != undefined) {
                        arry.push(point);
                    }
                    // console.log(arry)
                }
                // console.log(pointArr)
                pointArr.push(arry);
            }
            // console.log(pointArr)
            return pointArr;
        }
        // return pointArr
    }
    getslipData(obj, repParams, pointArr) {
        repParams = repParams == undefined ? obj.params : repParams;
        pointArr = pointArr == undefined ? [] : pointArr;
        if (obj.childs != undefined) {
            // let stringParams = obj.params;
            if (obj.childs[0] != undefined && obj.childs[0].modelName == 'point') {
                let realPoint = this.getRealPoint(obj.childs, repParams);
                return realPoint;
            }
            else {
                // let arry = []
                let point;
                for (let i = 0; i < obj.childs.length; i++) {
                    let nextParams = this.getRealData(obj.childs[i].params, repParams);
                    point = this.getAllPoints(obj.childs[i], nextParams, pointArr);
                    let newdata = {
                        params: nextParams,
                        point: point
                    };
                    pointArr.push(newdata);
                }
            }
            return pointArr;
        }
    }
}


/***/ }),

/***/ "./src/app/svg/common/act/absorb/DWAbsorb.ts":
/*!***************************************************!*\
  !*** ./src/app/svg/common/act/absorb/DWAbsorb.ts ***!
  \***************************************************/
/*! exports provided: DWAbsorb */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DWAbsorb", function() { return DWAbsorb; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../services/calculators.service */ "./src/app/services/calculators.service.ts");



class DWAbsorb {
    constructor(dataService, DUService, calService) {
        this.dataService = dataService;
        this.DUService = DUService;
        this.calService = calService;
    }
    /** 吸附 */
    getAbsorb(pos, distance) {
        distance = distance ? distance : this.dataService.cmd.floorplan.absorb.minDistance;
        let msg = this.getStraightWallsAbsorb(pos, distance);
        if (msg != undefined)
            return msg;
        msg = this.getArcWallsAbsorb(pos, distance);
        if (msg != undefined)
            return msg;
        return null;
    }
    /** 弧墙吸附 */
    getArcWallsAbsorb(pos, minDistance) {
        let walls = this.calService.transData.getArcWalls();
        let wallsMsg = this.calService.transData.getArcLines(walls);
        let absorbIndex = this.DUService.absorb.pointAndArcLines(pos, wallsMsg.lines, minDistance);
        if (absorbIndex != undefined) {
            let radian = this.DUService.pos.getRadian(wallsMsg.walls[absorbIndex].circlePos, pos);
            let rayPos = this.DUService.pos.getRayPos(wallsMsg.walls[absorbIndex].circlePos, radian, wallsMsg.walls[absorbIndex].arcRadius);
            return {
                pos: rayPos,
                wall: wallsMsg.walls[absorbIndex],
                radian: radian
            };
        }
        return undefined;
    }
    /** 直墙吸附 */
    getStraightWallsAbsorb(pos, minDistance) {
        let walls = this.calService.transData.getUnArcWalls();
        let wallsMsg = this.calService.transData.getWallCenterLines(walls);
        let msg = this.calService.absorb.posAndWalls(pos, minDistance, false, wallsMsg);
        if (msg != undefined)
            return {
                pos: msg.pos,
                wall: msg.wall,
                radian: 0
            };
        return undefined;
    }
}
DWAbsorb.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_1__["JdesignUtil2dService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__["CalculatorsService"] }
];


/***/ }),

/***/ "./src/app/svg/common/act/absorb/DrawWallAbsorb.ts":
/*!*********************************************************!*\
  !*** ./src/app/svg/common/act/absorb/DrawWallAbsorb.ts ***!
  \*********************************************************/
/*! exports provided: DrawWallAbsorb, AbsorbWallType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DrawWallAbsorb", function() { return DrawWallAbsorb; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AbsorbWallType", function() { return AbsorbWallType; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../services/calculators.service */ "./src/app/services/calculators.service.ts");



class DrawWallAbsorb {
    constructor(dataService, DUService, calService) {
        this.dataService = dataService;
        this.DUService = DUService;
        this.calService = calService;
    }
    /**
     * 设置吸附
     * @param line 需要吸附的线
     * @param removePoints 需要去点的点
     * @param isOrthogonal 是否正交,默认false
     */
    getAbsorbData(line, removePoints = [], isOrthogonal = false) {
        /** 普通吸附 */
        if (!isOrthogonal) {
            if (this.dataService.cache.common.isAbosrb)
                return this.normalAbosrb(line[0], line[1], removePoints);
            else {
                return {
                    absorbLineData: [],
                    absorbMsg: { obj: undefined, pos: line[1] }
                };
            }
        }
        /** 正交吸附 */
        return this.orthogonalAbsorb(line[0], line[1], removePoints);
    }
    /**
     * 正交吸附
     * @param lineStart
     * @param lineEnd
     * @param removePoints
     */
    orthogonalAbsorb(lineStart, lineEnd, removePoints = []) {
        let minDistance = this.dataService.cmd.floorplan.absorb.minDistance;
        let points = this.dataService.doPoints().arr(...removePoints);
        let walls = this.calService.transData.getUnArcWalls();
        let absorbMsg = { pos: { x: lineEnd.x, y: lineEnd.y }, obj: undefined };
        /** 如果刚开始画,先做点普通吸附 */
        if (!lineStart) {
            if (this.dataService.cache.common.isAbosrb) {
                let msg = this.orthogonalStartAbosrb(lineEnd, minDistance, points, walls);
                return msg;
            }
            return {
                absorbLineData: [],
                absorbMsg: absorbMsg
            };
        }
        let radian = this.DUService.pos.getRadian(lineStart, lineEnd);
        /** 没有弧度值直接返回 */
        if (radian == undefined)
            return {
                absorbLineData: [],
                absorbMsg: absorbMsg
            };
        radian = this.DUService.pos.getAbsRadian(radian);
        /** 是否垂直 */
        let isVectical = false;
        let distance = undefined;
        /** 右边和左边 */
        if (
        /** 右上边 */
        (radian >= 0 && radian <= Math.PI / 4) ||
            /** 右下边 */
            (radian >= -Math.PI / 4 && radian <= 0) ||
            /** 左上边 */
            (radian >= Math.PI / 4 * 3 && radian <= Math.PI) ||
            /** 左下边 */
            (radian >= -Math.PI && radian <= -Math.PI / 4 * 3)) {
            distance = lineEnd.x - lineStart.x;
            absorbMsg.pos = this.DUService.pos.getRayPos(lineStart, 0, distance);
        }
        /** 下边和上边 */
        else {
            isVectical = true;
            distance = lineEnd.y - lineStart.y;
            absorbMsg.pos = this.DUService.pos.getRayPos(lineStart, Math.PI / 2, distance);
        }
        if (this.dataService.cache.common.isAbosrb) {
            /** 点吸附 */
            let radian = this.DUService.pos.getRadian(lineStart, absorbMsg.pos);
            let pointAbsorb = this.orthogonalPointAbosrb(absorbMsg.pos, points, minDistance, radian);
            if (pointAbsorb) {
                return {
                    absorbLineData: [pointAbsorb.absorbLine],
                    absorbMsg: pointAbsorb.absorbMsg
                };
            }
            /** 点延长吸附 */
            let pointLineAbsorb = this.orthogonalPointLineAbosrb(absorbMsg.pos, points, isVectical, minDistance);
            /** 墙吸附 */
            let wallAbosrb = this.orthogonalWallAbosrb([lineStart, absorbMsg.pos], walls, minDistance);
            /** 优先判断点吸附 */
            if (
            /** 墙没有吸附 */
            wallAbosrb.distance == undefined ||
                /** 吸附到点 */
                pointLineAbsorb.absorbMsg.obj) {
                // console.log('point')
                // console.log(pointAbsorb.absorbMsg)
                return {
                    absorbLineData: pointLineAbsorb.absorbLine ? [pointLineAbsorb.absorbLine] : [],
                    absorbMsg: pointLineAbsorb.absorbMsg
                };
            }
            /** 再用墙吸附 */
            else {
                // console.log('wall')
                return {
                    absorbLineData: wallAbosrb.absorbLine ? [wallAbosrb.absorbLine] : [],
                    absorbMsg: wallAbosrb.absorbMsg
                };
            }
        }
        /** 为了可以取消吸附 */
        return {
            absorbLineData: [],
            absorbMsg: absorbMsg
        };
    }
    /**
     * 正交开始吸附
     * @param line
     * @param minDistance
     */
    orthogonalStartAbosrb(lastPos, minDistance, points, walls) {
        /** 点吸附 */
        let pointMsg = this.dataService.cache.wall.location == 0 ? this.getPointAbsorb(lastPos, minDistance, points) : this.getOutPointAbsorb(lastPos, minDistance, walls);
        if (pointMsg) {
            return {
                absorbLineData: [pointMsg.absorbLine],
                absorbMsg: { obj: pointMsg.point, pos: pointMsg.pos }
            };
        }
        /** 墙吸附 */
        let wallMsg = this.getWallAbsorb(lastPos, minDistance, walls);
        if (wallMsg) {
            return {
                absorbLineData: wallMsg.absorbLines,
                absorbMsg: { obj: wallMsg.wall, pos: wallMsg.pos }
            };
        }
        return {
            absorbLineData: [],
            absorbMsg: { obj: undefined, pos: lastPos }
        };
    }
    /**
     * 正交点吸附
     * @param mainPos
     * @param points
     * @param minDistance
     */
    orthogonalPointAbosrb(mainPos, points, minDistance, mainRadian) {
        let absorbLine = undefined;
        let absorbMsg = { pos: { x: mainPos.x, y: mainPos.y }, obj: undefined };
        let pointMsg = this.calService.transData.getPointPosArr(points);
        let msg = this.DUService.absorb.pointAndPoints(mainPos, pointMsg.posArr, minDistance);
        if (msg) {
            let radian = this.DUService.pos.getRadian(mainPos, msg.pos);
            let a = this.DUService.pos.isSameRadian(radian, mainRadian, 0.01);
            if (a) {
                absorbLine = {
                    pos: msg.pos,
                    radius: this.dataService.cache.floorplan.multiple * 8,
                    mode: 'point'
                };
                absorbMsg = { pos: msg.pos, obj: pointMsg.points[msg.index] };
                return {
                    absorbMsg: absorbMsg,
                    absorbLine: absorbLine,
                };
            }
        }
        return undefined;
    }
    /**
     * 正交点延长线吸附
     * @param mainPos
     * @param points
     * @param isVectical
     * @param minDistance
     */
    orthogonalPointLineAbosrb(mainPos, points, isVectical, minDistance) {
        let absorbLines = undefined;
        let absorbMsg = { pos: { x: mainPos.x, y: mainPos.y }, obj: undefined };
        let newDistance = undefined;
        /** 线是垂直的话,找水平的线 */
        if (isVectical) {
            // let pointMsg = this.calService.transData.getPointHorizontalLines(points)
            let walls = this.calService.transData.getUnArcWalls();
            let pointMsg = this.calService.transData.getOutPointHorizontalLines(walls);
            let msg = this.DUService.absorb.pointAndLines(absorbMsg.pos, pointMsg.lines, true, minDistance);
            if (msg) {
                absorbMsg.pos.y = pointMsg.lines[msg.index][0].y;
                let a = this.DUService.pos.isSamePos(pointMsg.lines[msg.index][0], absorbMsg.pos, 0.1);
                if (a)
                    absorbMsg.obj = pointMsg.points[msg.index];
                absorbLines = {
                    pos: pointMsg.lines[msg.index][0],
                    radian: 0,
                    mode: 'line'
                };
                newDistance = msg.distance;
            }
        }
        /** 线是水平的话,找垂直的线 */
        else {
            // let pointMsg = this.calService.transData.getPointVerticalLines(points)
            let walls = this.calService.transData.getUnArcWalls();
            let pointMsg = this.calService.transData.getOutPointtVerticalLines(walls);
            let msg = this.DUService.absorb.pointAndLines(absorbMsg.pos, pointMsg.lines, true, minDistance);
            if (msg) {
                absorbMsg.pos.x = pointMsg.lines[msg.index][0].x;
                let a = this.DUService.pos.isSamePos(pointMsg.lines[msg.index][0], absorbMsg.pos, 0.1);
                if (a)
                    absorbMsg.obj = pointMsg.points[msg.index];
                absorbLines = {
                    pos: pointMsg.lines[msg.index][0],
                    radian: Math.PI / 2,
                    mode: 'line'
                };
                newDistance = msg.distance;
            }
        }
        return {
            absorbMsg: absorbMsg,
            absorbLine: absorbLines,
            distance: newDistance
        };
    }
    /**
     * 正交线吸附
     * @param mainLine
     * @param minDistance
     * @param walls
     */
    orthogonalWallAbosrb(mainLine, walls, minDistance) {
        let absorbLine = undefined;
        let absorbMsg = { pos: { x: mainLine[1].x, y: mainLine[1].y }, obj: undefined };
        let newDistance = undefined;
        let wallLines = this.calService.transData.getWallCenterLines(walls);
        let msg = this.DUService.absorb.rayLineAndLine(mainLine, wallLines.lines, minDistance);
        if (msg) {
            newDistance = msg.distance;
            absorbLine = {
                pos: msg.pos,
                mode: 'line',
                radian: wallLines.walls[msg.index].getRadian()
            };
            let wall = wallLines.walls[msg.index];
            absorbMsg = { pos: msg.pos, obj: wall };
        }
        return {
            absorbMsg: absorbMsg,
            absorbLine: absorbLine,
            distance: newDistance
        };
    }
    /** 普通吸附 */
    normalAbosrb(lineStart, lineEnd, removePoints = []) {
        let absorbLineData = [];
        let absorbMsg = { pos: lineEnd, obj: null };
        let distance = this.dataService.cmd.floorplan.absorb.minDistance;
        let points = this.dataService.doPoints().arr(...removePoints);
        let walls = this.calService.transData.getUnArcWalls();
        let minDistance = undefined;
        let removeWalls = [];
        let absorbPos = { x: lineEnd.x, y: lineEnd.y };
        let absorbNum = 0;
        /** 点吸附 */
        let pointAbsorb = undefined;
        if (this.dataService.cache.wall.location == 0)
            pointAbsorb = this.getPointAbsorb(lineEnd, distance);
        else
            pointAbsorb = this.getOutPointAbsorb(lineEnd, distance);
        if (pointAbsorb) {
            absorbLineData = [pointAbsorb.absorbLine];
            absorbMsg = {
                pos: pointAbsorb.pos,
                obj: pointAbsorb.point
            };
            return {
                absorbLineData: absorbLineData,
                absorbMsg: absorbMsg
            };
        }
        /** 垂直水平吸附 */
        if (lineStart) {
            let verticalAbsorb = this.getVerticalAbsorb(lineStart, lineEnd, distance);
            if (verticalAbsorb) {
                absorbLineData.push(verticalAbsorb.absorbLine);
                absorbMsg = {
                    pos: verticalAbsorb.pos,
                    obj: null
                };
            }
        }
        /** 墙吸附 */
        let wallAbsorb = this.getWallAbsorb(absorbMsg.pos, distance, walls);
        if (wallAbsorb) {
            absorbLineData.push(...wallAbsorb.absorbLines);
            absorbMsg = {
                pos: wallAbsorb.pos,
                obj: wallAbsorb.wall
            };
            return {
                absorbLineData: absorbLineData,
                absorbMsg: absorbMsg
            };
        }
        /** 点垂直水平线吸附 */
        if (this.dataService.cache.wall.location == 0) {
            let verticalPointAbsorb = this.getVerticalPointAbsorb(absorbMsg.pos, distance, points);
            if (verticalPointAbsorb) {
                absorbLineData.push(...verticalPointAbsorb.absorbLines);
                absorbMsg = {
                    pos: verticalPointAbsorb.pos,
                    obj: null
                };
                return {
                    absorbLineData: absorbLineData,
                    absorbMsg: absorbMsg
                };
            }
        }
        /** 墙外线吸附 */
        if (this.dataService.cache.wall.location == 0) {
            let wallOutAbsorb = this.getOutWallAbsorb(absorbMsg.pos, distance, walls);
            if (wallOutAbsorb) {
                absorbLineData.push(...wallOutAbsorb.absorbLines);
                absorbMsg = {
                    pos: wallOutAbsorb.pos,
                    obj: null
                };
                return {
                    absorbLineData: absorbLineData,
                    absorbMsg: absorbMsg
                };
            }
        }
        /** 墙轮廓垂直吸附(用于内外墙) */
        else {
            let wallAbsorb = this.getWallAllLinesAbosrb(absorbMsg.pos, distance, walls);
            if (wallAbsorb) {
                absorbLineData.push(...wallAbsorb.absorbLines);
                absorbMsg = {
                    pos: wallAbsorb.pos,
                    obj: null
                };
            }
            return {
                absorbLineData: absorbLineData,
                absorbMsg: absorbMsg
            };
        }
        /** 没吸附===================================== */
        return {
            absorbLineData: absorbLineData,
            absorbMsg: absorbMsg
        };
    }
    /**
     * 基础吸附
     * @param pos
     * @param distance
     */
    getBaseAbsorb(pos, distance, points, walls) {
    }
    /**
     * 点吸附
     * @param pos
     * @param distance
     * @param points
     * @returns 没有吸附返回undefined
     */
    getPointAbsorb(pos, distance, points) {
        let pointMsg = this.calService.transData.getPointPosArr(points);
        let pointAbosrbMsg = this.DUService.absorb.pointAndPoints(pos, pointMsg.posArr, distance);
        /** 有吸附 */
        if (pointAbosrbMsg) {
            /** 吸附线信息 */
            let absorbLine = {
                pos: pointAbosrbMsg.pos,
                radius: this.dataService.cache.floorplan.multiple * 8,
                mode: 'point'
            };
            return {
                point: pointMsg.points[pointAbosrbMsg.index],
                pos: pointAbosrbMsg.pos,
                distance: pointAbosrbMsg.distance,
                absorbLine: absorbLine
            };
        }
        /** 没有吸附点 */
        return null;
    }
    /**
     * 点外线吸附
     * @param pos
     * @param distance
     * @param walls 为了准确获取外线点
     * @returns 没有吸附返回undefined
     */
    getOutPointAbsorb(pos, distance, walls) {
        walls = this.calService.transData.getUnArcWalls(walls);
        let outLineArr = this.calService.transData.getWallOutLines(walls);
        let wallsMsg = this.calService.transData.getWallOutLinePosArr(outLineArr);
        let pointAbsorbMsg = this.calService.absorb.posAndPointPosArr(pos, distance, wallsMsg);
        /** 有吸附 */
        if (pointAbsorbMsg) {
            /** 吸附线信息 */
            let absorbLine = {
                pos: pointAbsorbMsg.pos,
                radius: this.dataService.cache.floorplan.multiple,
                mode: 'point'
            };
            return {
                point: pointAbsorbMsg.point,
                pos: pointAbsorbMsg.pos,
                distance: pointAbsorbMsg.distance,
                absorbLine: absorbLine
            };
        }
        /** 没有吸附点 */
        return undefined;
    }
    /**
     * 垂直水平吸附
     * @param lineStart
     * @param lineEnd
     * @param distance
     * @returns 返回吸附坐标,没有吸附,返回null
     */
    getVerticalAbsorb(lineStart, lineEnd, distance) {
        /** 水平坐标 */
        let absorbMsg = this.calService.absorb.lineAndVerticalLine(lineStart, lineEnd, distance);
        if (absorbMsg != null) {
            let newPos = null;
            let absorbLine = null;
            switch (absorbMsg.mode) {
                /** 水平 */
                case 'h':
                    newPos = { x: lineEnd.x, y: absorbMsg.pos.y };
                    /** 吸附线信息 */
                    absorbLine = {
                        pos: absorbMsg.pos,
                        radian: 0,
                        mode: 'line'
                    };
                    return {
                        pos: newPos,
                        absorbLine: absorbLine,
                        distance: absorbMsg.distance
                    };
                /** 垂直 */
                case 'v':
                    newPos = { x: absorbMsg.pos.x, y: lineEnd.y };
                    /** 吸附线信息 */
                    absorbLine = {
                        pos: absorbMsg.pos,
                        radian: Math.PI / 2,
                        mode: 'line'
                    };
                    return {
                        pos: newPos,
                        absorbLine: absorbLine,
                        distance: absorbMsg.distance
                    };
            }
        }
        /** 没有返回null */
        return null;
    }
    /** 点垂直水平吸附
     * @returns 返回吸附坐标,没有吸附,返回null
     */
    getVerticalPointAbsorb(pos, distance, points) {
        /** 获取点信息 */
        let pointMsg = this.calService.transData.getPointCrossLines(points);
        let pointAbsorbMsg = this.calService.absorb.posAndVerticalPoints(pos, distance, pointMsg);
        if (pointAbsorbMsg) {
            /** 垂直 */
            if (pointAbsorbMsg.pos.x > pointAbsorbMsg.point.pos.x - 0.001 && pointAbsorbMsg.pos.x < pointAbsorbMsg.point.pos.x + 0.001) {
                /** 吸附线信息 */
                let absorbLines = [];
                let absorbLine = {
                    mode: "point",
                    pos: pointAbsorbMsg.point.pos,
                    radius: this.dataService.cache.floorplan.multiple * 2
                };
                absorbLines.push(absorbLine);
                absorbLine = {
                    mode: 'line',
                    pos: pointAbsorbMsg.point.pos,
                    radian: Math.PI / 2
                };
                absorbLines.push(absorbLine);
                let newPos = { x: pointAbsorbMsg.point.pos.x, y: pos.y };
                return {
                    absorbLines: absorbLines,
                    pos: newPos,
                    distance: pointAbsorbMsg.distance,
                    obj: pointAbsorbMsg.point
                };
            }
            /** 水平 */
            else {
                /** 吸附线信息 */
                let absorbLines = [];
                let absorbLine = {
                    mode: "point",
                    pos: pointAbsorbMsg.point.pos,
                    radius: this.dataService.cache.floorplan.multiple * 2
                };
                absorbLines.push(absorbLine);
                absorbLine = {
                    mode: 'line',
                    pos: pointAbsorbMsg.point.pos,
                    radian: 0
                };
                absorbLines.push(absorbLine);
                let newPos = { x: pos.x, y: pointAbsorbMsg.point.pos.y };
                return {
                    absorbLines: absorbLines,
                    pos: newPos,
                    distance: pointAbsorbMsg.distance,
                    obj: pointAbsorbMsg.point
                };
            }
        }
        /** 没有吸附返回null */
        return null;
    }
    /**
     * 墙吸附
     * @param pos
     * @param distance
     * @returns 没吸附返回undefined
     */
    getWallAbsorb(pos, distance, walls) {
        /** 线段吸附 */
        let wallsMsg = this.calService.transData.getWallCenterLines(walls);
        let wallAbosrbMsg = this.calService.absorb.posAndWalls(pos, distance, false, wallsMsg);
        /** 有吸附 */
        if (wallAbosrbMsg) {
            /** 吸附线信息 */
            let absorbLines = [];
            let absorbLine = {
                mode: 'point',
                radius: this.dataService.cache.floorplan.multiple * 4,
                pos: wallAbosrbMsg.pos
            };
            absorbLines.push(absorbLine);
            absorbLine = {
                mode: 'line',
                radian: wallAbosrbMsg.wall.getRadian(),
                pos: wallAbosrbMsg.pos
            };
            absorbLines.push(absorbLine);
            return {
                absorbLines: absorbLines,
                pos: wallAbosrbMsg.pos,
                wall: wallAbosrbMsg.wall,
                distance: wallAbosrbMsg.distance
            };
        }
        return undefined;
    }
    /**
     * 墙外直线吸附
     * @param pos
     * @param distance
     * @param walls
     */
    getOutWallAbsorb(pos, distance, walls) {
        /** 直线吸附 */
        let wallsMsg = this.calService.transData.getWallCenterLines(walls);
        let wallAbsorbMsg = this.calService.absorb.posAndWalls(pos, distance, true, wallsMsg);
        /** 有吸附 */
        if (wallAbsorbMsg) {
            /** 吸附线信息 */
            let absorbLines = [];
            let absorbLine = {
                mode: 'line',
                radian: wallAbsorbMsg.wall.getRadian(),
                pos: wallAbsorbMsg.pos
            };
            absorbLines.push(absorbLine);
            return {
                absorbLines: absorbLines,
                pos: wallAbsorbMsg.pos,
                wall: wallAbsorbMsg.wall,
                distance: wallAbsorbMsg.distance,
            };
        }
        /** 没有吸附返回null */
        return null;
    }
    /**
     * 墙所有直线吸附
     * @param pos
     * @param distance
     * @param walls
     */
    getWallAllLinesAbosrb(pos, distance, walls) {
        let wallsMsg = this.calService.transData.getWallAllLines(walls);
        let wallAbsorbMsg = this.calService.absorb.posAndVerticalWallAllLines(pos, distance, wallsMsg);
        /** 有吸附 */
        if (wallAbsorbMsg) {
            let absorbLine = {
                mode: 'line',
                radian: this.DUService.pos.getRadian(wallAbsorbMsg.line[0], wallAbsorbMsg.line[1]),
                pos: wallAbsorbMsg.pos
            };
            return {
                absorbLines: [absorbLine],
                pos: wallAbsorbMsg.pos,
                wall: wallAbsorbMsg.wall,
                distance: wallAbsorbMsg.distance,
            };
        }
        /** 没吸附 */
        return undefined;
    }
}
DrawWallAbsorb.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_1__["JdesignUtil2dService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__["CalculatorsService"] }
];
class AbsorbWallType {
}


/***/ }),

/***/ "./src/app/svg/common/act/absorb/MoveWallAbsorb.ts":
/*!*********************************************************!*\
  !*** ./src/app/svg/common/act/absorb/MoveWallAbsorb.ts ***!
  \*********************************************************/
/*! exports provided: MoveWallAbsorb */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MoveWallAbsorb", function() { return MoveWallAbsorb; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../services/calculators.service */ "./src/app/services/calculators.service.ts");



class MoveWallAbsorb {
    constructor(dataService, DUService, calService) {
        this.dataService = dataService;
        this.DUService = DUService;
        this.calService = calService;
        this._minRadian = Math.PI / 180 * 1;
        this._minDistance = 100;
    }
    getAbsorb(line, wall, distance) {
        if (this.dataService.cache.common.isAbosrb) {
            distance = distance == undefined ? this._minDistance : distance;
            let data = this.getInitData(line, wall);
            let msg = this.getHorizontalAbsorbData(data.wall, data.otherWalls, distance);
            if (msg != undefined) {
                let newLine = this.setAbsorbData(msg);
                return {
                    absorbData: {
                        mode: 'line',
                        radian: msg.otherRadian,
                        pos: msg.otherLine[0]
                    },
                    line: newLine
                };
            }
            return {
                absorbData: undefined,
                line: line
            };
        }
        return {
            absorbData: undefined,
            line: line
        };
    }
    getMainWallMsg(line, wall) {
        let newData = { lines: [], walls: [], radians: [], locations: [] };
        let newLineA = this.DUService.pos.getPosTrans(line[0], line[1], wall.thickness / 2);
        let newLineB = this.DUService.pos.getPosTrans(line[0], line[1], -wall.thickness / 2);
        newData.lines.push(line);
        newData.lines.push(newLineA);
        newData.lines.push(newLineB);
        newData.radians.push(wall.getRadian());
        newData.radians.push(wall.getRadian());
        newData.radians.push(wall.getRadian());
        newData.walls.push(wall);
        newData.walls.push(wall);
        newData.walls.push(wall);
        newData.locations.push(0);
        newData.locations.push(-1);
        newData.locations.push(1);
        return newData;
    }
    /** 获取初始数据 */
    getInitData(line, wall) {
        let wallMsg = this.getMainWallMsg(line, wall);
        let otherWalls = this.dataService.doWalls().arr(wall);
        otherWalls = this.calService.transData.getUnArcWalls(otherWalls);
        this.calService.wall.removeSamePointWalls(otherWalls, 0.01);
        let ohterWallsMsg = this.calService.transData.getWallThreeLines(otherWalls);
        let pointsMsg = this.calService.transData.getPointCrossLines();
        return {
            wall: wallMsg,
            otherWalls: ohterWallsMsg
        };
    }
    /** 设置吸附 */
    setAbsorbData(absorbMsg) {
        let newPos = this.DUService.pos.getRightAngleIntersect(absorbMsg.mainLine[0], absorbMsg.otherLine[0], absorbMsg.otherLine[1]);
        let radian = this.DUService.pos.getRadian(absorbMsg.mainLine[0], absorbMsg.mainLine[1]);
        let distance = this.DUService.pos.getDistance(absorbMsg.mainLine[0], absorbMsg.mainLine[1]);
        let rayPos = this.DUService.pos.getRayPos(newPos, radian, distance);
        let line = [newPos, rayPos];
        if (absorbMsg.mainLocation == 1) {
            line = this.DUService.pos.getPosTrans(line[0], line[1], absorbMsg.mainWall.thickness / 2);
        }
        else if (absorbMsg.mainLocation == -1) {
            line = this.DUService.pos.getPosTrans(line[0], line[1], -absorbMsg.mainWall.thickness / 2);
        }
        return line;
    }
    /** 水平吸附 */
    getHorizontalAbsorbData(wallMsg, otherWallsMsg, minDistance) {
        let minLineMsg = undefined;
        for (let i = 0; i < wallMsg.lines.length; i++) {
            for (let j = 0; j < otherWallsMsg.lines.length; j++) {
                let lineA = { posArr: wallMsg.lines[i], radian: wallMsg.radians[i] };
                let lineB = { posArr: otherWallsMsg.lines[j], radian: otherWallsMsg.radians[j] };
                let msg = this.DUService.pos.isHorizontalLine(lineA, lineB, this._minRadian, minDistance);
                /** 平行 */
                if (msg.isH != 0 && msg.distance != undefined) {
                    minDistance = msg.distance;
                    minLineMsg = {
                        mainLine: wallMsg.lines[i],
                        mainLocation: wallMsg.locations[i],
                        mainRadian: wallMsg.radians[i],
                        mainWall: wallMsg.walls[i],
                        otherLine: otherWallsMsg.lines[j],
                        otherRadian: otherWallsMsg.radians[j],
                        otherWall: otherWallsMsg.walls[j],
                        otherLocation: otherWallsMsg.locations[j],
                        mainWallID: wallMsg.walls[i].id,
                        otherWallID: otherWallsMsg.walls[j].id
                    };
                }
            }
        }
        return minLineMsg;
    }
}
MoveWallAbsorb.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_1__["JdesignUtil2dService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__["CalculatorsService"] }
];
class AbsorbType {
}


/***/ }),

/***/ "./src/app/svg/common/act/absorb/svg.absorb.event.ts":
/*!***********************************************************!*\
  !*** ./src/app/svg/common/act/absorb/svg.absorb.event.ts ***!
  \***********************************************************/
/*! exports provided: SvgAbsorbEvent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SvgAbsorbEvent", function() { return SvgAbsorbEvent; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _DrawWallAbsorb__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./DrawWallAbsorb */ "./src/app/svg/common/act/absorb/DrawWallAbsorb.ts");
/* harmony import */ var _DWAbsorb__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./DWAbsorb */ "./src/app/svg/common/act/absorb/DWAbsorb.ts");
/* harmony import */ var _MoveWallAbsorb__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./MoveWallAbsorb */ "./src/app/svg/common/act/absorb/MoveWallAbsorb.ts");






class SvgAbsorbEvent {
    constructor(dataService, DUService, calService) {
        this.dataService = dataService;
        this.DUService = DUService;
        this.calService = calService;
        this.drawWallAbsorb = new _DrawWallAbsorb__WEBPACK_IMPORTED_MODULE_3__["DrawWallAbsorb"](this.dataService, this.DUService, this.calService);
        this.moveWallAbosrb = new _MoveWallAbsorb__WEBPACK_IMPORTED_MODULE_5__["MoveWallAbsorb"](this.dataService, this.DUService, this.calService);
        this.dwAbsorb = new _DWAbsorb__WEBPACK_IMPORTED_MODULE_4__["DWAbsorb"](this.dataService, this.DUService, this.calService);
    }
}
SvgAbsorbEvent.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_1__["JdesignUtil2dService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__["CalculatorsService"] }
];


/***/ }),

/***/ "./src/app/svg/common/act/common/OpenAct.ts":
/*!**************************************************!*\
  !*** ./src/app/svg/common/act/common/OpenAct.ts ***!
  \**************************************************/
/*! exports provided: OpenAct */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OpenAct", function() { return OpenAct; });
/* harmony import */ var _three_save3D_Redo3D__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../three/save3D/Redo3D */ "./src/app/three/save3D/Redo3D.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _three_jDesign3D_JPoint3D__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../three/jDesign3D/JPoint3D */ "./src/app/three/jDesign3D/JPoint3D.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _three_jDesign3D_JCowall3D__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../three/jDesign3D/JCowall3D */ "./src/app/three/jDesign3D/JCowall3D.ts");
/* harmony import */ var _three_jDesign3D_JWall3D__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../three/jDesign3D/JWall3D */ "./src/app/three/jDesign3D/JWall3D.ts");
/* harmony import */ var _three_jDesign3D_JRoom3D__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../three/jDesign3D/JRoom3D */ "./src/app/three/jDesign3D/JRoom3D.ts");
/* harmony import */ var _three_jDesign3D_JFloor3D__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../three/jDesign3D/JFloor3D */ "./src/app/three/jDesign3D/JFloor3D.ts");
/* harmony import */ var _three_jDesign3D_JWin3D__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../three/jDesign3D/JWin3D */ "./src/app/three/jDesign3D/JWin3D.ts");
/* harmony import */ var _three_jDesign3D_JDoor3D__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../three/jDesign3D/JDoor3D */ "./src/app/three/jDesign3D/JDoor3D.ts");
/* harmony import */ var _three_jDesign3D_JFurniture3D__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../three/jDesign3D/JFurniture3D */ "./src/app/three/jDesign3D/JFurniture3D.ts");
/* harmony import */ var _three_jDesign3D_JCornerWin3D__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../../three/jDesign3D/JCornerWin3D */ "./src/app/three/jDesign3D/JCornerWin3D.ts");
/* harmony import */ var _three_jDesign3D_JRoof3D__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../../three/jDesign3D/JRoof3D */ "./src/app/three/jDesign3D/JRoof3D.ts");
/* harmony import */ var _three_jDesign3D_JBayWin3D__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../../three/jDesign3D/JBayWin3D */ "./src/app/three/jDesign3D/JBayWin3D.ts");
/* harmony import */ var _three_jDesign3D_JBuild3D__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../../three/jDesign3D/JBuild3D */ "./src/app/three/jDesign3D/JBuild3D.ts");
/* harmony import */ var _save_SaveType__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../save/SaveType */ "./src/app/svg/common/save/SaveType.ts");
/* harmony import */ var _three_save3D_SaveType3D__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../../three/save3D/SaveType3D */ "./src/app/three/save3D/SaveType3D.ts");
/* harmony import */ var _three_jDesign3D_JLWin3D__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../../../three/jDesign3D/JLWin3D */ "./src/app/three/jDesign3D/JLWin3D.ts");
/* harmony import */ var _three_jDesign3D_JUWin3D__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../../../three/jDesign3D/JUWin3D */ "./src/app/three/jDesign3D/JUWin3D.ts");




















class OpenAct {
    constructor(dataService, DUService, calService) {
        this.dataService = dataService;
        this.DUService = DUService;
        this.calService = calService;
        this._redo3D = new _three_save3D_Redo3D__WEBPACK_IMPORTED_MODULE_0__["Redo3D"]();
        this._oldObjIDs = [];
        this._differType = [];
        this._maxNum = 0;
        this._differType = this.getAllObjDiffer2DAnd3D();
    }
    /** 打开数据 */
    openData(data, wallDoCb, roomDoCb, allDoCb) {
        this._oldObjIDs = [];
        this._maxNum = 0;
        /* 墙体更新 */
        for (let i = 0; i < data.length; i++) {
            switch (data[i].type) {
                case 'floorplan':
                    this.reFloorPlan(data[i]);
                    break;
                /** cmd没有tpye属性 */
                case undefined:
                    this.reCmd(data[i]);
                    break;
                case 'point':
                    //this.rePoint(data[i])
                    this.redoObjBase(this.dataService.points, data[i]);
                    // console.log(data[i])
                    break;
                case 'cowall':
                    //this.reCowall(data[i])
                    this.redoObjBase(this.dataService.cowalls, data[i]);
                    // console.log(data[i])
                    // this.dataService.doWalls().urgentUpdate()
                    break;
                case 'wall':
                    //this.reWall(data[i])
                    this.redoObjBase(this.dataService.walls, data[i]);
                    // console.log(data[i])
                    // this.dataService.doWalls().urgentUpdate()
                    break;
            }
        }
        if (wallDoCb)
            wallDoCb();
        /* 空间更新 */
        for (let i = 0; i < data.length; i++) {
            switch (data[i].type) {
                case 'room':
                    //this.reRoom(data[i])
                    this.redoObjBase(this.dataService.rooms, data[i]);
                    break;
                case 'floor':
                    //this.reFloor(data[i])
                    this.redoObjBase(this.dataService.floors, data[i]);
                    break;
                case 'roof':
                    this.redoObjBase(this.dataService.roofs, data[i]);
                    break;
            }
        }
        if (roomDoCb)
            roomDoCb();
        /* 家装更新 */
        for (let i = 0; i < data.length; i++) {
            switch (data[i].type) {
                case 'furniture':
                    //this.reFurniture(data[i])
                    this.redoObjBase(this.dataService.furnitures, data[i]);
                    this.dataService.furnitures[data[i].id].act3D.move();
                    break;
                case "build":
                    this.redoObjBase(this.dataService.builds, data[i]);
                    break;
                case 'door':
                    //this.reDoor(data[i])
                    this.redoObjBase(this.dataService.doors, data[i]);
                    break;
                case 'win':
                    //this.reWin(data[i])
                    this.redoObjBase(this.dataService.wins, data[i]);
                    break;
                case 'cornerWin':
                    this.redoObjBase(this.dataService.cornerWins, data[i]);
                    break;
                case "LWin":
                    this.redoObjBase(this.dataService.LWins, data[i]);
                    break;
                case "UWin":
                    this.redoObjBase(this.dataService.UWins, data[i]);
                    break;
            }
        }
        if (allDoCb)
            allDoCb(this._maxNum);
        /* 所有完成再触发的方法 */
        for (let i = 0; i < data.length; i++) {
            switch (data[i].type) {
                case 'floor':
                    let floor = this.dataService.floors[data[i].id];
                    this._redo3D.doneFloor(floor);
                    break;
            }
        }
    }
    /** 还原大法基础 */
    redoBase(reDataArr, reData, cb) {
        reDataArr[reData.id] = reData;
        reData.strongUpdate();
        // reData.strongUpdate3D()
        if (cb != undefined)
            cb(reData);
    }
    getDiffer2DAnd3D(type2D, type3D) {
        // let newType3D = new type3D()
        // let newType2D = new type2D()
        // let key2DArr: boolean[] = []
        // let key3DArr: string[] = []
        // for (let key2D in newType2D) {
        //     if (newType2D[key2D] == undefined && key2D != 'constructor') {
        //         key2DArr[key2D] = true
        //     }
        // }
        // for (let key3D in newType3D) {
        //     if (!key2DArr[key3D] && key3D != 'constructor') {
        //         key3DArr.push(key3D)
        //     }
        // }
        // return key3DArr
        return this.DUService.obj.getDifferClassType(type2D, type3D, { ignoreTypes: ["constructor"] });
    }
    /** 获取所有3d与2d不同数据的类型 */
    getAllObjDiffer2DAnd3D() {
        let arr = [];
        arr['point'] = this.getDiffer2DAnd3D(_save_SaveType__WEBPACK_IMPORTED_MODULE_16__["SaveType"].JPoint, _three_save3D_SaveType3D__WEBPACK_IMPORTED_MODULE_17__["SaveType3D"].JPoint3D);
        arr['cowall'] = this.getDiffer2DAnd3D(_save_SaveType__WEBPACK_IMPORTED_MODULE_16__["SaveType"].JCowall, _three_save3D_SaveType3D__WEBPACK_IMPORTED_MODULE_17__["SaveType3D"].JCowall3D);
        arr['wall'] = this.getDiffer2DAnd3D(_save_SaveType__WEBPACK_IMPORTED_MODULE_16__["SaveType"].JWall, _three_save3D_SaveType3D__WEBPACK_IMPORTED_MODULE_17__["SaveType3D"].JWall3D);
        arr['room'] = this.getDiffer2DAnd3D(_save_SaveType__WEBPACK_IMPORTED_MODULE_16__["SaveType"].JRoom, _three_save3D_SaveType3D__WEBPACK_IMPORTED_MODULE_17__["SaveType3D"].JRoom3D);
        arr['floor'] = this.getDiffer2DAnd3D(_save_SaveType__WEBPACK_IMPORTED_MODULE_16__["SaveType"].JFloor, _three_save3D_SaveType3D__WEBPACK_IMPORTED_MODULE_17__["SaveType3D"].JFloor3D);
        arr['roof'] = this.getDiffer2DAnd3D(_save_SaveType__WEBPACK_IMPORTED_MODULE_16__["SaveType"].JRoof, _three_save3D_SaveType3D__WEBPACK_IMPORTED_MODULE_17__["SaveType3D"].JRoof3D);
        arr['win'] = this.getDiffer2DAnd3D(_save_SaveType__WEBPACK_IMPORTED_MODULE_16__["SaveType"].JWin, _three_save3D_SaveType3D__WEBPACK_IMPORTED_MODULE_17__["SaveType3D"].JWin3D);
        arr['bayWin'] = this.getDiffer2DAnd3D(_save_SaveType__WEBPACK_IMPORTED_MODULE_16__["SaveType"].JWin, _three_save3D_SaveType3D__WEBPACK_IMPORTED_MODULE_17__["SaveType3D"].JBayWin3D);
        arr['door'] = this.getDiffer2DAnd3D(_save_SaveType__WEBPACK_IMPORTED_MODULE_16__["SaveType"].JDoor, _three_save3D_SaveType3D__WEBPACK_IMPORTED_MODULE_17__["SaveType3D"].JDoor3D);
        arr['build'] = this.getDiffer2DAnd3D(_save_SaveType__WEBPACK_IMPORTED_MODULE_16__["SaveType"].JBuild, _three_save3D_SaveType3D__WEBPACK_IMPORTED_MODULE_17__["SaveType3D"].JBuild3D);
        arr['furniture'] = this.getDiffer2DAnd3D(_save_SaveType__WEBPACK_IMPORTED_MODULE_16__["SaveType"].JFurniture, _three_save3D_SaveType3D__WEBPACK_IMPORTED_MODULE_17__["SaveType3D"].JFurniture3D);
        arr['cornerWin'] = this.getDiffer2DAnd3D(_save_SaveType__WEBPACK_IMPORTED_MODULE_16__["SaveType"].JCornerWin, _three_save3D_SaveType3D__WEBPACK_IMPORTED_MODULE_17__["SaveType3D"].JCornerWin3D);
        arr['LWin'] = this.getDiffer2DAnd3D(_save_SaveType__WEBPACK_IMPORTED_MODULE_16__["SaveType"].JLWin, _three_save3D_SaveType3D__WEBPACK_IMPORTED_MODULE_17__["SaveType3D"].JLWin3D);
        arr['UWin'] = this.getDiffer2DAnd3D(_save_SaveType__WEBPACK_IMPORTED_MODULE_16__["SaveType"].JUWin, _three_save3D_SaveType3D__WEBPACK_IMPORTED_MODULE_17__["SaveType3D"].JUWin3D);
        return arr;
    }
    Completion3DData(differType, jsonData, obj) {
        for (let i = 0; i < differType.length; i++) {
            // console.log(differType[i])
            // console.log(jsonData[differType[i]])
            let newObj = this.DUService.obj.cloneArr(jsonData[differType[i]]);
            // console.log(obj.id)
            // console.log(newObj)
            // console.log('==================')
            obj[differType[i]] = jsonData[differType[i]];
        }
    }
    /** 还原对象大法基础 */
    redoObjBase(reDataArr, reJson) {
        if (reJson.id) {
            let num = this.DUService.cal.getNumFromString(reJson.id);
            if (num > this._maxNum)
                this._maxNum = num;
        }
        this._oldObjIDs[reJson.id] = 1;
        /** 没有创建=============================================================== */
        if (reDataArr[reJson.id] == undefined) {
            let reData = null;
            switch (reJson.type) {
                case 'point':
                    reData = new _three_jDesign3D_JPoint3D__WEBPACK_IMPORTED_MODULE_2__["JPoint3D"](reJson, this.dataService, this.DUService);
                    reDataArr[reData.id] = reData;
                    this.Completion3DData(this._differType['point'], reJson, reData);
                    reData.strongUpdate();
                    this._redo3D.createPoint(reData);
                    return reData;
                case 'cowall':
                    reData = new _three_jDesign3D_JCowall3D__WEBPACK_IMPORTED_MODULE_5__["JCowall3D"](reJson, this.dataService, this.DUService);
                    reDataArr[reData.id] = reData;
                    this.Completion3DData(this._differType['cowall'], reJson, reData);
                    reData.strongUpdate();
                    // this._redo3D.createCowall(reData)
                    return reData;
                case 'wall':
                    reData = new _three_jDesign3D_JWall3D__WEBPACK_IMPORTED_MODULE_6__["JWall3D"](reJson, this.dataService, this.DUService);
                    reDataArr[reData.id] = reData;
                    this.Completion3DData(this._differType['wall'], reJson, reData);
                    reData.strongUpdate();
                    this._redo3D.createWall(reData);
                    return reData;
                case 'room':
                    reData = new _three_jDesign3D_JRoom3D__WEBPACK_IMPORTED_MODULE_7__["JRoom3D"](reJson, this.dataService, this.DUService);
                    reDataArr[reData.id] = reData;
                    this.Completion3DData(this._differType['room'], reJson, reData);
                    reData.strongUpdate();
                    this._redo3D.createRoom(reData);
                    return reData;
                case 'floor':
                    reData = new _three_jDesign3D_JFloor3D__WEBPACK_IMPORTED_MODULE_8__["JFloor3D"](reJson, this.dataService, this.DUService);
                    reDataArr[reData.id] = reData;
                    this.Completion3DData(this._differType['floor'], reJson, reData);
                    reData.strongUpdate();
                    this._redo3D.createFloor(reData);
                    return reData;
                case 'roof':
                    reData = new _three_jDesign3D_JRoof3D__WEBPACK_IMPORTED_MODULE_13__["JRoof3D"](reJson, this.dataService, this.DUService);
                    reDataArr[reData.id] = reData;
                    this.Completion3DData(this._differType['roof'], reJson, reData);
                    reData.strongUpdate();
                    this._redo3D.createRoof(reData);
                    return reData;
                case 'furniture':
                    reData = new _three_jDesign3D_JFurniture3D__WEBPACK_IMPORTED_MODULE_11__["JFurniture3D"](reJson, this.dataService, this.DUService);
                    this.Completion3DData(this._differType['furniture'], reJson, reData);
                    this.dataService.cache.furniture.createFunc(reData);
                    reData.strongUpdate();
                    this._redo3D.createFurniture(reData);
                    return reData;
                case "build":
                    reData = new _three_jDesign3D_JBuild3D__WEBPACK_IMPORTED_MODULE_15__["JBuild3D"](reJson, this.dataService, this.DUService);
                    this.Completion3DData(this._differType['build'], reJson, reData);
                    this.dataService.cache.build.createFunc(reData);
                    reData.strongUpdate();
                    this._redo3D.createBuild(reData);
                    return reData;
                case 'door':
                    reData = new _three_jDesign3D_JDoor3D__WEBPACK_IMPORTED_MODULE_10__["JDoor3D"](reJson, this.dataService, this.DUService);
                    this.Completion3DData(this._differType['door'], reJson, reData);
                    this.dataService.cache.door.createFunc(reData);
                    reData.strongUpdate();
                    this._redo3D.createDoor(reData);
                    return reData;
                case 'win':
                    if (reJson.isBay) {
                        reData = new _three_jDesign3D_JBayWin3D__WEBPACK_IMPORTED_MODULE_14__["JBayWin3D"](reJson, this.dataService, this.DUService);
                        this.Completion3DData(this._differType['bayWin'], reJson, reData);
                        this.dataService.cache.win.createFunc(reData);
                    }
                    else {
                        reData = new _three_jDesign3D_JWin3D__WEBPACK_IMPORTED_MODULE_9__["JWin3D"](reJson, this.dataService, this.DUService);
                        this.Completion3DData(this._differType['win'], reJson, reData);
                        this.dataService.cache.win.createFunc(reData);
                    }
                    reDataArr[reData.id] = reData;
                    reData.strongUpdate();
                    this._redo3D.createWin(reData);
                    return reData;
                case 'cornerWin':
                    reData = new _three_jDesign3D_JCornerWin3D__WEBPACK_IMPORTED_MODULE_12__["JCornerWin3D"](reJson, this.dataService, this.DUService);
                    reDataArr[reData.id] = reData;
                    this.Completion3DData(this._differType['cornerWin'], reJson, reData);
                    this.dataService.cache.cornerWin.createFunc(reData);
                    reData.strongUpdate();
                    this._redo3D.createCornerWin(reData);
                    return reData;
                case 'LWin':
                    reData = new _three_jDesign3D_JLWin3D__WEBPACK_IMPORTED_MODULE_18__["JLWin3D"](reJson, this.dataService, this.DUService);
                    console.log(reJson);
                    reDataArr[reData.id] = reData;
                    this.Completion3DData(this._differType['LWin'], reJson, reData);
                    reData.strongUpdate();
                    this._redo3D.createLWin(reData);
                    return reData;
                case 'UWin':
                    reData = new _three_jDesign3D_JUWin3D__WEBPACK_IMPORTED_MODULE_19__["JUWin3D"](reJson, this.dataService, this.DUService);
                    reDataArr[reData.id] = reData;
                    this.Completion3DData(this._differType['UWin'], reJson, reData);
                    reData.strongUpdate();
                    this._redo3D.createUWin(reData);
                    return reData;
            }
        }
        /** 有仅修改========================================================= */
        else {
            let fixData = undefined;
            /** 数据复制 */
            let copyFunc = (dataArr, cb) => {
                for (let key in reJson) {
                    dataArr[reJson.id][key] = reJson[key];
                }
                dataArr[reJson.id].strongUpdate();
                cb(dataArr[reJson.id]);
                return dataArr[reJson.id];
            };
            switch (reJson.type) {
                case 'point':
                    fixData = copyFunc(this.dataService.points, this._redo3D.rePoint);
                    return fixData;
                case 'cowall':
                    fixData = copyFunc(this.dataService.cowalls, this._redo3D.reCowall);
                    return fixData;
                case 'wall':
                    fixData = copyFunc(this.dataService.walls, this._redo3D.reWall);
                    return fixData;
                case 'room':
                    fixData = copyFunc(this.dataService.rooms, this._redo3D.reRoom);
                    return fixData;
                case 'floor':
                    fixData = copyFunc(this.dataService.floors, this._redo3D.reFloor);
                    return fixData;
                case 'roof':
                    fixData = copyFunc(this.dataService.roofs, this._redo3D.reRoof);
                    return fixData;
                case 'furniture':
                    fixData = copyFunc(this.dataService.furnitures, this._redo3D.reFurniture);
                    return fixData;
                case "build":
                    fixData = copyFunc(this.dataService.builds, this._redo3D.reBuild);
                    return fixData;
                case 'door':
                    fixData = copyFunc(this.dataService.doors, this._redo3D.reDoor);
                    return fixData;
                case 'win':
                    fixData = copyFunc(this.dataService.wins, this._redo3D.reWin);
                    return fixData;
                case "cornerWin":
                    fixData = copyFunc(this.dataService.cornerWins, this._redo3D.reCornWin);
                    return fixData;
                case "LWin":
                    fixData = copyFunc(this.dataService.LWins, this._redo3D.reLWin);
                    return fixData;
                case "UWin":
                    fixData = copyFunc(this.dataService.UWins, this._redo3D.reUWin);
                    return fixData;
            }
        }
        return undefined;
    }
    /** 清空数据(清空自动生成数据,墙点空间地板) */
    cleanData() {
        let func = (obj) => {
            for (let key in obj) {
                obj[key].destory3D();
            }
        };
        /** 点墙空间都必须重新生成 */
        func(this.dataService.points);
        this.dataService.doPoints().clear();
        func(this.dataService.cowalls);
        this.dataService.doCowalls().clear();
        func(this.dataService.walls);
        this.dataService.doWalls().clear();
        func(this.dataService.rooms);
        this.dataService.doRooms().clear();
        func(this.dataService.floors);
        this.dataService.doFloors().clear();
        func(this.dataService.roofs);
        this.dataService.doRoofs().clear();
    }
    /** floorPlan还原 */
    reFloorPlan(readJson) {
        for (let key in readJson) {
            this.dataService.floorplan[key] = readJson[key];
        }
    }
    /** cmd还原 */
    reCmd(readJson) {
        this.DUService.obj.redo(this.dataService.cmd, readJson);
        // for (let key in readJson) {
        //     this.dataService.cmd[key] = readJson[key]
        // }
    }
    /** cache还原 */
    reCache(readJson) {
        this.DUService.obj.redo(this.dataService.cache, readJson);
        // for (let key in readJson) {
        //     this.dataService.cache[key] = readJson[key]
        // }
    }
    /** 删除对象(用于还原时,对象多余的情况) */
    delObj(obj, cb) {
        switch (obj.type) {
            case 'door':
                //let door=<JDoor>DesignData.floorPlan.getChooseObj()
                this.dataService.cache.shortFuncs['delDoor'](this.dataService.doors[obj.id], false);
                break;
            case 'win':
                this.dataService.cache.shortFuncs["delWin"](this.dataService.wins[obj.id], false);
                break;
            case 'furniture':
                this.dataService.cache.shortFuncs["delFurn"](this.dataService.furnitures[obj.id], false);
                break;
            case "build":
                this.dataService.cache.shortFuncs["delBuild"](this.dataService.builds[obj.id], false);
                break;
            case "cornerWin":
                this.dataService.cache.shortFuncs['delCornWin'](this.dataService.cornerWins[obj.id], false);
                break;
            case "LWin":
                this.dataService.cache.shortFuncs['delLUWin'](this.dataService.LWins[obj.id]);
                break;
            case "UWin":
                this.dataService.cache.shortFuncs['delLUWin'](this.dataService.UWins[obj.id]);
                break;
        }
        if (cb != undefined)
            cb();
    }
    /** 删除多余对象 仅对于家具,门,窗*/
    delRedundanceObj(data, cb) {
        /** 数据判断 */
        let key = null;
        let func = (obj) => {
            for (key in obj) {
                if (this._oldObjIDs[key] == undefined) {
                    this.delObj(obj[key]);
                }
            }
        };
        /** 门 */
        func(this.dataService.doors);
        /** 窗*/
        func(this.dataService.wins);
        /** 家具 */
        func(this.dataService.furnitures);
        /** 建筑 */
        func(this.dataService.builds);
        /** 转角飘窗 */
        func(this.dataService.cornerWins);
        /* L窗 */
        func(this.dataService.LWins);
        func(this.dataService.UWins);
        if (cb != undefined)
            cb();
    }
}
OpenAct.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_3__["JdesignUtil2dService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_4__["CalculatorsService"] }
];


/***/ }),

/***/ "./src/app/svg/common/act/common/SaveAct.ts":
/*!**************************************************!*\
  !*** ./src/app/svg/common/act/common/SaveAct.ts ***!
  \**************************************************/
/*! exports provided: SaveAct */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SaveAct", function() { return SaveAct; });
/* harmony import */ var _three_save3D_SaveType3D__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../three/save3D/SaveType3D */ "./src/app/three/save3D/SaveType3D.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _save_SaveType__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../save/SaveType */ "./src/app/svg/common/save/SaveType.ts");




class SaveAct {
    constructor(DUService, dataService) {
        this.DUService = DUService;
        this.dataService = dataService;
    }
    /** 获取保存数据 */
    getSaveData() {
        let obj = null;
        let svg_data = [];
        /** 数据保存 */
        let save_func = (data, obj, cb) => {
            let key = null;
            for (key in obj) {
                if (key != 'constructor') {
                    obj[key] = this.DUService.obj.strongClone(data[key]);
                }
            }
            svg_data.push(obj);
            if (cb != undefined)
                cb(obj);
        };
        /** floorplan */
        obj = new _three_save3D_SaveType3D__WEBPACK_IMPORTED_MODULE_0__["SaveType3D"].JFloorPlan3D();
        save_func(this.dataService.floorplan, obj);
        /** cmd */
        obj = new _save_SaveType__WEBPACK_IMPORTED_MODULE_3__["SaveType"].JCmd();
        save_func(this.dataService.cmd, obj);
        /** 点 */
        this.saveTypeData(this.dataService.points, (data) => {
            obj = new _three_save3D_SaveType3D__WEBPACK_IMPORTED_MODULE_0__["SaveType3D"].JPoint3D();
            save_func(data, obj);
            // console.log(obj)
        });
        /** 有序墙 */
        this.saveTypeData(this.dataService.cowalls, (data) => {
            obj = new _three_save3D_SaveType3D__WEBPACK_IMPORTED_MODULE_0__["SaveType3D"].JCowall3D();
            save_func(data, obj);
        });
        /** 墙 */
        this.saveTypeData(this.dataService.walls, (data) => {
            obj = new _three_save3D_SaveType3D__WEBPACK_IMPORTED_MODULE_0__["SaveType3D"].JWall3D();
            save_func(data, obj);
        });
        /** 地板 */
        this.saveTypeData(this.dataService.floors, (data) => {
            obj = new _three_save3D_SaveType3D__WEBPACK_IMPORTED_MODULE_0__["SaveType3D"].JFloor3D();
            save_func(data, obj);
        });
        /** 天花 */
        this.saveTypeData(this.dataService.roofs, (data) => {
            obj = new _three_save3D_SaveType3D__WEBPACK_IMPORTED_MODULE_0__["SaveType3D"].JRoof3D();
            save_func(data, obj);
        });
        /** 空间 */
        this.saveTypeData(this.dataService.rooms, (data) => {
            obj = new _three_save3D_SaveType3D__WEBPACK_IMPORTED_MODULE_0__["SaveType3D"].JRoom3D();
            save_func(data, obj);
        });
        /** 门 */
        this.saveTypeData(this.dataService.doors, (data) => {
            obj = new _three_save3D_SaveType3D__WEBPACK_IMPORTED_MODULE_0__["SaveType3D"].JDoor3D();
            save_func(data, obj);
        });
        /** 窗 */
        this.saveTypeData(this.dataService.wins, (data) => {
            obj = data.isBay ? new _three_save3D_SaveType3D__WEBPACK_IMPORTED_MODULE_0__["SaveType3D"].JBayWin3D : new _three_save3D_SaveType3D__WEBPACK_IMPORTED_MODULE_0__["SaveType3D"].JWin3D();
            save_func(data, obj);
        });
        /** 家具 */
        this.saveTypeData(this.dataService.furnitures, (data) => {
            obj = new _three_save3D_SaveType3D__WEBPACK_IMPORTED_MODULE_0__["SaveType3D"].JFurniture3D();
            save_func(data, obj);
        });
        /** 建筑 */
        this.saveTypeData(this.dataService.builds, (data) => {
            obj = new _three_save3D_SaveType3D__WEBPACK_IMPORTED_MODULE_0__["SaveType3D"].JBuild3D();
            save_func(data, obj);
        });
        /** 转角飘窗 */
        this.saveTypeData(this.dataService.cornerWins, (data) => {
            obj = new _three_save3D_SaveType3D__WEBPACK_IMPORTED_MODULE_0__["SaveType3D"].JCornerWin3D();
            save_func(data, obj);
        });
        /* L型窗 */
        this.saveTypeData(this.dataService.LWins, (data) => {
            obj = new _three_save3D_SaveType3D__WEBPACK_IMPORTED_MODULE_0__["SaveType3D"].JLWin3D();
            save_func(data, obj);
        });
        this.saveTypeData(this.dataService.UWins, (data) => {
            obj = new _three_save3D_SaveType3D__WEBPACK_IMPORTED_MODULE_0__["SaveType3D"].JUWin3D();
            save_func(data, obj);
        });
        // /** 相机 */
        // this.saveTypeData(this.dataService.cameras, (data) => {
        //     obj = new SaveType3D.JCamera3D()
        //     save_func(data, obj)
        // })
        // console.log(JSON.stringify(svg_data))
        // console.log(svg_data)
        return svg_data;
    }
    /** 保存类型数据 */
    saveTypeData(typeData, cb) {
        for (let key in typeData) {
            cb(typeData[key]);
        }
    }
}
SaveAct.ctorParameters = () => [
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_1__["JdesignUtil2dService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__["JdesignDataService"] }
];


/***/ }),

/***/ "./src/app/svg/common/act/input/DrawWallInput.ts":
/*!*******************************************************!*\
  !*** ./src/app/svg/common/act/input/DrawWallInput.ts ***!
  \*******************************************************/
/*! exports provided: DrawWallInput */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DrawWallInput", function() { return DrawWallInput; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");




class DrawWallInput {
    constructor(dataService, DUService, calService, popService) {
        this.dataService = dataService;
        this.DUService = DUService;
        this.calService = calService;
        this.popService = popService;
    }
    /**
     * 画墙输入
     * @param line
     * @param distance
     * @param cb 回调完成后,会触发消失
     */
    drawInput(line, cb) {
        this.popService.inputBoxsCache = [];
        let moveLine = this.DUService.pos.getPosTrans(line[0], line[1], -(this.dataService.cmd.cowall.height + (this.dataService.cmd.wall.thickness / 2)));
        let center = this.DUService.pos.getCenterPos(moveLine[0], moveLine[1]);
        let distance = this.DUService.pos.getDistance(line[0], line[1]);
        distance = Math.round(distance);
        let data = {
            pos: center,
            value: distance,
            index: 15,
            func: (params) => {
                let radian = this.DUService.pos.getRadian(line[0], line[1]);
                let newPos = this.DUService.pos.getRayPos(this.dataService.cache.wall.ShadowPosArr[0], radian, params);
                cb(newPos);
                this.popService.inputBoxsCache = [];
                this.popService.inputBoxs.emit([]);
            },
            focus: true
        };
        this.popService.inputBoxsCache.push(data);
        this.popService.setInputBoxs();
    }
}
DrawWallInput.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_1__["JdesignUtil2dService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__["CalculatorsService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_3__["PopDivService"] }
];


/***/ }),

/***/ "./src/app/svg/common/act/input/MovePointInput.ts":
/*!********************************************************!*\
  !*** ./src/app/svg/common/act/input/MovePointInput.ts ***!
  \********************************************************/
/*! exports provided: MovePointInput */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MovePointInput", function() { return MovePointInput; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");



class MovePointInput {
    constructor(dataService, calService, DUService) {
        this.dataService = dataService;
        this.calService = calService;
        this.DUService = DUService;
    }
    /* 是否有资格 */
    checkQualification(point) {
        let walls = point.getWallArr();
        if (walls.length == 2 &&
            walls[0].arcDistance == 0 &&
            walls[1].arcDistance == 0 &&
            this.DUService.pos.isParallelRadian(walls[0].getRadian(), walls[1].getRadian()))
            return true;
        return false;
    }
    /* 获取所有有序墙输入 */
    getAllCowallInput(point, cb) {
        let a = this.checkQualification(point);
        if (!a)
            return [];
        let datas = [];
        let cowalls = point.getCowallArr();
        for (let i = 0; i < cowalls.length; i++) {
            cowalls[i].labelDisplay = false;
            let value = parseFloat(this.dataService.cache.cowall.inputData[cowalls[i].id].text);
            let displayValue = parseFloat(this.dataService.cache.cowall.inputData[cowalls[i].id].displayText).toFixed(0);
            let data = {
                pos: this.dataService.cache.cowall.inputData[cowalls[i].id].pos,
                value: displayValue,
                index: 15,
                func: (params) => {
                    let distance = parseFloat(params) - value;
                    cb(distance, cowalls[i]);
                }
            };
            datas.push(data);
        }
        return datas;
        // let point
    }
}
MovePointInput.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_1__["CalculatorsService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"] }
];


/***/ }),

/***/ "./src/app/svg/common/act/input/MoveWallinput.ts":
/*!*******************************************************!*\
  !*** ./src/app/svg/common/act/input/MoveWallinput.ts ***!
  \*******************************************************/
/*! exports provided: MoveWallInput */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MoveWallInput", function() { return MoveWallInput; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");



class MoveWallInput {
    constructor(dataService, calService, DUService) {
        this.dataService = dataService;
        this.calService = calService;
        this.DUService = DUService;
    }
    /** 获得弧形墙输入数据 */
    getArcInput(wall, cb) {
        let radian = wall.getRadian();
        let rayPos = this.DUService.pos.getRayPos(wall.circlePos, radian - (Math.PI / 2), Math.abs(wall.arcRadius - (wall.arcDistance / 2)));
        let text = parseInt(wall.arcDistance.toString());
        let data = {
            pos: rayPos,
            value: text,
            index: 15,
            func: (params) => {
                wall.transArc(parseFloat(params));
                // this.calService.wall.transArcWall(wall, parseFloat(params))
                if (cb != undefined)
                    cb();
            }
        };
        return data;
    }
    /** 获取点的所有cowall的输入数据 */
    getPointCowallsInput(point, cowalls, wallRadian, cb) {
        let datas = [];
        for (let i = 0; i < cowalls.length; i++) {
            /* 判断是否存在和是否不平行 */
            if (this.dataService.cache.cowall.inputData[cowalls[i].id] != undefined && !this.DUService.pos.isParallelRadian(wallRadian, cowalls[i].getRadian())) {
                /* 隐藏标签 */
                cowalls[i].labelDisplay = false;
                // console.log(this.dataService.cache.cowall.inputData,cowalls,cowalls[i].id,this.dataService.cache.cowall.inputData[cowalls[i].id].text)
                let value = parseFloat(this.dataService.cache.cowall.inputData[cowalls[i].id].text || this.dataService.cache.cowall.inputData[cowalls[i].id].displayText);
                let displayValue = parseFloat(this.dataService.cache.cowall.inputData[cowalls[i].id].displayText).toFixed(0);
                let data = {
                    pos: this.dataService.cache.cowall.inputData[cowalls[i].id].pos,
                    value: displayValue,
                    index: 15,
                    func: (params) => {
                        let distance = parseFloat(params) - value;
                        let isStart = point.id == cowalls[i].pointIDs[1];
                        cb(distance, cowalls[i], isStart);
                    }
                };
                datas.push(data);
            }
        }
        return datas;
    }
    /** 获取所有cowall输入数据 */
    getAllCowallsInput(wall, cb) {
        let datas = [];
        let pointArr = wall.getPointArr();
        let mainCowallArr = wall.getCowallArr();
        let wallRadian = wall.getRadian();
        let cowallArrA = pointArr[0].getCowallArr();
        if (cowallArrA != undefined) {
            this.DUService.cal.removeByAttr(cowallArrA, "id", mainCowallArr[0]);
            this.DUService.cal.removeByAttr(cowallArrA, "id", mainCowallArr[1]);
            datas.push(...this.getPointCowallsInput(pointArr[0], cowallArrA, wallRadian, cb));
        }
        let cowallArrB = pointArr[1].getCowallArr();
        if (cowallArrB != undefined) {
            this.DUService.cal.removeByAttr(cowallArrB, "id", mainCowallArr[0]);
            this.DUService.cal.removeByAttr(cowallArrB, "id", mainCowallArr[1]);
            datas.push(...this.getPointCowallsInput(pointArr[1], cowallArrB, wallRadian, cb));
        }
        return datas;
    }
    // /** 获取cowall输入数据 */
    // getCowallInput(wall: JWall, cb?: (distance: number, cowall: JCowall, isStart: boolean) => void) {
    //     let datas: any[] = []
    //     let cowallArr: JCowall[] = []
    //     let pointArr
    //     try {
    //         cowallArr = wall.getCowallArr()
    //     }
    //     catch (e) {
    //         console.log(e)
    //         console.log(wall.id)
    //         console.log(wall)
    //         console.log(wall.coedgeID)
    //         // console.log(wall)
    //     }
    //     for (let i = 0; i < cowallArr.length; i++) {
    //         /** 上墙判断 */
    //         let prevCowall = cowallArr[i].getPrevCowall()
    //         if (prevCowall != null &&
    //             this.dataService.cache.cowall.inputData[prevCowall.id] != undefined && !this.DUService.pos.isParallelRadian(prevCowall.getRadian(), cowallArr[i].getRadian())) {
    //             let value = parseInt(this.dataService.cache.cowall.inputData[prevCowall.id].text)
    //             let data = {
    //                 pos: this.dataService.cache.cowall.inputData[prevCowall.id].pos,
    //                 value: value,
    //                 index: 15,
    //                 func: (params: any) => {
    //                     let distance = parseFloat(params) - value
    //                     cb(distance, prevCowall, true)
    //                     // this.changeCoWallLength(value, parseFloat(params), prevCowall, wall, true, cb)
    //                 }
    //             }
    //             datas.push(data)
    //         }
    //         /** 下墙判断 */
    //         let nextCowall = cowallArr[i].getNextCowall()
    //         if (nextCowall != null && this.dataService.cache.cowall.inputData[nextCowall.id] != undefined && !this.DUService.pos.isParallelRadian(nextCowall.getRadian(), cowallArr[i].getRadian())) {
    //             let value = parseInt(this.dataService.cache.cowall.inputData[nextCowall.id].text)
    //             let data = {
    //                 pos: this.dataService.cache.cowall.inputData[nextCowall.id].pos,
    //                 value: value,
    //                 index: 15,
    //                 func: (params: any) => {
    //                     // console.log(params)
    //                     let distance = parseFloat(params) - value
    //                     cb(distance, nextCowall, false)
    //                     // this.changeCoWallLength(value, parseFloat(params), nextCowall, wall, false, cb)
    //                 }
    //             }
    //             datas.push(data)
    //         }
    //     }
    //     return datas
    // }
    /** 改变墙长度 */
    changeCoWallLength(firstValue, lastValue, cowall, wall, isPrev, cb) {
        console.log("xxx");
        let a = 1;
        if (isPrev)
            a = -1;
        let cowallRadian = cowall.getRadian();
        let wallRadian = wall.getRadian();
        let radian = Math.PI - (a * cowallRadian) + (a * wallRadian);
        let distance = lastValue - firstValue;
        distance = distance * Math.sin(radian);
        let pos = { x: Math.cos(wallRadian - (Math.PI / 2)) * distance, y: Math.sin(wallRadian - (Math.PI / 2)) * distance };
        distance = this.dataService.cmd.getDefaultPixel(distance);
        pos = { x: Math.cos(wallRadian - (Math.PI / 2)) * distance, y: Math.sin(wallRadian - (Math.PI / 2)) * distance };
        /** 修改 */
        let movePosArr = this.calService.wall.getVerticalMovePosArr(wall, pos);
        /** 平行墙 */
        if (movePosArr != null) {
            let wallPosArr = wall.getPosArr();
            for (let i = 0; i < wallPosArr.length; i++) {
                wallPosArr[i].x = movePosArr[i].x;
                wallPosArr[i].y = movePosArr[i].y;
            }
        }
        if (cb != undefined)
            cb();
    }
}
MoveWallInput.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_1__["CalculatorsService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"] }
];


/***/ }),

/***/ "./src/app/svg/common/act/input/svg.input.event.ts":
/*!*********************************************************!*\
  !*** ./src/app/svg/common/act/input/svg.input.event.ts ***!
  \*********************************************************/
/*! exports provided: SvgInputEvent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SvgInputEvent", function() { return SvgInputEvent; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _DrawWallInput__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./DrawWallInput */ "./src/app/svg/common/act/input/DrawWallInput.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");





class SvgInputEvent {
    constructor(dataService, DUService, calService, popService) {
        this.dataService = dataService;
        this.DUService = DUService;
        this.calService = calService;
        this.popService = popService;
        this.wallInput = new _DrawWallInput__WEBPACK_IMPORTED_MODULE_3__["DrawWallInput"](this.dataService, this.DUService, this.calService, this.popService);
    }
}
SvgInputEvent.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_1__["JdesignUtil2dService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__["CalculatorsService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_4__["PopDivService"] }
];


/***/ }),

/***/ "./src/app/svg/common/act/mouse/EventAbstract.ts":
/*!*******************************************************!*\
  !*** ./src/app/svg/common/act/mouse/EventAbstract.ts ***!
  \*******************************************************/
/*! exports provided: EventAbstract */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EventAbstract", function() { return EventAbstract; });
/* harmony import */ var _services_mouse_event_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../services/mouse-event.service */ "./src/app/svg/common/services/mouse-event.service.ts");

class EventAbstract {
    constructor(mouseEventService) {
        this.mouseEventService = mouseEventService;
        this._isMouseMove = false;
        this.mouseEventService.getDownEvents().push((e) => {
            this.isMouseMove = false;
            if (this.isCondition())
                this.mouseDown(e);
        });
        this.mouseEventService.getMoveEvents().push((e) => {
            if (this.isCondition()) {
                this.mouseMove(e);
                this.isMouseMove = true;
            }
        });
        this.mouseEventService.getUpEvents().push((e) => {
            if (this.isCondition()) {
                this.mouseUp(e);
                this.isMouseMove = false;
            }
        });
    }
    /** 解决鼠标按下误判为移动操作  */
    get isMouseMove() { return this._isMouseMove; }
    set isMouseMove(data) { this._isMouseMove = data; }
}
EventAbstract.ctorParameters = () => [
    { type: _services_mouse_event_service__WEBPACK_IMPORTED_MODULE_0__["MouseEventService"] }
];


/***/ }),

/***/ "./src/app/svg/common/act/mouse/SvgDrawRoom.ts":
/*!*****************************************************!*\
  !*** ./src/app/svg/common/act/mouse/SvgDrawRoom.ts ***!
  \*****************************************************/
/*! exports provided: SvgDrawRoom, AbsorbRooomType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SvgDrawRoom", function() { return SvgDrawRoom; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AbsorbRooomType", function() { return AbsorbRooomType; });
/* harmony import */ var _EventAbstract__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EventAbstract */ "./src/app/svg/common/act/mouse/EventAbstract.ts");
/* harmony import */ var _services_mouse_event_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../services/mouse-event.service */ "./src/app/svg/common/services/mouse-event.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");







class SvgDrawRoom extends _EventAbstract__WEBPACK_IMPORTED_MODULE_0__["EventAbstract"] {
    constructor(mouseEventService, dataService, domUpdateService, calService, DUService, popService) {
        super(mouseEventService);
        this.mouseEventService = mouseEventService;
        this.dataService = dataService;
        this.domUpdateService = domUpdateService;
        this.calService = calService;
        this.DUService = DUService;
        this.popService = popService;
        this._firstPos = null;
        this._wasCreatRoom = false;
        this._movePos = null;
        this._absorbMsg = null;
        this._firstPoint = null;
        this._inputNum = 0;
        this.dataService.cache.mode.drawWall.subscribe(() => {
            this.cleanData();
        });
    }
    isCondition() {
        return this.dataService.cache.common.mode == "drawRoom";
    }
    mouseDown(e) {
        if (e.which == 1) {
            if (this._firstPos != null) {
                this.createRoom(this._movePos);
                this.cleanData();
            }
            else {
                this._firstPos = this._absorbMsg ? { x: this._absorbMsg.pos.x, y: this._absorbMsg.pos.y } : { x: e.offsetX, y: e.offsetY };
                if (this._absorbMsg != null && this._absorbMsg.obj != null && this._absorbMsg.obj.type == 'point') {
                    this._firstPoint = this._absorbMsg.obj;
                }
            }
        }
        else if (e.which == 3) {
            this.setRight(e);
        }
    }
    mouseMove(e) {
        let pos = { x: e.offsetX, y: e.offsetY };
        if (this.dataService.cache.common.isAbosrb)
            this._absorbMsg = this.getAbsorb(pos);
        /** 不吸附 */
        if (this._absorbMsg == null) {
            this.displayAbosrbLine(null);
        }
        /*吸附, 显示吸附线 */
        else {
            this.displayAbosrbLine(this._absorbMsg);
            pos = this._absorbMsg.pos;
        }
        if (this._firstPos != null) {
            this._movePos = pos;
            this.setShadow([this._firstPos, this._movePos]);
        }
        // this.displayPos(pos)
    }
    mouseUp() {
        if (this._wasCreatRoom) {
            this.cleanData();
        }
    }
    /** 显示标注线 */
    displayAbosrbLine(data) {
        /** 没有吸附 */
        if (data == null || data.obj == null) {
            this.dataService.cache.absorbLines = null;
        }
        else {
            let newData = {
                pos: data.pos,
                mode: "point",
                radius: this.dataService.cache.floorplan.multiple * 8
            };
            this.dataService.cache.absorbLines = [newData];
        }
        this.domUpdateService.absorbLine.emit();
    }
    /** 生成空间 */
    createRoom(pos) {
        this.setRight(null);
        if (this._firstPoint == null) {
            this._firstPoint = this.calService.point.createPoint({ x: this._firstPos.x, y: this._firstPos.y });
        }
        let lastPoint = null;
        if (this._absorbMsg != null && this._absorbMsg.obj != null && this._absorbMsg.obj.type == 'point') {
            lastPoint = this._absorbMsg.obj;
        }
        else {
            lastPoint = this.calService.point.createPoint(pos);
        }
        let walls = this.calService.wall.getRectWallsByPoint(this._firstPoint, lastPoint);
        let msg = this.calService.wall.overlay.allOverlayAndAllCut(walls);
        walls = msg.collectWalls;
        walls = this.DUService.cal.uniqueByAttr(walls, 'id');
        this.calService.cowall.delNoUse();
        let readyMsgs = this.calService.wall.cutRoomReady(walls, true);
        walls.push(...readyMsgs.walls);
        walls = this.DUService.cal.uniqueByAttr(walls, 'id');
        let rooms = this.calService.createRoom.cutRoom(walls, true, readyMsgs.rooms);
        this.calService.room.resetCowalls(rooms);
        this.calService.undoRedo.save();
        this.domUpdateService.svgPoint.emit();
        this.domUpdateService.svgWall.emit();
        this.domUpdateService.svgCowall.emit();
        this.domUpdateService.svgRoom.emit();
        this.dataService.cache.wall.update3D.emit();
        this.dataService.cache.cowall.update3D.emit();
        this._wasCreatRoom = true;
        this.cleanData();
        this.setShadow(null);
    }
    /** 显示坐标 */
    displayPos(pos) {
        if (this.dataService.cmd.floorplan.debugPos != null && this.dataService.cmd.floorplan.debugPos != undefined) {
            let data = {
                text: `{x:${pos.x},y:${pos.y}}`,
                position: this.dataService.cmd.floorplan.debugPos
            };
            this.popService.message.emit(data);
        }
    }
    /** 设置右键菜单 */
    setRight(e) {
        if (e == null) {
            this.popService.rightClick.emit(null);
            return false;
        }
        let data = {
            position: {
                x: e.clientX,
                y: e.clientY
            },
            body: [
                {
                    icon: this.popService.rigthClickData.退出.ico,
                    text: "退出",
                    func: () => {
                        this.setExit();
                    },
                    isShow: false
                },
                {
                    icon: this.popService.rigthClickData.取消.ico,
                    text: "取消",
                    func: () => {
                        this.setCancel();
                    },
                    isShow: false
                }
            ]
        };
        this.popService.rightClick.emit(data);
        return true;
    }
    /** 退出 */
    setExit() {
        this.setShadow(null);
        this.cleanData();
        this.displayAbosrbLine(null);
        this.dataService.cache.common.mode = 'normal';
        this.dataService.cache.common.blockON = false;
        this.domUpdateService.svgBlock.emit();
    }
    /** 取消 */
    setCancel() {
        this.setShadow(null);
        this.cleanData();
    }
    /** 数据清空 */
    cleanData() {
        this._firstPos = null;
        this._absorbMsg = null;
        this._wasCreatRoom = false;
        this._firstPoint = null;
        this._inputNum = 0;
        this.setShadow(null);
        this.dataService.cache.room.inputData = [];
        this.popService.inputBoxs.emit([]);
        this.popService.buttons.emit(null);
    }
    /** 设置影子 */
    setShadow(posArr) {
        this.dataService.cache.room.shadowPosArr = posArr;
        this.domUpdateService.svgRoomShadow.emit();
        this.setInputs();
    }
    /** 设置input */
    setInputs() {
        this.popService.inputBoxsCache = [];
        for (let i = 0; i < this.dataService.cache.room.inputData.length; i++) {
            let value = parseInt(this.dataService.cache.room.inputData[i].text);
            let data = {
                pos: this.dataService.cache.room.inputData[i].pos,
                value: value,
                index: 15,
                func: (params) => {
                    this._inputNum += 1;
                    this.changeLine(params, this.dataService.cache.room.inputData[i].isX);
                    /** 生成空间 */
                    if (i == 1) {
                        this.createRoom(this._movePos);
                        this.cleanData();
                    }
                },
                focus: this._inputNum == i
            };
            this.popService.inputBoxsCache.push(data);
        }
        this.popService.setInputBoxs();
    }
    /** 改变边 */
    changeLine(num, isX) {
        /** 水平 */
        if (isX) {
            let ax = this._movePos.x - this._firstPos.x > 0 ? 1 : -1;
            let distance = this.dataService.cmd.getDefaultPixel(num);
            distance += this.dataService.cmd.wall.thickness;
            this._movePos.x = this._firstPos.x + (distance) * ax;
        }
        /** 垂直 */
        else {
            let ay = this._movePos.y - this._firstPos.y > 0 ? 1 : -1;
            let distance = this.dataService.cmd.getDefaultPixel(num);
            distance += this.dataService.cmd.wall.thickness;
            this._movePos.y = this._firstPos.y + (distance) * ay;
        }
        this.setShadow([this._firstPos, this._movePos]);
    }
    /** 获取吸附 */
    getAbsorb(pos) {
        let absorbMsg = { obj: null, pos: pos };
        let minDistance = this.dataService.cmd.floorplan.absorb.minDistance;
        /** 优先点吸附 */
        let pointsMsg = this.calService.transData.getPointPosArr();
        let pointAbosrbMsg = this.calService.absorb.posAndPointPosArr(pos, minDistance, pointsMsg);
        if (pointAbosrbMsg != null) {
            absorbMsg.obj = pointAbosrbMsg.point;
            absorbMsg.pos = pointAbosrbMsg.pos;
            return absorbMsg;
        }
        /** 再判断墙吸附 */
        let walls = this.calService.transData.getUnArcWalls();
        let wallsMsg = this.calService.transData.getWallCenterLines(walls);
        let wallAbsorbMsg = this.calService.absorb.posAndWalls(pos, minDistance, false, wallsMsg);
        if (wallAbsorbMsg != null) {
            absorbMsg.obj = wallAbsorbMsg.wall;
            absorbMsg.pos = wallAbsorbMsg.pos;
            return absorbMsg;
        }
        return absorbMsg;
    }
}
SvgDrawRoom.ctorParameters = () => [
    { type: _services_mouse_event_service__WEBPACK_IMPORTED_MODULE_1__["MouseEventService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__["JdesignDataService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_3__["DomUpdateService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_4__["CalculatorsService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_5__["JdesignUtil2dService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_6__["PopDivService"] }
];
class AbsorbRooomType {
}


/***/ }),

/***/ "./src/app/svg/common/act/mouse/SvgDrawWall.ts":
/*!*****************************************************!*\
  !*** ./src/app/svg/common/act/mouse/SvgDrawWall.ts ***!
  \*****************************************************/
/*! exports provided: SvgDrawWall */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SvgDrawWall", function() { return SvgDrawWall; });
/* harmony import */ var _services_mouse_event_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../services/mouse-event.service */ "./src/app/svg/common/services/mouse-event.service.ts");
/* harmony import */ var _EventAbstract__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EventAbstract */ "./src/app/svg/common/act/mouse/EventAbstract.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _absorb_DrawWallAbsorb__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../absorb/DrawWallAbsorb */ "./src/app/svg/common/act/absorb/DrawWallAbsorb.ts");
/* harmony import */ var _input_DrawWallInput__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../input/DrawWallInput */ "./src/app/svg/common/act/input/DrawWallInput.ts");









class SvgDrawWall extends _EventAbstract__WEBPACK_IMPORTED_MODULE_1__["EventAbstract"] {
    constructor(mouseEventService, dataService, domUpdateService, DUService, popService, calService, wallAbsorb, wallInput) {
        super(mouseEventService);
        this.mouseEventService = mouseEventService;
        this.dataService = dataService;
        this.domUpdateService = domUpdateService;
        this.DUService = DUService;
        this.popService = popService;
        this.calService = calService;
        this.wallAbsorb = wallAbsorb;
        this.wallInput = wallInput;
        this._shadowMove = true;
        /** 画墙开始的第一个坐标 画墙开始就不变了*/
        this._firstPos = null;
        /** 画墙开始的上一个的坐标,跟随到最后 */
        this._prevPos = null;
        this._absorbMsg = null;
        this._prevAbsorbMsg = null;
        /** 吸附线数据 */
        this._absorbLineData = [];
        this._lastPoint = null;
        this._shadowPosArr = null;
        this.dataService.cache.mode.drawWall.subscribe(() => {
            this.cleanData();
        });
        this.dataService.cache.shortFuncs['drawWallByInput'] = (pos) => {
            this._shadowPosArr[1] = pos;
            this.setShadow(this._shadowPosArr);
            this._absorbMsg.pos = pos;
            this._absorbMsg.obj = null;
            this.popService.inputBoxsCache = [];
        };
        /** 墙翻转 */
        this.dataService.cache.shortFuncs['wallOut'] = () => {
            this.dataService.cache.wall.location = -this.dataService.cache.wall.location;
            this.setShadow(this._shadowPosArr);
        };
    }
    mouseUp(e) {
    }
    mouseDown(e) {
        // console.log('down')
        if (e.which == 1) {
            if (!this._prevAbsorbMsg || !this.DUService.pos.isSamePos(this._prevAbsorbMsg.pos, this._absorbMsg.pos))
                try {
                    this.drawAct([this._prevAbsorbMsg, this._absorbMsg]);
                }
                catch (e) {
                    console.log(e);
                    this.errorCmd('计算出错,请重新画过');
                }
        }
        else if (e.which == 3) {
            this.setRightMenu(e);
        }
        this.setShadow(undefined);
        this.popService.inputBoxs.emit([]);
    }
    mouseMove(e) {
        /** 设置吸附数据 */
        let data = this.wallAbsorb.getAbsorbData([this._prevAbsorbMsg ? this._prevAbsorbMsg.pos : null, { x: e.offsetX, y: e.offsetY }], this._lastPoint ? [this._lastPoint] : [], this.dataService.cache.wall.isOrthogonal);
        this._absorbLineData = data.absorbLineData;
        this._absorbMsg = data.absorbMsg;
        /** 显示吸附线 */
        this.displayAbosrbLines(this._absorbLineData);
        // console.log('move')
        /*如果已经有点,则显示影子墙 */
        if (this._prevPos != null) {
            /** 有吸附 */
            if (this._absorbMsg != null) {
                this._shadowPosArr = [this._prevPos, this._absorbMsg.pos];
                this.setShadow(this._shadowPosArr);
            }
            /** 没有吸附 */
            else {
                this._shadowPosArr = [this._prevPos, { x: e.offsetX, y: e.offsetY }];
                this.setShadow(this._shadowPosArr);
            }
        }
        else {
            this.setShadow(null);
        }
    }
    /** 转化坐标(用于内外反转墙,中线返回原值)
     * @param isresvse 是否反推运算(从边算中心)) 默认false,
     */
    transPos(posArr, thickness, isresvse = false) {
        let a = this.dataService.cache.wall.location;
        if (isresvse)
            a = -a;
        switch (a) {
            case 0:
                return posArr;
            case 1:
                return this.DUService.pos.getPosTrans(posArr[0], posArr[1], -thickness);
            case -1:
                return this.DUService.pos.getPosTrans(posArr[0], posArr[1], thickness);
        }
    }
    /** 画墙动作 */
    drawAct(absorbMsgs) {
        /** 是否应该保存房型图数据 */
        let isSave = false;
        if (!absorbMsgs[0] && !absorbMsgs[1])
            return false;
        this._prevPos = absorbMsgs[1].pos;
        /** 第一个点坐标产生 */
        if (this._firstPos == null) {
            this._firstPos = absorbMsgs[1].pos;
            this._prevAbsorbMsg = absorbMsgs[1];
            if (absorbMsgs[1].obj != null && absorbMsgs[1].obj.type == 'point')
                this._lastPoint = absorbMsgs[1].obj;
            return null;
        }
        /** 必须要有首点才开始画墙 */
        if (this._firstPos != null) {
            isSave = true;
        }
        let msg = this.drawWall(absorbMsgs);
        let mainWall = msg.wall;
        let mainPoint = mainWall.getPoint(1);
        /** 分空间 */
        let overMsg = this.calService.wall.overlay.allOverlayAndAllCut([mainWall]);
        let walls = [...overMsg.collectWalls];
        walls.push(...overMsg.useWalls);
        this.calService.wall.removeNoUseWalls(walls);
        this.calService.cowall.delNoUse();
        let readyMsgs = this.calService.wall.cutRoomReady(walls, false);
        let rooms = this.calService.createRoom.cutRoom(walls, true, readyMsgs.rooms);
        this.calService.room.resetCowalls();
        /** 更新保存 */
        // this.calService.cornerWin.listAbsorb()  
        this.strongUpdate();
        if (isSave)
            this.calService.undoRedo.save();
        this.setShadow(null);
        /** 碰到墙或者点 结束画墙动作 */
        if (this._absorbMsg.obj != null) {
            this.cleanData();
            return false;
        }
        /** 为下面继续画墙做准备 */
        mainWall = mainPoint.getWallArr()[0];
        if (!mainWall) {
            this.cleanData();
            return false;
        }
        let mainPointArr = mainWall.getPointArr();
        let transPosArr = this.transPos([mainPointArr[0].pos, mainPointArr[1].pos], this.dataService.cmd.wall.thickness / 2);
        this._prevPos = transPosArr[1];
        /** 接上一个点,保存下次使用 */
        this._prevAbsorbMsg = { pos: absorbMsgs[1].pos, obj: mainPointArr[1] };
        this._lastPoint = mainPointArr[1];
        return true;
    }
    /** 设置影子 */
    setShadow(posArr) {
        this.dataService.cache.wall.ShadowPosArr = posArr;
        this.domUpdateService.svgWallShadow.emit();
        this.domUpdateService.svgCowallShadow.emit();
        if (posArr && !this.DUService.pos.isSamePos(posArr[1], posArr[0]))
            this.wallInput.drawInput(posArr, (pos) => {
                this._absorbMsg = {
                    pos: pos,
                    obj: null
                };
                let distance = this.DUService.pos.getDistance(this._absorbMsg.pos, this._prevAbsorbMsg.pos);
                this.drawAct([this._prevAbsorbMsg, this._absorbMsg]);
            });
    }
    isCondition() {
        return this.dataService.cache.common.mode == 'drawWall';
    }
    /** 画点,返回两个点 */
    drawPoint(absorbMsgs) {
        let newWallPoints = [];
        let cutWalls = [];
        let location = this.dataService.cache.wall.location;
        let halfThickness = this.dataService.cmd.wall.thickness / 2;
        let shadowPosArr = [absorbMsgs[0].pos, absorbMsgs[1].pos];
        /** 从吸附线获取数据 */
        for (let i = 0; i < absorbMsgs.length; i++) {
            /** 有吸附 */
            if (absorbMsgs[i].obj != null) {
                /** 点吸附 */
                if (absorbMsgs[i].obj.type == 'point') {
                    let point = absorbMsgs[i].obj;
                    let centerPosArr = this.transPos(shadowPosArr, halfThickness, true);
                    /** 相同坐标,直接取点 */
                    if (this.DUService.pos.isSamePos(centerPosArr[i], point.pos)) {
                        newWallPoints.push(point);
                    }
                    /** 存在内外墙不搭得情况 */
                    else {
                        let newPoint = this.getOutWallIntersectPoint(point, shadowPosArr, i);
                        newWallPoints.push(newPoint);
                    }
                }
                /** 墙吸附 */
                else {
                    let wall = absorbMsgs[i].obj;
                    let posArr = this.transPos(shadowPosArr, halfThickness, true);
                    let point = undefined;
                    let wallPointArr = wall.getPointArr();
                    for (let m = 0; m < wallPointArr.length; m++) {
                        if (this.DUService.pos.isSamePos(absorbMsgs[i].pos, wallPointArr[m].pos, 0.01)) {
                            point = wallPointArr[m];
                            break;
                        }
                    }
                    if (!point)
                        point = this.calService.point.createPoint(posArr[i]);
                    this.calService.wall.cut.cutByPoint(wall, point);
                    newWallPoints.push(point);
                }
            }
            /** 没有吸附 */
            else {
                let centerPosArr = this.transPos(shadowPosArr, halfThickness, true);
                let point = this.calService.point.createPoint(centerPosArr[i]);
                newWallPoints.push(point);
            }
        }
        /** 切割原来的墙 */
        for (let key in cutWalls) {
            this.calService.wall.cut.cutsByPoints(this.dataService.walls[key], ...cutWalls[key]);
        }
        return newWallPoints;
    }
    /** 画墙 返回墙和切割墙或者与点融合的点 */
    drawWall(absorbMsgs) {
        let points = this.drawPoint(absorbMsgs);
        /** 产生新的 */
        let cowall = this.calService.cowall.createCowall([points[0].id, points[1].id]);
        /** 创建新的wall */
        let wall = this.calService.wall.createWall(cowall.id);
        cowall.edgeID = wall.id;
        return {
            wall: wall,
            points: points
        };
    }
    /**
     * 获取内外墙与墙相交的点
     * @param point
     * @param line
     * @param index
     */
    getOutWallIntersectPoint(point, line, index) {
        let centerPosArr = this.transPos(line, this.dataService.cmd.wall.thickness / 2, true);
        let wallArr = point.getWallArr();
        let minIntersectPos = undefined;
        /** 仅有一个墙不用切割墙 */
        if (wallArr.length == 1) {
            let wallPosArr = wallArr[0].getPosArr();
            minIntersectPos = this.DUService.pos.getIntersect(wallPosArr[0], wallPosArr[1], centerPosArr[0], centerPosArr[1]);
            if (minIntersectPos) {
                point.pos = minIntersectPos;
                return point;
            }
        }
        /** 多个墙需要切割墙 */
        else {
            let intersectWall = undefined;
            let isWallLine = false;
            let minDistance = undefined;
            for (let i = 0; i < wallArr.length; i++) {
                let wallPosArr = wallArr[i].getPosArr();
                let wallRadian = this.DUService.pos.getRadian(wallPosArr[0], wallPosArr[1]);
                let lineRadian = this.DUService.pos.getRadian(centerPosArr[0], wallPosArr[0]);
                /** 平行线可能 */
                if (this.DUService.pos.isParallelRadian(wallRadian, lineRadian)) {
                    isWallLine = true;
                    intersectWall = wallArr[i];
                    break;
                }
                /** 相交可能 */
                else {
                    let intersectPos = this.DUService.pos.getIntersect(wallPosArr[0], wallPosArr[1], centerPosArr[0], centerPosArr[1], false);
                    if (intersectPos) {
                        let distance = this.DUService.pos.getDistance(intersectPos, line[1]);
                        if (!minDistance || distance < minDistance) {
                            minIntersectPos = intersectPos;
                            intersectWall = wallArr[i];
                            minDistance = distance;
                        }
                    }
                }
            }
            /** 平行线可能 */
            if (isWallLine) {
                return point;
            }
            /** 相交则移点 */
            else if (minIntersectPos) {
                let newPoint = this.calService.point.createPoint(minIntersectPos);
                this.calService.wall.cut.cutByPoint(intersectWall, newPoint);
                return newPoint;
            }
        }
        /** 不相交则产生新墙连接 */
        let newPoint = this.calService.point.createPoint(centerPosArr[index]);
        let cowall = this.calService.cowall.createCowall([point.id, newPoint.id]);
        let wall = this.calService.wall.createWall(cowall.id);
        cowall.edgeID = wall.id;
        return newPoint;
    }
    /** 清空数据 */
    cleanData() {
        this._firstPos = null;
        this._prevPos = null;
        this._prevAbsorbMsg = null;
        this._absorbMsg = null;
        this._absorbLineData = null;
        this._lastPoint = null;
        this._shadowPosArr = null;
        this.dataService.cache.absorbLines = [];
        this.domUpdateService.absorbLine.emit();
    }
    /** 右键菜单 */
    setRightMenu(e) {
        let inputData = {
            text: '墙厚',
            valueArr: this.dataService.cmd.wall.thickness,
            func: (e) => {
                this.dataService.cmd.wall.thickness = parseInt(e.target.value);
                this.popService.rightClick.emit(null);
                //  = this._wallThickness
                // console.log(inputData)
            }
        };
        let data = {
            position: {
                x: e.clientX,
                y: e.clientY
            },
            body: [
                {
                    icon: this.popService.rigthClickData.取消.ico,
                    text: "取消",
                    func: () => {
                        this.setCancel();
                    },
                    isShow: false
                },
                {
                    icon: this.popService.rigthClickData.退出.ico,
                    text: "退出",
                    func: () => {
                        this.setExit();
                    },
                    isShow: false
                },
                {
                    icon: this.popService.rigthClickData.退出.ico,
                    text: "墙翻转",
                    func: () => {
                        this.dataService.cache.shortFuncs['wallOut']();
                    },
                    isShow: false
                }
            ],
            input: inputData,
            isWall: true
        };
        this.popService.rightClick.emit(data);
    }
    /** 退出 */
    setExit() {
        // this.setCowallSort()
        this.setShadow(null);
        this.cleanData();
        this.dataService.cache.common.mode = "normal";
        this.dataService.cache.common.blockON = false;
        this.domUpdateService.svgBlock.emit();
    }
    /** 取消 */
    setCancel() {
        // this.setCowallSort()
        this.setShadow(null);
        this.cleanData();
    }
    errorCmd(text) {
        this.calService.undoRedo.setPresent();
        this.calService.undoRedo.setPresent();
        this.calService.undoRedo.setPresent();
        this.strongUpdate();
        this.dataService.cache.common.choose = this.dataService.floorplan;
        this.cleanData();
        this.dataService.cache.common.isAbosrb = true;
        alert(text);
        return false;
    }
    /** 强制更新 */
    strongUpdate() {
        let points = this.dataService.doPoints().arr();
        let a = this.calService.point.fixSamePosPoints(points);
        this.domUpdateService.svgPoint.emit();
        this.domUpdateService.svgWall.emit();
        this.domUpdateService.svgCowall.emit();
        this.domUpdateService.svgRoom.emit();
        this.dataService.cache.floorplan.dataEmit.emit();
        this.dataService.cache.wall.update3D.emit();
        this.dataService.cache.cowall.update3D.emit();
    }
    /** 显示吸附线 null为消失*/
    displayAbosrbLines(data) {
        this.dataService.cache.absorbLines = data;
        this.domUpdateService.absorbLine.emit();
    }
}
SvgDrawWall.ctorParameters = () => [
    { type: _services_mouse_event_service__WEBPACK_IMPORTED_MODULE_0__["MouseEventService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__["JdesignDataService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_3__["DomUpdateService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_4__["JdesignUtil2dService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_5__["PopDivService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_6__["CalculatorsService"] },
    { type: _absorb_DrawWallAbsorb__WEBPACK_IMPORTED_MODULE_7__["DrawWallAbsorb"] },
    { type: _input_DrawWallInput__WEBPACK_IMPORTED_MODULE_8__["DrawWallInput"] }
];


/***/ }),

/***/ "./src/app/svg/common/act/mouse/SvgMoveBack.ts":
/*!*****************************************************!*\
  !*** ./src/app/svg/common/act/mouse/SvgMoveBack.ts ***!
  \*****************************************************/
/*! exports provided: SvgMoveBack */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SvgMoveBack", function() { return SvgMoveBack; });
/* harmony import */ var _EventAbstract__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EventAbstract */ "./src/app/svg/common/act/mouse/EventAbstract.ts");
/* harmony import */ var _services_mouse_event_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../services/mouse-event.service */ "./src/app/svg/common/services/mouse-event.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../services/calculators.service */ "./src/app/services/calculators.service.ts");







class SvgMoveBack extends _EventAbstract__WEBPACK_IMPORTED_MODULE_0__["EventAbstract"] {
    constructor(mouseEventService, dataService, domUpdateService, DUService, popService, calService) {
        super(mouseEventService);
        this.mouseEventService = mouseEventService;
        this.dataService = dataService;
        this.domUpdateService = domUpdateService;
        this.DUService = DUService;
        this.popService = popService;
        this.calService = calService;
        this.dataService.cache.mode.drawWall.subscribe(() => {
            this.dataService.cache.common.mode = 'normal';
            // this.cleanData()
        });
        // console.log('%cSvgMoveBack', "color:#ff0000")
    }
    isCondition() {
        if (this.dataService.cache.common.mode == 'normal' &&
            this.dataService.cache.common.choose != null &&
            (this.dataService.cache.common.choose.type == 'floorplan' || this.dataService.cache.common.choose.type == 'room'))
            return true;
        else
            return false;
    }
    mouseDown(e) {
        this.popService.inputBoxs.emit([]);
        this.popService.buttons.emit(null);
    }
    mouseMove(e) {
        if (this.dataService.cache.common.firstPos != null && this.isMouseMove) {
            switch (this.dataService.floorplan.mode) {
                case 'back':
                    if (this.dataService.cache.common.choose.type == 'room' && this.dataService.cache.common.chooseOtherMsg == 'text') {
                        this.roomTextMove(e);
                    }
                    else {
                        this.backMove(e);
                    }
                    break;
                case 'backImg':
                    this.backImgMove(e);
                    break;
            }
        }
        else if (this.dataService.floorplan.mode == 'backImg') {
            this.dataService.cache.common.firstPos = {
                x: e.offsetX,
                y: e.offsetY
            };
        }
    }
    mouseUp() {
        this.dataService.floorplan.mode = 'back';
        this.dataService.cache.common.firstPos = null;
        this.dataService.cache.common.blockON = false;
        this.domUpdateService.svgBlock.emit();
    }
    /** 格子移动 */
    backMove(e) {
        let plusPos = { x: e.offsetX - this.dataService.cache.common.firstPos.x, y: e.offsetY - this.dataService.cache.common.firstPos.y };
        let mulit = this.dataService.cmd.floorplan.zoom;
        this.dataService.cmd.floorplan.top += plusPos.y * mulit;
        this.dataService.cmd.floorplan.left += plusPos.x * mulit;
        this.domUpdateService.mainSvg.emit();
        this.dataService.cache.common.firstPos = { x: e.offsetX, y: e.offsetY };
    }
    /** 空间文字移动 */
    roomTextMove(e) {
        let plusPos = { x: e.offsetX - this.dataService.cache.common.firstPos.x, y: e.offsetY - this.dataService.cache.common.firstPos.y };
        // let mulit = this.dataService.cmd.floorplan.zoom
        let room = this.dataService.cache.common.choose;
        room.isAutoMoveAreaPos = false;
        if (room.displayPos) {
            room.displayPos.y += plusPos.y;
            room.displayPos.x += plusPos.x;
        }
        this.domUpdateService.svgRoom.emit();
        this.dataService.cache.common.firstPos = { x: e.offsetX, y: e.offsetY };
    }
    /** 背景图移动 */
    backImgMove(e) {
        let plusPos = { x: e.offsetX - this.dataService.cache.common.firstPos.x, y: e.offsetY - this.dataService.cache.common.firstPos.y };
        let mulit = this.dataService.cmd.floorplan.zoom;
        this.dataService.floorplan.backImg.top += plusPos.y;
        this.dataService.floorplan.backImg.left += plusPos.x;
        this.domUpdateService.svgBack.emit();
        this.dataService.cache.common.firstPos = { x: e.offsetX, y: e.offsetY };
    }
}
SvgMoveBack.ctorParameters = () => [
    { type: _services_mouse_event_service__WEBPACK_IMPORTED_MODULE_1__["MouseEventService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__["JdesignDataService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_3__["DomUpdateService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_4__["JdesignUtil2dService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_5__["PopDivService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_6__["CalculatorsService"] }
];


/***/ }),

/***/ "./src/app/svg/common/act/mouse/SvgMoveCWin.ts":
/*!*****************************************************!*\
  !*** ./src/app/svg/common/act/mouse/SvgMoveCWin.ts ***!
  \*****************************************************/
/*! exports provided: SvgMoveCWin */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SvgMoveCWin", function() { return SvgMoveCWin; });
/* harmony import */ var _EventAbstract__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EventAbstract */ "./src/app/svg/common/act/mouse/EventAbstract.ts");
/* harmony import */ var _services_mouse_event_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../services/mouse-event.service */ "./src/app/svg/common/services/mouse-event.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../services/calculators.service */ "./src/app/services/calculators.service.ts");







class SvgMoveCWin extends _EventAbstract__WEBPACK_IMPORTED_MODULE_0__["EventAbstract"] {
    constructor(mouseEventService, dataService, domService, DUService, popService, calService) {
        super(mouseEventService);
        this.mouseEventService = mouseEventService;
        this.dataService = dataService;
        this.domService = domService;
        this.DUService = DUService;
        this.popService = popService;
        this.calService = calService;
        this._obj = null;
        this._pos = null;
        this._distancePos = { x: 0, y: 0 };
        this._absortMsg = null;
        this._cachePos = null;
        this.dataService.cache.cornerWin.move = (obj, pos) => {
            this.moveObj(obj, pos);
            obj.act3D.move();
            this.domService.svgCornerWin.emit();
        };
        this.dataService.cache.cornerWin.moveEnd = (obj) => {
            this.dataService.cache.floorplan.createAndMove = false;
            this.dataService.cache.common.blockON = false;
            this.dataService.cache.common.firstPos = null;
            switch (obj.mode) {
                case "move":
                    this.dataService.cache.cornerWin.hideAllCircle = false;
                    break;
            }
            // obj.act3D.end()
            this.strongUpdate();
            this.calService.undoRedo.save();
            obj.strongUpdate3D();
            this.cleanData();
        };
    }
    mouseDown() {
    }
    mouseMove(e) {
        this._obj = this.dataService.cache.common.choose;
        /** 已经获取了第一次点击坐标误差,可以移动了,(初始化时不需要获取误差坐标) */
        if (this.dataService.cache.common.firstPos == null) {
            this._pos = {
                x: e.offsetX + this._distancePos.x,
                y: e.offsetY + this._distancePos.y
            };
            switch (this._obj.mode) {
                case "move":
                    this.moveObj(this._obj, this._pos);
                    this._obj.act3D.move();
                    break;
                case "leftMove":
                    this.moveLeftSide(this._obj, this._pos);
                    this._obj.act3D.change();
                    break;
                case "downMove":
                    this.moveDownSide(this._obj, this._pos);
                    this._obj.act3D.change();
                    break;
                case "rightMove":
                    this.moveRightSide(this._obj, this._pos);
                    this._obj.act3D.change();
                    break;
                case "upMove":
                    this.moveUpSide(this._obj, this._pos);
                    this._obj.act3D.change();
                    break;
            }
        }
        /** 平常移动第一次点击,需要获取点击的坐标误差 */
        else {
            this._distancePos = {
                x: this._obj.pos.x - e.offsetX,
                y: this._obj.pos.y - e.offsetY
            };
            this.dataService.cache.common.firstPos = null;
        }
        this.CWUpdate();
    }
    mouseUp() {
        this._obj = this.dataService.cache.common.choose;
        this.dataService.cache.cornerWin.moveEnd(this._obj);
    }
    isCondition() {
        return this.dataService.cache.common.mode == 'normal' && this.dataService.cache.common.choose != null && this.dataService.cache.common.choose.type == "cornerWin";
    }
    /** 强制更新 */
    strongUpdate() {
        this.domService.svgBlock.emit();
        this.domService.svgPoint.emit();
        this.domService.svgCowall.emit();
        this.domService.svgWall.emit();
        this.domService.svgRoom.emit();
        this.domService.svgCornerWin.emit();
    }
    /** 转角飘窗更新 */
    CWUpdate() {
        this.domService.svgCornerWin.emit();
    }
    /** 数据初始化 */
    cleanData() {
        this._pos = null;
        this._distancePos = { x: 0, y: 0 };
        this._cachePos = null;
        this._obj = undefined;
    }
    /** 移动状态 */
    moveObj(obj, pos) {
        this.dataService.cache.cornerWin.hideAllCircle = true;
        let msg = this.getAbsorb(pos);
        if (msg.point != null) {
            this.calService.cornerWin.unionPoint(obj, msg.point);
        }
        else {
            this.calService.cornerWin.disconnectPoint(obj);
            obj.pos = msg.pos;
        }
    }
    /** 移动边 */
    moveSide(obj, pos, radian, cb) {
        if (this._cachePos == null) {
            this._cachePos = pos;
            return false;
        }
        let distance = this.calService.pos.getMoveSideDistance(this._cachePos, pos, radian);
        cb(obj, distance);
        this._cachePos = pos;
        return true;
    }
    /** 移动左边 */
    moveLeftSide(obj, pos) {
        return this.moveSide(obj, pos, obj.LRadian, (obj, distance) => {
            obj.LDepth += distance;
        });
    }
    /** 移动下边 */
    moveDownSide(obj, pos) {
        return this.moveSide(obj, pos, obj.DRadian, (obj, distance) => {
            obj.DDepth += distance;
        });
    }
    /** 移动右边 */
    moveRightSide(obj, pos) {
        return this.moveSide(obj, pos, obj.DRadian - (Math.PI / 2), (obj, distance) => {
            obj.DWidth += distance;
        });
    }
    /** 移动左边 */
    moveUpSide(obj, pos) {
        return this.moveSide(obj, pos, obj.LRadian + (Math.PI / 2), (obj, distance) => {
            obj.LWidth += distance;
        });
    }
    /** 吸附 */
    getAbsorb(pos) {
        let distance = this.dataService.cmd.floorplan.absorb.minDistance * 2;
        let pointArr = this.calService.point.getPointsByOnlyNumWalls(2);
        let pointsMsg = this.calService.transData.getPointPosArr(pointArr);
        let absorbMsg = this.calService.absorb.posAndPointPosArr(pos, distance, pointsMsg);
        return {
            pos: absorbMsg ? absorbMsg.point.pos : pos,
            point: absorbMsg ? absorbMsg.point : null
        };
    }
}
SvgMoveCWin.ctorParameters = () => [
    { type: _services_mouse_event_service__WEBPACK_IMPORTED_MODULE_1__["MouseEventService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__["JdesignDataService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_3__["DomUpdateService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_4__["JdesignUtil2dService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_5__["PopDivService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_6__["CalculatorsService"] }
];


/***/ }),

/***/ "./src/app/svg/common/act/mouse/SvgMoveDW.ts":
/*!***************************************************!*\
  !*** ./src/app/svg/common/act/mouse/SvgMoveDW.ts ***!
  \***************************************************/
/*! exports provided: SvgMoveDW */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SvgMoveDW", function() { return SvgMoveDW; });
/* harmony import */ var _EventAbstract__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EventAbstract */ "./src/app/svg/common/act/mouse/EventAbstract.ts");
/* harmony import */ var _services_mouse_event_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../services/mouse-event.service */ "./src/app/svg/common/services/mouse-event.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _absorb_DWAbsorb__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../absorb/DWAbsorb */ "./src/app/svg/common/act/absorb/DWAbsorb.ts");








class SvgMoveDW extends _EventAbstract__WEBPACK_IMPORTED_MODULE_0__["EventAbstract"] {
    constructor(mouseEventService, dataService, domService, DUService, popService, calService, dwAbsorb) {
        super(mouseEventService);
        this.mouseEventService = mouseEventService;
        this.dataService = dataService;
        this.domService = domService;
        this.DUService = DUService;
        this.popService = popService;
        this.calService = calService;
        this.dwAbsorb = dwAbsorb;
        this._pos = null;
        this._distancePos = { x: 0, y: 0 };
        this._cachePos = undefined;
        this.dataService.cache.doorWin.moveEnd = (obj) => {
            this.dataService.cache.floorplan.createAndMove = false;
            this.dataService.cache.common.blockON = false;
            this.dataService.cache.common.firstPos = null;
            let wall = obj.getwall();
            obj.act3D.end();
            this.strongUpdate();
            this.calService.undoRedo.save();
            this.cleanData();
            this.setInputs(obj);
        };
        this.dataService.cache.doorWin.move = (obj, pos) => {
            /** 如果有坐标 */
            if (pos != undefined) {
                let absorbMsg = undefined;
                if (this.dataService.cache.common.isAbosrb)
                    absorbMsg = this.dwAbsorb.getAbsorb(pos, obj.size.height);
                /** 没有吸附 */
                if (absorbMsg == undefined) {
                    obj.pos = pos;
                    obj.type == 'door' ? this.calService.door.delWall(obj) :
                        this.calService.win.delWall(obj);
                }
                /** 吸附 */
                else {
                    /** 直墙 */
                    if (absorbMsg.wall.arcDistance == 0) {
                        obj.pos = absorbMsg.pos;
                        obj.type == 'door' ?
                            this.calService.door.unionWall(obj, absorbMsg.wall) :
                            this.calService.win.unionWall(obj, absorbMsg.wall);
                    }
                    /** 弧墙 */
                    else {
                        obj.pos = absorbMsg.pos;
                        obj.type == 'door' ?
                            this.calService.door.unionWall(obj, absorbMsg.wall) :
                            this.calService.win.unionWall(obj, absorbMsg.wall);
                        obj.radian = absorbMsg.radian + (Math.PI / 2);
                    }
                }
            }
            else {
                if (obj.wallID != undefined) {
                    pos = obj.getPosByWall();
                    obj.pos = pos;
                }
            }
            this.setInputs(obj);
            this.DWUpdate();
            obj.act3D.move();
        };
    }
    mouseUp(e) {
        let obj = this.dataService.cache.common.choose;
        if (this.isMouseMove || this.dataService.cache.floorplan.createAndMove) {
            this.dataService.cache.doorWin.moveEnd(obj);
            this.dataService.cache.common.choose = obj;
        }
        else {
            this.dataService.cache.floorplan.createAndMove = false;
            this.dataService.cache.common.blockON = false;
            this.dataService.cache.common.firstPos = null;
            this.strongUpdate();
            this.cleanData();
            this.setInputs(obj);
        }
    }
    mouseDown(e) {
    }
    mouseMove(e) {
        let obj = this.dataService.cache.common.choose;
        /** 已经获取了第一次点击坐标误差,可以移动了,(初始化时不需要获取误差坐标) */
        if (this.dataService.cache.common.firstPos == null) {
            this._pos = {
                x: e.offsetX + this._distancePos.x,
                y: e.offsetY + this._distancePos.y
            };
            this.moveAction(obj, this._pos);
            // this.dataService.cache.doorWin.move(obj, this._pos)
        }
        /** 平常移动第一次点击,需要获取点击的坐标误差 */
        else {
            this._distancePos = {
                x: obj.pos.x - e.offsetX,
                y: obj.pos.y - e.offsetY
            };
            this.dataService.cache.common.firstPos = null;
        }
    }
    isCondition() {
        return this.dataService.cache.common.mode == 'normal' && this.dataService.cache.common.choose != null && (this.dataService.cache.common.choose.type == "door" || this.dataService.cache.common.choose.type == "win");
    }
    /** 强制更新 */
    strongUpdate() {
        this.domService.svgBlock.emit();
        this.domService.svgPoint.emit();
        this.domService.svgCowall.emit();
        this.domService.svgWall.emit();
        this.domService.svgRoom.emit();
    }
    /** 门窗更新 */
    DWUpdate() {
        this.domService.svgDoor.emit();
        this.domService.svgWin.emit();
    }
    /** 数据初始化 */
    cleanData() {
        this._pos = null;
        this._cachePos = undefined;
        this._distancePos = { x: 0, y: 0 };
    }
    moveAction(obj, pos) {
        if (this._cachePos == null) {
            this._cachePos = pos;
            return false;
        }
        let distance = 0;
        switch (obj.mode) {
            case "leftMove":
                distance = this.calService.pos.getMoveSideDistance(this._cachePos, pos, obj.radian);
                obj.size.width -= distance;
                obj.pos = this.DUService.pos.getRayPos(obj.pos, obj.radian, distance / 2);
                this.dataService.cache.doorWin.move(obj, obj.pos);
                break;
            case "rightMove":
                distance = this.calService.pos.getMoveSideDistance(this._cachePos, pos, obj.radian);
                obj.size.width += distance;
                obj.pos = this.DUService.pos.getRayPos(obj.pos, obj.radian, distance / 2);
                this.dataService.cache.doorWin.move(obj, obj.pos);
                break;
            default:
                this.dataService.cache.doorWin.move(obj, this._pos);
                break;
        }
        this._cachePos = pos;
    }
    /** 设置输入 */
    setInputs(obj) {
        /** 如果在three层不显示 */
        if ((this.dataService.cache.common.choose && this.dataService.cache.common.choose.id != obj.id) || this.dataService.cache.thumbnail.three.zIndex < this.dataService.cache.thumbnail.svg.zIndex) {
            this.popService.inputBoxs.emit(null);
            return false;
        }
        /** 如果对象没又墙不显示 */
        if (obj != null && obj.wallID != null) {
            this.setButtons(obj);
            let datas = [];
            for (let i = 0; i < this.dataService.cache.doorWin.labelData.length; i++) {
                let data = {
                    pos: this.dataService.cache.doorWin.labelData[i].pos,
                    index: 15,
                    value: this.dataService.cache.doorWin.labelData[i].text,
                    func: (params) => {
                    }
                };
                datas.push(data);
            }
            /** 重构方法====================== */
            /** 修改尺寸 */
            if (datas.length > 0) {
                datas[0].func = (params) => {
                    this.fixWidth(obj, params);
                    this.calService.undoRedo.save();
                };
                datas[1].func = (params) => {
                    this.rightMove(obj, this.dataService.cache.doorWin.labelData[1].text, params);
                    this.calService.undoRedo.save();
                };
                datas[2].func = (params) => {
                    this.leftMove(obj, this.dataService.cache.doorWin.labelData[2].text, params);
                    this.calService.undoRedo.save();
                };
            }
            this.popService.inputBoxsCache = datas;
            this.popService.setInputBoxs();
        }
        else {
            this.popService.buttons.emit(null);
            this.popService.inputBoxs.emit(null);
        }
        return true;
    }
    /** 修改尺寸 */
    fixWidth(obj, width) {
        let pixelWidth = this.dataService.cmd.getDefaultPixel(width);
        obj.size.width = pixelWidth;
        // this.strongUpdate()
        this.DWUpdate();
        this.dataService.cache.doorWin.move(obj, obj.pos);
        this.setInputs(obj);
    }
    /** 左移动 */
    leftMove(obj, firstDistance, lastDistance) {
        let distance = this.dataService.cmd.getDefaultPixel(lastDistance - firstDistance);
        obj.pos = this.DUService.pos.getRayPos(obj.pos, obj.radian, distance);
        // this.strongUpdate()
        this.DWUpdate();
        this.dataService.cache.doorWin.move(obj, obj.pos);
        this.setInputs(obj);
    }
    /** 右移动 */
    rightMove(obj, firstDistance, lastDistance) {
        let distance = this.dataService.cmd.getDefaultPixel(lastDistance - firstDistance);
        obj.pos = this.DUService.pos.getRayPos(obj.pos, obj.radian + Math.PI, distance);
        // this.strongUpdate()
        this.DWUpdate();
        this.dataService.cache.doorWin.move(obj, obj.pos);
        this.setInputs(obj);
    }
    /** 设置按钮 */
    setButtons(obj) {
        if (this.dataService.cache.thumbnail.three.zIndex < this.dataService.cache.thumbnail.svg.zIndex) {
            this.popService.buttons.emit(null);
            return false;
        }
        let rayPos = this.DUService.pos.getRayPos(obj.pos, obj.radian + (Math.PI / 2), this.dataService.cmd.door.buttonHeight);
        let data = {
            outArea: {
                position: rayPos,
                rotate: (obj.radian + (Math.PI / 2)) * 180 / Math.PI,
                index: 15
            },
            content: [{
                    icon: "#icon-doorWinOut",
                    text: '翻转',
                    func: (params) => {
                        obj.out = !obj.out;
                        obj.strongUpdate3D();
                        this.DWUpdate();
                    }
                }, {
                    icon: "#icon-doorWinMirror",
                    text: '翻转',
                    func: (params) => {
                        obj.mirror = !obj.mirror;
                        obj.strongUpdate3D();
                        this.DWUpdate();
                    }
                }]
        };
        this.popService.buttonsCache = data;
        this.popService.setButtons();
        return true;
    }
}
SvgMoveDW.ctorParameters = () => [
    { type: _services_mouse_event_service__WEBPACK_IMPORTED_MODULE_1__["MouseEventService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__["JdesignDataService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_3__["DomUpdateService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_4__["JdesignUtil2dService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_5__["PopDivService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_6__["CalculatorsService"] },
    { type: _absorb_DWAbsorb__WEBPACK_IMPORTED_MODULE_7__["DWAbsorb"] }
];


/***/ }),

/***/ "./src/app/svg/common/act/mouse/SvgMoveGeometry.ts":
/*!*********************************************************!*\
  !*** ./src/app/svg/common/act/mouse/SvgMoveGeometry.ts ***!
  \*********************************************************/
/*! exports provided: SvgMoveGeometry */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SvgMoveGeometry", function() { return SvgMoveGeometry; });
/* harmony import */ var _EventAbstract__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EventAbstract */ "./src/app/svg/common/act/mouse/EventAbstract.ts");
/* harmony import */ var _services_mouse_event_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../services/mouse-event.service */ "./src/app/svg/common/services/mouse-event.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../services/calculators.service */ "./src/app/services/calculators.service.ts");







class SvgMoveGeometry extends _EventAbstract__WEBPACK_IMPORTED_MODULE_0__["EventAbstract"] {
    constructor(mouseEventService, dataService, domService, DUService, popService, calService) {
        super(mouseEventService);
        this.mouseEventService = mouseEventService;
        this.dataService = dataService;
        this.domService = domService;
        this.DUService = DUService;
        this.popService = popService;
        this.calService = calService;
        this._pos = null;
        this._distancePos = { x: 0, y: 0 };
        this._radian = null;
        this.setMove();
        this.setMoveEnd();
    }
    /** 设置移动 */
    setMove() {
        let rotateFunc = (obj, radian) => {
            obj.radian = radian;
            obj.act3D.move();
            this.geometryUpdate();
        };
        let moveFunc = (obj, pos) => {
            switch (obj.mode) {
                case "move":
                    this.moveAct(obj, pos);
                    break;
                case "rotate":
                    this.rotateAct(obj, pos);
                    break;
            }
            // console.log(obj.pos)
            obj.act3D.move();
            this.geometryUpdate();
        };
        this.dataService.cache.furniture.rotate = (obj, radian) => {
            rotateFunc(obj, radian);
        };
        this.dataService.cache.build.rotate = (obj, radian) => {
            rotateFunc(obj, radian);
        };
        this.dataService.cache.furniture.move = (obj, pos) => {
            moveFunc(obj, pos);
        };
        this.dataService.cache.build.move = (obj, pos) => {
            moveFunc(obj, pos);
        };
    }
    setMoveEnd() {
        let moveEndFunc = (obj) => {
            this.dataService.cache.floorplan.createAndMove = false;
            this.dataService.cache.common.blockON = false;
            this.dataService.cache.common.firstPos = null;
            obj.act3D.end();
            this.strongUpdate();
            this.calService.undoRedo.save();
            this.cleanData();
        };
        this.dataService.cache.furniture.moveEnd = (obj) => {
            moveEndFunc(obj);
        };
        this.dataService.cache.build.moveEnd = (obj) => {
            moveEndFunc(obj);
        };
    }
    mouseDown() { }
    mouseUp(e) {
        let obj = this.dataService.cache.common.choose;
        switch (obj.type) {
            case "furniture":
                this.dataService.cache.furniture.moveEnd(obj);
                break;
            case "build":
                this.dataService.cache.build.moveEnd(obj);
                break;
        }
    }
    mouseMove(e) {
        let obj = this.dataService.cache.common.choose;
        let pos = { x: e.offsetX, y: e.offsetY };
        switch (obj.type) {
            case "furniture":
                this.dataService.cache.furniture.move(obj, pos);
                break;
            case "build":
                this.dataService.cache.build.move(obj, pos);
                break;
        }
    }
    isCondition() {
        return this.dataService.cache.common.mode == 'normal' && this.dataService.cache.common.choose && (this.dataService.cache.common.choose.type == "furniture" || this.dataService.cache.common.choose.type == "build");
    }
    /** 吸附 */
    getAbsorb(obj, pos) {
        let distance = obj.getPixR();
        let walls = this.calService.transData.getUnArcWalls();
        let wallsMsg = this.calService.transData.getWallOutLines(walls);
        let msg = this.calService.absorb.posAndWallOutLines(pos, distance, wallsMsg);
        if (msg == null)
            return null;
        return {
            pos: msg.pos,
            wall: msg.wall,
            isOutLine: msg.isOutLine
        };
    }
    /** 强制更新 */
    strongUpdate() {
        this.domService.svgBlock.emit();
        this.domService.svgPoint.emit();
        this.domService.svgCowall.emit();
        this.domService.svgWall.emit();
        this.domService.svgRoom.emit();
    }
    /** 数据初始化 */
    cleanData() {
        this._pos = null;
        this._distancePos = { x: 0, y: 0 };
        this._radian = null;
    }
    /** 家具更新 */
    geometryUpdate() {
        this.domService.svgGeometry.emit();
    }
    /** 移动 */
    moveAct(obj, pos) {
        /** 一般是初始化的时候 */
        if (this.dataService.cache.common.firstPos == null) {
            this._pos = {
                x: pos.x + this._distancePos.x,
                y: pos.y + this._distancePos.y
            };
            let absorbMsg = undefined;
            if (this.dataService.cache.common.isAbosrb)
                absorbMsg = this.getAbsorb(obj, this._pos);
            /** 不吸附 */
            if (absorbMsg == null) {
                obj.pos = this._pos;
            }
            else {
                let posArr = absorbMsg.wall.getPosArr();
                let newPos = this.DUService.pos.getRightAngleIntersect(absorbMsg.pos, posArr[0], posArr[1]);
                obj.pos = this.calService.geometry.getPosByWall(obj, absorbMsg.wall, newPos, absorbMsg.isOutLine);
                this.calService.geometry.unionWall(obj, absorbMsg.wall, absorbMsg.isOutLine);
            }
        }
        /** 平常移动时 */
        else {
            this._distancePos = {
                x: obj.pos.x - pos.x,
                y: obj.pos.y - pos.y
            };
            this.dataService.cache.common.firstPos = null;
        }
    }
    /** 旋转 */
    rotateAct(obj, pos) {
        if (this.dataService.cache.common.firstPos != null) {
            this._radian = this.DUService.pos.getRadian(obj.pos, { x: pos.x, y: pos.y });
            this.dataService.cache.common.firstPos = null;
        }
        let radian = this.DUService.pos.getRadian(obj.pos, { x: pos.x, y: pos.y });
        obj.radian += radian - this._radian;
        this._radian = radian;
    }
}
SvgMoveGeometry.ctorParameters = () => [
    { type: _services_mouse_event_service__WEBPACK_IMPORTED_MODULE_1__["MouseEventService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__["JdesignDataService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_3__["DomUpdateService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_4__["JdesignUtil2dService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_5__["PopDivService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_6__["CalculatorsService"] }
];


/***/ }),

/***/ "./src/app/svg/common/act/mouse/SvgMoveLUWin.ts":
/*!******************************************************!*\
  !*** ./src/app/svg/common/act/mouse/SvgMoveLUWin.ts ***!
  \******************************************************/
/*! exports provided: SvgMoveLUWin */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SvgMoveLUWin", function() { return SvgMoveLUWin; });
/* harmony import */ var _EventAbstract__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EventAbstract */ "./src/app/svg/common/act/mouse/EventAbstract.ts");
/* harmony import */ var _services_mouse_event_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../services/mouse-event.service */ "./src/app/svg/common/services/mouse-event.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../services/calculators.service */ "./src/app/services/calculators.service.ts");







class SvgMoveLUWin extends _EventAbstract__WEBPACK_IMPORTED_MODULE_0__["EventAbstract"] {
    constructor(mouseEventService, dataService, domService, DUService, popService, calService) {
        super(mouseEventService);
        this.mouseEventService = mouseEventService;
        this.dataService = dataService;
        this.domService = domService;
        this.DUService = DUService;
        this.popService = popService;
        this.calService = calService;
        this._distancePos = { x: 0, y: 0 };
        this._pos = null;
    }
    isCondition() {
        return this.dataService.cache.common.mode == 'normal' && this.dataService.cache.common.choose != null && (this.dataService.cache.common.choose.type == "LWin" || this.dataService.cache.common.choose.type == "UWin");
    }
    mouseMove(e) {
        let originPos = { x: e.offsetX, y: e.offsetY };
        let obj = this.dataService.cache.common.choose;
        if (this.dataService.cache.common.firstPos == null) {
            this._pos = {
                x: originPos.x + this._distancePos.x,
                y: originPos.y + this._distancePos.y
            };
            switch (obj.type) {
                case "LWin":
                    this.moveLWin(obj, this._pos, originPos);
                    break;
                case "UWin":
                    this.moveUWin(obj, this._pos, originPos);
                    break;
            }
            this.domService.allSvg.emit();
        }
        /** 平常移动第一次点击,需要获取点击的坐标误差 */
        else {
            this._distancePos = {
                x: obj.pos.x - originPos.x,
                y: obj.pos.y - originPos.y
            };
            this.dataService.cache.common.firstPos = null;
        }
    }
    mouseDown(e) { }
    mouseUp(e) {
        this._pos = undefined;
        this._distancePos = { x: 0, y: 0 };
        this.dataService.cache.common.choose = this.dataService.cache.common.choose;
        this.dataService.cache.common.blockON = false;
        this.dataService.cache.floorplan.createAndMove = false;
        this.dataService.cache.common.blockON = false;
        this.dataService.cache.common.firstPos = null;
        this.domService.allSvg.emit();
        this.calService.undoRedo.save();
    }
    /** L窗移动 */
    moveLWin(obj, pos, originPos) {
        switch (obj.mode) {
            default:
                let msg = this.getLWinAbsorb(obj, pos);
                if (msg.point != null) {
                    this.calService.LWin.unionPoint(obj, msg.point);
                }
                else {
                    this.calService.LWin.disconnectPoint(obj);
                    obj.pos = msg.pos;
                }
                break;
            case "leftMove":
                this.moveLWinLeft(obj, originPos);
                break;
            case "rightMove":
                this.moveLWinRight(obj, originPos);
                break;
        }
    }
    /* 移动L型窗左边 */
    moveLWinLeft(obj, pos) {
        let walls = this.calService.LWin.getLeftAndRightWall(obj);
        let distance = this.DUService.pos.getTwoPosRadianDistance(pos, obj.pos, walls[0].getRadian());
        obj.j2d.params['leftWidth'].formula = distance - (walls[1].thickness / 2);
    }
    /* 移动L型窗右边 */
    moveLWinRight(obj, pos) {
        let walls = this.calService.LWin.getLeftAndRightWall(obj);
        let distance = this.DUService.pos.getDistance(pos, obj.pos);
        obj.j2d.params['rightWidth'].formula = distance - (walls[0].thickness / 2);
    }
    /* U窗移动 */
    moveUWin(obj, pos, originPos) {
        switch (obj.mode) {
            default:
                let msg = this.getUWinAbsorb(obj, pos);
                if (msg.wall) {
                    this.calService.UWin.unionWall(obj, msg.wall);
                }
                else {
                    this.calService.UWin.disconnectWall(obj);
                    obj.pos = pos;
                }
                break;
            case "leftMove":
                this.moveUWinLeft(obj, originPos);
                break;
            case "rightMove":
                this.moveUWinRight(obj, originPos);
                break;
        }
    }
    /* 移动U型窗左边 */
    moveUWinLeft(obj, pos) {
        let wall = obj.getCenterWall();
        let leftWall = obj.getLeftWall();
        let distance = this.DUService.pos.getTwoPosRadianDistance(pos, obj.pos, leftWall.getRadian());
        obj.j2d.params['leftWidth'].formula = distance - (wall.thickness / 2);
    }
    /* 移动U型窗右边 */
    moveUWinRight(obj, pos) {
        let wall = obj.getCenterWall();
        let rightWall = obj.getRightWall();
        let otherPos = wall.getPosArr()[1];
        let distance = this.DUService.pos.getTwoPosRadianDistance(pos, otherPos, rightWall.getRadian());
        obj.j2d.params['rightWidth'].formula = distance - (wall.thickness / 2);
    }
    /** L窗吸附 */
    getLWinAbsorb(obj, pos) {
        let distance = this.dataService.cmd.floorplan.absorb.minDistance * 2;
        let pointArr = this.calService.point.getPointsByOnlyNumWalls(2);
        let pointsMsg = this.calService.transData.getPointPosArr(pointArr);
        let absorbMsg = this.calService.absorb.posAndPointPosArr(pos, distance, pointsMsg);
        return {
            pos: absorbMsg ? absorbMsg.point.pos : pos,
            point: absorbMsg ? absorbMsg.point : undefined
        };
    }
    /* U型窗吸附 */
    getUWinAbsorb(obj, pos) {
        let rayPos = this.DUService.pos.getRayPos(pos, obj.centerRadian, obj.j2d.params["centerWidth"].formula);
        let line = [pos, rayPos];
        let distance = this.dataService.cmd.floorplan.absorb.minDistance * 2;
        let walls = this.calService.UWin.getUWinAbsorbWalls();
        let wallsMsg = this.calService.transData.getWallCenterLines(walls);
        let absorbMsg = this.calService.absorb.lineAndWalls(line, distance, wallsMsg);
        return {
            wall: absorbMsg ? absorbMsg.wall : undefined,
            distance: absorbMsg ? absorbMsg.distance : undefined
        };
    }
}
SvgMoveLUWin.ctorParameters = () => [
    { type: _services_mouse_event_service__WEBPACK_IMPORTED_MODULE_1__["MouseEventService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__["JdesignDataService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_3__["DomUpdateService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_4__["JdesignUtil2dService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_5__["PopDivService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_6__["CalculatorsService"] }
];


/***/ }),

/***/ "./src/app/svg/common/act/mouse/SvgMovePoint.ts":
/*!******************************************************!*\
  !*** ./src/app/svg/common/act/mouse/SvgMovePoint.ts ***!
  \******************************************************/
/*! exports provided: SvgMovePoint */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SvgMovePoint", function() { return SvgMovePoint; });
/* harmony import */ var _EventAbstract__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EventAbstract */ "./src/app/svg/common/act/mouse/EventAbstract.ts");
/* harmony import */ var _services_mouse_event_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../services/mouse-event.service */ "./src/app/svg/common/services/mouse-event.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _input_MovePointInput__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../input/MovePointInput */ "./src/app/svg/common/act/input/MovePointInput.ts");








class SvgMovePoint extends _EventAbstract__WEBPACK_IMPORTED_MODULE_0__["EventAbstract"] {
    constructor(mouseEventService, dataService, calService, domService, popService, DUService) {
        super(mouseEventService);
        this.mouseEventService = mouseEventService;
        this.dataService = dataService;
        this.calService = calService;
        this.domService = domService;
        this.popService = popService;
        this.DUService = DUService;
        this._absorbMsg = undefined;
        this._mouseMoveOn = false;
        this._pointInput = new _input_MovePointInput__WEBPACK_IMPORTED_MODULE_7__["MovePointInput"](this.dataService, this.calService, this.DUService);
    }
    isCondition() {
        return this.dataService.cache.common.mode == 'normal' && this.dataService.cache.common.choose && this.dataService.cache.common.choose.type == "point";
    }
    mouseDown(e) {
    }
    mouseMove(e) {
        if (this.isOverTwoWalls(this.dataService.cache.common.choose)) {
            let data = {
                text: "点连接墙>2,不能移动",
                time: 3
            };
            this.popService.cueInfo.emit(data);
        }
        else {
            if (this.dataService.cache.common.firstPos && this.isMouseMove) {
                this._mouseMoveOn = true;
                let obj = this.dataService.cache.common.choose;
                let pos = { x: e.offsetX, y: e.offsetY };
                try {
                    this.moveAct(obj, pos);
                }
                catch (e) {
                    console.log(e);
                    this.errorCmd();
                    this.dataService.cache.common.choose = this.dataService.floorplan;
                    return false;
                }
            }
        }
    }
    getAbsorb(obj, pos) {
        let msg = { pos: { x: pos.x, y: pos.y } };
        let distance = this.dataService.cmd.floorplan.absorb.minDistance;
        /** 点吸附 */
        let points = this.dataService.doPoints().arr(obj);
        let pointsMsg = this.calService.transData.getPointPosArr(points);
        let pointAbsorbMsg = this.calService.absorb.posAndPointPosArr(pos, distance, pointsMsg);
        if (pointAbsorbMsg) {
            msg.obj = pointAbsorbMsg.point;
            msg.pos = pointAbsorbMsg.pos;
            return msg;
        }
        /** 点垂直吸附 */
        let pointsVerticalMsg = this.calService.transData.getPointVerticalLines(points);
        let pointVerticalAbsorbMsg = this.DUService.absorb.pointAndLines(pos, pointsVerticalMsg.lines, true, distance);
        if (pointVerticalAbsorbMsg != undefined) {
            msg.pos.x = pointsVerticalMsg.points[pointVerticalAbsorbMsg.index].pos.x;
            msg.vPos = pointsVerticalMsg.points[pointVerticalAbsorbMsg.index].pos;
        }
        /** 点水平吸附 */
        let pointHorizonMsg = this.calService.transData.getPointHorizontalLines(points);
        let pointHorizonAbsorbMsg = this.DUService.absorb.pointAndLines(pos, pointHorizonMsg.lines, true, distance);
        if (pointHorizonAbsorbMsg != undefined) {
            msg.pos.y = pointHorizonMsg.points[pointHorizonAbsorbMsg.index].pos.y;
            msg.hPos = pointHorizonMsg.points[pointHorizonAbsorbMsg.index].pos;
        }
        /** 墙吸附 */
        let walls = obj.getWallArr();
        walls = this.dataService.doWalls().arr(...walls);
        walls = this.calService.transData.getUnArcWalls(walls);
        let wallsMsg = this.calService.transData.getWallCenterLines(walls);
        let wallMsg = this.calService.absorb.posAndWalls(msg.pos, distance, false, wallsMsg);
        if (wallMsg) {
            msg.pos = wallMsg.pos;
            msg.obj = wallMsg.wall;
        }
        /** 没有返回undefined */
        return msg;
    }
    /* 移动的动作 */
    moveAct(obj, pos) {
        this._absorbMsg = undefined;
        if (this.dataService.cache.common.isAbosrb)
            this._absorbMsg = this.getAbsorb(obj, pos);
        /** 有吸附 */
        if (this._absorbMsg && this._absorbMsg.obj) {
            obj.pos = this._absorbMsg.pos;
        }
        /** 没吸附 */
        else {
            obj.pos = this._absorbMsg ? this._absorbMsg.pos : pos;
        }
        this.setAbsorbLine(this._absorbMsg);
        this.domService.allSvg.emit();
    }
    setAbsorbLine(absorbMsg) {
        let data = [];
        if (!absorbMsg) {
            this.dataService.cache.absorbLines = [];
            this.domService.absorbLine.emit();
            return false;
        }
        if (absorbMsg.obj) {
            /** 点 */
            if (absorbMsg.obj.type == 'point') {
                data.push({
                    pos: absorbMsg.pos,
                    radius: this.dataService.cache.floorplan.multiple * 8,
                    mode: 'point'
                });
            }
            /** 墙 */
            else if (absorbMsg.obj.type == 'wall') {
                let wall = absorbMsg.obj;
                let radian = wall.getRadian();
                data.push({
                    pos: absorbMsg.pos,
                    radian: radian,
                    mode: 'line'
                });
            }
        }
        /** 垂直线 */
        if (absorbMsg.vPos) {
            data.push({
                pos: absorbMsg.vPos,
                radian: Math.PI / 2,
                mode: 'line'
            });
        }
        /** 水平线 */
        if (absorbMsg.hPos) {
            data.push({
                pos: absorbMsg.hPos,
                radian: 0,
                mode: 'line'
            });
        }
        this.dataService.cache.absorbLines = data;
        this.domService.absorbLine.emit();
    }
    setAbosrb() {
    }
    moveEnd(obj) {
        let walls = obj.getWallArr();
        if (this._absorbMsg) {
            /** 吸附 */
            if (this._absorbMsg.obj) {
                /** 点 */
                if (this._absorbMsg.obj.type == 'point') {
                    this.calService.point.transPoint(obj, this._absorbMsg.obj);
                }
                else if (this._absorbMsg.obj.type == 'wall') {
                    this.calService.wall.cut.cutByPoint(this._absorbMsg.obj, obj);
                }
            }
            this.calService.wall.cutRoomReady(walls);
            let msg = this.calService.wall.overlay.allOverlayAndAllCut(walls);
            walls = msg.collectWalls;
            this.calService.cowall.delNoUse();
            this.calService.createRoom.cutRoom(walls);
            this.calService.room.resetCowalls();
        }
    }
    dataInit() {
        this.dataService.cache.common.blockON = false;
        this.dataService.cache.common.firstPos = null;
        this.dataService.cache.absorbLines = [];
        this.domService.absorbLine.emit();
        this.dataService.cache.common.choose = this.dataService.floorplan;
        this._absorbMsg = undefined;
        this._mouseMoveOn = false;
    }
    mouseUp() {
        let obj = this.dataService.cache.common.choose;
        if (this._mouseMoveOn) {
            try {
                this.moveEnd(obj);
            }
            catch (e) {
                console.log(e);
                this.errorCmd();
                return false;
            }
            this.dataInit();
            this.domService.allSvg.emit();
            this.dataService.cache.wall.update3D.emit();
            this.dataService.cache.cowall.update3D.emit();
            this.calService.undoRedo.save();
        }
        else {
            this.dataInit();
            this.domService.allSvg.emit();
            this.setInput(obj);
        }
    }
    /** 是否有超过两面墙 */
    isOverTwoWalls(point) {
        let walls = point.getWallArr();
        if (walls.length > 2)
            return true;
        return false;
    }
    errorCmd() {
        this.calService.undoRedo.setPresent();
        this.dataInit();
        this.domService.allSvg.emit();
        this.dataService.cache.wall.update3D.emit();
        this.dataService.cache.cowall.update3D.emit();
    }
    /* 设置输入框 */
    setInput(obj) {
        let cbFunc = (distance, cowall) => {
            this.dataService.cache.common.isAbosrb = false;
            this.dataService.cache.common.choose = obj;
            this._absorbMsg = undefined;
            this._mouseMoveOn = true;
            let a = cowall.pointIDs[0] == obj.id;
            let radian = a ? cowall.getRadian() + Math.PI : cowall.getRadian();
            let movePos = this.DUService.pos.getRayPos(obj.pos, radian, distance);
            obj.pos = movePos;
            this.mouseUp();
            this.dataService.cache.common.isAbosrb = true;
            this.setInput(obj);
        };
        let datas = this._pointInput.getAllCowallInput(obj, cbFunc);
        this.popService.inputBoxsCache = datas;
        this.popService.setInputBoxs();
    }
}
SvgMovePoint.ctorParameters = () => [
    { type: _services_mouse_event_service__WEBPACK_IMPORTED_MODULE_1__["MouseEventService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__["JdesignDataService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_3__["CalculatorsService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_4__["DomUpdateService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_5__["PopDivService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_6__["JdesignUtil2dService"] }
];
class AbsorbType {
}


/***/ }),

/***/ "./src/app/svg/common/act/mouse/SvgMoveWall.ts":
/*!*****************************************************!*\
  !*** ./src/app/svg/common/act/mouse/SvgMoveWall.ts ***!
  \*****************************************************/
/*! exports provided: SvgMoveWall */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SvgMoveWall", function() { return SvgMoveWall; });
/* harmony import */ var _EventAbstract__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EventAbstract */ "./src/app/svg/common/act/mouse/EventAbstract.ts");
/* harmony import */ var _services_mouse_event_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../services/mouse-event.service */ "./src/app/svg/common/services/mouse-event.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _absorb_MoveWallAbsorb__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../absorb/MoveWallAbsorb */ "./src/app/svg/common/act/absorb/MoveWallAbsorb.ts");
/* harmony import */ var _input_MoveWallinput__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../input/MoveWallinput */ "./src/app/svg/common/act/input/MoveWallinput.ts");









class SvgMoveWall extends _EventAbstract__WEBPACK_IMPORTED_MODULE_0__["EventAbstract"] {
    constructor(mouseEventService, dataService, calService, domService, popService, DUService, wallAbsorb) {
        super(mouseEventService);
        this.mouseEventService = mouseEventService;
        this.dataService = dataService;
        this.calService = calService;
        this.domService = domService;
        this.popService = popService;
        this.DUService = DUService;
        this.wallAbsorb = wallAbsorb;
        this._wallRadian = undefined;
        this._otherWallArr = [];
        this._isWallMove = false;
        this._parallelRadian = Math.PI / 180 * 5;
        this._firstLine = undefined;
        this._inputEvent = new _input_MoveWallinput__WEBPACK_IMPORTED_MODULE_8__["MoveWallInput"](this.dataService, this.calService, this.DUService);
        this._testInt = 0;
        this.dataService.cache.shortFuncs['setWallInput'] = (obj) => {
            this.setInputs(obj);
        };
    }
    isCondition() {
        return this.dataService.cache.common.mode == 'normal' && this.dataService.cache.common.choose != null && this.dataService.cache.common.choose.type == "wall";
    }
    mouseDown(e) {
    }
    mouseMove(e) {
        if (this.isArcRelated(this.dataService.cache.common.choose)) {
            let data = {
                text: "跟弧形墙相关,不能移动",
                time: 3
            };
            this.popService.cueInfo.emit(data);
        }
        else {
            if (this.dataService.cache.common.firstPos && this.isMouseMove && this._firstLine) {
                this._isWallMove = true;
                let plusPos = { x: e.offsetX - this.dataService.cache.common.firstPos.x, y: e.offsetY - this.dataService.cache.common.firstPos.y };
                let wall = this.dataService.cache.common.choose;
                if (this._wallRadian == undefined)
                    this._wallRadian = wall.getRadian();
                try {
                    this._otherWallArr = this.setWallMove(plusPos, wall);
                    wall = this.dataService.cache.common.choose;
                    this.setInputs(wall);
                    this.dataService.cache.floorplan.dataEmit.emit({ cornerWin: true });
                    this.strongUpdate();
                }
                catch (e) {
                    console.log(e);
                    this.errorCmd("墙移动运算失败,请重新移动");
                    this.dataService.cache.common.choose = this.dataService.floorplan;
                    return false;
                }
            }
        }
        if (!this._firstLine) {
            let wall = this.dataService.cache.common.choose;
            this._firstLine = wall.getPosArr();
        }
    }
    mouseUp() {
        let wall = this.dataService.cache.common.choose;
        /** 移动了才触发 */
        if (this._isWallMove) {
            try {
                // this.calService.wall.removeDistanceWalls(1, this._otherWallArr)
                this.calService.wall.removeNoUseWalls(this._otherWallArr);
                let readyMsg = this.calService.wall.cutRoomReady(this._otherWallArr, false);
                let msg = this.calService.wall.overlay.allOverlayAndAllCut(this._otherWallArr, wall);
                if (!msg) {
                    return this.errorCmd("'墙切割失败,请重新画过'");
                }
                this._otherWallArr.push(wall);
                this._otherWallArr.push(...msg.collectWalls);
                this._otherWallArr.push(...msg.roomWalls);
                let newReadyMsg = this.calService.wall.cutRoomReady(this._otherWallArr);
                for (let key in newReadyMsg) {
                    readyMsg[key] = newReadyMsg[key];
                }
                this._otherWallArr = this.DUService.cal.uniqueByAttr(this._otherWallArr, 'id');
                let testPoints = this.dataService.doPoints().arr();
                this.calService.point.fixSamePosPoints(testPoints);
                this.calService.cowall.delNoUse();
                this.calService.wall.removeNoUseWalls(this._otherWallArr);
                // let ids = this.DUService.cal.getNewAttrArray(this._otherWallArr, 'id')
                // console.log(ids)
                // if (this._testInt == 0) {
                let newRooms = this.calService.createRoom.cutRoom(this._otherWallArr, true, readyMsg.rooms);
                /** 空间分割失败 */
                if (!newRooms) {
                    return this.errorCmd("'错误分空间,请重新画过'");
                }
                // }
                // this._testInt++
                this.calService.room.resetCowalls();
                this.calService.point.delNoUse();
                this.calService.room.resetRoomsCowallIDs();
                this.dataInit();
                this.dataService.cache.floorplan.dataEmit.emit();
                this.calService.cowall.checkRoomExist();
                this.strongUpdate();
                let chooseWall = this.dataService.cache.common.choose;
                if (this.dataService.walls[chooseWall.id]) {
                    this.setInputs(chooseWall);
                }
                this.dataService.cache.wall.update3D.emit();
                this.dataService.cache.cowall.update3D.emit();
                this.calService.undoRedo.save();
                return true;
            }
            catch (e) {
                console.log(e);
                return this.errorCmd("'移动失败,请重新画过'");
            }
        }
        this.dataInit();
        wall = this.dataService.cache.common.choose;
        this.dataService.cache.floorplan.dataEmit.emit();
        this.setInputs(wall);
        this.strongUpdate();
        return false;
    }
    errorCmd(text) {
        this.calService.undoRedo.setPresent();
        this.dataInit();
        this.strongUpdate();
        this.dataService.cache.wall.update3D.emit();
        this.dataService.cache.cowall.update3D.emit();
        this.dataService.cache.common.choose = this.dataService.floorplan;
        alert(text);
        return false;
    }
    /** 是否弧墙关联 */
    isArcRelated(wall) {
        if (wall.arcDistance != 0)
            return true;
        let otherWalls = wall.getNearWallArr();
        for (let i = 0; i < otherWalls.length; i++) {
            if (otherWalls[i].arcDistance != 0)
                return true;
        }
        return false;
    }
    /** 数据初始化 */
    dataInit() {
        this.dataService.cache.common.blockON = false;
        this.dataService.cache.common.firstPos = null;
        this._wallRadian = undefined;
        this._isWallMove = false;
        this._firstLine = undefined;
        this.setAbsorbLine();
        this.domService.svgBlock.emit();
    }
    /** 输入框显示(没有wall,表示清空) */
    setInputs(wall) {
        if (!this.dataService.cache.common.choose || this.dataService.cache.common.choose.type != 'wall' ||
            this.dataService.cache.thumbnail.three.zIndex < this.dataService.cache.thumbnail.svg.zIndex ||
            !wall) {
            this.popService.inputBoxs.emit([]);
            return false;
        }
        let updateFunc = () => {
            this.strongUpdate();
            this.setInputs(wall);
            this.calService.undoRedo.save();
        };
        let cbFunc = (distance, cowall, isStart) => {
            this.dataService.cache.common.isAbosrb = false;
            this._isWallMove = true;
            this._firstLine = wall.getPosArr();
            this._wallRadian = wall.getRadian();
            let radian = isStart ? cowall.getRadian() : cowall.getRadian() - Math.PI;
            let newPlusPos = this.DUService.pos.getPlusPos(distance, radian);
            this._otherWallArr = this.setWallMove(newPlusPos, wall);
            // let walls = this.dataService.doWalls().arr()
            // for (let i = 0; i < walls.length; i++) {
            //     walls[i].urgentUpdate.emit()
            // }
            this.mouseUp();
            this.dataService.cache.common.isAbosrb = true;
        };
        let datas = this.isArcRelated(wall) ? [] : this._inputEvent.getAllCowallsInput(wall, cbFunc);
        if (wall.arcDistance != 0) {
            let data = this._inputEvent.getArcInput(wall, updateFunc);
            datas.push(data);
        }
        this.popService.inputBoxsCache = datas;
        this.popService.setInputBoxs();
        return true;
    }
    /** 更新 */
    strongUpdate() {
        this.popService.buttons.emit(null);
        this.domService.allSvg.emit();
    }
    /** 设置移动墙 */
    setWallMove(plusPos, wall) {
        let movePosArr = [{ x: this._firstLine[0].x + plusPos.x, y: this._firstLine[0].y + plusPos.y }, { x: this._firstLine[1].x + plusPos.x, y: this._firstLine[1].y + plusPos.y }];
        let msg = this.wallAbsorb.getAbsorb(movePosArr, wall);
        movePosArr = msg.line;
        this.setAbsorbLine(msg.absorbData);
        let moveWallArr = [];
        if (movePosArr != null) {
            /** 检测头============================ */
            let handMsg = this.getWallHandMsg(wall, this._wallRadian);
            wall = this.dataService.cache.common.choose;
            /** 检测尾================================= */
            let endMsg = this.getWallEndMsg(wall, this._wallRadian);
            /** 修改移动 */
            let otherWallArr = this.setWallChange(wall, this._wallRadian, movePosArr, handMsg, endMsg);
            /** 修复门窗 */
            this.setDoors(wall);
            this.setWins(wall);
            return otherWallArr;
        }
        return [];
    }
    /** 修改移动,返回修改的墙体 */
    setWallChange(wall, wallRadian, movePosArr, handWall, endWall) {
        /** 都没有墙 */
        if (!handWall && !endWall) {
            this.NoWallMove(movePosArr, wall);
            return [];
        }
        /** 头为空 */
        else if (!handWall) {
            this.onlyOneWallMove(movePosArr, wall, wallRadian, endWall, false);
            return [endWall];
        }
        /** 尾为空 */
        else if (!endWall) {
            this.onlyOneWallMove(movePosArr, wall, wallRadian, handWall, true);
            return [handWall];
        }
        /** 两头都不为空 */
        this.TwoWallMove(movePosArr, wall, wallRadian, handWall, endWall);
        return [handWall, endWall];
    }
    /** 获取墙改变信息 */
    getWallMoveMsg(wall, point, radian, isHand) {
        let nearWallArr = point.getWallArr();
        /** 排除自己 */
        this.DUService.cal.removeByAttr(nearWallArr, 'id', wall.id);
        /** 没有其他墙 */
        if (nearWallArr.length == 0)
            return undefined;
        let otherWall = nearWallArr[0];
        let otherRadian = this.getWallRadian(otherWall);
        /** 切割方法 */
        let cutFunc = (newRadian) => {
            let cut = this.calService.wall.cut.cutByPer(wall, isHand ? 0 : 1);
            let mainWall = isHand ? wall : cut.wall;
            let otherWall = isHand ? cut.wall : wall;
            otherWall.calFlag = radian;
            /** 标记弧度 */
            mainWall.calFlag = newRadian;
            this.dataService.cache.common.choose = otherWall;
            return mainWall;
        };
        /** 只有一面墙 */
        if (nearWallArr.length == 1) {
            /** 不平行 */
            if (this.DUService.pos.isParallelRadian(otherRadian, radian, this._parallelRadian)) {
                otherWall = cutFunc(otherRadian + (Math.PI / 2));
            }
            /** 标记弧度 */
            if (otherWall.calFlag == undefined) {
                otherWall.calFlag = otherRadian;
            }
            return otherWall;
        }
        /** 有两面墙 */
        if (nearWallArr.length == 2) {
            let otherWallB = nearWallArr[1];
            let otherRoomLen = otherWall.getRoomArr().length;
            let otherRoomLenB = otherWallB.getRoomArr().length;
            /** 必须两个墙有且仅有一个空间 */
            if (otherRoomLen >= 1 || otherRoomLenB >= 1) {
                let otherRadianB = this.getWallRadian(otherWallB);
                /** 必须平行 */
                if (this.DUService.pos.isParallelRadian(otherRadian, otherRadianB, this._parallelRadian)) {
                    /** 标记弧度 */
                    if (otherWall.calFlag == undefined) {
                        otherWall.calFlag = otherRadian;
                    }
                    return otherWall;
                }
            }
        }
        /** 有多面墙 */
        let isParallel = this.DUService.pos.isParallelRadian(otherRadian, radian, this._parallelRadian);
        /** 寻找不平行的墙 */
        if (isParallel) {
            let index = 1;
            while (isParallel && index < nearWallArr.length) {
                otherWall = nearWallArr[index];
                otherRadian = this.getWallRadian(otherWall);
                isParallel = this.DUService.pos.isParallelRadian(otherRadian, radian, this._parallelRadian);
                index++;
            }
        }
        /** 如果只有平行的墙,则增加弧度90 */
        if (isParallel) {
            otherRadian = radian + (Math.PI / 2);
        }
        otherWall = cutFunc(otherRadian);
        return otherWall;
    }
    getWallRadian(wall) {
        if (wall.calFlag == undefined) {
            let radian = wall.getRadian();
            wall.calFlag = radian;
        }
        return wall.calFlag;
    }
    /**
     * 墙头改变信息=========================================
     * @param wall 鼠标点击移动的墙
     * @param movePosArr 移动的坐标组
     * @param radian 移动墙移动前的弧度
     */
    getWallHandMsg(wall, radian) {
        let handPoint = wall.getPoint(0);
        return this.getWallMoveMsg(wall, handPoint, radian, true);
    }
    /**
     * 墙尾改变信息================================================================
     * @param wall 鼠标点击移动的墙
     * @param movePosArr 移动的坐标组
     * @param radian 移动墙移动前的弧度
     */
    getWallEndMsg(wall, radian) {
        let endPoint = wall.getPoint(1);
        return this.getWallMoveMsg(wall, endPoint, radian, false);
    }
    /** 没有墙移动 */
    NoWallMove(movePosArr, wall) {
        let PointArr = wall.getPointArr();
        PointArr[0].pos = { x: movePosArr[0].x, y: movePosArr[0].y };
        PointArr[1].pos = { x: movePosArr[1].x, y: movePosArr[1].y };
    }
    /** 只有一个点有墙移动 */
    onlyOneWallMove(movePosArr, wall, wallRadian, otherWall, isHandIntersect) {
        /** 获取相交点 */
        let intersectPos = this.getIntersectMoveWallPos(movePosArr, wallRadian, otherWall);
        let pointArr = wall.getPointArr();
        /** 修改其他移动点 */
        if (isHandIntersect) {
            pointArr[1].pos = this.DUService.pos.getRightAngleIntersect(pointArr[1].pos, movePosArr[0], movePosArr[1]);
            pointArr[0].pos = intersectPos;
        }
        else {
            pointArr[0].pos = this.DUService.pos.getRightAngleIntersect(pointArr[0].pos, movePosArr[0], movePosArr[1]);
            pointArr[1].pos = intersectPos;
        }
    }
    /** 两墙移动 */
    TwoWallMove(movePosArr, wall, wallRadian, handWall, EndWall) {
        let handIntersect = this.getIntersectMoveWallPos(movePosArr, wallRadian, handWall);
        let endIntersect = this.getIntersectMoveWallPos(movePosArr, wallRadian, EndWall);
        let pointArr = wall.getPointArr();
        pointArr[0].pos = handIntersect;
        pointArr[1].pos = endIntersect;
    }
    /** 获取墙移动的相交点 */
    getIntersectMoveWallPos(movePosArr, wallRadian, otherWall) {
        let newMovePosArr = [movePosArr[0], this.DUService.pos.getRayPos(movePosArr[0], wallRadian, 10)];
        let otherPosArr = [];
        /** 如果calFlag为空,则通过墙中心线获取切割线 */
        if (otherWall.calFlag == undefined) {
            otherPosArr = otherWall.getPosArr();
        }
        /** 如果calFlag则通过弧度获取切割线 */
        else {
            otherPosArr = [otherWall.getPoint(0).pos];
            let rayPos = this.DUService.pos.getRayPos(otherPosArr[0], otherWall.calFlag, 10);
            otherPosArr.push(rayPos);
        }
        /** 获取相交点 */
        let intersectPos = this.DUService.pos.getIntersect(newMovePosArr[0], newMovePosArr[1], otherPosArr[0], otherPosArr[1]);
        return intersectPos;
    }
    /** 设置门吸附移动 */
    setDoors(wall) {
        let doors = wall.getDoorArr();
        for (let i = 0; i < doors.length; i++) {
            this.dataService.cache.doorWin.move(doors[i]);
        }
    }
    /** 设置窗吸附移动 */
    setWins(wall) {
        let wins = wall.getWinArr();
        for (let i = 0; i < wins.length; i++) {
            this.dataService.cache.doorWin.move(wins[i]);
        }
    }
    /** 设置吸附线 */
    setAbsorbLine(data) {
        if (data) {
            this.dataService.cache.absorbLines = [data];
            this.domService.absorbLine.emit();
        }
        else {
            this.dataService.cache.absorbLines = [];
            this.domService.absorbLine.emit();
        }
    }
}
SvgMoveWall.ctorParameters = () => [
    { type: _services_mouse_event_service__WEBPACK_IMPORTED_MODULE_1__["MouseEventService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__["JdesignDataService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_3__["CalculatorsService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_4__["DomUpdateService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_5__["PopDivService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_6__["JdesignUtil2dService"] },
    { type: _absorb_MoveWallAbsorb__WEBPACK_IMPORTED_MODULE_7__["MoveWallAbsorb"] }
];
class WallMoveMsg {
}


/***/ }),

/***/ "./src/app/svg/common/act/mouse/paramsModel/SvgMoveParamsModel.ts":
/*!************************************************************************!*\
  !*** ./src/app/svg/common/act/mouse/paramsModel/SvgMoveParamsModel.ts ***!
  \************************************************************************/
/*! exports provided: SvgMoveParamsModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SvgMoveParamsModel", function() { return SvgMoveParamsModel; });
/* harmony import */ var _EventAbstract__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../EventAbstract */ "./src/app/svg/common/act/mouse/EventAbstract.ts");
/* harmony import */ var _services_mouse_event_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/mouse-event.service */ "./src/app/svg/common/services/mouse-event.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _svgMoveParamsModelCal__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./svgMoveParamsModelCal */ "./src/app/svg/common/act/mouse/paramsModel/svgMoveParamsModelCal.ts");
/* harmony import */ var _SvgParamsMoveParamsModelType__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./SvgParamsMoveParamsModelType */ "./src/app/svg/common/act/mouse/paramsModel/SvgParamsMoveParamsModelType.ts");









/* 参数化模型移动 */
class SvgMoveParamsModel extends _EventAbstract__WEBPACK_IMPORTED_MODULE_0__["EventAbstract"] {
    constructor(mouseEventService, dataService, domService, DUService, popService, calService) {
        super(mouseEventService);
        this.mouseEventService = mouseEventService;
        this.dataService = dataService;
        this.domService = domService;
        this.DUService = DUService;
        this.popService = popService;
        this.calService = calService;
        this._distancePos = { x: 0, y: 0 };
        this._pos = null;
        this._cal = new _svgMoveParamsModelCal__WEBPACK_IMPORTED_MODULE_7__["SvgMoveParamsModelCal"](this.dataService, this.domService, this.DUService, this.popService, this.calService);
        this._paramsMoveType = new _SvgParamsMoveParamsModelType__WEBPACK_IMPORTED_MODULE_8__["SvgParamsMoveParamsModelType"](this.dataService, this.domService, this.DUService, this.popService, this.calService);
        this._prevPos = undefined;
    }
    isCondition() {
        return this.dataService.cache.common.mode == 'normal' && this.dataService.cache.common.choose != null && this.dataService.cache.common.choose.type == "paramsModel";
    }
    mouseDown(e) {
    }
    mouseUp(e) {
        this._pos = undefined;
        this._prevPos = undefined;
        this._distancePos = { x: 0, y: 0 };
        this.dataService.cache.common.choose = this.dataService.cache.common.choose;
        this.dataService.cache.common.blockON = false;
        this.dataService.cache.floorplan.createAndMove = false;
        this.dataService.cache.common.blockON = false;
        this.dataService.cache.common.firstPos = null;
        this.domService.allSvg.emit();
        this.calService.undoRedo.save();
    }
    mouseMove(e) {
        let originPos = { x: e.offsetX, y: e.offsetY };
        let obj = this.dataService.cache.common.choose;
        if (this.dataService.cache.common.firstPos == null) {
            this._pos = {
                x: originPos.x + this._distancePos.x,
                y: originPos.y + this._distancePos.y
            };
            if (obj.mode != 'paramsMove') {
                this.transMove(obj, this._pos, originPos);
            }
            else {
                this.parmasMove(obj, this._pos, originPos);
            }
            this.domService.allSvg.emit();
            this._prevPos = { x: originPos.x, y: originPos.y };
        }
        /** 平常移动第一次点击,需要获取点击的坐标误差 */
        else {
            this._distancePos = {
                x: obj.pos.x - originPos.x,
                y: obj.pos.y - originPos.y
            };
            this.dataService.cache.common.firstPos = null;
        }
    }
    /* 移动 */
    transMove(obj, transPos, originPos) {
        switch (obj.absorbData.type) {
            case "pointAnd2Walls":
                this._cal.pointAnd2Walls(obj, transPos);
                break;
            case "wallAnd2walls":
                this._cal.wallAnd2walls(obj, transPos);
                break;
            default:
                this._cal.defaultMove(obj, transPos);
                break;
        }
    }
    /* 参数化移动 */
    parmasMove(obj, transPos, originPos) {
        if (this._prevPos) {
            switch (obj.movePointData.type) {
                case "linearMove":
                    this._paramsMoveType.linerMove(obj, originPos, this._prevPos);
                    break;
            }
        }
    }
}
SvgMoveParamsModel.ctorParameters = () => [
    { type: _services_mouse_event_service__WEBPACK_IMPORTED_MODULE_1__["MouseEventService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__["JdesignDataService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_3__["DomUpdateService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_4__["JdesignUtil2dService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_5__["PopDivService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_6__["CalculatorsService"] }
];


/***/ }),

/***/ "./src/app/svg/common/act/mouse/paramsModel/SvgMoveParamsModelAbsorbType.ts":
/*!**********************************************************************************!*\
  !*** ./src/app/svg/common/act/mouse/paramsModel/SvgMoveParamsModelAbsorbType.ts ***!
  \**********************************************************************************/
/*! exports provided: SvgMoveParamsModelAbsorbType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SvgMoveParamsModelAbsorbType", function() { return SvgMoveParamsModelAbsorbType; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../services/calculators.service */ "./src/app/services/calculators.service.ts");





/* 参数化模型吸附类型 */
class SvgMoveParamsModelAbsorbType {
    constructor(dataService, domService, DUService, popService, calService) {
        this.dataService = dataService;
        this.domService = domService;
        this.DUService = DUService;
        this.popService = popService;
        this.calService = calService;
    }
    /* 获取替换的参数 */
    getReplaceData(obj) {
        let data = {
            "x": obj.absorbData.pos.x,
            "y": obj.absorbData.pos.y,
            "r": obj.absorbData.radian
        };
        return data;
    }
    /* 获取真实角度 */
    getRealPos(obj) {
        let replaceData = this.getReplaceData(obj);
        let x = obj.absorbData.realPosX;
        let y = obj.absorbData.realPosY;
        for (let key in replaceData) {
            if (x)
                x = this.DUService.parseJ2D.replace(x, key, replaceData[key]);
            if (y)
                y = this.DUService.parseJ2D.replace(y, key, replaceData[key]);
        }
        let pos = { x: x ? eval(x) : obj.absorbData.pos.x, y: y ? eval(y) : obj.absorbData.pos.y };
        return pos;
    }
    /* 获取真实弧度 */
    getRealRadian(obj) {
        let replaceData = this.getReplaceData(obj);
        let r = obj.absorbData.realRadian;
        for (let key in replaceData) {
            if (r)
                r = this.DUService.parseJ2D.replace(r, key, replaceData[key]);
        }
        let newR = r ? eval(r) : obj.absorbData.radian;
        return newR;
    }
    /* 点和两个墙 */
    pointAnd2Walls(obj, pos) {
        let pointArr = this.calService.point.getPointsByOnlyNumWalls(2);
        let pointsMsg = this.calService.transData.getPointPosArr(pointArr);
        let absorbMsg = this.calService.absorb.posAndPointPosArr(pos, obj.absorbData.minDistance, pointsMsg);
        if (absorbMsg && absorbMsg.point) {
            obj.absorbData.objID = absorbMsg.point.id;
            obj.absorbData.pos = absorbMsg.point.pos;
        }
        else {
            obj.absorbData.objID = undefined;
            obj.absorbData.pos = pos;
        }
        obj.pos = this.getRealPos(obj);
    }
    /* 三墙居中 */
    wallAnd2walls(obj, pos) {
        let distance = obj.absorbData.objID == undefined ? obj.originJ2d.params[obj.absorbData.calParams["centerWidth"]].formula : obj.j2d.params[obj.absorbData.calParams["centerWidth"]].formula;
        let rayPos = this.DUService.pos.getRayPos(pos, obj.radian, distance);
        let line = [pos, rayPos];
        let walls = this.calService.wall.getOneLinkWalls();
        walls = this.calService.wall.getUnArcWalls(walls);
        walls = this.calService.wall.getRoomWalls(walls);
        let wallsMsg = this.calService.transData.getWallCenterLines(walls);
        let absorbMsg = this.calService.absorb.lineAndWalls(line, obj.absorbData.minDistance, wallsMsg);
        if (absorbMsg && absorbMsg.wall) {
            obj.absorbData.objID = absorbMsg.wall.id;
            let point = absorbMsg.wall.getPoint(0);
            obj.absorbData.pos = { x: point.pos.x, y: point.pos.y };
        }
        else {
            obj.absorbData.objID = undefined;
            obj.absorbData.pos = pos;
        }
        obj.pos = this.getRealPos(obj);
    }
}
SvgMoveParamsModelAbsorbType.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_1__["DomUpdateService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_3__["PopDivService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_4__["CalculatorsService"] }
];


/***/ }),

/***/ "./src/app/svg/common/act/mouse/paramsModel/SvgParamsMoveParamsModelType.ts":
/*!**********************************************************************************!*\
  !*** ./src/app/svg/common/act/mouse/paramsModel/SvgParamsMoveParamsModelType.ts ***!
  \**********************************************************************************/
/*! exports provided: SvgParamsMoveParamsModelType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SvgParamsMoveParamsModelType", function() { return SvgParamsMoveParamsModelType; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../services/calculators.service */ "./src/app/services/calculators.service.ts");





/* 参数化模型移动时移动类型 */
class SvgParamsMoveParamsModelType {
    constructor(dataService, domService, DUService, popService, calService) {
        this.dataService = dataService;
        this.domService = domService;
        this.DUService = DUService;
        this.popService = popService;
        this.calService = calService;
    }
    /* 线性移动 */
    linerMove(obj, presentPos, prevPos) {
        let newRadian = obj.radian - obj.movePointData.radian;
        let distance = this.DUService.pos.getTwoPosRadianDistance(presentPos, prevPos, newRadian + Math.PI, false);
        console.log(distance);
        distance += parseFloat(obj.j2d.params[obj.movePointData.tag].formula) + obj.movePointData.add;
        console.log(distance);
        obj.j2d.params[obj.movePointData.tag].formula = distance;
    }
}
SvgParamsMoveParamsModelType.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_1__["DomUpdateService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_3__["PopDivService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_4__["CalculatorsService"] }
];


/***/ }),

/***/ "./src/app/svg/common/act/mouse/paramsModel/svgMoveParamsModelCal.ts":
/*!***************************************************************************!*\
  !*** ./src/app/svg/common/act/mouse/paramsModel/svgMoveParamsModelCal.ts ***!
  \***************************************************************************/
/*! exports provided: SvgMoveParamsModelCal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SvgMoveParamsModelCal", function() { return SvgMoveParamsModelCal; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _SvgMoveParamsModelAbsorbType__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./SvgMoveParamsModelAbsorbType */ "./src/app/svg/common/act/mouse/paramsModel/SvgMoveParamsModelAbsorbType.ts");






/* 参数化模型吸附运算 */
class SvgMoveParamsModelCal {
    constructor(dataService, domService, DUService, popService, calService) {
        this.dataService = dataService;
        this.domService = domService;
        this.DUService = DUService;
        this.popService = popService;
        this.calService = calService;
        this._absorb = new _SvgMoveParamsModelAbsorbType__WEBPACK_IMPORTED_MODULE_5__["SvgMoveParamsModelAbsorbType"](this.dataService, this.domService, this.DUService, this.popService, this.calService);
    }
    /* 设置j2d吸附参数 */
    setJ2dAbsorbParams(obj, calParamsName, value) {
        if (obj.absorbData.calParams == undefined)
            return false;
        if (obj.absorbData.calParams[calParamsName] == undefined)
            return false;
        if (obj.j2d.params[obj.absorbData.calParams[calParamsName]] == undefined)
            return false;
        obj.j2d.params[obj.absorbData.calParams[calParamsName]].formula = value;
        return true;
    }
    /* 点和双墙 */
    pointAnd2Walls(obj, pos) {
        this._absorb.pointAnd2Walls(obj, pos);
        let point = obj.getAbsorbObj();
        if (point) {
            let walls = this.calService.point.getLeftAndRightWall(point);
            /* 弧度计算 */
            let a = this.calService.point.isOppositeRayPoint(point, walls[0]);
            let leftRadian = walls[0].getRadian();
            leftRadian = a ? leftRadian + Math.PI : leftRadian;
            a = this.calService.point.isOppositeRayPoint(point, walls[1]);
            let rightRadian = walls[1].getRadian();
            rightRadian = a ? rightRadian + Math.PI : rightRadian;
            /* 赋予弧度值 */
            obj.absorbData.radian = rightRadian;
            obj.radian = this._absorb.getRealRadian(obj);
            let b = -rightRadian + leftRadian;
            // console.log(b * 180 / Math.PI)
            /* 设置j2d参数 */
            this.setJ2dAbsorbParams(obj, 'leftThickness', walls[0].thickness);
            this.setJ2dAbsorbParams(obj, 'rightThickness', walls[1].thickness);
            this.setJ2dAbsorbParams(obj, 'radian', b);
        }
    }
    /* 三墙居中 */
    wallAnd2walls(obj, pos) {
        this._absorb.wallAnd2walls(obj, pos);
        let centerWall = obj.getAbsorbObj();
        if (centerWall) {
            /* 弧度 */
            let centerCowall = centerWall.getCowall();
            let centerRadian = centerCowall.getRadian();
            obj.absorbData.radian = centerRadian;
            obj.radian = this._absorb.getRealRadian(obj);
            /* 中间 */
            this.setJ2dAbsorbParams(obj, 'centerThickness', centerWall.thickness);
            this.setJ2dAbsorbParams(obj, 'centerWidth', centerWall.getInLineDistance());
            /* 左边 */
            let prevCowall = centerCowall.getPrevCowall();
            let prevWall = prevCowall.getWall();
            let prevRadian = prevCowall.getRadian() + Math.PI;
            this.setJ2dAbsorbParams(obj, 'leftThickness', prevWall.thickness);
            this.setJ2dAbsorbParams(obj, 'leftRadian', -centerRadian + prevRadian);
            /* 右边 */
            let nextCowall = centerCowall.getNextCowall();
            let nextWall = nextCowall.getWall();
            let nextRadian = nextCowall.getRadian();
            this.setJ2dAbsorbParams(obj, 'rightThickness', nextWall.thickness);
            this.setJ2dAbsorbParams(obj, 'rightRadian', centerRadian + Math.PI - nextRadian);
        }
    }
    defaultMove(obj, pos) {
        obj.pos = { x: pos.x, y: pos.y };
    }
}
SvgMoveParamsModelCal.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_1__["DomUpdateService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_3__["PopDivService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_4__["CalculatorsService"] }
];


/***/ }),

/***/ "./src/app/svg/common/act/mouse/svg.mouse.event.ts":
/*!*********************************************************!*\
  !*** ./src/app/svg/common/act/mouse/svg.mouse.event.ts ***!
  \*********************************************************/
/*! exports provided: SvgMouseEvent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SvgMouseEvent", function() { return SvgMouseEvent; });
/* harmony import */ var _services_mouse_event_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../services/mouse-event.service */ "./src/app/svg/common/services/mouse-event.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");
/* harmony import */ var _SvgDrawWall__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./SvgDrawWall */ "./src/app/svg/common/act/mouse/SvgDrawWall.ts");
/* harmony import */ var _SvgMoveWall__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./SvgMoveWall */ "./src/app/svg/common/act/mouse/SvgMoveWall.ts");
/* harmony import */ var _SvgDrawRoom__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./SvgDrawRoom */ "./src/app/svg/common/act/mouse/SvgDrawRoom.ts");
/* harmony import */ var _SvgMoveBack__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./SvgMoveBack */ "./src/app/svg/common/act/mouse/SvgMoveBack.ts");
/* harmony import */ var _SvgMoveDW__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./SvgMoveDW */ "./src/app/svg/common/act/mouse/SvgMoveDW.ts");
/* harmony import */ var _SvgMoveGeometry__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./SvgMoveGeometry */ "./src/app/svg/common/act/mouse/SvgMoveGeometry.ts");
/* harmony import */ var _SvgMoveCWin__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./SvgMoveCWin */ "./src/app/svg/common/act/mouse/SvgMoveCWin.ts");
/* harmony import */ var _svgMoveCamera__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./svgMoveCamera */ "./src/app/svg/common/act/mouse/svgMoveCamera.ts");
/* harmony import */ var _absorb_svg_absorb_event__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../absorb/svg.absorb.event */ "./src/app/svg/common/act/absorb/svg.absorb.event.ts");
/* harmony import */ var _input_svg_input_event__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../input/svg.input.event */ "./src/app/svg/common/act/input/svg.input.event.ts");
/* harmony import */ var _SvgMovePoint__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./SvgMovePoint */ "./src/app/svg/common/act/mouse/SvgMovePoint.ts");
/* harmony import */ var _SvgMoveLUWin__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./SvgMoveLUWin */ "./src/app/svg/common/act/mouse/SvgMoveLUWin.ts");
/* harmony import */ var _paramsModel_SvgMoveParamsModel__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./paramsModel/SvgMoveParamsModel */ "./src/app/svg/common/act/mouse/paramsModel/SvgMoveParamsModel.ts");



















class SvgMouseEvent {
    constructor(mouseEventService, dataService, domService, DUService, calService, popService, svgAbsorbEvent, svgInputEvent) {
        this.mouseEventService = mouseEventService;
        this.dataService = dataService;
        this.domService = domService;
        this.DUService = DUService;
        this.calService = calService;
        this.popService = popService;
        this.svgAbsorbEvent = svgAbsorbEvent;
        this.svgInputEvent = svgInputEvent;
        let moveParamsModel = new _paramsModel_SvgMoveParamsModel__WEBPACK_IMPORTED_MODULE_18__["SvgMoveParamsModel"](this.mouseEventService, this.dataService, this.domService, this.DUService, this.popService, this.calService);
        let drawWall = new _SvgDrawWall__WEBPACK_IMPORTED_MODULE_6__["SvgDrawWall"](this.mouseEventService, this.dataService, this.domService, this.DUService, this.popService, this.calService, svgAbsorbEvent.drawWallAbsorb, svgInputEvent.wallInput);
        let moveWall = new _SvgMoveWall__WEBPACK_IMPORTED_MODULE_7__["SvgMoveWall"](this.mouseEventService, this.dataService, this.calService, this.domService, this.popService, this.DUService, this.svgAbsorbEvent.moveWallAbosrb);
        let drawRoom = new _SvgDrawRoom__WEBPACK_IMPORTED_MODULE_8__["SvgDrawRoom"](this.mouseEventService, this.dataService, this.domService, this.calService, this.DUService, this.popService);
        let moveBack = new _SvgMoveBack__WEBPACK_IMPORTED_MODULE_9__["SvgMoveBack"](this.mouseEventService, this.dataService, this.domService, this.DUService, this.popService, this.calService);
        let moveDW = new _SvgMoveDW__WEBPACK_IMPORTED_MODULE_10__["SvgMoveDW"](this.mouseEventService, this.dataService, this.domService, this.DUService, this.popService, this.calService, this.svgAbsorbEvent.dwAbsorb);
        let moveGeometry = new _SvgMoveGeometry__WEBPACK_IMPORTED_MODULE_11__["SvgMoveGeometry"](this.mouseEventService, this.dataService, this.domService, this.DUService, this.popService, this.calService);
        let moveCornerWin = new _SvgMoveCWin__WEBPACK_IMPORTED_MODULE_12__["SvgMoveCWin"](this.mouseEventService, this.dataService, this.domService, this.DUService, this.popService, this.calService);
        let moveCamera = new _svgMoveCamera__WEBPACK_IMPORTED_MODULE_13__["SvgMoveCamera"](this.mouseEventService, this.dataService, this.domService, this.DUService, this.popService, this.calService);
        let movePoint = new _SvgMovePoint__WEBPACK_IMPORTED_MODULE_16__["SvgMovePoint"](this.mouseEventService, this.dataService, this.calService, this.domService, this.popService, this.DUService);
        let moveLUWin = new _SvgMoveLUWin__WEBPACK_IMPORTED_MODULE_17__["SvgMoveLUWin"](this.mouseEventService, this.dataService, this.domService, this.DUService, this.popService, this.calService);
    }
}
SvgMouseEvent.ctorParameters = () => [
    { type: _services_mouse_event_service__WEBPACK_IMPORTED_MODULE_0__["MouseEventService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__["JdesignDataService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_2__["DomUpdateService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_3__["JdesignUtil2dService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_4__["CalculatorsService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_5__["PopDivService"] },
    { type: _absorb_svg_absorb_event__WEBPACK_IMPORTED_MODULE_14__["SvgAbsorbEvent"] },
    { type: _input_svg_input_event__WEBPACK_IMPORTED_MODULE_15__["SvgInputEvent"] }
];


/***/ }),

/***/ "./src/app/svg/common/act/mouse/svgMoveCamera.ts":
/*!*******************************************************!*\
  !*** ./src/app/svg/common/act/mouse/svgMoveCamera.ts ***!
  \*******************************************************/
/*! exports provided: SvgMoveCamera */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SvgMoveCamera", function() { return SvgMoveCamera; });
/* harmony import */ var _EventAbstract__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EventAbstract */ "./src/app/svg/common/act/mouse/EventAbstract.ts");
/* harmony import */ var _services_mouse_event_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../services/mouse-event.service */ "./src/app/svg/common/services/mouse-event.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../services/calculators.service */ "./src/app/services/calculators.service.ts");







class SvgMoveCamera extends _EventAbstract__WEBPACK_IMPORTED_MODULE_0__["EventAbstract"] {
    constructor(mouseEventService, dataService, domService, DUService, popService, calService) {
        super(mouseEventService);
        this.mouseEventService = mouseEventService;
        this.dataService = dataService;
        this.domService = domService;
        this.DUService = DUService;
        this.popService = popService;
        this.calService = calService;
        this._radian = null;
        this.dataService.cache.mode.drawWall.subscribe(() => {
            this.dataService.cache.common.mode = 'normal';
            // this.cleanData()
        });
        // console.log('%cSvgMoveBack', "color:#ff0000")
    }
    isCondition() {
        if (this.dataService.cache.common.mode == 'normal' &&
            this.dataService.cache.common.choose != null &&
            this.dataService.cache.common.choose.type == 'camera')
            return true;
        else
            return false;
    }
    mouseDown(e) {
        this.popService.inputBoxs.emit([]);
        this.popService.buttons.emit(null);
    }
    mouseMove(e) {
        if (this.dataService.cache.common.firstPos != null) {
            switch (this.dataService.camera.mode) {
                case 'move':
                    this.moveCamera(e);
                    break;
                case 'rotate':
                    this.rotateCamera(e);
                    break;
            }
            this.dataService.camera.strongUpdate3D();
            this.dataService.cache.common.firstPos = { x: e.offsetX, y: e.offsetY };
        }
    }
    /** 移动摄像机 */
    moveCamera(e) {
        let plusPos = { x: e.offsetX - this.dataService.cache.common.firstPos.x, y: e.offsetY - this.dataService.cache.common.firstPos.y };
        this.dataService.camera.pos = {
            x: this.dataService.camera.pos.x + plusPos.x,
            y: this.dataService.camera.pos.y + plusPos.y,
        };
        this.domService.svgCamera.emit();
    }
    /** 旋转摄像机 */
    rotateCamera(e) {
        let radian = this.DUService.pos.getRadian(this.dataService.camera.pos, { x: e.offsetX, y: e.offsetY });
        if (this._radian != null) {
            this.dataService.camera.radian += radian - this._radian;
        }
        this._radian = radian;
        this.domService.svgCamera.emit();
    }
    mouseUp() {
        this._radian = null;
        this.dataService.floorplan.mode = 'back';
        this.dataService.cache.common.firstPos = null;
        this.dataService.cache.common.blockON = false;
        this.domService.svgBlock.emit();
    }
}
SvgMoveCamera.ctorParameters = () => [
    { type: _services_mouse_event_service__WEBPACK_IMPORTED_MODULE_1__["MouseEventService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__["JdesignDataService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_3__["DomUpdateService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_4__["JdesignUtil2dService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_5__["PopDivService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_6__["CalculatorsService"] }
];


/***/ }),

/***/ "./src/app/svg/common/calculator/LWin.cal.ts":
/*!***************************************************!*\
  !*** ./src/app/svg/common/calculator/LWin.cal.ts ***!
  \***************************************************/
/*! exports provided: LWinCal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LWinCal", function() { return LWinCal; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _three_jDesign3D_JLWin3D__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../three/jDesign3D/JLWin3D */ "./src/app/three/jDesign3D/JLWin3D.ts");




class LWinCal {
    constructor(dataService, DUService, calService) {
        this.dataService = dataService;
        this.DUService = DUService;
        this.calService = calService;
    }
    createNew(obj) {
        let LWin = new _three_jDesign3D_JLWin3D__WEBPACK_IMPORTED_MODULE_3__["JLWin3D"](obj, this.dataService, this.DUService);
        this.dataService.cache.LWin.createFunc(LWin);
        return LWin;
    }
    /** 合并点 */
    unionPoint(obj, point) {
        obj.pointID = point.id;
        obj.pos = point.pos;
    }
    /** 分开点 */
    disconnectPoint(obj) {
        obj.pointID = undefined;
    }
    /* 获取左右墙 */
    getLeftAndRightWall(obj) {
        let point = obj.getPoint();
        if (!point)
            return undefined;
        let walls = point.getWallArr();
        let radianA = walls[0].getRadian();
        let radianB = walls[1].getRadian();
        radianA = this.calService.point.getWallOrCowallRadianByPoint(point, walls[0]);
        radianB = this.calService.point.getWallOrCowallRadianByPoint(point, walls[1]);
        let newRadian = radianA - radianB;
        newRadian = this.DUService.pos.getAbsRadian(newRadian, false);
        if (newRadian >= 0) {
            return [walls[0], walls[1]];
        }
        else {
            return [walls[1], walls[0]];
        }
    }
    /* 遍历吸附 */
    listAbosrb() {
        for (let key in this.dataService.LWins) {
            let LWin = this.dataService.LWins[key];
            let point = LWin.getPoint();
            if (point) {
                let walls = point.getWallArr();
                if (walls.length != 2 || walls[0].arcDistance != 0 || walls[0].arcDistance != 0) {
                    this.disconnectPoint(LWin);
                }
                else {
                    this.unionPoint(LWin, point);
                }
            }
            else {
                this.disconnectPoint(LWin);
            }
        }
    }
}
LWinCal.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_1__["JdesignUtil2dService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__["CalculatorsService"] }
];


/***/ }),

/***/ "./src/app/svg/common/calculator/adsorb.cal.ts":
/*!*****************************************************!*\
  !*** ./src/app/svg/common/calculator/adsorb.cal.ts ***!
  \*****************************************************/
/*! exports provided: AdsorbCal, AbosrbMsg, AbsorbLine */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AdsorbCal", function() { return AdsorbCal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AbosrbMsg", function() { return AbosrbMsg; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AbsorbLine", function() { return AbsorbLine; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/calculators.service */ "./src/app/services/calculators.service.ts");



class AdsorbCal {
    constructor(dataService, DUService, calService) {
        this.dataService = dataService;
        this.DUService = DUService;
        this.calService = calService;
    }
    /**
     * 点坐标与墙吸附
     * @param pos
     * @param minDistance
     * @param isStraight
     * @param wallsMsg
     * @returns 没有墙或者没有吸附返回undefined
     */
    posAndWalls(pos, minDistance, isStraight, wallsMsg) {
        /** 没有墙,返回undefined */
        if (wallsMsg.lines.length == 0)
            return undefined;
        let absorbMsg = this.DUService.absorb.pointAndLines(pos, wallsMsg.lines, isStraight, minDistance);
        /** 没有吸附,返回undefined */
        if (absorbMsg == undefined)
            return undefined;
        return {
            wall: wallsMsg.walls[absorbMsg.index],
            pos: absorbMsg.pos,
            distance: absorbMsg.distance
        };
    }
    /**
     * 点墙轮廓吸附
     * @param pos
     * @param minDistance
     * @param wallsMsg
     * @returns 没有墙或者没有吸附返回undefined
     */
    posAndWallOutLines(pos, minDistance, wallsMsg) {
        /** 没有墙,返回undefined */
        if (wallsMsg.lines.length == 0)
            return undefined;
        let absorbMsg = this.DUService.absorb.pointAndLines(pos, wallsMsg.lines, false, minDistance);
        /** 没有吸附,返回undefined */
        if (absorbMsg == undefined)
            return undefined;
        return {
            wall: wallsMsg.walls[absorbMsg.index],
            distance: absorbMsg.distance,
            pos: absorbMsg.pos,
            /** 是否为外线(轮廓线上下)  */
            isOutLine: absorbMsg.index % 2 == 1 ? true : false
        };
    }
    /**
     * 线垂直水平吸附
     * @param lineStart
     * @param lineEnd
     * @param minDistance
     * @returns mode水平为'h',垂直为'v'
     */
    lineAndVerticalLine(lineStart, lineEnd, minDistance) {
        /** 水平 */
        let hPos = this.DUService.absorb.lineAndRadian(lineStart, lineEnd, 0, minDistance);
        if (hPos != undefined) {
            let distance = this.DUService.pos.getDistance(hPos, lineEnd);
            return {
                pos: hPos,
                mode: 'h',
                distance: distance
            };
        }
        /** 垂直 */
        let vPos = this.DUService.absorb.lineAndRadian(lineStart, lineEnd, Math.PI / 2, minDistance);
        if (vPos != undefined) {
            let distance = this.DUService.pos.getDistance(vPos, lineEnd);
            return {
                pos: vPos,
                mode: "v",
                distance: distance
            };
        }
        return undefined;
    }
    /**
     * 坐标与点垂直吸附
     * @param pos
     * @param minDistance
     * @param pointsMsg
     */
    posAndVerticalPoints(pos, minDistance, pointsMsg) {
        /** 没有点,返回undefined */
        if (pointsMsg.lines.length == 0)
            return undefined;
        let absorbMsg = this.DUService.absorb.pointAndLines(pos, pointsMsg.lines, true, minDistance);
        /** 没有吸附,返回undefined */
        if (absorbMsg == undefined)
            return undefined;
        return {
            point: pointsMsg.points[absorbMsg.index],
            distance: absorbMsg.distance,
            pos: absorbMsg.pos
        };
    }
    /**
     * 点与点数组信息吸附
     * @param pos
     * @param minDistance
     * @param pointPosArr
     * @returns 没有点或者没有吸附返回undefined
     */
    posAndPointPosArr(pos, minDistance, pointPosArr) {
        /** 如果没有点,返回undefined */
        if (pointPosArr.posArr.length == 0)
            return undefined;
        let absorbMsg = this.DUService.absorb.pointAndPoints(pos, pointPosArr.posArr, minDistance);
        /** 没有吸附,返回undefined */
        if (absorbMsg == undefined)
            return undefined;
        return {
            point: pointPosArr.points[absorbMsg.index],
            pos: absorbMsg.pos,
            distance: absorbMsg.distance
        };
    }
    /**
     * 点与墙所有轮廓直线吸附
     * @param pos
     * @param minDistance
     * @param wallsMsg
     * @returns undefined
     */
    posAndVerticalWallAllLines(pos, minDistance, wallsMsg) {
        let absorbMsg = this.DUService.absorb.pointAndLines(pos, wallsMsg.lines, true, minDistance);
        if (absorbMsg) {
            let data = {
                wall: wallsMsg.walls[absorbMsg.index],
                distance: absorbMsg.distance,
                pos: absorbMsg.pos,
                line: wallsMsg.lines[absorbMsg.index]
            };
            return data;
        }
        return undefined;
    }
    /* 线与墙的吸附 */
    lineAndWalls(line, rectDistance, wallsMsg) {
        let absorbMsg = this.DUService.absorb.lineAndLine(line, wallsMsg.lines, rectDistance);
        if (absorbMsg) {
            let data = {
                wall: wallsMsg.walls[absorbMsg.index],
                line: wallsMsg.lines[absorbMsg.index],
                distance: absorbMsg.distance,
                pos: absorbMsg.pos,
            };
            return data;
        }
        return undefined;
    }
}
AdsorbCal.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_1__["JdesignUtil2dService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__["CalculatorsService"] }
];
class WallAbsorb {
}
class AbosrbMsg {
}
class AbsorbLine {
}


/***/ }),

/***/ "./src/app/svg/common/calculator/build.cal.ts":
/*!****************************************************!*\
  !*** ./src/app/svg/common/calculator/build.cal.ts ***!
  \****************************************************/
/*! exports provided: BuildCal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BuildCal", function() { return BuildCal; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/calculators.service */ "./src/app/services/calculators.service.ts");



class BuildCal {
    constructor(dataService, DUService, calService) {
        this.dataService = dataService;
        this.DUService = DUService;
        this.calService = calService;
    }
}
BuildCal.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_1__["JdesignUtil2dService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__["CalculatorsService"] }
];


/***/ }),

/***/ "./src/app/svg/common/calculator/cornerWin.cal.ts":
/*!********************************************************!*\
  !*** ./src/app/svg/common/calculator/cornerWin.cal.ts ***!
  \********************************************************/
/*! exports provided: CornerWinCal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CornerWinCal", function() { return CornerWinCal; });
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _three_jDesign3D_JCornerWin3D__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../three/jDesign3D/JCornerWin3D */ "./src/app/three/jDesign3D/JCornerWin3D.ts");




class CornerWinCal {
    constructor(calService, dataService, DUService) {
        this.calService = calService;
        this.dataService = dataService;
        this.DUService = DUService;
    }
    /** 新建 */
    createNew(obj) {
        this.dataService.cache.floorplan.createAndMove = true;
        let win = new _three_jDesign3D_JCornerWin3D__WEBPACK_IMPORTED_MODULE_3__["JCornerWin3D"](obj, this.dataService, this.DUService);
        this.dataService.cache.cornerWin.createFunc(win);
        return win;
    }
    /** 与点合体 point必须只有两个cowall*/
    unionPoint(obj, point) {
        if (!point)
            return false;
        let cowallArr = point.getCowallArr();
        if (cowallArr[0].getPointEnd().id != point.id) {
            cowallArr = [cowallArr[1], cowallArr[0]];
        }
        /** 设置弧度 */
        obj.LRadian = cowallArr[0].getRadian() + Math.PI;
        obj.DRadian = cowallArr[1].getRadian();
        /** 设置坐标 */
        let posArr = this.calService.cowall.getInPosArr(cowallArr[1]);
        obj.pos = posArr[0];
        /** 设置点对象 */
        obj.pointID = point.id;
        point.cornWinID = obj.id;
        /** 设置墙对象 */
        let wallA = cowallArr[0].getWall();
        wallA.cornWinIDs.push(obj.id);
        wallA.cornWinIDs = this.DUService.cal.unique(wallA.cornWinIDs);
        let wallB = cowallArr[1].getWall();
        wallB.cornWinIDs.push(obj.id);
        wallB.cornWinIDs = this.DUService.cal.unique(wallB.cornWinIDs);
        return true;
    }
    removePoint(obj, point) {
        /** 设置点对象 */
        obj.pointID = null;
        point.cornWinID = null;
        /** 设置墙 */
        let wallArr = point.getWallArr();
        this.DUService.cal.removeByValue(wallArr[0].cornWinIDs, obj.id);
        this.DUService.cal.removeByValue(wallArr[1].cornWinIDs, obj.id);
    }
    /** 分离 */
    disconnectPoint(obj) {
        let point = obj.getPoint();
        if (point) {
            this.removePoint(obj, point);
        }
        obj.LRadian = Math.PI;
        obj.DRadian = Math.PI / 2;
        obj.pointID = null;
        return true;
    }
    /** 删除  */
    del(obj) {
        this.delWall(obj);
        obj.destory3D();
        delete this.dataService.cornerWins[obj.id];
    }
    /** 删除墙 */
    delWall(obj) {
        for (let key in this.dataService.walls) {
            let wall = this.dataService.walls[key];
            let a = this.DUService.cal.isInclude(wall.cornWinIDs, obj.id);
            if (a >= 0) {
                wall.cornWinIDs.splice(a, 1);
            }
        }
    }
    /** 遍历吸附加载 */
    listAbsorb() {
        let cornerWins = this.dataService.doCornerWins().arr();
        for (let i = 0; i < cornerWins.length; i++) {
            let point = cornerWins[i].getPoint();
            if (point) {
                let walls = point.getWallArr();
                if (walls.length != 2 || walls[0].arcDistance != 0 || walls[0].arcDistance != 0) {
                    this.disconnectPoint(cornerWins[i]);
                }
                else {
                    this.disconnectPoint(cornerWins[i]);
                    this.unionPoint(cornerWins[i], point);
                    this.dataService.cache.cornerWin.move(cornerWins[i], { x: point.pos.x, y: point.pos.y });
                    cornerWins[i].act3D.end();
                }
            }
            else {
                this.disconnectPoint(cornerWins[i]);
            }
            // this.dataService.cache.cornerWin.moveEnd(cornerWins[i])
        }
    }
}
CornerWinCal.ctorParameters = () => [
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_0__["CalculatorsService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"] }
];


/***/ }),

/***/ "./src/app/svg/common/calculator/cowall.cal.ts":
/*!*****************************************************!*\
  !*** ./src/app/svg/common/calculator/cowall.cal.ts ***!
  \*****************************************************/
/*! exports provided: CowallCal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CowallCal", function() { return CowallCal; });
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _three_jDesign3D_JCowall3D__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../three/jDesign3D/JCowall3D */ "./src/app/three/jDesign3D/JCowall3D.ts");




class CowallCal {
    constructor(calService, dataService, DUService) {
        this.calService = calService;
        this.dataService = dataService;
        this.DUService = DUService;
    }
    /** 是否同点 */
    isSamePos(cowall) {
        let posArr = cowall.getPosArr();
        let a = this.DUService.pos.isSamePos(posArr[0], posArr[1]);
        return a;
    }
    /** 判断墙是否同序 */
    isSameSort(cowall) {
        let wall = cowall.getWall();
        if (wall.coedgeID == cowall.id) {
            return true;
        }
        else
            return false;
    }
    /** 获取有序墙一边坐标 */
    getHalfPosArr(cowall, out) {
        let wall = cowall.getWall();
        let pathArr = this.calService.wall.getOutLine(wall);
        if (pathArr == null)
            return null;
        let posArr = null;
        if (out == (wall.coedgeID == cowall.id)) {
            posArr = [pathArr[1][1], pathArr[0][0]];
        }
        else {
            posArr = [pathArr[0][1], pathArr[1][0]];
        }
        return posArr;
    }
    /** 获取外有序墙坐标 */
    getOutPosArr(cowall) {
        return this.getHalfPosArr(cowall, true);
    }
    /** 获取内有序墙坐标 */
    getInPosArr(cowall) {
        return this.getHalfPosArr(cowall, false);
    }
    /** 获取外有序墙长度 */
    getOutLength(cowall) {
        let posArr = this.getOutPosArr(cowall);
        let distance = this.DUService.pos.getDistance(posArr[0], posArr[1]);
        return distance;
    }
    /** 获取内有序墙长度 */
    getInLength(cowall) {
        let posArr = this.getInPosArr(cowall);
        let distance = this.DUService.pos.getDistance(posArr[0], posArr[1]);
        return distance;
    }
    /** 删除关联的点(会触发联动) */
    delPointID(cowall) {
        let pointArr = cowall.getPointArr();
        for (let i = 0; i < pointArr.length; i++) {
            /** 找到相同的位置 */
            let int = this.DUService.cal.isInclude(pointArr[i].cowallIDs, cowall.id);
            if (int != null)
                pointArr[i].cowallIDs.splice(int, 1);
        }
    }
    /** 删除room 会触发room运算器联动 */
    delRoom(cowall) {
        let room = cowall.getRoom();
        if (room) {
            this.calService.room.delCowallID(room);
            this.calService.room.del(room);
        }
    }
    /** 删除上下关系 */
    delPrevNext(cowall) {
        let prevCowall = cowall.getPrevCowall();
        if (prevCowall != null && prevCowall != undefined && prevCowall.nextID == cowall.id)
            prevCowall.nextID = null;
        let nextCowall = cowall.getNextCowall();
        if (nextCowall != null && nextCowall != undefined && nextCowall.prevID == cowall.id)
            nextCowall.prevID = null;
    }
    /** 删除floorplan */
    delFloorplan(cowall) {
        let int = this.DUService.cal.isInclude(this.dataService.floorplan.cowallIDs, cowall.id);
        if (int != null) {
            this.dataService.floorplan.cowallIDs.splice(int, 1);
        }
    }
    getNearCowalls(cowall) {
        let pointArr = cowall.getPointArr();
        let cowalls = pointArr[0].getCowallArr();
        cowalls.push(...pointArr[1].getCowallArr());
        this.DUService.cal.removeByAttr(cowalls, 'id', cowall.id);
        return cowalls;
    }
    /** 删除父系关联(指空间或者floorplan关联) */
    delParent(cowall) {
        // console.log(cowall.id)
        // console.log('del parent')
        if (cowall.roomID != null) {
            this.delRoom(cowall);
            this.delFloorplan(cowall);
        }
        else {
            this.delFloorplan(cowall);
        }
    }
    /** 删除上下关系集合 */
    delPrevNexts(...cowalls) {
        for (let i = 0; i < cowalls.length; i++) {
            this.delPrevNext(cowalls[i]);
        }
    }
    /** 删掉wall索引,如果有反cowall,会自动设wall到cowall 删除成功则返回true*/
    delWallID(cowall) {
        let wall = cowall.getWall();
        if (wall.coedgeID == cowall.id) {
            if (cowall.partnerID != null)
                wall.coedgeID = cowall.partnerID;
            else
                return false;
        }
        cowall.edgeID = null;
        return true;
    }
    /** 删除(会删除彼此的partnerID) */
    del(cowall) {
        // this.dataService.cache.cowall.update3D.emit()
        cowall.destory3D();
        let oppCowall = cowall.getOppsiteCowall();
        if (oppCowall != null)
            oppCowall.partnerID = null;
        delete this.dataService.cowalls[cowall.id];
    }
    /** 设置新的空间号 */
    setNewRoomID(cowalls, roomID) {
        for (let i = 0; i < cowalls.length; i++) {
            cowalls[i].roomID = roomID;
        }
    }
    /** 设置calFlag */
    resetCalFlag(cowallArr, flag) {
        for (let i = 0; i < cowallArr.length; i++) {
            cowallArr[i].calFlag = flag;
        }
    }
    /** 上下合并(一般用于点合并使用) 会造成空间联动 */
    setPrevNextCombine(cowall) {
        let prevCowall = cowall.getPrevCowall();
        let nextCowall = cowall.getNextCowall();
        /** 都有情况下 */
        if (prevCowall != null && nextCowall != null) {
            prevCowall.nextID = nextCowall.id;
            nextCowall.prevID = prevCowall.id;
            if (cowall.roomID != null) {
                let room = cowall.getRoom();
                room.resetCowallIDs(prevCowall);
                cowall.roomID = null;
            }
        }
        /** 只有其中一个有 */
        else if (prevCowall != null) {
            prevCowall.nextID = null;
        }
        else if (nextCowall != null) {
            nextCowall.prevID = null;
        }
        cowall.prevID = null;
        cowall.nextID = null;
    }
    /** 绝对删除(会触发联动)) */
    absDel(cowall) {
        this.delPrevNext(cowall);
        this.delPointID(cowall);
        this.delWallID(cowall);
        this.delParent(cowall);
        this.del(cowall);
    }
    /** 删除不用的cowall */
    delNoUse(cowalls) {
        if (!cowalls) {
            cowalls = this.dataService.doCowalls().arr();
        }
        for (let i = cowalls.length - 1; i >= 0; i--) {
            if (!cowalls[i].roomID && cowalls[i].partnerID) {
                this.absDel(cowalls[i]);
            }
        }
    }
    /** 单cowall反向化 已经是双向cowall无效 */
    changeOppsite(cowall) {
        /** 双向cowall无效 */
        if (cowall.partnerID != null)
            return null;
        /** 生成反墙 */
        let newCowall = this.createOppositeCowall(cowall);
        /** 删除点联系 */
        this.delPointID(cowall);
        /** 删除原来cowall上下关系 */
        this.delPrevNext(cowall);
        /** 删除原来空间 */
        this.delRoom(cowall);
        /** 改变wall的索引 */
        let wall = cowall.getWall();
        wall.coedgeID = newCowall.id;
        newCowall.edgeID = wall.id;
        newCowall.partnerID = null;
        this.dataService.cache.cowall.oppsiteUpdate.emit([cowall, newCowall]);
        /** 删除原来的cowall */
        this.del(cowall);
        return newCowall;
    }
    /** 获取cowall数组 */
    getCowallsByIDs(cowallIDs) {
        let cowallArr = [];
        for (let i = 0; i < cowallIDs.length; i++) {
            cowallArr.push(this.dataService.cowalls[cowallIDs[i]]);
        }
        return cowallArr;
    }
    /** 设置顺序 sort正序为true,circle闭合为true 返回cowallIDs*/
    setSort(sort, circle, ...cowalls) {
        let cowallIDs = [];
        if (cowalls.length < 2)
            return cowallIDs;
        /** 先删除上下关系 */
        this.delPrevNexts(...cowalls);
        /** 正序 */
        if (sort) {
            cowalls[0].nextID = cowalls[1].id;
            cowallIDs.push(cowalls[0].id);
            for (let i = 1; i < cowalls.length - 1; i++) {
                cowalls[i].nextID = cowalls[i + 1].id;
                cowalls[i].prevID = cowalls[i - 1].id;
                cowallIDs.push(cowalls[i].id);
            }
            cowalls[cowalls.length - 1].prevID = cowalls[cowalls.length - 2].id;
            cowallIDs.push(cowalls[cowalls.length - 1].id);
            if (circle) {
                cowalls[0].prevID = cowalls[cowalls.length - 1].id;
                cowalls[cowalls.length - 1].nextID = cowalls[0].id;
            }
        }
        /** 逆序 */
        else {
            cowalls[0].prevID = cowalls[1].id;
            cowallIDs.splice(0, 0, cowalls[0].id);
            for (let i = 1; i < cowalls.length - 1; i++) {
                cowalls[i].prevID = cowalls[i + 1].id;
                cowalls[i].nextID = cowalls[i - 1].id;
                cowallIDs.splice(0, 0, cowalls[i].id);
            }
            cowalls[cowalls.length - 1].nextID = cowalls[cowalls.length - 2].id;
            cowallIDs.splice(0, 0, cowalls[cowalls.length - 1].id);
            if (circle) {
                cowalls[0].nextID = cowalls[cowalls.length - 1].id;
                cowalls[cowalls.length - 1].prevID = cowalls[0].id;
            }
        }
        return cowallIDs;
    }
    /** 产生新的cowall */
    createCowall(pointIDs) {
        let cowall = new _three_jDesign3D_JCowall3D__WEBPACK_IMPORTED_MODULE_3__["JCowall3D"]({ pointIDs: pointIDs }, this.dataService, this.DUService);
        return cowall;
    }
    /** 生成反cowall 如果有反cowall返回null */
    createOppositeCowall(cowall) {
        if (cowall.partnerID != null)
            return null;
        let newCowall = new _three_jDesign3D_JCowall3D__WEBPACK_IMPORTED_MODULE_3__["JCowall3D"]({
            pointIDs: [cowall.pointIDs[1], cowall.pointIDs[0]],
            edgeID: cowall.edgeID,
            partnerID: cowall.id
        }, this.dataService, this.DUService);
        return newCowall;
    }
    /** 判断点在墙上的坐标内外 */
    isOutPos(cowall, pos) {
        let posArr = cowall.getPosArr();
        let area = this.DUService.pos.getArea(pos, ...posArr);
        if (area < 0)
            return true;
        else
            return false;
    }
    /** 检测是否与相邻的边重叠(prev,next) */
    checkParallelByNear(cowall) {
        let radian = cowall.getRadian();
        let prevCowall = cowall.getPrevCowall();
        let nextCowall = cowall.getNextCowall();
        let msg = {
            /** cowall的上cowall */
            prev: null,
            prevDistance: null,
            /** cowall的下cowall */
            next: null,
            nextDistance: null
        };
        /** 判断上边 */
        if (prevCowall != null) {
            let prevRadian = prevCowall.getRadian();
            if (this.DUService.pos.isParallelRadian(radian, prevRadian)) {
                let startPoint = cowall.getPointEnd();
                let checkLine = prevCowall.getPosArr();
                let distance = this.DUService.pos.getDistance(startPoint.pos, this.DUService.pos.getPointToLinePos(startPoint.pos, checkLine[0], checkLine[1]));
                msg.prevDistance = distance;
                msg.prev = prevCowall;
            }
        }
        /** 判断下边 */
        if (nextCowall != null) {
            let nextRadian = nextCowall.getRadian();
            if (this.DUService.pos.isParallelRadian(radian, nextRadian)) {
                let endPoint = cowall.getPointStart();
                let checkLine = nextCowall.getPosArr();
                let distance = this.DUService.pos.getDistance(endPoint.pos, this.DUService.pos.getPointToLinePos(endPoint.pos, checkLine[0], checkLine[1]));
                msg.nextDistance = distance;
                msg.next = nextCowall;
            }
        }
        return msg;
    }
    /** 有序墙合体 cowallA依附cowallB合并成cowallB;
     * cowallA和cowallB必须是连着,否则返回false不作为;
     * 成功后cowallA会自当删除;
     * @param cowallA 必须没有反向索引, 否则返回false 不作为
     */
    combineCowalls(cowallA, cowallB) {
        if (cowallA.partnerID != null) {
            console.log(cowallA.partnerID);
            return false;
        }
        if (cowallA.prevID == cowallB.id) {
            cowallB.nextID = cowallA.nextID;
            let nextCowall = cowallA.getNextCowall();
            nextCowall.prevID = cowallB.id;
            nextCowall.pointIDs = [cowallB.pointIDs[1], nextCowall.pointIDs[1]];
            let room = cowallA.getRoom();
            if (room != null) {
                this.DUService.cal.removeByValue(room.cowallIDs, cowallA.id);
            }
            let wall = cowallA.getWall();
            this.calService.wall.delDepend(wall);
            this.delPointID(cowallA);
            delete this.dataService.points[cowallA.pointIDs[1]];
            delete this.dataService.walls[wall.id];
            delete this.dataService.cowalls[cowallA.id];
            return true;
        }
        else if (cowallA.nextID == cowallB.id) {
            cowallB.prevID = cowallA.prevID;
            let prevCowall = cowallA.getPrevCowall();
            prevCowall.nextID = cowallB.id;
            prevCowall.pointIDs = [prevCowall.pointIDs[0], cowallB.pointIDs[0]];
            let room = cowallA.getRoom();
            if (room != null) {
                this.DUService.cal.removeByValue(room.cowallIDs, cowallA.id);
            }
            let wall = cowallA.getWall();
            this.calService.wall.delDepend(wall);
            this.delPointID(cowallA);
            delete this.dataService.points[cowallA.pointIDs[0]];
            delete this.dataService.walls[wall.id];
            delete this.dataService.cowalls[cowallA.id];
            return true;
        }
        else {
            return false;
        }
    }
    /** 切割有序墙 有别与cutWall,不产生反cowall;
     * 新的cowall值得是从原点到距离切割的那部分
     * @param reversed cowall从头或者从尾切割,false为从头切割
     */
    cutCowall(cowall, per, reversed = false) {
        let pointStart = cowall.getPointStart();
        let pointEnd = cowall.getPointEnd();
        let distance = this.DUService.pos.getDistance(pointStart.pos, pointEnd.pos);
        let distancePer = distance * per;
        let radian = this.DUService.pos.getRadian(pointStart.pos, pointEnd.pos);
        let newCowall = null;
        let newPoint = null;
        /** 从头切割 */
        if (!reversed) {
            let rayPos = this.DUService.pos.getRayPos(pointStart.pos, radian, distancePer);
            newPoint = this.calService.point.createPoint({ x: pointStart.pos.x, y: pointStart.pos.y });
            pointStart.pos = rayPos;
            newCowall = this.calService.cowall.createCowall([newPoint.id, pointStart.id]);
            let prevCowall = cowall.getPrevCowall();
            if (prevCowall != null) {
                prevCowall.pointIDs = [prevCowall.pointIDs[0], newPoint.id];
                cowall.prevID = newCowall.id;
                newCowall.prevID = prevCowall.id;
                prevCowall.nextID = newCowall.id;
                newCowall.nextID = cowall.id;
            }
        }
        /** 从尾切割 */
        else {
            let rayPos = this.DUService.pos.getRayPos(pointEnd.pos, radian + Math.PI, distancePer);
            newPoint = this.calService.point.createPoint({ x: pointEnd.pos.x, y: pointEnd.pos.y });
            pointEnd.pos = rayPos;
            newCowall = this.calService.cowall.createCowall([pointEnd.id, newPoint.id]);
            let nextCowall = cowall.getNextCowall();
            if (nextCowall != null) {
                nextCowall.pointIDs = [newPoint.id, nextCowall.pointIDs[1]];
                cowall.nextID = newCowall.id;
                newCowall.nextID = nextCowall.id;
                nextCowall.prevID = newCowall.id;
                newCowall.prevID = cowall.id;
            }
        }
        newCowall.roomID = cowall.roomID;
        let newWall = this.calService.wall.createWall(newCowall.id);
        newCowall.edgeID = newWall.id;
        let room = cowall.getRoom();
        if (room != null) {
            room.cowallIDs.push(newCowall.id);
        }
        return {
            wall: newWall,
            cowall: newCowall,
            point: newPoint
        };
    }
    /** 检测是否重边 */
    checkpolymerization(cowall) {
        let pointStart = cowall.getPointStart();
        let pointEnd = cowall.getPointEnd();
        let oppsiteCowall = cowall.getOppsiteCowall();
        let startCowallArr = pointStart.getCowallArr();
        this.DUService.cal.removeByAttr(startCowallArr, 'id', cowall.id);
        let endCowallArr = pointEnd.getCowallArr();
        this.DUService.cal.removeByAttr(endCowallArr, 'id', cowall.id);
        if (oppsiteCowall != null) {
            this.DUService.cal.removeByAttr(startCowallArr, 'id', oppsiteCowall.id);
            this.DUService.cal.removeByAttr(endCowallArr, 'id', oppsiteCowall.id);
        }
        let radian = cowall.getRadian();
        let msg = { start: null, end: null, startInclude: false, endInclude: false };
        /** 开始点 */
        for (let i = 0; i < startCowallArr.length; i++) {
            let cowallRadian = startCowallArr[i].getRadian();
            let a = this.DUService.pos.isParallelRadian(radian, cowallRadian);
            if (a) {
                let pointArr = startCowallArr[i].getPointArr();
                let samePos = null;
                let checkPosArr = [];
                if (pointArr[0].id == pointStart.id) {
                    samePos = pointArr[0].pos;
                    checkPosArr = [pointArr[1].pos, pointEnd.pos];
                }
                else {
                    samePos = pointArr[1].pos;
                    checkPosArr = [pointArr[0].pos, pointEnd.pos];
                }
                if (this.DUService.pos.isInLine(samePos, checkPosArr[0], checkPosArr[1])) {
                    msg.startInclude = true;
                    msg.start = startCowallArr[i];
                    break;
                }
                else if (this.DUService.pos.isInLine(samePos, checkPosArr[1], checkPosArr[0])) {
                    msg.startInclude = false;
                    msg.start = startCowallArr[i];
                    break;
                }
            }
        }
        /** 结束点 */
        for (let i = 0; i < endCowallArr.length; i++) {
            let cowallRadian = endCowallArr[i].getRadian();
            let a = this.DUService.pos.isParallelRadian(radian, cowallRadian);
            if (a) {
                let pointArr = endCowallArr[i].getPointArr();
                let samePos = null;
                let checkPosArr = [];
                if (pointArr[0].id == pointEnd.id) {
                    samePos = pointArr[0].pos;
                    checkPosArr = [pointArr[1].pos, pointStart.pos];
                }
                else {
                    samePos = pointArr[1].pos;
                    checkPosArr = [pointArr[0].pos, pointStart.pos];
                }
                if (this.DUService.pos.isInLine(samePos, checkPosArr[0], checkPosArr[1])) {
                    msg.endInclude = true;
                    msg.end = endCowallArr[i];
                    break;
                }
                else if (this.DUService.pos.isInLine(samePos, checkPosArr[1], checkPosArr[0])) {
                    msg.endInclude = false;
                    msg.end = endCowallArr[i];
                    break;
                }
            }
        }
        return msg;
    }
    /* 检测空间是否存在 */
    checkRoomExist(cowalls) {
        if (!cowalls) {
            cowalls = this.dataService.doCowalls().arr();
        }
        for (let i = 0; i < cowalls.length; i++) {
            let roomID = cowalls[i].roomID;
            if (!roomID) {
                let room = this.dataService.rooms[roomID];
                if (!room) {
                    cowalls[i].roomID = undefined;
                }
            }
        }
    }
}
CowallCal.ctorParameters = () => [
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_0__["CalculatorsService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"] }
];


/***/ }),

/***/ "./src/app/svg/common/calculator/createRoom.cal.extends.ts":
/*!*****************************************************************!*\
  !*** ./src/app/svg/common/calculator/createRoom.cal.extends.ts ***!
  \*****************************************************************/
/*! exports provided: CreateRoomCalExtends, RoomLine, JBox, ChoosedBox */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CreateRoomCalExtends", function() { return CreateRoomCalExtends; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RoomLine", function() { return RoomLine; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JBox", function() { return JBox; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChoosedBox", function() { return ChoosedBox; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _createRoom_del_cal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./createRoom.del.cal */ "./src/app/svg/common/calculator/createRoom.del.cal.ts");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");





/** 生成新空间运算器
 * 步骤如下:
 * 1.先收集线端的数据
 * 2.通过局部遍历判断收集可以产生新空间的线段
 * 3.非空间有序墙必不能存在有反序墙
 */
class CreateRoomCalExtends extends _createRoom_del_cal__WEBPACK_IMPORTED_MODULE_3__["CreateRoomDelCal"] {
    constructor(dataService, DUService, calService) {
        super(dataService, DUService, calService);
        this.dataService = dataService;
        this.DUService = DUService;
        this.calService = calService;
        this._lineID = 0;
        /** 使用过的floorplan */
        this._useFloorPlanLines = [];
        /** 单墙线 */
        this._floorPlanLines = [];
        /** 外空间线 */
        this._roomsOutLines = [];
        /** 内空间线 */
        this._roomsInLines = [];
        /** 对象线组合 */
        this._objLines = [];
        /** 盒子收集器 */
        this._boxesCache = [];
    }
    /** 获取id */
    get lineID() {
        this._lineID++;
        return this._lineID;
    }
    get useFloorPlanLines() { return this._useFloorPlanLines; }
    set useFloorPlanLines(data) { this._useFloorPlanLines = data; }
    /** 单墙线 */
    get floorPlanLines() { return this._floorPlanLines; }
    set floorPlanLines(data) { this._floorPlanLines = data; }
    /** 外空间线 */
    get roomsOutLines() { return this._roomsOutLines; }
    set roomsOutLines(data) { this._roomsOutLines = data; }
    /** 内空间线 */
    get roomsInLines() { return this._roomsInLines; }
    set roomsInLines(data) { this._roomsInLines = data; }
    /** 对象线组合 */
    get objLines() { return this._objLines; }
    set objLines(data) { this._objLines = data; }
    /** 盒子收集器 */
    get boxesCache() { return this._boxesCache; }
    set boxesCache(data) { this._boxesCache = data; }
    /** 数据清空 */
    cleanData() {
        this.objLines = [];
        this.floorPlanLines = [];
        this.roomsInLines = [];
        this.roomsOutLines = [];
        this.useFloorPlanLines = [];
    }
    /** 将lines数组编程对象数组 */
    addLinesToObj(...lines) {
        for (let i = 0; i < lines.length; i++) {
            let id = this.getobjLineName(lines[i]);
            this.objLines[id] = lines[i];
            /** 有空间依赖的 */
            if (lines[i].roomID != null) {
                /** 在空间外 */
                if (lines[i].cowallID == null) {
                    this.roomsOutLines[id] = lines[i];
                    lines[i].type = 'roomsOutLine';
                }
                /** 在空间内 */
                else {
                    /** 没有空间索引,需要新创建 */
                    if (this.roomsInLines[lines[i].roomID] == undefined) {
                        this.roomsInLines[lines[i].roomID] = [];
                    }
                    this.roomsInLines[lines[i].roomID][id] = lines[i];
                    lines[i].type = 'roomsInLine';
                }
            }
            /** 没有空间依赖,一定是单墙 */
            else {
                this.floorPlanLines[id] = lines[i];
                lines[i].type = 'floorPlanLine';
            }
        }
    }
    /** 删除lines */
    delLines(lines) {
        for (let i = 0; i < lines.length; i++) {
            // console.log(i)
            let id = this.getobjLineName(lines[i]);
            /** 删除总的 */
            delete this.objLines[id];
            /** 有空间依赖的 */
            if (lines[i].roomID != null) {
                /** 在空间外 */
                if (lines[i].cowallID == null) {
                    delete this.roomsOutLines[id];
                }
                /** 在空间内 */
                else {
                    delete this.roomsInLines[lines[i].roomID][id];
                }
            }
            /** 没有空间依赖,一定是单墙 */
            else {
                /** 记录单墙使用 */
                let newCowallID = undefined;
                let coNum = undefined;
                // try {
                coNum = this.floorPlanLines[id].cowallID == null ? -1 : 1;
                newCowallID = coNum == 1 ? this.floorPlanLines[id].cowallID : this.floorPlanLines[id].OCowallID;
                // }
                // catch (e) {
                //     console.log('---------------------')
                //     console.log(lines)
                //     console.log(e)
                //     return false
                // }
                if (this.useFloorPlanLines[newCowallID] == undefined) {
                    this.useFloorPlanLines[newCowallID] = {
                        co: coNum == 1 ? true : false,
                        OCo: coNum != 1 ? true : false
                    };
                }
                else {
                    coNum == 1 ? this.useFloorPlanLines[newCowallID].co = true :
                        this.useFloorPlanLines[newCowallID].OCo = true;
                }
                delete this.floorPlanLines[id];
            }
        }
    }
    /** 获取line的在objline名字 */
    getobjLineName(line) {
        let id = line.cowallID != null ? line.cowallID : 'o' + line.OCowallID;
        return id;
    }
    /** 通过cowall获取line */
    getLineByCowall(cowall) {
        let line = this.objLines[cowall.id];
        return line;
    }
    /** 初始化使用的线段
     * console调试用,调试请开启
    */
    initLines() {
        this.cleanData();
        let lines = this.getCowallsLine();
        // console.log(`线的个数:${lines.length}`)
        this.objLines = [];
        this.addLinesToObj(...lines);
        let arrID = [];
        for (let key in this._roomsOutLines) {
            arrID.push(key);
        }
        // console.log('外空间')
        // console.log(arrID)
        // arrID = []
        // for (let keyA in this._roomsInLines) {
        //     for (let keyB in this._roomsInLines[keyA]) {
        //         arrID.push(keyB)
        //     }
        // }
        // console.log('内空间')
        // console.log(arrID)
        // arrID = []
        // for (let key in this._floorPlanLines) {
        //     arrID.push(key)
        // }
        // console.log('表空间')
        // console.log(arrID)
    }
    /** 收集所有cowall的线段 */
    getCowallsLine() {
        let datas = [];
        let key = null;
        for (key in this.dataService.cowalls) {
            let cowall = this.dataService.cowalls[key];
            let newData = {
                pointIDs: [cowall.getPointStart().id, cowall.getPointEnd().id],
                cowallID: cowall.id,
                OCowallID: null,
                wallID: cowall.edgeID,
                roomID: cowall.roomID,
                id: this.lineID
            };
            datas.push(newData);
            /** 没有partnerID意味着没有反序墙,需要模拟反序线 */
            if (cowall.partnerID == null) {
                newData = {
                    pointIDs: [cowall.getPointEnd().id, cowall.getPointStart().id],
                    cowallID: null,
                    OCowallID: cowall.id,
                    wallID: cowall.edgeID,
                    roomID: cowall.roomID,
                    id: this.lineID
                };
                datas.push(newData);
            }
            // if (this.dataService.cowalls[key].partnerID == null) {
            // }
        }
        return datas;
    }
    /** 是否存在相同的线 */
    isSameLine(line, lineArr) {
        return this.DUService.cal.isIncludeByAttr('id', line.id, ...lineArr);
    }
    /** 找线规则 */
    getFindLines(box) {
        let line = box.lines[box.lines.length - 1];
        let lines = [];
        /** 规则 */
        let ruleFunc = (keyLine) => {
            let a = 
            /** 必须相连 */
            keyLine.pointIDs[0] == line.pointIDs[1] &&
                /** 不能是反线 */
                keyLine.pointIDs[1] != line.pointIDs[0];
            return a;
        };
        /** 在空间内产生的空间===================================== */
        if (box.out == 2) {
            /** 可能会经过内空间 */
            for (let key in this.roomsInLines[box.roomID]) {
                if (ruleFunc(this.roomsInLines[box.roomID][key]))
                    lines.push(this.roomsInLines[box.roomID][key]);
            }
            /** 也有可能会经过单墙 */
            for (let key in this.floorPlanLines) {
                if (ruleFunc(this.floorPlanLines[key]))
                    lines.push(this.floorPlanLines[key]);
            }
        }
        /** 在空间外部产生的空间=========================== */
        else if (box.out == 1) {
            /** 可能会经过外空间 */
            for (let key in this.roomsOutLines) {
                if (ruleFunc(this.roomsOutLines[key]))
                    lines.push(this.roomsOutLines[key]);
            }
            /** 也有可能会经过单墙 */
            for (let key in this.floorPlanLines) {
                if (ruleFunc(this.floorPlanLines[key]))
                    lines.push(this.floorPlanLines[key]);
            }
        }
        /** 不清楚情况遍历全部=========================== */
        else if (box.out == 0) {
            for (let key in this.objLines) {
                if (ruleFunc(this.objLines[key]))
                    lines.push(this.objLines[key]);
            }
        }
        return lines;
    }
    /** 下条线规则 */
    nextLineRule(box, line) {
        let a = true;
        return a;
        /** 符合规则====================================== */
        /** 在外面 */
        // if (box.out) {
        //     /** 在外面的线可以有空间索引,但cowall索引必须为空,因为不在空间内 */
        //     if (
        //         (line.roomID != null && line.cowallID == null) ||
        //         /** 线没有空间索引时,判断不了,所以为true */
        //         line.roomID == null
        //     ) {
        //         return true
        //     }
        //     else {
        //         return false
        //     }
        // }
        // /** 线在里面 */
        // else if (box.roomID == line.roomID || line.roomID == null) {
        //     return true
        // }
        // /** 不符合规则============================ */
        // else {
        //     return false
        // }
    }
    /** 获取反向线 (linesObj为对象数组) */
    getOppsiteLine(line, linesObj) {
        if (line.cowallID == null) {
            return linesObj[line.OCowallID];
        }
        else {
            return linesObj['o' + line.cowallID];
        }
    }
    /** 获取反向线数组 (linesObj为对象数组) */
    getOppsiteLines(lines, linesObj) {
        let newLines = [];
        for (let i = 0; i < lines.length; i++) {
            newLines.push(this.getOppsiteLine(lines[i], linesObj));
        }
        return newLines;
    }
    /** 通过line改写box属性规则 */
    lineChangeBox(box, line) {
        /** 判断盒子与空间的联系 */
        if (line.roomID != null) {
            /** 判断盒子是否与空间关联 */
            if (box.roomID == null)
                box.roomID = line.roomID;
            /** 判断盒子是否在空间里面 */
            if (line.cowallID != null)
                box.out = 2;
            /** 在空间外 */
            else {
                box.out = 1;
            }
        }
        box.lines.push(line);
        return true;
    }
    /** 获取尾部插入线 点和线的首点比较,返回线下标,没有返回null */
    getEndPointIntersect(pointID, lines) {
        for (let i = 0; i < lines.length; i++) {
            if (pointID == lines[i].pointIDs[0])
                return i;
        }
        return null;
    }
    /** 是否包围原来空间 */
    isInCludeRoom(box) {
        let roomID = box.lines[0].roomID;
        if (roomID != null) {
            let same = this.DUService.cal.isSameArrByAttr(box.lines, 'roomID');
            if (same)
                return true;
        }
        return false;
    }
    /** 通过面积获取box */
    getBoxByArea(boxes) {
        let posArr = [];
        let minArea = null;
        let minBox = null;
        for (let i = 0; i < boxes.length; i++) {
            let area = this.getBoxArea(boxes[i]);
            if (area > 0 && (minArea == null || minArea > area)) {
                minArea = area;
                minBox = boxes[i];
            }
        }
        return minBox;
    }
    /** 获取box面积 */
    getBoxArea(box) {
        let posArr = [];
        /** 获取计算面积的点 */
        for (let i = 0; i < box.lines.length; i++) {
            posArr.push(this.dataService.points[box.lines[i].pointIDs[0]].pos);
        }
        /** 计算面积 */
        let area = this.DUService.pos.getArea(...posArr);
        return area;
    }
    /** 通过盒子删除空间 */
    delRoomsByroomIDs(roomIDs) {
        roomIDs = this.DUService.cal.unique(roomIDs);
        for (let i = 0; i < roomIDs.length; i++) {
            let room = this.dataService.rooms[roomIDs[i]];
            if (room) {
                let cowallArr = room.getCowallArr();
                for (let i = 0; i < cowallArr.length; i++) {
                    if (rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["combineAll"][i] && cowallArr[i].roomID == room.id) {
                        cowallArr[i].roomID = null;
                    }
                }
                this.calService.room.del(room);
            }
        }
    }
    /** 删除错误空间单墙 */
    delRoomErrFloorPlanCowalls(rooms) {
        for (let i = 0; i < rooms.length; i++) {
            // console.log(rooms[i].id)
            let cowalls = rooms[i].getCowallArrBySort();
            for (let j = 0; j < cowalls.length; j++) {
                let oppositeCowall = cowalls[j].getOppsiteCowall();
                // console.log(oppositeCowall)
                if (oppositeCowall != null) {
                    if (oppositeCowall.roomID == null) {
                        // console.log('sss')
                        let wall = oppositeCowall.getWall();
                        wall.coedgeID = cowalls[j].id;
                        cowalls[j].edgeID = wall.id;
                        // this.calService.cowall.delFloorplan(oppositeCowall)
                        // this.calService.cowall.delPrevNext(oppositeCowall)
                        // this.calService.cowall.delPointID(oppositeCowall)
                        // this.calService.cowall.delWallID(oppositeCowall)
                        // this.calService.cowall.del(oppositeCowall)
                        this.calService.cowall.absDel(oppositeCowall);
                    }
                }
            }
        }
    }
    /** 删除错误单墙 */
    delFloorplanErrCowalls() {
        for (let key in this.useFloorPlanLines) {
            if (this.useFloorPlanLines[key].OCo && !this.useFloorPlanLines[key].co) {
                let cowall = this.dataService.cowalls[key];
                let OCowall = cowall.getOppsiteCowall();
                // console.log(OCowall.id)
                let wall = cowall.getWall();
                wall.coedgeID = OCowall.id;
                OCowall.edgeID = wall.id;
                // /** 删除 */
                this.calService.cowall.delPrevNext(cowall);
                this.calService.cowall.delPointID(cowall);
                this.calService.cowall.delFloorplan(cowall);
                this.calService.cowall.del(cowall);
            }
        }
    }
    /** 删除错误单墙prevNext */
    delFloorplanErrCowallsNP() {
        for (let i = 0; i < this.dataService.floorplan.cowallIDs.length; i++) {
            let key = this.dataService.floorplan.cowallIDs[i];
            let cowall = this.dataService.cowalls[key];
            // console.log(key)
            // console.log(cowall)
            if (cowall) {
                let prevCowall = cowall.getPrevCowall();
                if (prevCowall != null && prevCowall != undefined && prevCowall.nextID != cowall.id) {
                    cowall.prevID = null;
                }
                let nextCowall = cowall.getNextCowall();
                if (nextCowall != null && nextCowall != undefined && nextCowall.prevID != cowall.id) {
                    cowall.nextID = null;
                }
            }
        }
    }
    /* 删除使用过的线 */
    delNoUseLine(line) {
        let id = this.getobjLineName(line);
        switch (line.type) {
            case "roomsOutLine":
                delete this.roomsOutLines[id];
                break;
            case "floorPlanLine":
                delete this.floorPlanLines[id];
                break;
        }
    }
}
CreateRoomCalExtends.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_1__["JdesignUtil2dService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__["CalculatorsService"] }
];
class RoomLine {
}
/** 闭合盒子还未形成空间,有形成空间元素 */
class JBox {
}
/** 被选中的盒子 */
class ChoosedBox {
}


/***/ }),

/***/ "./src/app/svg/common/calculator/createRoom.cal.ts":
/*!*********************************************************!*\
  !*** ./src/app/svg/common/calculator/createRoom.cal.ts ***!
  \*********************************************************/
/*! exports provided: CreateRoomCal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CreateRoomCal", function() { return CreateRoomCal; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _createRoom_cal_extends__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./createRoom.cal.extends */ "./src/app/svg/common/calculator/createRoom.cal.extends.ts");




/** 生成新空间运算器
 * 步骤如下:
 * 1.先收集线端的数据
 * 2.通过局部遍历判断收集可以产生新空间的线段
 * 3.非空间有序墙必不能存在有反序墙
 */
class CreateRoomCal extends _createRoom_cal_extends__WEBPACK_IMPORTED_MODULE_3__["CreateRoomCalExtends"] {
    constructor(dataService, DUService, calService) {
        super(dataService, DUService, calService);
        this.dataService = dataService;
        this.DUService = DUService;
        this.calService = calService;
    }
    checkBoxStart(box) {
        let line = box.lines[0];
        let id = this.getobjLineName(line);
        if (line.roomID != null) {
            /** 在空间外 */
            if (line.cowallID == null) {
                if (this.roomsOutLines[id] == undefined)
                    return false;
            }
            /** 在空间内 */
            else {
                if (this.roomsInLines[id] == undefined)
                    return false;
            }
        }
        else {
            if (this.floorPlanLines[id] == undefined)
                return false;
        }
        return true;
    }
    /** 切割空间
     * console是调试用的,调试请开启
     */
    cutRoom(cutWalls, isDelParallel = false, roomReadyMsgs) {
        // console.time('xx')
        this.initLines();
        let startBoxes = this.getLineStart(cutWalls);
        let roomIDs = [];
        let newRooms = [];
        // console.log(`开始线数: ${startBoxes.length}`)
        /* 开始寻找空间 */
        for (let i = 0; i < startBoxes.length; i++) {
            let newBoxes = [startBoxes[i]];
            let check = this.checkBoxStart(newBoxes[0]);
            if (!check)
                continue;
            let a = this.findCircleBox(newBoxes);
            let circleBox = this.getBoxByArea(a);
            if (circleBox != null) {
                try {
                    // console.log(this.DUService.cal.getNewAttrArray(circleBox.lines, 'wallID'))
                    // console.log('======================')
                    let room = this.getCreateRoomByBox(circleBox, roomReadyMsgs);
                    newRooms.push(room);
                    this.delLines(circleBox.lines);
                    if (circleBox.roomID != null && circleBox.out == 2)
                        roomIDs.push(circleBox.roomID);
                    // console.log(room.cowallIDs)
                    // console.log('rrrrrrrrrrrrrrrrrrrrrrrrrrrrrr')
                }
                catch (e) {
                    console.log(e);
                    console.log(circleBox);
                    return undefined;
                }
            }
        }
        /* 找到新的空间 */
        // console.log(`产生空间数量:${newRooms.length}`)
        if (newRooms.length != 0) {
            this.delRoomsByroomIDs(roomIDs);
            this.delFloorplanErrCowalls();
            this.delFloorplanErrCowallsNP();
            this.delRoomErrFloorPlanCowalls(newRooms);
        }
        /** 删除平行墙 */
        if (isDelParallel) {
            for (let i = 0; i < newRooms.length; i++) {
                this.calService.room.delParallel(newRooms[i]);
            }
        }
        return newRooms;
        // console.timeEnd('xx')
    }
    /** 交点开始 */
    getLineStart(cutWalls) {
        /** 收集到的闭合盒子,还不是空间 */
        let boxes = [];
        let box = null;
        let setBoxesfunc = (cowall) => {
            let line = this.getLineByCowall(cowall);
            box = {
                lines: [line],
                roomID: line.roomID,
                start: cowall.getPointStart().id,
                out: 0,
                done: 0,
                id: this.lineID
            };
            boxes.push(box);
            // console.log(line.cowallID)
            // console.log(line.OCowallID)
            // console.log('===========')
            line = this.getOppsiteLine(line, this.objLines);
            if (line != undefined) {
                box = {
                    lines: [line],
                    roomID: line.roomID,
                    start: cowall.getPointEnd().id,
                    out: 0,
                    done: 0,
                    id: this.lineID
                };
                boxes.push(box);
            }
        };
        /** cutWall部分 */
        for (let i = 0; i < cutWalls.length; i++) {
            let cowall = cutWalls[i].getCowall();
            let pointArr = cowall.getPointArr();
            let need = true;
            for (let i = 0; i < pointArr.length; i++) {
                if (pointArr[i].cowallIDs.length == 1) {
                    need = false;
                    break;
                }
            }
            need ? setBoxesfunc(cowall) : null;
        }
        return boxes;
    }
    /** 寻找闭合盒子组合 findFunc为寻找规则 */
    getnextLinesByBoxes(boxes) {
        let length = boxes.length - 1;
        let circleBoxes = [];
        for (let i = length; i >= 0; i--) {
            /** 已经闭合或者没有出路就不要寻找了 */
            if (boxes[i].done == 0) {
                /** 分支线 */
                let BranchLines = this.getFindLines(boxes[i]);
                /** 对要加工的lines进行加工 */
                if (BranchLines.length != 0) {
                    /** 将导入到box里面 */
                    let circleBox = this.boxesAddBranchLines(boxes, i, ...BranchLines);
                    if (circleBox != null)
                        circleBoxes.push(circleBox);
                }
                /** 如果没有分支线,即没有了点没有路可以走了 */
                else {
                    boxes[i].done = 2;
                    /** 删除作废的盒子 */
                    boxes.splice(i, 1);
                }
            }
            /** 已经是没路 */
            else if (boxes[i].done == 2) {
                /** 删除作废的盒子 */
                boxes.splice(i, 1);
            }
        }
        return circleBoxes;
    }
    /** 寻找闭合盒子 */
    findCircleBox(boxes) {
        let newBoxes = [];
        let circleBoxes = this.getnextLinesByBoxes(boxes);
        newBoxes.push(...circleBoxes);
        let findInt = 30;
        while (boxes.length != 0) {
            circleBoxes = this.getnextLinesByBoxes(boxes);
            newBoxes.push(...circleBoxes);
        }
        return newBoxes;
    }
    // /** 点寻找盒子 */
    // pointFindBoxes(point: JPoint, lines: RoomLine[]) {
    //     let start = this.getLineStart(point, lines)
    //     let newBoxes: JBox[] = []
    //     let circleBoxes = this.getCircleBoxes(start.boxes, lines)
    //     newBoxes.push(...circleBoxes)
    //     while (start.boxes.length != 0) {
    //         circleBoxes = this.getCircleBoxes(start.boxes, lines)
    //         newBoxes.push(...circleBoxes)
    //     }
    //     return newBoxes
    // }
    /** 将要导入的line导入到box, boxInt指向boxes数组下标 形成闭合删除数组原来的并返回闭合盒子 */
    boxesAddBranchLines(boxes, boxInt, ...lines) {
        let circleLineInt = null;
        let addLineInt = [];
        let circleBox = null;
        for (let i = lines.length - 1; i >= 0; i--) {
            /** 检查插入情况 */
            let a = this.getEndPointIntersect(lines[i].pointIDs[1], boxes[boxInt].lines);
            /** 没有插入 */
            if (a == null) {
                addLineInt.push(i);
            }
            /** 刚好插入到原点形成闭合 */
            else if (a == 0) {
                circleLineInt = i;
                addLineInt.push(i);
            }
        }
        /** 添加线 */
        if (addLineInt.length != 0) {
            /** 先添加需要分支的 */
            for (let i = 1; i < addLineInt.length; i++) {
                let newBox = this.DUService.obj.clone(boxes[boxInt]);
                boxes.push(newBox);
                this.lineChangeBox(newBox, lines[addLineInt[i]]);
                if (circleLineInt == addLineInt[i]) {
                    newBox.done = 1;
                    circleBox = newBox;
                    boxes.splice(-1, 1);
                }
            }
            /** 再添加不分支的 */
            this.lineChangeBox(boxes[boxInt], lines[addLineInt[0]]);
            if (circleLineInt == addLineInt[0]) {
                boxes[boxInt].done = 1;
                circleBox = boxes[boxInt];
                boxes.splice(boxInt, 1);
            }
        }
        else {
            boxes[boxInt].done = 2;
        }
        return circleBox;
    }
    /** 通过盒子产生新的空间 */
    getCreateRoomByBox(box, roomReadyMsgs) {
        let room = this.getRoomByRoomReadyMsgs(box, roomReadyMsgs);
        let cowallArr = [];
        let cowallIDArr = [];
        let cowall = null;
        for (let i = 0; i < box.lines.length; i++) {
            /** cowall为反墙 */
            if (box.lines[i].cowallID == null) {
                cowall = this.dataService.cowalls[box.lines[i].OCowallID];
                cowall = this.calService.cowall.createOppositeCowall(cowall);
                try {
                    box.lines[i].newCowallID = cowall.id;
                }
                catch (e) {
                    console.log('=================================================');
                    console.log(JSON.stringify(box.lines[i]));
                    cowall = this.dataService.cowalls[box.lines[i].OCowallID];
                    console.log(cowall.getOppsiteCowall().id);
                    console.log(i);
                    console.log(e);
                    return undefined;
                }
            }
            else {
                cowall = this.dataService.cowalls[box.lines[i].cowallID];
            }
            if (i != 0) {
                cowall.prevID = cowallArr[i - 1].id;
                cowallArr[i - 1].nextID = cowall.id;
            }
            cowallArr.push(cowall);
            cowallIDArr.push(cowall.id);
            // cowall.roomID = room.id
            // console.log(cowall.id)
            // console.log(room.id)
            // console.log('===============')
        }
        room.cowallIDs = cowallIDArr;
        cowallArr[0].prevID = cowallArr[cowallArr.length - 1].id;
        cowallArr[cowallArr.length - 1].nextID = cowallArr[0].id;
        return room;
    }
    /** 通过空间准备信息获取room */
    getRoomByRoomReadyMsgs(box, roomReadyMsgs) {
        /*  */
        let getRoomByMsgFunc = (msg) => {
            let cloneData = this.DUService.obj.clone(msg.roomData);
            cloneData.cowallIDs = [];
            cloneData.isAutoMoveAreaPos = true;
            let room = this.calService.undoRedo.redoSingleData(this.dataService.rooms, cloneData);
            cloneData = this.DUService.obj.clone(msg.floorData);
            let floor = this.calService.undoRedo.redoSingleData(this.dataService.floors, cloneData);
            cloneData = this.DUService.obj.clone(msg.roofData);
            let roof = this.calService.undoRedo.redoSingleData(this.dataService.roofs, cloneData);
            // let newData = this.calService.room.createRoom(msg.roomData, msg.floorData, msg.roofData)
            room.floorID = floor.id;
            room.roofID = roof.id;
            floor.roomID = room.id;
            roof.roomID = room.id;
            return room;
        };
        let getRoomByBoxFunc = () => {
            if (box.roomID != undefined) {
                let room = this.dataService.rooms[box.roomID];
                if (room) {
                    let msg = this.calService.room.copyRoom(room);
                    let newRoom = getRoomByMsgFunc(msg);
                    return newRoom;
                }
            }
            let room = this.calService.room.createRoom({ cowallIDs: [] }).room;
            return room;
        };
        /* 没有准备资料 */
        if (!roomReadyMsgs) {
            return getRoomByBoxFunc();
        }
        let roomInts = [];
        /* 收集 */
        for (let i = 0; i < box.lines.length; i++) {
            for (let key in roomReadyMsgs) {
                if (this.DUService.cal.isInclude(roomReadyMsgs[key].cowallIDs, box.lines[i].cowallID) != undefined) {
                    if (roomInts[roomReadyMsgs[key].roomID] == undefined)
                        roomInts[roomReadyMsgs[key].roomID] = 0;
                    roomInts[roomReadyMsgs[key].roomID]++;
                }
            }
        }
        /* 统计 */
        let maxMsg = undefined;
        for (let key in roomInts) {
            if (!maxMsg || maxMsg.int < roomInts[key]) {
                maxMsg = { key: key, int: roomInts[key] };
            }
        }
        /* 创建 */
        if (!maxMsg) {
            return getRoomByBoxFunc();
        }
        else {
            let msg = roomReadyMsgs[maxMsg.key];
            let room = getRoomByMsgFunc(msg);
            return room;
        }
    }
}
CreateRoomCal.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_1__["JdesignUtil2dService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__["CalculatorsService"] }
];


/***/ }),

/***/ "./src/app/svg/common/calculator/createRoom.del.cal.ts":
/*!*************************************************************!*\
  !*** ./src/app/svg/common/calculator/createRoom.del.cal.ts ***!
  \*************************************************************/
/*! exports provided: CreateRoomDelCal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CreateRoomDelCal", function() { return CreateRoomDelCal; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/calculators.service */ "./src/app/services/calculators.service.ts");



/**
 * 删除后创建空间计算器
 * @class calFlag:0没有,1要使用,2删除,3已使用
 */
class CreateRoomDelCal {
    constructor(dataService, DUService, calService) {
        this.dataService = dataService;
        this.DUService = DUService;
        this.calService = calService;
    }
    /** 删除平行墙创建新的空间 */
    createRoomByDelWall(delWall) {
        let roomArr = delWall.getRoomArr();
        let delWallCowalls = delWall.getCowallArr();
        /** 收集需要运算的wall */
        let calWalls = [];
        for (let i = 0; i < roomArr.length; i++) {
            calWalls.push(...roomArr[i].getWallArr());
        }
        /** 去掉重复 */
        calWalls = this.DUService.cal.uniqueByAttr(calWalls, 'id');
        /** 去掉需要删除的wall */
        this.DUService.cal.removeByAttr(calWalls, 'id', delWall.id);
        /** 删除原来的空间 */
        for (let i = 0; i < delWallCowalls.length; i++) {
            this.calService.cowall.delRoom(delWallCowalls[i]);
        }
        /** 删除要删除的墙 */
        this.calService.wall.absDel(delWall);
        /** 收集要运算的cowall */
        let calCowalls = this.calService.transData.getCowallsByWalls(calWalls);
        /** 删除多余cowall,分空间算法严谨,不能有多余的从wall */
        this.calService.cowall.delNoUse(calCowalls);
        /** 分空间 */
        let newRooms = this.calService.createRoom.cutRoom(calWalls);
        /** 去掉平行墙 */
        for (let i = 0; i < newRooms.length; i++) {
            this.calService.room.delParallel(newRooms[i]);
        }
        /** 去掉不用的点(没有任何依赖) */
        this.calService.point.delNoUse();
    }
}
CreateRoomDelCal.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_1__["JdesignUtil2dService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__["CalculatorsService"] }
];


/***/ }),

/***/ "./src/app/svg/common/calculator/door.cal.ts":
/*!***************************************************!*\
  !*** ./src/app/svg/common/calculator/door.cal.ts ***!
  \***************************************************/
/*! exports provided: DoorCal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DoorCal", function() { return DoorCal; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _doorWin_cal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./doorWin.cal */ "./src/app/svg/common/calculator/doorWin.cal.ts");
/* harmony import */ var _three_jDesign3D_JDoor3D__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../three/jDesign3D/JDoor3D */ "./src/app/three/jDesign3D/JDoor3D.ts");





class DoorCal extends _doorWin_cal__WEBPACK_IMPORTED_MODULE_3__["DoorWinCal"] {
    constructor(dataService, DUService, calService) {
        super(dataService, DUService, calService);
        this.dataService = dataService;
        this.DUService = DUService;
        this.calService = calService;
    }
    /** 获取普通门的path坐标集合 */
    getNormalPath(door, pos) {
        pos = pos == undefined ? door.pos : pos;
        let size = door.getPixSize();
        let rectPosArr = this.DUService.pos.getRectPosByCenter(pos, size);
        return rectPosArr;
    }
    /** 获取普通门的path字符串 */
    getNormalPathString(door, pos) {
        let path = this.getNormalPath(door, pos);
        let pathString = this.DUService.svg.getPath(true, ...path);
        return pathString;
    }
    /** 产生新的门 暂时是测试阶段*/
    createNewNormal(obj) {
        this.dataService.cache.floorplan.createAndMove = true;
        let door = new _three_jDesign3D_JDoor3D__WEBPACK_IMPORTED_MODULE_4__["JDoor3D"](obj, this.dataService, this.DUService);
        this.dataService.cache.door.createFunc(door);
        return door;
    }
    /** 删除 */
    del(door) {
        door.destory3D();
        delete this.dataService.doors[door.id];
    }
    wallChange(door, wall) {
        wall.doorIDs.push(door.id);
        wall.doorIDs = this.DUService.cal.unique(wall.doorIDs);
    }
    /** 遍历加载吸附 */
    listAbosrb() {
        this.commmonListAbosrb('door');
    }
}
DoorCal.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_1__["JdesignUtil2dService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__["CalculatorsService"] }
];


/***/ }),

/***/ "./src/app/svg/common/calculator/doorWin.cal.ts":
/*!******************************************************!*\
  !*** ./src/app/svg/common/calculator/doorWin.cal.ts ***!
  \******************************************************/
/*! exports provided: DoorWinCal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DoorWinCal", function() { return DoorWinCal; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/calculators.service */ "./src/app/services/calculators.service.ts");



class DoorWinCal {
    constructor(dataService, DUService, calService) {
        this.dataService = dataService;
        this.DUService = DUService;
        this.calService = calService;
    }
    /** 与墙合体 */
    unionWall(obj, wall) {
        obj.wallID = wall.id;
        obj.radian = wall.getRadian();
        this.wallChange(obj, wall);
        let distance = wall.getDistance();
        let newDistance = this.DUService.pos.getDistance(obj.pos, wall.getCowall().getPointStart().pos);
        obj.distancePer = newDistance / distance;
        obj.size.height = this.dataService.cmd.getPixelTransLength(wall.thickness, 'mm');
    }
    /** 删除墙 */
    delWall(obj) {
        if (obj.wallID == null)
            return null;
        let wall = obj.getwall();
        let IDs = obj.getWallDWIDs();
        if (IDs != undefined) {
            this.DUService.cal.removeByValue(obj.getWallDWIDs(), obj.id);
            obj.wallID = null;
            return wall;
        }
        return undefined;
    }
    /** 根据墙改变改变其属性 */
    changeOnWall(obj) {
        if (obj.wallID == null)
            return null;
        let wall = obj.getwall();
        let distance = wall.getDistance();
        let radian = wall.getRadian();
        let posStart = wall.getCowall().getPointStart().pos;
        let pos = this.DUService.pos.getRayPos(posStart, radian, distance * obj.distancePer);
        obj.size.height = this.dataService.cmd.getPixelTransLength(wall.thickness, 'mm');
        return true;
    }
    /** 获取墙体里最近的坐标组,为两个 */
    getNearPosArr(obj) {
        if (obj.wallID == null)
            return null;
        let wall = obj.getwall();
        let cowall = wall.getCowall();
        let objArr = [];
        objArr.push(...wall.getDoorArr());
        objArr.push(...wall.getWinArr());
        let sameInt = this.DUService.cal.isIncludeByAttr('id', obj.id, ...objArr);
        sameInt != null ? objArr.splice(sameInt, 1) : null;
        let posArr = [];
        let cowallInPosArr = this.calService.cowall.getInPosArr(cowall);
        /** 平移内线坐标 */
        cowallInPosArr = this.DUService.pos.getPosTrans(cowallInPosArr[0], cowallInPosArr[1], wall.thickness / 2);
        posArr.push(...this.DUService.cal.getNewAttrArray(objArr, 'pos'));
        let msg = this.DUService.pos.getNearPosArr(obj.pos, cowallInPosArr[1], posArr);
        if (msg.endPos == null)
            msg.endPos = cowallInPosArr[1];
        else {
            msg.endPos = this.DUService.pos.getRayPos(msg.endPos, cowall.getRadian(), -objArr[msg.endInt].getPixSize().width / 2);
        }
        if (msg.StartPos == null)
            msg.StartPos = cowallInPosArr[0];
        else {
            msg.StartPos = this.DUService.pos.getRayPos(msg.StartPos, cowall.getRadian(), objArr[msg.startInt].getPixSize().width / 2);
        }
        return msg;
    }
    /** 遍历加载吸附(通用版) */
    commmonListAbosrb(type) {
        let objs = [];
        if (type == 'door') {
            objs = this.dataService.doDoors().arr();
        }
        else if (type == 'win') {
            objs = this.dataService.doWins().arr();
        }
        for (let i = 0; i < objs.length; i++) {
            if (objs[i].wallID != undefined && this.dataService.walls[objs[i].wallID] != undefined) {
                let pos = objs[i].pos;
                let wallID = objs[i].wallID;
                objs[i].wallID = undefined;
                this.dataService.cache.doorWin.move(objs[i], objs[i].pos);
                objs[i].wallID = wallID;
                this.dataService.cache.doorWin.move(objs[i], objs[i].pos);
            }
            else {
                objs[i].wallID = undefined;
            }
        }
        // this.dataService.cache.doorWin.moveEnd(objs[i])
    }
}
DoorWinCal.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_1__["JdesignUtil2dService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__["CalculatorsService"] }
];


/***/ }),

/***/ "./src/app/svg/common/calculator/floorplan.cal.ts":
/*!********************************************************!*\
  !*** ./src/app/svg/common/calculator/floorplan.cal.ts ***!
  \********************************************************/
/*! exports provided: FloorplanCal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FloorplanCal", function() { return FloorplanCal; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/calculators.service */ "./src/app/services/calculators.service.ts");



class FloorplanCal {
    constructor(dataService, DUService, calService) {
        this.dataService = dataService;
        this.DUService = DUService;
        this.calService = calService;
    }
    cleanOppositeCowall() {
        let oppositeCowalls = [];
        let cowallFlag = [];
        /** 获取相反cowall组 */
        for (let i = this.dataService.floorplan.cowallIDs.length - 1; i >= 0; i--) {
            let cowallID = this.dataService.floorplan.cowallIDs[i];
            if (cowallFlag[cowallID] != 1) {
                let cowall = this.dataService.cowalls[cowallID];
                if (cowall.partnerID != null) {
                    cowallFlag[cowall.partnerID] = 1;
                    let oppositeCowall = cowall.getOppsiteCowall();
                    oppositeCowalls.push([cowall, oppositeCowall]);
                }
            }
        }
        let delFunc = (changeCowall, delCowall) => {
            let wall = changeCowall.getWall();
            wall.coedgeID = changeCowall.id;
            changeCowall.edgeID = wall.id;
            this.calService.cowall.delPrevNext(delCowall);
            this.calService.cowall.delPointID(delCowall);
            this.calService.cowall.delParent(delCowall);
            this.calService.cowall.del(delCowall);
        };
        /** 删除其中一个 */
        for (let i = 0; i < oppositeCowalls.length; i++) {
            if (oppositeCowalls[i][0].roomID != null) {
                delFunc(oppositeCowalls[i][0], oppositeCowalls[i][1]);
            }
            else if (oppositeCowalls[i][1].roomID != null) {
                delFunc(oppositeCowalls[i][1], oppositeCowalls[i][0]);
            }
            else if (oppositeCowalls[i][0].prevID != null || oppositeCowalls[i][0].nextID != null) {
                delFunc(oppositeCowalls[i][0], oppositeCowalls[i][1]);
            }
            else {
                delFunc(oppositeCowalls[i][1], oppositeCowalls[i][0]);
            }
        }
    }
    /**
     * 获取矩形值
     *@returns (左上,右上,右下,左下),没有返回[]
     */
    getRectPosArr() {
        let points = this.dataService.doPoints().arr();
        if (points.length < 2)
            return [];
        let maxX = points[0].pos.x;
        let minX = points[0].pos.x;
        let maxY = points[0].pos.y;
        let minY = points[0].pos.y;
        for (let i = 1; i < points.length; i++) {
            if (points[i].pos.x > maxX) {
                maxX = points[i].pos.x;
            }
            if (points[i].pos.x < minX) {
                minX = points[i].pos.x;
            }
            if (points[i].pos.y > maxY) {
                maxY = points[i].pos.y;
            }
            if (points[i].pos.y < minY) {
                minY = points[i].pos.y;
            }
        }
        let LUPos = { x: minX, y: minY };
        let RUPos = { x: maxX, y: minY };
        let LDPos = { x: minX, y: maxY };
        let RDPos = { x: maxX, y: maxY };
        return [LUPos, RUPos, RDPos, LDPos];
    }
}
FloorplanCal.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_1__["JdesignUtil2dService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__["CalculatorsService"] }
];


/***/ }),

/***/ "./src/app/svg/common/calculator/furniture.cal.ts":
/*!********************************************************!*\
  !*** ./src/app/svg/common/calculator/furniture.cal.ts ***!
  \********************************************************/
/*! exports provided: FurnitureCal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FurnitureCal", function() { return FurnitureCal; });
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");



class FurnitureCal {
    constructor(dataService, DUService, calService) {
        this.dataService = dataService;
        this.DUService = DUService;
        this.calService = calService;
    }
}
FurnitureCal.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_0__["CalculatorsService"] }
];


/***/ }),

/***/ "./src/app/svg/common/calculator/geometry.cal.ts":
/*!*******************************************************!*\
  !*** ./src/app/svg/common/calculator/geometry.cal.ts ***!
  \*******************************************************/
/*! exports provided: GeometryCal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GeometryCal", function() { return GeometryCal; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _three_jDesign3D_JFurniture3D__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../three/jDesign3D/JFurniture3D */ "./src/app/three/jDesign3D/JFurniture3D.ts");
/* harmony import */ var _three_jDesign3D_JBuild3D__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../three/jDesign3D/JBuild3D */ "./src/app/three/jDesign3D/JBuild3D.ts");





class GeometryCal {
    constructor(dataService, DUService, calService) {
        this.dataService = dataService;
        this.DUService = DUService;
        this.calService = calService;
    }
    /** 新建新的物体,暂时为测试用 */
    createNew(type, obj) {
        switch (type) {
            case 'furniture':
                this.dataService.cache.floorplan.createAndMove = true;
                let furniture = new _three_jDesign3D_JFurniture3D__WEBPACK_IMPORTED_MODULE_3__["JFurniture3D"](obj, this.dataService, this.DUService);
                this.dataService.cache.furniture.createFunc(furniture);
                return furniture;
            case "build":
                this.dataService.cache.floorplan.createAndMove = true;
                let build = new _three_jDesign3D_JBuild3D__WEBPACK_IMPORTED_MODULE_4__["JBuild3D"](obj, this.dataService, this.DUService);
                this.dataService.cache.build.createFunc(build);
                return build;
        }
    }
    /** 获取框 */
    getBox(geometry, pos) {
        let radian = pos == undefined ? 0 : geometry.radian;
        pos == undefined ? pos = { x: 0, y: 0 } : null;
        let posArr = this.DUService.pos.getRectPosByCenter(pos, geometry.getPixSize(), radian);
        return posArr;
    }
    /** 获取path */
    getPath(geometry) {
        let posArr = this.getBox(geometry);
        let path = this.DUService.svg.getPath(true, ...posArr);
        return path;
    }
    /** 改变墙 */
    wallChange(geometry, wall) {
        wall.geometryIDs.push(geometry.id);
        wall.geometryIDs = this.DUService.cal.unique(wall.geometryIDs);
    }
    /** 与墙合体 */
    unionWall(geometry, wall, out) {
        let a = out ? -1 : 1;
        geometry.wallID = wall.id;
        geometry.radian = wall.getRadian();
        this.wallChange(geometry, wall);
        let distance = wall.getDistance();
        /** 底部中心坐标 */
        let pos = this.DUService.pos.getRayPos(geometry.pos, geometry.radian + Math.PI, a * (geometry.size.height / 2 + wall.thickness / 2));
        let newDistance = this.DUService.pos.getDistance(pos, wall.getCowall().getPointStart().pos);
        geometry.distancePer = newDistance / distance;
        geometry.radian = wall.getRadian() + (a == 1 ? 0 : Math.PI);
        geometry.wallOut = out;
    }
    /** 通过墙的交点获取当前墙的位置 (点坐标必须在墙上,用在吸附上) */
    getPosByWall(geometry, wall, pos, out) {
        let a = out ? -1 : 1;
        let radian = wall.getRadian();
        let newPos = this.DUService.pos.getRayPos(pos, radian + (Math.PI / 2), a * ((wall.thickness / 2) + (geometry.getPixSize().height / 2)));
        return newPos;
    }
    del(obj) {
        obj.destory3D();
        console.log(obj.type);
        switch (obj.type) {
            case 'furniture':
                delete this.dataService.furnitures[obj.id];
                break;
            case "build":
                delete this.dataService.builds[obj.id];
        }
    }
}
GeometryCal.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_1__["JdesignUtil2dService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__["CalculatorsService"] }
];


/***/ }),

/***/ "./src/app/svg/common/calculator/line.cal.ts":
/*!***************************************************!*\
  !*** ./src/app/svg/common/calculator/line.cal.ts ***!
  \***************************************************/
/*! exports provided: LineCal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LineCal", function() { return LineCal; });
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");



class LineCal {
    constructor(calService, dataService, utilService) {
        this.calService = calService;
        this.dataService = dataService;
        this.utilService = utilService;
    }
    /** 通过cowall 获取线段带点 */
    getLinesBycowalls(...cowalls) {
        let lines = [];
        for (let i = 0; i < cowalls.length; i++) {
        }
    }
}
LineCal.ctorParameters = () => [
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_0__["CalculatorsService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_1__["JdesignUtil2dService"] }
];


/***/ }),

/***/ "./src/app/svg/common/calculator/paramsModel.cal.ts":
/*!**********************************************************!*\
  !*** ./src/app/svg/common/calculator/paramsModel.cal.ts ***!
  \**********************************************************/
/*! exports provided: ParamsModelCal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ParamsModelCal", function() { return ParamsModelCal; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _three_jDesign3D_JParamsModel3D__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../three/jDesign3D/JParamsModel3D */ "./src/app/three/jDesign3D/JParamsModel3D.ts");




class ParamsModelCal {
    constructor(dataService, DUService, calService) {
        this.dataService = dataService;
        this.DUService = DUService;
        this.calService = calService;
    }
    createNew(obj) {
        let data = new _three_jDesign3D_JParamsModel3D__WEBPACK_IMPORTED_MODULE_3__["JParamsModel3D"](obj, this.dataService, this.DUService);
        // this.dataService.cache.win.createFunc(LWin)
        return data;
    }
}
ParamsModelCal.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_1__["JdesignUtil2dService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__["CalculatorsService"] }
];


/***/ }),

/***/ "./src/app/svg/common/calculator/point.cal.ts":
/*!****************************************************!*\
  !*** ./src/app/svg/common/calculator/point.cal.ts ***!
  \****************************************************/
/*! exports provided: PointCal, PointLine */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PointCal", function() { return PointCal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PointLine", function() { return PointLine; });
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _three_jDesign3D_JPoint3D__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../three/jDesign3D/JPoint3D */ "./src/app/three/jDesign3D/JPoint3D.ts");




class PointCal {
    constructor(calService, dataService, DUService) {
        this.calService = calService;
        this.dataService = dataService;
        this.DUService = DUService;
        this.posUtil = this.DUService.pos;
    }
    /** 获取只有两个墙的点数组 */
    getPointsByOnlyNumWalls(wallNum, points) {
        let onlyPoints = [];
        points == undefined ? points = this.dataService.points : null;
        for (let key in points) {
            let point = points[key];
            let walls = point.getWallArr();
            if (walls.length == wallNum)
                onlyPoints.push(point);
        }
        return onlyPoints;
    }
    /** 获取射线组 */
    getRayLineArr(point) {
        let wallArr = point.getWallArr();
        // console.log(wallArr)
        let lineArr = [];
        let pointArr = null;
        for (let i = 0; i < wallArr.length; i++) {
            pointArr = wallArr[i].getPointArr();
            if (pointArr[0].id == point.id) {
                lineArr.push({ wall: wallArr[i], points: [pointArr[0], pointArr[1]] });
            }
            else {
                lineArr.push({ wall: wallArr[i], points: [pointArr[1], pointArr[0]] });
            }
        }
        return lineArr;
    }
    /**
     * 获取线相邻
     * @param pointStart
     * @param pointEnd
     * @param overLay 是否包括重叠线,默认为true
     */
    getNearLineArr(pointStart, pointEnd, overLay = true) {
        let radianL = null;
        let radianR = null;
        /** L */
        let lineL = null;
        /** R */
        let lineR = null;
        let startRadian = this.posUtil.getRadian(pointStart.pos, pointEnd.pos);
        let radian = null;
        let newRadianL = null;
        let newRadianR = null;
        let lineArr = this.getRayLineArr(pointStart);
        for (let i = 0; i < lineArr.length; i++) {
            if (lineArr[i].points[1].id != pointEnd.id) {
                radian = this.posUtil.getRadian(lineArr[i].points[0].pos, lineArr[i].points[1].pos);
                if (overLay || !this.DUService.pos.isSameRadian(radian >= 0 ? radian : radian + (Math.PI * 2), startRadian >= 0 ? startRadian : startRadian + (Math.PI * 2))) {
                    newRadianL = startRadian - radian;
                    if (newRadianL < 0)
                        newRadianL += Math.PI * 2;
                    if (radianL == null || newRadianL < radianL) {
                        radianL = newRadianL;
                        lineL = lineArr[i];
                    }
                    newRadianR = radian - startRadian;
                    if (newRadianR < 0)
                        newRadianR += Math.PI * 2;
                    if (radianR == null || newRadianR < radianR) {
                        radianR = newRadianR;
                        lineR = lineArr[i];
                    }
                }
            }
        }
        let msg = [lineL, lineR];
        return msg;
    }
    /**
     * 转移点(移动完的点可以用delNoUse删除)
     * @param movePoint 要移动的点
     * @param targetPoint 移动到的目标点
     * @returns 返回已经修改的cowall数组和两点一样但未修改的cowall数组,相同点返回undefined
     */
    transPoint(movePoint, targetPoint, errorValue = 0.01) {
        /** 相同点,返回undefined */
        if (movePoint.id == targetPoint.id)
            return undefined;
        /** 删除cowall方法 */
        let delCowallFunc = (cowall) => {
            let prevCowall = cowall.getPrevCowall();
            if (prevCowall)
                prevCowall.nextID = cowall.nextID;
            let nextCowall = cowall.getNextCowall();
            if (nextCowall)
                nextCowall.prevID = cowall.prevID;
            let room = cowall.getRoom();
            if (room)
                room.resetCowallIDs(prevCowall);
            cowall.prevID = undefined;
            cowall.nextID = undefined;
            /** 如果有反cowall,仅删除cowall */
            if (cowall.partnerID) {
                this.calService.cowall.absDel(cowall);
            }
            /** 没有反cowall,直接删除墙 */
            else {
                let wall = cowall.getWall();
                this.calService.wall.absDel(wall);
            }
        };
        /** 开始运算 */
        let cowallArr = movePoint.getCowallArr();
        let fixCowalls = [];
        let pointCowallIDs = [];
        for (let i = 0; i < cowallArr.length; i++) {
            /** 移动点 */
            if (cowallArr[i].pointIDs[0] == movePoint.id) {
                /** 如果有序墙两点与其两点完全相同,则直接删除 */
                if (cowallArr[i].pointIDs[1] == targetPoint.id ||
                    this.DUService.pos.isSamePos(cowallArr[i].getPointEnd().pos, targetPoint.pos, errorValue)) {
                    pointCowallIDs.push(cowallArr[i].id);
                    delCowallFunc(cowallArr[i]);
                }
                else {
                    cowallArr[i].pointIDs = [targetPoint.id, cowallArr[i].pointIDs[1]];
                    fixCowalls.push(cowallArr[i]);
                }
            }
            else {
                /** 如果有序墙两点与其两点完全相同,则直接删除 */
                if (cowallArr[i].pointIDs[0] == targetPoint.id ||
                    this.DUService.pos.isSamePos(cowallArr[i].getPointStart().pos, targetPoint.pos, errorValue)) {
                    pointCowallIDs.push(cowallArr[i].id);
                    delCowallFunc(cowallArr[i]);
                }
                else {
                    cowallArr[i].pointIDs = [cowallArr[i].pointIDs[0], targetPoint.id];
                    fixCowalls.push(cowallArr[i]);
                }
            }
        }
        return {
            /** 两点相同但未修改的cowall数组  */
            pointCowallIDs: pointCowallIDs,
            /** 已经移点的cowall数组 */
            fixCowalls: fixCowalls
        };
    }
    /** 产生新的点 */
    createPoint(pos) {
        let point = new _three_jDesign3D_JPoint3D__WEBPACK_IMPORTED_MODULE_3__["JPoint3D"]({ pos: pos }, this.dataService, this.DUService);
        return point;
    }
    /** 获取所在的空间 */
    getRooms(point) {
        let cowalls = point.getCowallArr();
        let newRooms = [];
        for (let i = 0; i < cowalls.length; i++) {
            let room = cowalls[i].getRoom();
            if (room != null)
                newRooms.push(room);
        }
        return newRooms;
    }
    /** 删除 */
    del(point) {
        delete this.dataService.points[point.id];
    }
    /** 删除cowallID */
    /** 批量获取cowall对象 */
    getCowallArr(...pointArr) {
        let cowallIDs = [];
        for (let i = 0; i < pointArr.length; i++) {
            cowallIDs.push(...pointArr[i].cowallIDs);
        }
        cowallIDs = this.DUService.cal.unique(cowallIDs);
        let cowalls = [];
        for (let i = 0; i < cowallIDs.length; i++) {
            cowalls.push(this.dataService.cowalls[cowallIDs[i]]);
        }
        return cowalls;
    }
    /** 批量获取wall对象 */
    getWallArr(...pointArr) {
        let wallIDs = [];
        let cowalls = this.getCowallArr(...pointArr);
        for (let i = 0; i < cowalls.length; i++) {
            wallIDs.push(cowalls[i].edgeID);
        }
        wallIDs = this.DUService.cal.unique(wallIDs);
        let walls = [];
        for (let i = 0; i < wallIDs.length; i++) {
            walls.push(this.dataService.walls[wallIDs[i]]);
        }
        return walls;
    }
    /** 批量获取room对象 */
    getRoomArr(...pointArr) {
        let roomIDs = [];
        let cowalls = this.getCowallArr(...pointArr);
        for (let i = 0; i < cowalls.length; i++) {
            roomIDs.push(cowalls[i].roomID);
        }
        roomIDs = this.DUService.cal.unique(roomIDs);
        let rooms = [];
        for (let i = 0; i < roomIDs.length; i++) {
            rooms.push(this.dataService.rooms[roomIDs[i]]);
        }
        return rooms;
    }
    /** 合并墙 必须只有两个墙且平行
     * @param point xx
     */
    combineWalls(point) {
        let wallArr = point.getWallArr();
        if (wallArr.length != 2)
            return false;
        let positiveCowall = null;
        let reverseCowall = null;
        let cowallArr = wallArr[0].getCowallArr();
        /** 匹配cowall */
        for (let i = 0; i < cowallArr.length; i++) {
            if (cowallArr[i].getPointEnd().id == point.id) {
                positiveCowall = cowallArr[i];
            }
            else {
                reverseCowall = cowallArr[i];
            }
        }
        /** 获取最后的点 */
        let secondPointArr = wallArr[1].getPointArr();
        let lastPoint = secondPointArr[0].id == point.id ? secondPointArr[1] : secondPointArr[0];
        /** 正序 */
        if (positiveCowall != null) {
            if (!positiveCowall.reversed)
                positiveCowall.pointIDs = [positiveCowall.pointIDs[0], lastPoint.id];
            else
                positiveCowall.pointIDs = [lastPoint.id, positiveCowall.pointIDs[1]];
        }
        /** 反序 */
        if (reverseCowall != null) {
            if (!reverseCowall.reversed)
                reverseCowall.pointIDs = [lastPoint.id, reverseCowall.pointIDs[1]];
            else
                reverseCowall.pointIDs = [reverseCowall.pointIDs[0], lastPoint.id];
        }
        /** 获取最后的cowall组 */
        let lastCowallArr = wallArr[1].getCowallArr();
        for (let i = 0; i < lastCowallArr.length; i++) {
            let endPoint = lastCowallArr[i].getPointEnd();
            /** 反序 */
            if (endPoint.id == point.id) {
                let prevCowall = lastCowallArr[i].getPrevCowall();
                /** 如果有则替换关联 */
                if (reverseCowall != null) {
                    reverseCowall.prevID = lastCowallArr[i].prevID;
                    if (prevCowall)
                        prevCowall.nextID = reverseCowall.id;
                }
                /** 如果没有则删除关联 */
                else {
                    if (prevCowall)
                        prevCowall.nextID = null;
                }
            }
            /** 正序 */
            else {
                let nextCowall = lastCowallArr[i].getNextCowall();
                /** 如果有则替换关联 */
                if (positiveCowall != null) {
                    positiveCowall.nextID = lastCowallArr[i].nextID;
                    if (nextCowall)
                        nextCowall.prevID = positiveCowall.id;
                }
                /** 如果没有则删除关联 */
                else {
                    if (nextCowall)
                        nextCowall.prevID = null;
                }
            }
            this.calService.cowall.delPointID(lastCowallArr[i]);
            this.calService.cowall.del(lastCowallArr[i]);
            let room = lastCowallArr[i].getRoom();
            if (room != null)
                this.DUService.cal.removeByValue(room.cowallIDs, lastCowallArr[i].id);
        }
        this.calService.point.del(point);
        this.calService.wall.delDepend(wallArr[1]);
        delete this.dataService.walls[wallArr[1].id];
    }
    /** 两点获取cowall */
    getSameCowallArr(pointA, pointB) {
        let cowallArrA = pointA.getCowallArr();
        let cowallArrB = pointB.getCowallArr();
        let newCowallArr = [];
        for (let i = 0; i < cowallArrA.length; i++) {
            for (let j = 0; j < cowallArrB.length; j++) {
                if (cowallArrA[i].id == cowallArrB[j].id) {
                    newCowallArr.push(cowallArrA[i]);
                }
            }
        }
        return newCowallArr;
    }
    /**
     * 连着的线段是否重边
     * 如果不重边返回null;
     * 一样长返回'same',更加长'long',更加短返回'short'
     * @param pointLink 连接点
     * @param pointA 一般指原来的点
     * @param pointB 一般指需要对照的点
     * @param errorValue 误差值
     */
    checkOverlayByLink(pointLink, pointA, pointB, errorValue = 0.0001) {
        let vectorA = this.DUService.pos.vector2D(pointA.pos).sub(pointLink.pos);
        let vectorB = this.DUService.pos.vector2D(pointB.pos).sub(pointLink.pos);
        let radianA = vectorA.radian();
        let radianB = vectorB.radian();
        /** 是否同向 */
        let msg = this.DUService.pos.isSameRadian(radianA, radianB);
        if (msg) {
            // console.log(pointA.id)
            // console.log(pointB.id)
            // console.log(pointLink.id)
            // console.log('=============')
            let lengthA = vectorA.length();
            let lengthB = vectorB.length();
            if (lengthA > lengthB - errorValue && lengthA < lengthB + errorValue) {
                return 'same';
            }
            else if (lengthA > lengthB) {
                return 'long';
            }
            else {
                return 'short';
            }
        }
        return null;
    }
    /** 两点找wall 找不到返回null */
    getWallByTwoPoint(pointA, pointB) {
        for (let key in this.dataService.walls) {
            let cowall = this.dataService.walls[key].getCowall();
            if ((cowall.pointIDs[0] == pointA.id && cowall.pointIDs[1] == pointB.id) || (cowall.pointIDs[1] == pointA.id && cowall.pointIDs[0] == pointB.id)) {
                return this.dataService.walls[key];
            }
        }
        return null;
    }
    /** 删除不使用的点 */
    delNoUse() {
        for (let key in this.dataService.points) {
            if (this.dataService.points[key].cowallIDs.length == 0) {
                this.del(this.dataService.points[key]);
            }
        }
    }
    /** 修复坐标相同的点 */
    fixSamePosPoints(points, errorValue = 0.01) {
        let check = false;
        for (let i = points.length - 1; i >= 0; i--) {
            for (let j = i - 1; j >= 0; j--) {
                if (this.DUService.pos.isSamePos(points[i].pos, points[j].pos, errorValue)) {
                    check = true;
                    this.transPoint(points[j], points[i]);
                    points.splice(j, 1);
                    i--;
                    if (i < 0)
                        break;
                }
            }
        }
        return check;
    }
    /* 重置空间cowalls */
    resetRoomsCowalls(point) {
        let cowalls = point.getCowallArr();
        for (let i = 0; i < cowalls.length; i++) {
            let room = cowalls[i].getRoom();
            if (room) {
                room.resetCowallIDs(cowalls[i]);
            }
        }
    }
    /**
    * 是否和射线反方向
    * @param point 由此点射出的射线
    * @param obj
    */
    isOppositeRayPoint(point, obj) {
        let otherPoint = obj.getPointArr();
        if (otherPoint[0].id == point.id)
            return false;
        return true;
    }
    /**
     * 获取墙或者弧形墙相对点弧度
     * @param point 由此点射出算弧度
     * @param obj
     */
    getWallOrCowallRadianByPoint(point, obj) {
        let a = this.isOppositeRayPoint(point, obj) ? Math.PI : 0;
        return obj.getRadian() + a;
    }
    /* 获取左右墙 */
    getLeftAndRightWall(point) {
        if (!point)
            return undefined;
        let walls = point.getWallArr();
        if (walls.length != 2)
            return undefined;
        let radianA = walls[0].getRadian();
        let radianB = walls[1].getRadian();
        radianA = this.calService.point.getWallOrCowallRadianByPoint(point, walls[0]);
        radianB = this.calService.point.getWallOrCowallRadianByPoint(point, walls[1]);
        let newRadian = radianA - radianB;
        newRadian = this.DUService.pos.getAbsRadian(newRadian, false);
        if (newRadian >= 0) {
            return [walls[0], walls[1]];
        }
        else {
            return [walls[1], walls[0]];
        }
    }
}
PointCal.ctorParameters = () => [
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_0__["CalculatorsService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"] }
];
class PointLine {
}


/***/ }),

/***/ "./src/app/svg/common/calculator/pos.cal.ts":
/*!**************************************************!*\
  !*** ./src/app/svg/common/calculator/pos.cal.ts ***!
  \**************************************************/
/*! exports provided: PosCal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PosCal", function() { return PosCal; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/calculators.service */ "./src/app/services/calculators.service.ts");



/** 作用于坐标之间的运算 */
class PosCal {
    constructor(dataService, DUService, calService) {
        this.dataService = dataService;
        this.DUService = DUService;
        this.calService = calService;
    }
    /** 获取坐标与点最接近的距离 */
    getPosToPointMin(pos, points) {
        let minDistance = null;
        let distance = null;
        let minPoint = null;
        let key = null;
        for (key in points) {
            distance = this.DUService.pos.getDistance(pos, points[key].pos);
            if (minDistance == null || minDistance > distance) {
                minDistance = distance;
                minPoint = points[key];
            }
        }
        return {
            distance: minDistance,
            point: minPoint
        };
    }
    /** 获取坐标与点的弧度值 */
    getPosToPointRadian(pos, points) {
        let datas = [];
        let radian = null;
        let key = null;
        for (key in points) {
            radian = this.DUService.pos.getRadian(pos, points[key].pos);
            datas.push({ radian: radian, point: points[key] });
        }
        return datas;
    }
    /** 获取坐标与点的最近弧度值 */
    getPosToPointRadianMin(pos, radians, points) {
        let datas = this.getPosToPointRadian(pos, points);
        let distance = null;
        let minInt = null;
        let minDistance = null;
        for (let i = 0; i < datas.length; i++) {
            for (let j = 0; j < radians.length; j++) {
                distance = Math.abs(radians[j] - datas[i].radian);
                if (minDistance == null || minDistance > distance) {
                    minInt = i;
                    minDistance = distance;
                }
            }
        }
        if (minInt == null)
            return null;
        return datas[minInt];
    }
    /**
     * 获取拉动边的距离(有正反值)
     * @param posStart
     * @param posEnd
     * @param radian (判断正反)
     */
    getMoveSideDistance(posStart, posEnd, radian) {
        let vector = { x: posEnd.x - posStart.x, y: posEnd.y - posStart.y };
        let leftRayPos = this.DUService.pos.getRayPos({ x: 0, y: 0 }, radian, 10);
        let a = this.DUService.pos.vector2D(vector).Multiply(leftRayPos);
        let distance = this.DUService.pos.vector2D(vector).projection(leftRayPos).length();
        /** 正向 */
        if (a < 0) {
            distance *= -1;
        }
        return distance;
    }
    /** 获取坐标与点的最近水平线 */
    getPosToPointHorizontal(pos, points) {
        return this.getPosToPointRadianMin(pos, [0, Math.PI, -Math.PI], points);
    }
    /** 获取坐标与点的最近垂直线 */
    getPosToPointVertical(pos, points) {
        return this.getPosToPointRadianMin(pos, [Math.PI / 2, Math.PI * 1.5, -Math.PI / 2, -Math.PI * 1.5], points);
    }
    /** 获取坐标垂直距离最近的墙 */
    getPosRightAngleToWall(pos, walls) {
        let sameInt = null;
        let minDistance = null;
        let minWall = null;
        let distance = null;
        let linePosArr = [];
        let key = null;
        for (key in walls) {
            linePosArr = walls[key].getPosArr();
            if (!this.DUService.pos.isSamePos(linePosArr[0], linePosArr[1])) {
                distance = this.DUService.pos.getRightAngleDistance(pos, linePosArr[0], linePosArr[1]);
                if (minDistance == null || distance < minDistance) {
                    minDistance = distance;
                    minWall = walls[key];
                }
            }
        }
        return {
            wall: minWall,
            distance: minDistance,
        };
    }
    /** 获取坐标到墙的最小线段 */
    getPosToWall(pos, walls) {
        let sameInt = null;
        let minDistance = null;
        let minWall = null;
        let distance = null;
        let interectPos = null;
        let linePosArr = [];
        let key = null;
        for (key in walls) {
            linePosArr = walls[key].getPosArr();
            if (!this.DUService.pos.isSamePos(linePosArr[0], linePosArr[1])) {
                interectPos = this.DUService.pos.getPointToLinePos(pos, linePosArr[0], linePosArr[1]);
                distance = this.DUService.pos.getDistance(pos, interectPos);
                if (minDistance == null || distance < minDistance) {
                    minDistance = distance;
                    minWall = walls[key];
                }
            }
        }
        return {
            wall: minWall,
            distance: minDistance,
        };
    }
}
PosCal.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_1__["JdesignUtil2dService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__["CalculatorsService"] }
];


/***/ }),

/***/ "./src/app/svg/common/calculator/room.cal.ts":
/*!***************************************************!*\
  !*** ./src/app/svg/common/calculator/room.cal.ts ***!
  \***************************************************/
/*! exports provided: RoomCal, RoomReadyType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RoomCal", function() { return RoomCal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RoomReadyType", function() { return RoomReadyType; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _three_jDesign3D_JPoint3D__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../three/jDesign3D/JPoint3D */ "./src/app/three/jDesign3D/JPoint3D.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _three_jDesign3D_JCowall3D__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../three/jDesign3D/JCowall3D */ "./src/app/three/jDesign3D/JCowall3D.ts");
/* harmony import */ var _three_jDesign3D_JWall3D__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../three/jDesign3D/JWall3D */ "./src/app/three/jDesign3D/JWall3D.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _three_jDesign3D_JRoom3D__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../three/jDesign3D/JRoom3D */ "./src/app/three/jDesign3D/JRoom3D.ts");
/* harmony import */ var _three_jDesign3D_JFloor3D__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../three/jDesign3D/JFloor3D */ "./src/app/three/jDesign3D/JFloor3D.ts");
/* harmony import */ var _three_jDesign3D_JRoof3D__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../three/jDesign3D/JRoof3D */ "./src/app/three/jDesign3D/JRoof3D.ts");
/* harmony import */ var _three_save3D_SaveType3D__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../three/save3D/SaveType3D */ "./src/app/three/save3D/SaveType3D.ts");










class RoomCal {
    constructor(dataService, DUService, calService) {
        this.dataService = dataService;
        this.DUService = DUService;
        this.calService = calService;
    }
    /** 创建新的空间 */
    createRoomByPosArr(...posArr) {
        let points = [];
        let point = null;
        /** 增加点 */
        for (let i = 0; i < posArr.length; i++) {
            point = new _three_jDesign3D_JPoint3D__WEBPACK_IMPORTED_MODULE_1__["JPoint3D"]({ pos: posArr[i] }, this.dataService, this.DUService);
            points.push(point);
        }
        /** 增加wall和cowall */
        let walls = [];
        let cowalls = [];
        let wall = null;
        let cowall = null;
        for (let i = 0; i < points.length - 1; i++) {
            cowall = new _three_jDesign3D_JCowall3D__WEBPACK_IMPORTED_MODULE_3__["JCowall3D"]({ pointIDs: [points[i].id, points[i + 1].id] }, this.dataService, this.DUService);
            wall = new _three_jDesign3D_JWall3D__WEBPACK_IMPORTED_MODULE_4__["JWall3D"]({ coedgeID: cowall.id }, this.dataService, this.DUService);
            cowall.edgeID = wall.id;
            cowalls.push(cowall);
            walls.push(wall);
        }
        /** 最后一个 */
        cowall = new _three_jDesign3D_JCowall3D__WEBPACK_IMPORTED_MODULE_3__["JCowall3D"]({ pointIDs: [points[points.length - 1].id, points[0].id] }, this.dataService, this.DUService);
        wall = new _three_jDesign3D_JWall3D__WEBPACK_IMPORTED_MODULE_4__["JWall3D"]({ coedgeID: cowall.id }, this.dataService, this.DUService);
        cowall.edgeID = wall.id;
        cowalls.push(cowall);
        walls.push(wall);
        /** 判断面积
         * 正反序 */
        let cowallIDs = [];
        let area = this.DUService.pos.getArea(...posArr);
        if (area > 0) {
            for (let i = 0; i < cowalls.length; i++) {
                cowallIDs.push(cowalls[i].id);
            }
            this.calService.cowall.setSort(true, true, ...cowalls);
        }
        else {
            for (let i = 0; i < cowalls.length; i++) {
                cowallIDs.splice(0, 0, cowalls[i].id);
                cowalls[i].pointIDs = [cowalls[i].pointIDs[1], cowalls[i].pointIDs[0]];
            }
            this.calService.cowall.setSort(false, true, ...cowalls);
        }
        /** 创建空间 */
        let room = this.createRoom({ cowallIDs: cowallIDs }).room;
        return {
            points: points,
            cowalls: cowalls,
            walls: walls,
            room: room
        };
    }
    /** 通过矩形创建空间
     * 返回生成新的数据点墙有序墙空间 */
    createRoomByRect(posStart, posEnd) {
        let posArr = this.DUService.pos.getRectByTwoPos(posStart, posEnd);
        return this.createRoomByPosArr(...posArr);
    }
    /** 获取内墙坐标集合 */
    getInPosArr(room) {
        let cowalls = room.getCowallArrBySort();
        let posArr = [];
        let inPos = null;
        for (let i = 0; i < cowalls.length; i++) {
            inPos = this.calService.cowall.getInPosArr(cowalls[i])[0];
            if (posArr.length == 0 || !this.DUService.pos.isSamePos(inPos, posArr[posArr.length - 1]))
                posArr.push(inPos);
        }
        return posArr;
    }
    /** 获取面积 */
    getArea(room) {
        let inPosArr = this.getInPosArr(room);
        let area = this.DUService.pos.getArea(...inPosArr);
        return area;
    }
    /** 新建空间
     *  返回生成空间和地板 */
    createRoom(roomObj, floorObj, roofObj) {
        let room = new _three_jDesign3D_JRoom3D__WEBPACK_IMPORTED_MODULE_6__["JRoom3D"](roomObj, this.dataService, this.DUService);
        let floor = new _three_jDesign3D_JFloor3D__WEBPACK_IMPORTED_MODULE_7__["JFloor3D"](floorObj ? floorObj : { roomID: room.id }, this.dataService, this.DUService);
        let roof = new _three_jDesign3D_JRoof3D__WEBPACK_IMPORTED_MODULE_8__["JRoof3D"](roofObj ? roofObj : { roomID: room.id }, this.dataService, this.DUService);
        room.roofID = roof.id;
        room.floorID = floor.id;
        floor.roomID = room.id;
        roof.roomID = room.id;
        return {
            room: room,
            floor: floor,
            roof: roof
        };
    }
    /** 删除cowall cowall不根据顺序获取 */
    delCowallID(room) {
        let cowalls = room.getCowallArr();
        for (let i = 0; i < cowalls.length; i++) {
            if (cowalls[i])
                cowalls[i].roomID = null;
        }
        room.cowallIDs = [];
    }
    /** 重置空间有序墙序列 */
    resetRoomsCowallIDs() {
        for (let key in this.dataService.rooms) {
            let room = this.dataService.rooms[key];
            let cowalls = room.getCowallArr();
            let newCowallIDs = [];
            for (let i = cowalls.length - 1; i >= 0; i--) {
                if (cowalls[i]) {
                    newCowallIDs.splice(0, 0, cowalls[i].id);
                }
            }
            room.cowallIDs = newCowallIDs;
        }
    }
    /** 删除空间 */
    del(room) {
        this.dataService.floors[room.floorID].destory3D();
        this.dataService.roofs[room.roofID].destory3D();
        this.dataService.rooms[room.id].destory3D();
        delete this.dataService.floors[room.floorID];
        delete this.dataService.roofs[room.roofID];
        delete this.dataService.rooms[room.id];
    }
    /** 获取跟floorplan关联的点 */
    getFloorplanPoints(room) {
        let points = room.getPointArr();
        let floorplanPoints = [];
        for (let i = 0; i < points.length; i++) {
            let cowalls = points[i].getCowallArr();
            for (let j = 0; j < cowalls.length; j++) {
                if (cowalls[j].roomID == null || cowalls[j].roomID == undefined) {
                    floorplanPoints.push(points[i]);
                    break;
                }
            }
        }
        return points;
    }
    /** 获取空间中心点 */
    getCenter(room, distance) {
        let posArr = this.getInPosArr(room);
        let firstPos = null;
        for (let i = 0; i < posArr.length++; i++) {
        }
    }
    /** 空间反向 */
    setOppsite(room) {
        let cowallArr = room.getCowallArrBySort();
        for (let i = 0; i < cowallArr.length; i++) {
            cowallArr[i].pointIDs = [cowallArr[i].pointIDs[1], cowallArr[i].pointIDs[0]];
            let oldPrev = cowallArr[i].prevID;
            let oldNext = cowallArr[i].nextID;
            cowallArr[i].prevID = oldNext;
            cowallArr[i].nextID = oldPrev;
        }
    }
    /** 删除平行墙 只要有平行墙会循环加一 */
    delParallel(room) {
        let cowallArr = room.getCowallArrBySort();
        cowallArr.push(cowallArr[0]);
        for (let i = 0; i < cowallArr.length - 1; i++) {
            if ((cowallArr[i].partnerID != null && cowallArr[i + 1].partnerID != null) || (cowallArr[i].partnerID == null && cowallArr[i + 1].partnerID == null)) {
                let pointA = cowallArr[i].getPointEnd();
                let pointWallArr = pointA.getWallArr();
                if (pointWallArr.length == 2) {
                    let radianA = cowallArr[i].getRadian();
                    let radianB = cowallArr[i + 1].getRadian();
                    /* 判断墙是否一样的 */
                    if (this.DUService.pos.isSameRadian(radianA, radianB) &&
                        cowallArr[i].getWall().thickness == cowallArr[i + 1].getWall().thickness &&
                        cowallArr[i].getWall().wallType == cowallArr[i + 1].getWall().wallType) {
                        let wallA = cowallArr[i].getWall();
                        let wallB = cowallArr[i + 1].getWall();
                        let msg = this.calService.wall.overlay.combineWalls(wallA, wallB);
                        if (msg) {
                            return this.delParallel(room);
                        }
                    }
                }
            }
        }
    }
    copyRoom(room) {
        let copyFunc = (oldObj, newObj) => {
            for (let key in newObj) {
                if (key != 'constructor' && key != 'id') {
                    newObj[key] = this.DUService.obj.clone(oldObj[key]);
                }
            }
        };
        let roomObj = new _three_save3D_SaveType3D__WEBPACK_IMPORTED_MODULE_9__["SaveType3D"].JRoom3D();
        copyFunc(room, roomObj);
        let floorObj = new _three_save3D_SaveType3D__WEBPACK_IMPORTED_MODULE_9__["SaveType3D"].JFloor3D();
        copyFunc(room.getFloor(), floorObj);
        let roofObj = new _three_save3D_SaveType3D__WEBPACK_IMPORTED_MODULE_9__["SaveType3D"].JRoof3D();
        copyFunc(room.getRoof(), roofObj);
        let data = {
            roomData: roomObj,
            floorData: floorObj,
            roofData: roofObj,
            roomID: room.id,
            cowallIDs: this.DUService.obj.clone(room.cowallIDs)
        };
        return data;
    }
    /** 分空间 */
    cutRoom(walls) {
    }
    /* 重置cowalls */
    resetCowalls(rooms) {
        if (!rooms)
            rooms = this.dataService.doRooms().arr();
        for (let i = 0; i < rooms.length; i++) {
            let room = rooms[i];
            room.cowallIDs = this.DUService.obj.clone(room.cowallIDs);
        }
    }
    /* 删除不存在的room */
    delNoUseRooms(rooms) {
        let roomIDs = [];
        if (!rooms)
            rooms = this.dataService.doRooms().arr();
        for (let i = 0; i < rooms.length; i++) {
            /* 判断是否存在 */
            let check = false;
            let cowalls = rooms[i].getCowallArr();
            if (rooms[i].id == 'room67') {
                console.log(this.DUService.cal.getNewAttrArray(cowalls, 'id'));
                console.log(this.DUService.cal.getNewAttrArray(cowalls, 'roomID'));
            }
            for (let j = 0; j < cowalls.length; j++) {
                if (cowalls[j] && cowalls[j].roomID == rooms[i].id) {
                    check = true;
                    break;
                }
            }
            if (!check) {
                roomIDs.push(rooms[i].id);
                this.del(rooms[i]);
            }
        }
        return roomIDs;
    }
}
RoomCal.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_5__["CalculatorsService"] }
];
class RoomReadyType {
}


/***/ }),

/***/ "./src/app/svg/common/calculator/transData.cal.ts":
/*!********************************************************!*\
  !*** ./src/app/svg/common/calculator/transData.cal.ts ***!
  \********************************************************/
/*! exports provided: TransDataCal, TransWallLines, TransArcWallLines, TransPointPosArr, TransPointLines */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TransDataCal", function() { return TransDataCal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TransWallLines", function() { return TransWallLines; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TransArcWallLines", function() { return TransArcWallLines; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TransPointPosArr", function() { return TransPointPosArr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TransPointLines", function() { return TransPointLines; });
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");



class TransDataCal {
    constructor(calService, dataService, DUService) {
        this.calService = calService;
        this.dataService = dataService;
        this.DUService = DUService;
    }
    /**
     * 公共获取墙的轮廓线段方法
     * @param cb
     * @param walls
     */
    commonWallOutLines(cb, walls) {
        walls == undefined ? walls = this.dataService.walls : null;
        for (let key in walls) {
            let wall = walls[key];
            let path = wall.outLine;
            /** 有可能没更新 */
            if (!path) {
                path = this.calService.wall.getOutLine(wall);
            }
            if (path)
                cb(path, wall);
        }
    }
    /**
     * 筛选线(通过弧度平行)
     * @param outLineArr
     * @param radian
     * @param isSame 保存模式(只保存相同的或者只保存非相同的)
     */
    chooseLinesByRadian(outLineArr, radian, isSame) {
        let newOutLineArr = { lines: [], walls: [], locations: [], radians: [] };
        let len = outLineArr.radians.length;
        for (let i = len - 1; i >= 0; i--) {
            let same = this.DUService.pos.isParallelRadian(outLineArr.radians[i], radian);
            if (same == isSame) {
                for (let key in outLineArr) {
                    newOutLineArr[key].push(outLineArr[key][i]);
                }
            }
        }
        return newOutLineArr;
    }
    /**
     * 获取墙三叉神经线
     * @param walls
     * @returns  @returns locations(1为内线,-1为外线,0为中线)
     */
    getWallThreeLines(walls) {
        let outLineArr = { lines: [], walls: [], locations: [], radians: [] };
        this.commonWallOutLines((path, wall) => {
            let posArr = wall.getPosArr();
            outLineArr.lines.push(posArr);
            outLineArr.lines.push([path[0][1], path[1][0]]);
            outLineArr.lines.push([path[1][1], path[0][0]]);
            outLineArr.walls.push(wall);
            outLineArr.walls.push(wall);
            outLineArr.walls.push(wall);
            outLineArr.locations.push(0);
            outLineArr.locations.push(1);
            outLineArr.locations.push(-1);
            let radian = wall.getRadian();
            outLineArr.radians.push(radian);
            outLineArr.radians.push(radian);
            outLineArr.radians.push(radian);
        }, walls);
        return outLineArr;
    }
    /** 获取墙的上下轮廓线段数组(内线为正,外线为反[内线,外线])
     * @returns 返回的lines和walls是一一对应的
     * @returns locations(1为内线,-1为外线)
     */
    getWallOutLines(walls) {
        let outLineArr = { lines: [], walls: [], locations: [], radians: [] };
        this.commonWallOutLines((path, wall) => {
            outLineArr.lines.push([path[0][1], path[1][0]]);
            outLineArr.lines.push([path[1][1], path[0][0]]);
            outLineArr.walls.push(wall);
            outLineArr.walls.push(wall);
            outLineArr.locations.push(1);
            outLineArr.locations.push(-1);
            let radian = wall.getRadian();
            outLineArr.radians.push(radian);
            outLineArr.radians.push(radian);
        }, walls);
        return outLineArr;
    }
    /**
     * 获取墙开头起点轮廓线数组lineA[左上,左下],lineB[右上,右下]
     * @param walls 返回的lines和walls是一一对应的
     * @returns locations -1为左,1为右
     */
    getWallSELines(walls) {
        let outLineArr = { lines: [], walls: [], locations: [], radians: [] };
        this.commonWallOutLines((path, wall) => {
            outLineArr.lines.push([path[0][0], path[0][1]]);
            outLineArr.lines.push([path[1][1], path[1][0]]);
            outLineArr.walls.push(wall);
            outLineArr.walls.push(wall);
            outLineArr.locations.push(-1);
            outLineArr.locations.push(1);
            let radian = wall.getRadian();
            radian = radian + (Math.PI / 2);
            outLineArr.radians.push(radian);
            outLineArr.radians.push(radian);
        }, walls);
        return outLineArr;
    }
    /**
     * 获取墙的所有轮廓线
     * @param walls 返回的lines和walls是一一对应的
     * @returns locations(2为内线,-2为外线,-1为左线,1为右线)
     */
    getWallAllLines(walls) {
        let outLineArr = { lines: [], walls: [], locations: [], radians: [] };
        this.commonWallOutLines((path, wall) => {
            outLineArr.lines.push([path[0][1], path[1][0]]);
            outLineArr.lines.push([path[1][1], path[0][0]]);
            outLineArr.lines.push([path[0][0], path[0][1]]);
            outLineArr.lines.push([path[1][1], path[1][0]]);
            outLineArr.walls.push(wall);
            outLineArr.walls.push(wall);
            outLineArr.walls.push(wall);
            outLineArr.walls.push(wall);
            outLineArr.locations.push(2);
            outLineArr.locations.push(-2);
            outLineArr.locations.push(-1);
            outLineArr.locations.push(1);
            let radian = wall.getRadian();
            let vRadian = radian + (Math.PI / 2);
            outLineArr.radians.push(radian);
            outLineArr.radians.push(radian);
            outLineArr.radians.push(vRadian);
            outLineArr.radians.push(vRadian);
        }, walls);
        return outLineArr;
    }
    /** 获取墙的中线数组
     *  @returns 返回的lines和walls是一一对应的
     */
    getWallCenterLines(walls) {
        let centerArr = { lines: [], walls: [] };
        walls == undefined ? walls = this.dataService.walls : null;
        for (let key in walls) {
            let wall = walls[key];
            let line = wall.getPosArr();
            centerArr.lines.push(line);
            centerArr.walls.push(wall);
        }
        return centerArr;
    }
    /** 获取墙的所有轮廓线段点数组
     *  @returns 返回的posArr和points是一一对应的
     */
    getWallOutLinePosArr(outLines) {
        let outPosArr = { posArr: [], points: [] };
        for (let i = 0; i < outLines.lines.length; i = i + 2) {
            let wall = outLines.walls[i];
            let pointArr = wall.getPointArr();
            /** 内线 */
            outPosArr.posArr.push(outLines.lines[i][0]);
            outPosArr.points.push(pointArr[0]);
            outPosArr.posArr.push(outLines.lines[i][1]);
            outPosArr.points.push(pointArr[1]);
            /** 外线 */
            outPosArr.posArr.push(outLines.lines[i + 1][0]);
            outPosArr.points.push(pointArr[1]);
            outPosArr.posArr.push(outLines.lines[i + 1][1]);
            outPosArr.points.push(pointArr[0]);
        }
        return outPosArr;
    }
    /** 获取点坐标数组
     * @returns  返回的posArr和points是一一对应的
      */
    getPointPosArr(points) {
        let pointPosArr = { posArr: [], points: [] };
        points == undefined ? points = this.dataService.points : null;
        for (let key in points) {
            let point = points[key];
            pointPosArr.posArr.push(point.pos);
            pointPosArr.points.push(point);
        }
        return pointPosArr;
    }
    /**
     * 获取点射线(默认从点出发)
     * @param points
     * @param isReverse 是否相反,默认false,从点出发,如果为true,则为射线最终返回点
     */
    getPointRayLines(points, isReverse = false) {
        let rayLines = { lines: [], walls: [], isReverses: [] };
        points == undefined ? points = this.dataService.points : null;
        for (let key in points) {
            let point = points[key];
            let walls = point.getWallArr();
            for (let i = 0; i < walls.length; i++) {
                let wallPointArr = walls[i].getPointArr();
                let line = [];
                let reverse = false;
                /** 头相同 */
                if (wallPointArr[0].id == point.id && !isReverse) {
                    line = [wallPointArr[0].pos, wallPointArr[1].pos];
                }
                /** 尾相同 */
                else {
                    line = [wallPointArr[1].pos, wallPointArr[0].pos];
                    reverse = true;
                }
                /** 是否相反 */
                if (isReverse) {
                    line = [line[1], line[0]];
                    reverse = !reverse;
                }
                rayLines.walls.push(walls[i]);
                rayLines.lines.push(line);
                rayLines.isReverses.push(reverse);
            }
        }
        return rayLines;
    }
    /**
     * 获取点十字垂直线数组
     * @param points
     * @returns
     */
    getPointCrossLines(points) {
        let pointLines = { lines: [], points: [] };
        let verticalLines = this.getPointVerticalLines(points);
        let horizonLines = this.getPointHorizontalLines(points);
        pointLines.lines.push(...verticalLines.lines);
        pointLines.points.push(...verticalLines.points);
        pointLines.lines.push(...horizonLines.lines);
        pointLines.points.push(...horizonLines.points);
        return pointLines;
    }
    /**
     * 获取点垂直线数组
     * @param points
     * @returns
     */
    getPointVerticalLines(points) {
        let pointLines = { lines: [], points: [] };
        points == undefined ? points = this.dataService.points : null;
        for (let key in points) {
            let point = points[key];
            let rayPos = this.DUService.pos.getRayPos(point.pos, Math.PI / 2, 10);
            pointLines.lines.push([point.pos, rayPos]);
            pointLines.points.push(point);
        }
        return pointLines;
    }
    /**
     * 获取点外垂直线数组
     * @param points
     * @returns
     */
    getOutPointtVerticalLines(walls) {
        let pointLines = { lines: [], points: [] };
        for (let key in walls) {
            let wall = walls[key];
            let pointArr = wall.getPointArr();
            /** 左 */
            let rayPos = this.DUService.pos.getRayPos(pointArr[0].pos, Math.PI / 2, 10);
            pointLines.lines.push([pointArr[0].pos, rayPos]);
            pointLines.points.push(pointArr[0]);
            rayPos = this.DUService.pos.getRayPos(wall.outLine[0][0], Math.PI / 2, 10);
            pointLines.lines.push([wall.outLine[0][0], rayPos]);
            pointLines.points.push(pointArr[0]);
            rayPos = this.DUService.pos.getRayPos(wall.outLine[0][1], Math.PI / 2, 10);
            pointLines.lines.push([wall.outLine[0][1], rayPos]);
            pointLines.points.push(pointArr[0]);
            /** 右 */
            rayPos = this.DUService.pos.getRayPos(pointArr[1].pos, Math.PI / 2, 10);
            pointLines.lines.push([pointArr[1].pos, rayPos]);
            pointLines.points.push(pointArr[1]);
            rayPos = this.DUService.pos.getRayPos(wall.outLine[1][0], Math.PI / 2, 10);
            pointLines.lines.push([wall.outLine[1][0], rayPos]);
            pointLines.points.push(pointArr[1]);
            rayPos = this.DUService.pos.getRayPos(wall.outLine[1][1], Math.PI / 2, 10);
            pointLines.lines.push([wall.outLine[1][1], rayPos]);
            pointLines.points.push(pointArr[1]);
        }
        return pointLines;
    }
    /**
     * 获取点水平线数组
     * @param points
     * @returns
     */
    getPointHorizontalLines(points) {
        let pointLines = { lines: [], points: [] };
        points == undefined ? points = this.dataService.points : null;
        for (let key in points) {
            let point = points[key];
            let rayPos = this.DUService.pos.getRayPos(point.pos, 0, 10);
            pointLines.lines.push([point.pos, rayPos]);
            pointLines.points.push(point);
        }
        return pointLines;
    }
    /**
     * 获取点外水平线数组
     * @param points
     * @returns
     */
    getOutPointHorizontalLines(walls) {
        let pointLines = { lines: [], points: [] };
        for (let key in walls) {
            let wall = walls[key];
            let pointArr = wall.getPointArr();
            /** 左 */
            let rayPos = this.DUService.pos.getRayPos(pointArr[0].pos, 0, 10);
            pointLines.lines.push([pointArr[0].pos, rayPos]);
            pointLines.points.push(pointArr[0]);
            rayPos = this.DUService.pos.getRayPos(wall.outLine[0][0], 0, 10);
            pointLines.lines.push([wall.outLine[0][0], rayPos]);
            pointLines.points.push(pointArr[0]);
            rayPos = this.DUService.pos.getRayPos(wall.outLine[0][1], 0, 10);
            pointLines.lines.push([wall.outLine[0][1], rayPos]);
            pointLines.points.push(pointArr[0]);
            /** 右 */
            rayPos = this.DUService.pos.getRayPos(pointArr[1].pos, 0, 10);
            pointLines.lines.push([pointArr[1].pos, rayPos]);
            pointLines.points.push(pointArr[1]);
            rayPos = this.DUService.pos.getRayPos(wall.outLine[1][0], 0, 10);
            pointLines.lines.push([wall.outLine[1][0], rayPos]);
            pointLines.points.push(pointArr[1]);
            rayPos = this.DUService.pos.getRayPos(wall.outLine[1][1], 0, 10);
            pointLines.lines.push([wall.outLine[1][1], rayPos]);
            pointLines.points.push(pointArr[1]);
        }
        return pointLines;
    }
    /** 获取线段集合的弧度集合 */
    getRadiansByLines(lines) {
        let radians = [];
        for (let i = 0; i < lines.length; i++) {
            radians.push(this.DUService.pos.getRadian(lines[i][0], lines[i][1]));
        }
        return radians;
    }
    /** 获取所有弧形墙 */
    getArcWalls() {
        let walls = [];
        for (let key in this.dataService.walls) {
            let wall = this.dataService.walls[key];
            if (wall.arcDistance != 0)
                walls.push(wall);
        }
        return walls;
    }
    /** 获取弧形线信息 */
    getArcLines(walls) {
        walls = walls ? walls : this.getArcWalls();
        let linesMsg = { lines: [], walls: [] };
        for (let i = 0; i < walls.length; i++) {
            let posArr = walls[i].getPosArr();
            let line = {
                radius: walls[i].arcRadius,
                lineStart: posArr[0],
                lineEnd: posArr[1],
                circlePos: walls[i].circlePos
            };
            linesMsg.lines.push(line);
            linesMsg.walls.push(walls[i]);
        }
        return linesMsg;
    }
    /** 获取所有非弧形墙 */
    getUnArcWalls(walls) {
        let noArcWalls = [];
        if (!walls)
            walls = this.dataService.walls;
        for (let key in walls) {
            let wall = walls[key];
            if (wall.arcDistance == 0)
                noArcWalls.push(wall);
        }
        return noArcWalls;
    }
    /** 通过wall获取cowall */
    getCowallsByWalls(walls) {
        let cowalls = [];
        for (let i = 0; i < walls.length; i++) {
            cowalls.push(...walls[i].getCowallArr());
        }
        return cowalls;
    }
}
TransDataCal.ctorParameters = () => [
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_0__["CalculatorsService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"] }
];
class TransWallLines {
}
class TransArcWallLines {
}
class TransPointPosArr {
}
class TransPointLines {
}


/***/ }),

/***/ "./src/app/svg/common/calculator/uWin.cal.ts":
/*!***************************************************!*\
  !*** ./src/app/svg/common/calculator/uWin.cal.ts ***!
  \***************************************************/
/*! exports provided: UWinCal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UWinCal", function() { return UWinCal; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _three_jDesign3D_JUWin3D__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../three/jDesign3D/JUWin3D */ "./src/app/three/jDesign3D/JUWin3D.ts");




class UWinCal {
    constructor(dataService, DUService, calService) {
        this.dataService = dataService;
        this.DUService = DUService;
        this.calService = calService;
    }
    createNew(obj) {
        let uWin = new _three_jDesign3D_JUWin3D__WEBPACK_IMPORTED_MODULE_3__["JUWin3D"](obj, this.dataService, this.DUService);
        this.dataService.cache.UWin.createFunc(uWin);
        return uWin;
    }
    /** 合并墙 */
    unionWall(obj, wall) {
        obj.centerWallID = wall.id;
        let posArr = wall.getPosArr();
        obj.pos = { x: posArr[0].x, y: posArr[0].y };
        obj.radian = wall.getRadian();
    }
    /** 分开墙 */
    disconnectWall(obj) {
        obj.centerWallID = undefined;
    }
    /* 获取U型窗吸附用的墙 */
    getUWinAbsorbWalls() {
        let absorbWalls = [];
        let walls = this.calService.transData.getUnArcWalls();
        for (let i = 0; i < walls.length; i++) {
            let roomArr = walls[i].getRoomArr();
            if (roomArr && roomArr.length == 1) {
                let pointArr = walls[i].getPointArr();
                if (pointArr[0].getWallArr().length == 2 && pointArr[1].getWallArr().length == 2) {
                    absorbWalls.push(walls[i]);
                }
            }
        }
        return absorbWalls;
    }
    /* 遍历吸附 */
    listAbosrb() {
        for (let key in this.dataService.UWins) {
            let uWin = this.dataService.UWins[key];
            let wall = uWin.getCenterWall();
            if (wall) {
                let pointArr = wall.getPointArr();
                if (pointArr[0].getWallArr().length != 2 || pointArr[1].getWallArr().length != 2) {
                    this.disconnectWall(uWin);
                }
                else {
                    this.unionWall(uWin, wall);
                }
            }
            else {
                this.disconnectWall(uWin);
            }
        }
    }
}
UWinCal.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_1__["JdesignUtil2dService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__["CalculatorsService"] }
];


/***/ }),

/***/ "./src/app/svg/common/calculator/undo.redo.cal.ts":
/*!********************************************************!*\
  !*** ./src/app/svg/common/calculator/undo.redo.cal.ts ***!
  \********************************************************/
/*! exports provided: UndoRedoCal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UndoRedoCal", function() { return UndoRedoCal; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _act_common_SaveAct__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../act/common/SaveAct */ "./src/app/svg/common/act/common/SaveAct.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _act_common_OpenAct__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../act/common/OpenAct */ "./src/app/svg/common/act/common/OpenAct.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../services/calculators.service */ "./src/app/services/calculators.service.ts");





class UndoRedoCal {
    constructor(dataService, DUService, calService, saveInt) {
        this.dataService = dataService;
        this.DUService = DUService;
        this.calService = calService;
        this.saveInt = saveInt;
        this._saveAct = new _act_common_SaveAct__WEBPACK_IMPORTED_MODULE_1__["SaveAct"](this.DUService, this.dataService);
        this._openAct = new _act_common_OpenAct__WEBPACK_IMPORTED_MODULE_3__["OpenAct"](this.dataService, this.DUService, this.calService);
        this._saveID = 0;
        // this.save()
    }
    get saveID() {
        this._saveID++;
        return this._saveID;
    }
    /** 保存(包括删除还原数据操作等) */
    save() {
        this.onlySave();
        this.cleanRedo();
    }
    readData() {
        let data = {
            id: this.saveID,
            data: this._saveAct.getSaveData()
        };
        return data;
    }
    /** 仅保存 */
    onlySave() {
        let data = this.readData();
        this.dataService.cache.undoData.push(data);
        if (this.dataService.cache.undoData.length > this.saveInt) {
            this.dataService.cache.undoData.splice(0, 1);
        }
    }
    /** 打开数据 */
    open(openData, wallCb, roomCb, allCb) {
        this._openAct.cleanData();
        this._openAct.openData(openData.data, wallCb, roomCb, allCb);
        this._openAct.delRedundanceObj(openData.data);
        this.dataService.cache.undoData.push(openData);
        this.callDo();
    }
    /** 还原 */
    redo(wallCb, roomCb, allCb) {
        let length = this.dataService.cache.redoData.length;
        if (length > 0) {
            // let undoData = this.dataService.cache.redoData[length - 2]
            let openData = this.dataService.cache.redoData[length - 1];
            this._openAct.cleanData();
            this._openAct.openData(openData.data, wallCb, roomCb, allCb);
            this._openAct.delRedundanceObj(openData.data);
            this.dataService.cache.undoData.push(openData);
            this.dataService.cache.redoData.splice(-1, 1);
            this.callDo();
        }
    }
    /** 恢复当前操作 */
    setPresent(wallCb, roomCb, allCb) {
        let length = this.dataService.cache.undoData.length;
        let openData = this.dataService.cache.undoData[length - 1];
        // console.log(openData)
        this._openAct.cleanData();
        this._openAct.openData(openData.data, wallCb, roomCb, allCb);
        this._openAct.delRedundanceObj(openData.data);
        this.callDo();
    }
    /** 撤销 */
    undo(wallCb, roomCb, allCb) {
        let length = this.dataService.cache.undoData.length;
        if (length > 1) {
            let redoData = this.dataService.cache.undoData[length - 1];
            let openData = this.dataService.cache.undoData[length - 2];
            this._openAct.cleanData();
            this._openAct.openData(openData.data, wallCb, roomCb, allCb);
            this._openAct.delRedundanceObj(openData.data);
            this.dataService.cache.redoData.push(redoData);
            this.dataService.cache.undoData.splice(-2, 2);
            this.onlySave();
            this.callDo();
            // this.dataService.cache.common.firstPos = null
        }
    }
    /** 还原清空 */
    cleanRedo() {
        this.dataService.cache.redoData = [];
    }
    /** 完成后回调 */
    callDo() {
        this.dataService.cache.common.choose = this.dataService.floorplan;
    }
    /** 测试用的 */
    testClean() {
        this._openAct.cleanData();
    }
    /* 还原单独数据 */
    redoSingleData(jdata, dataJson) {
        return this._openAct.redoObjBase(jdata, dataJson);
    }
}
UndoRedoCal.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_4__["CalculatorsService"] },
    { type: Number }
];


/***/ }),

/***/ "./src/app/svg/common/calculator/wall.cal.ts":
/*!***************************************************!*\
  !*** ./src/app/svg/common/calculator/wall.cal.ts ***!
  \***************************************************/
/*! exports provided: WallCal, LineMsgType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WallCal", function() { return WallCal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LineMsgType", function() { return LineMsgType; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _three_jDesign3D_JWall3D__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../three/jDesign3D/JWall3D */ "./src/app/three/jDesign3D/JWall3D.ts");
/* harmony import */ var _wall_cut_cal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./wall.cut.cal */ "./src/app/svg/common/calculator/wall.cut.cal.ts");
/* harmony import */ var _wall_overCut_cal__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./wall.overCut.cal */ "./src/app/svg/common/calculator/wall.overCut.cal.ts");






class WallCal {
    constructor(calService, dataService, DUService) {
        this.calService = calService;
        this.dataService = dataService;
        this.DUService = DUService;
        this.cut = new _wall_cut_cal__WEBPACK_IMPORTED_MODULE_4__["WallCutCal"](this.calService, this.dataService, this.DUService);
        this.overlay = new _wall_overCut_cal__WEBPACK_IMPORTED_MODULE_5__["WallOverCutCal"](this.calService, this.dataService, this.DUService);
    }
    /** 获取墙轮廓
     * @returns 以从左往右为标准,坐标数组为: [[左上,左下],[右下,右上]]
     */
    getOutLine(wall) {
        let wallPointArr = wall.getPointArr();
        if (this.DUService.pos.isSamePos(wallPointArr[0].pos, wallPointArr[1].pos, 0.1))
            return undefined;
        let msg = this.getNearestWalls(wall);
        let wallRadian = wall.getRadian();
        let wallPosArr = [wallPointArr[0].pos, wallPointArr[1].pos];
        let halfThickness = wall.thickness / 2;
        let wallULine = this.DUService.pos.getPosTrans(wallPosArr[0], wallPosArr[1], halfThickness);
        let wallDLine = this.DUService.pos.getPosTrans(wallPosArr[0], wallPosArr[1], -halfThickness);
        /**
         * 获取坐标方法
         * @param lineMsg 相交线信息
         * @param wallLine 墙射线
         * @param isLineDown 相交线是上线还是下线
         * @param wallRadian 墙射线方向弧度
         * @param isWallDown 墙是上面还是下面
         * @param noNum 没有相交取哪个墙射线哪个点
         */
        let getPosFunc = (lineMsg, wallLine, isLineDown, wallRadian, isWallDown, noNum) => {
            if (lineMsg != undefined) {
                let a = isLineDown ? -1 : 1;
                let LUhalfDistance = lineMsg.wall.thickness / 2 * a;
                let intersectLine = lineMsg.line;
                intersectLine = this.DUService.pos.getPosTrans(intersectLine[0], intersectLine[1], LUhalfDistance);
                /** 主墙和相交墙都是弧墙 */
                if (wall.arcDistance != 0 && lineMsg.wall.arcDistance != 0) {
                    let a = isWallDown ? -1 : 1;
                    let halfWallThickness = wall.thickness / 2;
                    let halfLineThickness = lineMsg.wall.thickness / 2;
                    /** 相交 */
                    let posArr = this.DUService.pos.getArcArcIntersect(wall.arcRadius + (halfWallThickness * a), wall.circlePos, lineMsg.wall.arcRadius + (halfLineThickness * a), lineMsg.wall.circlePos);
                    /** 获取最近的点 */
                    let distanceA = this.DUService.pos.getPowDistance(posArr[0], intersectLine[0]);
                    let distanceB = this.DUService.pos.getPowDistance(posArr[1], intersectLine[0]);
                    return posArr[distanceA > distanceB ? 1 : 0];
                }
                /** 主墙为弧墙 */
                else if (wall.arcDistance != 0) {
                    let a = isWallDown ? -1 : 1;
                    /** 相交 */
                    let posArr = this.DUService.pos.getArcLineIntersect(intersectLine[0], intersectLine[1], wall.arcRadius + halfThickness * a, wall.circlePos);
                    /** 获取最近的点 */
                    let distanceA = this.DUService.pos.getPowDistance(posArr[0], intersectLine[0]);
                    let distanceB = this.DUService.pos.getPowDistance(posArr[1], intersectLine[0]);
                    return posArr[distanceA > distanceB ? 1 : 0];
                }
                /** 相交墙为弧墙 */
                else if (lineMsg.wall.arcDistance != 0) {
                    let b = isWallDown ? -1 : 1;
                    let c = wallPointArr[noNum].id == lineMsg.wall.getPointArr()[noNum == 0 ? 1 : 0].id ? b : -b;
                    let wallLine = this.DUService.pos.getPosTrans(wallPosArr[0], wallPosArr[1], wall.thickness / 2 * b);
                    /** 相交 */
                    let posArr = this.DUService.pos.getArcLineIntersect(wallLine[0], wallLine[1], lineMsg.wall.arcRadius + (lineMsg.wall.thickness / 2 * c), lineMsg.wall.circlePos);
                    /** 获取最近的点 */
                    let distanceA = this.DUService.pos.getPowDistance(posArr[0], wallLine[noNum]);
                    let distanceB = this.DUService.pos.getPowDistance(posArr[1], wallLine[noNum]);
                    return posArr[distanceA > distanceB ? 1 : 0];
                }
                /** 都是直墙 */
                else {
                    if (!wallLine) {
                        return wallPosArr[noNum];
                    }
                    else if (!intersectLine) {
                        return wallLine[noNum];
                    }
                    let a = this.DUService.pos.isParallelRadian(wallRadian, lineMsg.radian, 0.1);
                    let intersectPos = a ? undefined : this.DUService.pos.getIntersect(wallLine[0], wallLine[1], intersectLine[0], intersectLine[1]);
                    if (intersectPos)
                        return intersectPos;
                    else {
                        return wallLine[noNum];
                    }
                }
            }
            else {
                /** 不是弧形墙 */
                if (wall.arcDistance == 0)
                    return wallLine[noNum];
                /** 弧形墙 */
                else {
                    let radian = this.DUService.pos.getRadian(wall.circlePos, wallPosArr[noNum]);
                    let a = isWallDown ? -1 : 1;
                    let rayPos = this.DUService.pos.getRayPos(wallPosArr[noNum], radian, a * wall.thickness / 2);
                    return rayPos;
                }
            }
        };
        /** 获取坐标 */
        let LUPos = getPosFunc(msg.LU, wallULine, true, wallRadian, false, 0);
        let LDPos = getPosFunc(msg.LD, wallDLine, false, wallRadian, true, 0);
        let RUPos = getPosFunc(msg.RU, wallULine, false, wallRadian - Math.PI, false, 1);
        let RDPos = getPosFunc(msg.RD, wallDLine, true, wallRadian - Math.PI, true, 1);
        return [[LUPos, LDPos], [RDPos, RUPos]];
    }
    // getDisplayOutLine(wall: JWall) {
    //     let pointArr = wall.getPointArr()
    // }
    /**
     * 获得弧线的点,仅限于内部使用,两个墙必须连接,否则报错
     * @param arcWall
     * @param inLine
     * @param outLine
     */
    getArcOutLineIntesect(arcWall, inLine, outLine) {
        let halfThickness = arcWall.thickness / 2;
        let inPosArr = this.DUService.pos.getArcLineIntersect(inLine[0], inLine[1], arcWall.arcRadius - halfThickness, arcWall.circlePos);
        let outPosArr = this.DUService.pos.getArcLineIntersect(outLine[0], outLine[1], arcWall.arcRadius + halfThickness, arcWall.circlePos);
        return {
            inLine: inPosArr,
            outLine: outPosArr
        };
    }
    /** 删除不存在的墙数组 */
    removeNoUseWalls(wallArr) {
        for (let i = wallArr.length - 1; i >= 0; i--) {
            if (this.dataService.walls[wallArr[i].id] == undefined) {
                // this.DUService.out.redLog('空wall')
                wallArr.splice(i, 1);
            }
        }
    }
    /** 删除少于长度的墙 */
    removeDistanceWalls(minDistance, walls) {
        walls = walls ? walls : this.dataService.walls;
        for (let key in walls) {
            let distance = walls[key].getDistance();
            if (distance < minDistance) {
                let pointArr = walls[key].getPointArr();
                this.calService.point.transPoint(pointArr[0], pointArr[1]);
            }
        }
    }
    /** 获取平行墙移动坐标 */
    getVerticalMovePosArr(wall, plusPos) {
        let cowall = wall.getCowall();
        let radian = cowall.getRadian();
        if (radian != null) {
            let prevCowall = cowall.getPrevCowall();
            let nextCowall = cowall.getNextCowall();
            let posArr = cowall.getPosArr();
            let movePosArr = [
                { x: posArr[0].x + plusPos.x, y: posArr[0].y + plusPos.y },
                { x: posArr[1].x + plusPos.x, y: posArr[1].y + plusPos.y }
            ];
            /** 完全没有边牵住 */
            if (prevCowall == null && nextCowall == null) {
                return movePosArr;
            }
            let prevPos = null;
            let nextPos = null;
            /** 有边牵住 */
            if (prevCowall != null) {
                // let prevRadian = prevCowall.getRadian()
                let prevPosArr = prevCowall.getPosArr();
                prevPos = this.DUService.pos.getIntersect(movePosArr[0], movePosArr[1], prevPosArr[0], prevPosArr[1]);
            }
            if (nextCowall != null) {
                let nextPosArr = nextCowall.getPosArr();
                nextPos = this.DUService.pos.getIntersect(movePosArr[0], movePosArr[1], nextPosArr[0], nextPosArr[1]);
            }
            /** 只有一条边牵制 */
            /** 墙两点重合 */
            let newPervPos = null;
            let newNextPos = null;
            if (prevPos == null) {
                let verticalPos = this.DUService.pos.getRayPos(posArr[0], radian + (Math.PI / 2), 10);
                newPervPos = this.DUService.pos.getIntersect(posArr[0], verticalPos, movePosArr[0], movePosArr[1]);
            }
            if (nextPos == null) {
                let verticalPos = this.DUService.pos.getRayPos(posArr[1], radian + (Math.PI / 2), 10);
                newNextPos = this.DUService.pos.getIntersect(posArr[1], verticalPos, movePosArr[0], movePosArr[1]);
            }
            /** 两边牵住 */
            return [newPervPos != null ? newPervPos : prevPos, newNextPos != null ? newNextPos : nextPos];
        }
        return null;
    }
    /** 设置运算标识 */
    setWallsCalFlag(calFlag) {
        for (let key in this.dataService.walls)
            this.dataService.walls[key].calFlag = calFlag;
    }
    /** 删除同点的墙 */
    removeSamePointWalls(walls, errorValue = 0) {
        for (let i = walls.length - 1; i >= 0; i--) {
            let posArr = walls[i].getPosArr();
            if (this.DUService.pos.isSamePos(posArr[0], posArr[1], errorValue)) {
                walls.splice(i, 1);
            }
        }
    }
    arcInit() {
        for (let key in this.dataService.walls) {
            let wall = this.dataService.walls[key];
            if (wall.arcDistance != 0 && !wall.arcRadius) {
                wall.transArc();
            }
        }
    }
    /** 获取周边最近的墙(用来算轮廓) */
    getNearestWalls(wall) {
        let pointArr = wall.getPointArr();
        let wallRadian = this.DUService.pos.getRadian(pointArr[0].pos, pointArr[1].pos);
        /** 获取射线 */
        let LLines = this.calService.transData.getPointRayLines([pointArr[0]]);
        let index = this.DUService.cal.isIncludeByAttr('id', wall.id, ...LLines.walls);
        LLines.lines.splice(index, 1);
        LLines.walls.splice(index, 1);
        LLines.isReverses.splice(index, 1);
        let RLines = this.calService.transData.getPointRayLines([pointArr[1]]);
        index = this.DUService.cal.isIncludeByAttr('id', wall.id, ...RLines.walls);
        RLines.lines.splice(index, 1);
        RLines.walls.splice(index, 1);
        RLines.isReverses.splice(index, 1);
        /** 获取最近上下射线组方法
         * @param mainRadian 墙的方向弧度
         * @param linesMsg 线段信息数组
         */
        let getFunc = (mainRadian, linesMsg, isReverse) => {
            let upLine = undefined;
            let downLine = undefined;
            for (let i = 0; i < linesMsg.lines.length; i++) {
                let line = linesMsg.lines[i];
                let lineRadian = this.DUService.pos.getRadian(line[0], line[1]);
                let differenceRadian = lineRadian - mainRadian;
                differenceRadian = this.DUService.pos.getAbsRadian(differenceRadian, true);
                /** 判断上面 */
                /** upLine没值,直接取值 */
                if (upLine == undefined) {
                    upLine = { wall: linesMsg.walls[i], line: line, radian: lineRadian, differenceRadian: differenceRadian, isReverse: linesMsg.isReverses[i] };
                }
                /** 夹角弧度比较大,直接取值 */
                else if (differenceRadian > upLine.differenceRadian) {
                    upLine = { wall: linesMsg.walls[i], line: line, radian: lineRadian, differenceRadian: differenceRadian, isReverse: linesMsg.isReverses[i] };
                }
                /** 判断下面 */
                /** downLine没值,直接取值 */
                if (downLine == undefined) {
                    downLine = { wall: linesMsg.walls[i], line: line, radian: lineRadian, differenceRadian: differenceRadian, isReverse: linesMsg.isReverses[i] };
                }
                /** 夹角比较小,直接取值 */
                else if (differenceRadian < downLine.differenceRadian) {
                    downLine = { wall: linesMsg.walls[i], line: line, radian: lineRadian, differenceRadian: differenceRadian, isReverse: linesMsg.isReverses[i] };
                }
            }
            if (isReverse) {
                return {
                    downLine: upLine,
                    upLine: downLine
                };
            }
            else {
                return {
                    downLine: downLine,
                    upLine: upLine
                };
            }
        };
        /** 获取射线信息 */
        let LLinesMsg = getFunc(wallRadian, LLines, false);
        let RLinesMsg = getFunc(wallRadian - Math.PI, RLines, true);
        return {
            LU: LLinesMsg.upLine,
            LD: LLinesMsg.downLine,
            RU: RLinesMsg.upLine,
            RD: RLinesMsg.downLine
        };
    }
    /** 产生墙 */
    createWall(cowallID) {
        let wall = new _three_jDesign3D_JWall3D__WEBPACK_IMPORTED_MODULE_3__["JWall3D"]({ coedgeID: cowallID }, this.dataService, this.DUService);
        return wall;
    }
    /** 获取分割的空间 */
    getCutRoom(wall) {
        let pointArr = wall.getPointArr();
        let roomsA = this.calService.point.getRooms(pointArr[0]);
        let roomsB = this.calService.point.getRooms(pointArr[1]);
        for (let i = 0; i < roomsA.length; i++) {
            for (let j = 0; j < roomsB.length; j++) {
                if (roomsA[i].id == roomsB[j].id)
                    return roomsA[i];
            }
        }
        return null;
    }
    /** 删除 */
    del(wall) {
        wall.destory3D();
        delete this.dataService.walls[wall.id];
    }
    /** 完全删除
     * 先后删除cowall,吸附品,墙(会触发联动))
     */
    absDel(wall) {
        let cowallArr = wall.getCowallArr();
        for (let i = 0; i < cowallArr.length; i++) {
            // this.calService.cowall.delRoom(cowallArr[i])
            this.calService.cowall.absDel(cowallArr[i]);
        }
        this.delDepend(wall);
        this.del(wall);
    }
    /** 删除门索引(会联动触发) */
    delDoorIDs(wall) {
        let doors = wall.getDoorArr();
        for (let i = 0; i < doors.length; i++) {
            doors[i].wallID = null;
        }
    }
    /** 删除门索引(会联动触发) */
    delWinIDs(wall) {
        let wins = wall.getWinArr();
        for (let i = 0; i < wins.length; i++) {
            wins[i].wallID = null;
        }
    }
    /** 删除物体索引(会联动触发) */
    delGeometryIDs(wall) {
        let geometrys = wall.getGeometryArr();
        for (let i = 0; i < geometrys.length; i++) {
            geometrys[i].wallID = null;
        }
    }
    /** 删除转角飘窗依赖 */
    delCornerWinIDs(wall) {
        let cornArr = wall.getCornWinArr();
        for (let i = 0; i < cornArr.length; i++) {
            cornArr[i].pointID = undefined;
            // cornArr[i].act3D.move()
        }
        wall.cornWinIDs = [];
    }
    /** 删除依附关联索引 */
    delDepend(wall) {
        this.delDoorIDs(wall);
        this.delWinIDs(wall);
        this.delGeometryIDs(wall);
        this.delCornerWinIDs(wall);
    }
    /** 获取cowalls数组 */
    getCowallArr(walls) {
        let cowalls = [];
        for (let i = 0; i < walls.length; i++) {
            cowalls.push(...walls[i].getCowallArr());
        }
        cowalls = this.DUService.cal.uniqueByAttr(cowalls, 'id');
        return cowalls;
    }
    /* 获取一条龙相连的墙s */
    getOneLinkWalls(walls) {
        walls = walls ? walls : this.dataService.doWalls().arr();
        let newWalls = [];
        for (let i = 0; i < walls.length; i++) {
            let points = walls[i].getPointArr();
            if (points[0].getWallArr().length == 2 && points[1].getWallArr().length == 2) {
                newWalls.push(walls[i]);
            }
        }
        return newWalls;
    }
    /* 获取非弧墙 */
    getUnArcWalls(walls) {
        walls = walls ? walls : this.dataService.doWalls().arr();
        let newWalls = [];
        for (let i = 0; i < walls.length; i++) {
            if (walls[i].arcDistance == 0) {
                newWalls.push(walls[i]);
            }
        }
        return newWalls;
    }
    /* 获取弧墙 */
    getArcWalls(walls) {
        walls = walls ? walls : this.dataService.doWalls().arr();
        let newWalls = [];
        for (let i = 0; i < walls.length; i++) {
            if (walls[i].arcDistance != 0) {
                newWalls.push(walls[i]);
            }
        }
        return newWalls;
    }
    /* 获取有空间属性的墙 */
    getRoomWalls(walls) {
        walls = walls ? walls : this.dataService.doWalls().arr();
        let newWalls = [];
        for (let i = 0; i < walls.length; i++) {
            let cowall = walls[i].getCowall();
            if (cowall.roomID) {
                newWalls.push(walls[i]);
            }
        }
        return newWalls;
    }
    /** 通过点获取矩形墙 */
    getRectWallsByPoint(firstPoint, lastPoint) {
        let newWalls = [];
        let points = [];
        points.push(firstPoint);
        let point = this.calService.point.createPoint({ x: lastPoint.pos.x, y: firstPoint.pos.y });
        points.push(point);
        points.push(lastPoint);
        point = this.calService.point.createPoint({ x: firstPoint.pos.x, y: lastPoint.pos.y });
        points.push(point);
        points.push(firstPoint);
        for (let i = 0; i < points.length - 1; i++) {
            let cowall = this.calService.cowall.createCowall([points[i].id, points[i + 1].id]);
            let wall = this.calService.wall.createWall(cowall.id);
            cowall.edgeID = wall.id;
            newWalls.push(wall);
        }
        return newWalls;
    }
    arcWallUpdata(wall) {
        let arcDistance = wall.getDistance() * wall.arcPer;
        wall.transArc();
        // this.transArcWall(wall, arcDistance)
    }
    /** 转弧形墙 */
    transArcWall(wall, arcDistance) {
        wall.arcDistance = arcDistance;
        let distance = wall.getDistance();
        let radius = (Math.pow(arcDistance, 2) + Math.pow(distance / 2, 2)) / (2 * arcDistance);
        wall.arcRadius = radius;
        let posArr = wall.getPosArr();
        let radian = wall.getRadian();
        let centerPos = this.DUService.pos.getCenterPos(posArr[0], posArr[1]);
        let circlePos = this.DUService.pos.getRayPos(centerPos, radian - (Math.PI / 2), arcDistance - radius);
        wall.circlePos = circlePos;
    }
    // /** 分空间前期准备(旧版) */
    // cutRoomReady(walls: JWall[]) {
    //     this.calService.wall.removeNoUseWalls(walls)
    //     let otherWalls: JWall[] = []
    //     for (let i = 0; i < walls.length; i++) {
    //         let cowalls = walls[i].getCowallArr()
    //         for (let j = 0; j < cowalls.length; j++) {
    //             let room = cowalls[j].getRoom()
    //             if (room) {
    //                 otherWalls.push(...room.getWallArr())
    //             }
    //             this.calService.cowall.delRoom(cowalls[j])
    //         }
    //     }
    //     otherWalls.push(...walls)
    //     otherWalls=this.DUService.cal.uniqueByAttr(otherWalls, 'id')
    //     return otherWalls
    // }
    /**
     * 分空间前期准备
     * @param walls
     * @param isDelRoom 是否顺便删除空间,默认true
     */
    cutRoomReady(walls, isDelRoom = true) {
        this.calService.wall.removeNoUseWalls(walls);
        let roomMsgs = [];
        let wallMsgs = [];
        for (let i = 0; i < walls.length; i++) {
            let cowalls = walls[i].getCowallArr();
            for (let j = 0; j < cowalls.length; j++) {
                let room = cowalls[j].getRoom();
                if (room) {
                    let data = this.calService.room.copyRoom(room);
                    let roomWalls = room.getWallArr();
                    wallMsgs.push(...roomWalls);
                    roomMsgs[data.roomID] = data;
                }
                if (isDelRoom)
                    this.calService.cowall.delRoom(cowalls[j]);
            }
        }
        wallMsgs = this.DUService.cal.uniqueByAttr(wallMsgs, 'id');
        return { rooms: roomMsgs, walls: wallMsgs };
    }
}
WallCal.ctorParameters = () => [
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_1__["CalculatorsService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"] }
];
class LineMsgType {
}


/***/ }),

/***/ "./src/app/svg/common/calculator/wall.cut.cal.ts":
/*!*******************************************************!*\
  !*** ./src/app/svg/common/calculator/wall.cut.cal.ts ***!
  \*******************************************************/
/*! exports provided: WallCutCal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WallCutCal", function() { return WallCutCal; });
/* harmony import */ var _three_jDesign3D_JCowall3D__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../three/jDesign3D/JCowall3D */ "./src/app/three/jDesign3D/JCowall3D.ts");
/* harmony import */ var _three_jDesign3D_JWall3D__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../three/jDesign3D/JWall3D */ "./src/app/three/jDesign3D/JWall3D.ts");
/* harmony import */ var _wall_overlay_cal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./wall.overlay.cal */ "./src/app/svg/common/calculator/wall.overlay.cal.ts");
/* harmony import */ var _three_jDesign3D_JPoint3D__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../three/jDesign3D/JPoint3D */ "./src/app/three/jDesign3D/JPoint3D.ts");




class WallCutCal extends _wall_overlay_cal__WEBPACK_IMPORTED_MODULE_2__["WallOverlayCal"] {
    /** 靠点分墙 生成得墙为后面部分 */
    cutByPoint(wall, point) {
        let oldCowallArr = wall.getCowallArr();
        let newCowallArr = [];
        /** 正有序墙============================================== */
        /** 新建cowall */
        let newCowall = new _three_jDesign3D_JCowall3D__WEBPACK_IMPORTED_MODULE_0__["JCowall3D"]({
            pointIDs: [point.id, oldCowallArr[0].getPointEnd().id],
            roomID: oldCowallArr[0].roomID,
            reversed: oldCowallArr[0].reversed,
            nextID: oldCowallArr[0].nextID,
            prevID: oldCowallArr[0].id
        }, this.dataService, this.DUService);
        newCowallArr.push(newCowall);
        /** 修改旧cowall下边 */
        let nextCowall = oldCowallArr[0].getNextCowall();
        nextCowall ? nextCowall.prevID = newCowall.id : null;
        /** 修改旧cowall的点集合 */
        oldCowallArr[0].pointIDs = [oldCowallArr[0].pointIDs[0], point.id];
        /** 修改旧的cowall上下关系 */
        oldCowallArr[0].nextID = newCowall.id;
        /** 生成新wall */
        let newWall = new _three_jDesign3D_JWall3D__WEBPACK_IMPORTED_MODULE_1__["JWall3D"]({ coedgeID: newCowall.id, thickness: wall.thickness, wallType: wall.wallType }, this.dataService, this.DUService);
        /** 修改cowall和wall关系 */
        newCowall.edgeID = newWall.id;
        /** 修改空间关系 */
        let room = oldCowallArr[0].getRoom();
        if (room != null)
            room.cowallIDs.push(newCowall.id);
        /** 修改point的关系 */
        /** 反向有序墙=============================================================== */
        if (oldCowallArr.length > 1 && oldCowallArr[1] != undefined) {
            /** 新建cowall */
            newCowall = new _three_jDesign3D_JCowall3D__WEBPACK_IMPORTED_MODULE_0__["JCowall3D"]({
                pointIDs: [oldCowallArr[1].getPointStart().id, point.id],
                roomID: oldCowallArr[1].roomID,
                reversed: oldCowallArr[1].reversed,
                nextID: oldCowallArr[1].id,
                prevID: oldCowallArr[1].prevID,
                edgeID: newWall.id
            }, this.dataService, this.DUService);
            newCowallArr.push(newCowall);
            /** 修改旧cowall上边 */
            let prevCowall = oldCowallArr[1].getPrevCowall();
            if (prevCowall != null) {
                prevCowall.nextID = newCowall.id;
                let prevEndPoint = prevCowall.getPointEnd();
                /** 添加新cowall索引 */
                prevEndPoint.cowallIDs.push(newCowall.id);
                /** 删除旧cowall索引 */
                this.DUService.cal.removeByValue(prevEndPoint.cowallIDs, oldCowallArr[1].id);
                // console.log(prevEndPoint.cowallIDs)
                prevEndPoint.cowallIDs = this.DUService.cal.unique(prevEndPoint.cowallIDs);
            }
            /** 修改旧墙上下关系 */
            oldCowallArr[1].prevID = newCowall.id;
            oldCowallArr[1].pointIDs = [point.id, oldCowallArr[1].pointIDs[1]];
            /** 修改cowall和cowall关系 */
            newCowall.partnerID = newCowallArr[0].id;
            /** 修改cowall与点的关系 */
            point.cowallIDs.push(newCowall.id, oldCowallArr[1].id);
            /** 修改cowall和wall关系 */
            /** 修改空间关系 */
            let room = oldCowallArr[1].getRoom();
            if (room != null)
                room.cowallIDs.push(newCowall.id);
        }
        /** 点去重复 */
        point.cowallIDs = this.DUService.cal.unique(point.cowallIDs);
        return {
            wall: newWall,
            cowalls: newCowallArr
        };
    }
    /** 通过点数组分墙 返回切割后的墙数组
     * 自动排序的,不必带顺序
    */
    cutsByPoints(wall, ...pointArr) {
        /** 仅仅只有一个点时候,节约性能 */
        if (pointArr.length == 1) {
            let newWall = this.cutByPoint(wall, pointArr[0]).wall;
            return [newWall];
        }
        /** 获取墙与点的距离数组 */
        let distanceArr = [];
        let pointStart = wall.getCowall().getPointStart();
        for (let i = 0; i < pointArr.length; i++) {
            distanceArr.push(this.DUService.pos.getPowDistance(pointStart.pos, pointArr[i].pos));
        }
        /** 根据距离排列点的顺序 */
        let sort = this.DUService.cal.bubbleSortID(distanceArr);
        /** 收集墙 */
        let newWallArr = [];
        for (let i = 0; i < sort.length; i++) {
            wall = this.cutByPoint(wall, pointArr[sort[i]]).wall;
            newWallArr.push(wall);
        }
        return newWallArr;
    }
    /** 靠坐标拆分墙 */
    cutByPos(wall, pos) {
        let point = new _three_jDesign3D_JPoint3D__WEBPACK_IMPORTED_MODULE_3__["JPoint3D"]({ pos: { x: pos.x, y: pos.y } }, this.dataService, this.DUService);
        // console.log(point)
        let msg = this.cutByPoint(wall, point);
        return {
            point: point,
            wall: msg.wall,
            cowalls: msg.cowalls
        };
    }
    /** 靠百分比分墙 */
    cutByPer(wall, per) {
        let startPos = wall.getCowall().getPointStart().pos;
        let distance = wall.getDistance();
        distance = distance * per;
        let radian = wall.getRadian();
        let newPos = null;
        if (distance != 0)
            newPos = this.DUService.pos.getRayPos(startPos, radian, distance);
        else
            newPos = startPos;
        return this.cutByPos(wall, newPos);
    }
    /** 获取相交点 */
    getIntersect(wallA, wallB) {
        let posArrA = wallA.getPosArr();
        let posArrB = wallB.getPosArr();
        let intersectPos = this.DUService.pos.getIntersect(posArrA[0], posArrA[1], posArrB[0], posArrB[1], false);
        return intersectPos;
    }
    /** 获取相交点坐标集合 */
    getIntersectArr(wall, ...reWalls) {
        let posArr = [];
        for (let key in this.dataService.walls) {
            for (let i = 0; i < reWalls.length; i++) {
                let sameInt = this.DUService.cal.isIncludeByAttr('id', key, wall, ...reWalls);
                if (sameInt == null) {
                    let intersectPos = this.getIntersect(wall, this.dataService.walls[key]);
                    posArr.push(intersectPos);
                }
            }
        }
        return posArr;
    }
}


/***/ }),

/***/ "./src/app/svg/common/calculator/wall.overCut.cal.ts":
/*!***********************************************************!*\
  !*** ./src/app/svg/common/calculator/wall.overCut.cal.ts ***!
  \***********************************************************/
/*! exports provided: WallOverCutCal, WallOverCutMsg */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WallOverCutCal", function() { return WallOverCutCal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WallOverCutMsg", function() { return WallOverCutMsg; });
/* harmony import */ var _wall_overlay_cal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wall.overlay.cal */ "./src/app/svg/common/calculator/wall.overlay.cal.ts");

class WallOverCutCal extends _wall_overlay_cal__WEBPACK_IMPORTED_MODULE_0__["WallOverlayCal"] {
    /** 获取墙的信息 */
    getWallsMsg(walls) {
        let msgs = [];
        for (let i = 0; i < walls.length; i++) {
            let msg = this.getWallMsg(walls[i]);
            msgs.push(msg);
        }
        return msgs;
    }
    isCanCut(mainPointArr, otherPointArr) {
        if (mainPointArr[0].id == otherPointArr[0].id ||
            mainPointArr[0].id == otherPointArr[1].id ||
            mainPointArr[1].id == otherPointArr[0].id ||
            mainPointArr[1].id == otherPointArr[1].id)
            return false;
        return true;
    }
    /**
     * 获取切割墙信息
     * @param mainWall
     * @param otherWall
     */
    getCutWallMsg(mainWall, otherWall) {
        if (!this.isCanCut(mainWall.points, otherWall.points))
            return undefined;
        let intersectPos = this.DUService.pos.getIntersect(mainWall.posArr[0], mainWall.posArr[1], otherWall.posArr[0], otherWall.posArr[1], false);
        if (intersectPos) {
            let distance = this.DUService.pos.getDistance(otherWall.posArr[0], intersectPos);
            let otherWallDistance = Math.sqrt(otherWall.powDistance);
            /** 创建点 */
            let creatPoint = undefined;
            /** 创建墙 */
            let createWall = undefined;
            if (distance < 1) {
                // console.log('头')
                creatPoint = otherWall.points[0];
                createWall = undefined;
            }
            else if (distance > otherWallDistance - 1 && distance < otherWallDistance + 1) {
                // console.log('尾')
                creatPoint = otherWall.points[1];
                createWall = undefined;
            }
            else {
                creatPoint = this.calService.point.createPoint(intersectPos);
                createWall = this.calService.wall.cut.cutByPoint(otherWall.wall, creatPoint).wall;
            }
            let powDistance = this.DUService.pos.getPowDistance(mainWall.posArr[0], intersectPos);
            return {
                intersectPoint: creatPoint,
                cutWall: createWall,
                cutPowDistance: powDistance
            };
        }
        return undefined;
    }
    setOverMsg(mainMsg, otherMsg, msgs) {
        let overlay = this.getParallelWallType(mainMsg, otherMsg);
        /** 重叠 */
        if (overlay) {
            let a = this.getWalloverlayTransMsg(overlay, mainMsg, otherMsg);
            /** 添加切割信息 */
            if (!msgs[mainMsg.wall.id])
                msgs[mainMsg.wall.id] = [];
            msgs[mainMsg.wall.id].push({
                wall: mainMsg,
                otherWall: otherMsg,
                cutPowDistance: a.powDistance,
                intersectPoint: a.intersectPoint,
                wallPowDistance: mainMsg.powDistance,
                type: overlay.type,
                isReverse: overlay.isReverse
            });
        }
    }
    getAllLinkOverMsg(mainWalls) {
        let mainMsgs = this.getWallsMsg(mainWalls);
        let msgs = [];
        for (let i = 0; i < mainMsgs.length; i++) {
            for (let j = i + 1; j < mainMsgs.length; j++) {
                if (mainMsgs[i].wall.id != mainMsgs[j].wall.id) {
                    this.setOverMsg(mainMsgs[i], mainMsgs[j], msgs);
                }
            }
        }
        return msgs;
    }
    /**
     * 获取所有重合信息
     */
    getAllOverMsg(mainWalls, otherWalls) {
        let mainMsgs = this.getWallsMsg(mainWalls);
        let otherMsgs = this.getWallsMsg(otherWalls);
        let msgs = [];
        for (let i = 0; i < mainMsgs.length; i++) {
            let len = otherMsgs.length;
            for (let j = 0; j < len; j++) {
                if (mainMsgs[i].wall.id != otherMsgs[j].wall.id) {
                    this.setOverMsg(mainMsgs[i], otherMsgs[j], msgs);
                }
            }
        }
        return msgs;
    }
    /** 获取所有切割信息 */
    getAllCutMsg(mainWalls, otherWalls) {
        let mainMsgs = this.getWallsMsg(mainWalls);
        let otherMsgs = this.getWallsMsg(otherWalls);
        let msgs = [];
        /** 切割 */
        for (let i = 0; i < mainMsgs.length; i++) {
            let len = otherMsgs.length;
            for (let j = 0; j < len; j++) {
                let cut = this.getCutWallMsg(mainMsgs[i], otherMsgs[j]);
                if (cut) {
                    otherMsgs[j] = this.getWallMsg(otherMsgs[j].wall);
                    if (cut.cutWall)
                        otherMsgs.push(this.getWallMsg(cut.cutWall));
                    /** 添加切割信息 */
                    if (!msgs[mainMsgs[i].wall.id])
                        msgs[mainMsgs[i].wall.id] = [];
                    msgs[mainMsgs[i].wall.id].push({
                        wall: mainMsgs[i],
                        otherWall: otherMsgs[j],
                        cutPowDistance: cut.cutPowDistance,
                        intersectPoint: cut.intersectPoint,
                        wallPowDistance: mainMsgs[i].powDistance,
                        type: 'cut'
                    });
                }
            }
        }
        return msgs;
    }
    /** 收集仍未使用的墙 */
    collectNoUseWalls(oldWallIDs, useWallIDs) {
        let collectWalls = [];
        for (let i = 0; i < oldWallIDs.length; i++) {
            let a = this.DUService.cal.isInclude(useWallIDs, oldWallIDs[i]);
            if (a == undefined) {
                collectWalls.push(this.dataService.walls[oldWallIDs[i]]);
            }
        }
        return collectWalls;
    }
    /** 所有重合 */
    allOverlay(walls) {
        let otherWalls = this.dataService.doWalls().arr(...walls);
        let msgs = this.getAllOverMsg(walls, otherWalls);
        this.setAllCutMsgSortByPowDistance(msgs);
        let collectWalls = [];
        let useWalls = [];
        let oldWallIDs = this.DUService.cal.getNewAttrArray(walls, 'id');
        let useWallIDs = [];
        let roomWalls = [];
        for (let key in msgs) {
            useWallIDs.push(key);
            let a = this.wallsOverAndCut(msgs[key]);
            if (a) {
                collectWalls.push(...a.collectWalls);
                useWalls.push(...a.useWalls);
                roomWalls.push(...a.roomWalls);
            }
        }
        collectWalls.push(...this.collectNoUseWalls(oldWallIDs, useWallIDs));
        useWalls = this.DUService.cal.uniqueByAttr(useWalls, 'id');
        collectWalls = this.DUService.cal.uniqueByAttr(collectWalls, 'id');
        return {
            collectWalls: collectWalls,
            useWalls: useWalls,
            roomWalls: roomWalls
        };
    }
    /** 所有切割 */
    allCut(walls) {
        let otherWalls = this.dataService.doWalls().arr(...walls);
        let msgs = this.getAllCutMsg(walls, otherWalls);
        this.setAllCutMsgSortByPowDistance(msgs);
        let collectWalls = [];
        let oldWallIDs = this.DUService.cal.getNewAttrArray(walls, 'id');
        let useWallIDs = [];
        let useWalls = [];
        for (let key in msgs) {
            useWallIDs.push(key);
            let a = this.wallsOverAndCut(msgs[key]);
            if (a) {
                collectWalls.push(...a.collectWalls);
                useWalls.push(...a.useWalls);
            }
        }
        collectWalls.push(...this.collectNoUseWalls(oldWallIDs, useWallIDs));
        useWalls = this.DUService.cal.uniqueByAttr(useWalls, 'id');
        collectWalls = this.DUService.cal.uniqueByAttr(collectWalls, 'id');
        return {
            collectWalls: collectWalls,
            useWalls: useWalls,
            roomWalls: []
        };
    }
    /** 连接切割 */
    allLinkOverLay(wall) {
        let otherWalls = [];
        let pointArr = wall.getPointArr();
        let collectWalls = [];
        let oldWallIDs = [];
        let useWallIDs = [];
        let useWalls = [];
        let roomWalls = [];
        let func = (otherWalls) => {
            this.DUService.cal.removeByAttr(otherWalls, 'id', wall.id);
            let msgs = this.getAllLinkOverMsg(otherWalls);
            for (let key in msgs) {
                useWallIDs.push(key);
                let msg = msgs[key];
                let a = this.wallsOverAndCut(msg);
                if (a) {
                    collectWalls.push(...a.collectWalls);
                    useWalls.push(...a.useWalls);
                    roomWalls.push(...a.roomWalls);
                }
            }
        };
        /** 起点 */
        otherWalls = pointArr[0].getWallArr();
        func(otherWalls);
        /** 尾点 */
        otherWalls = pointArr[1].getWallArr();
        func(otherWalls);
        collectWalls.push(...this.collectNoUseWalls(oldWallIDs, useWallIDs));
        useWalls = this.DUService.cal.uniqueByAttr(useWalls, 'id');
        collectWalls = this.DUService.cal.uniqueByAttr(collectWalls, 'id');
        return {
            collectWalls: collectWalls,
            useWalls: useWalls,
            roomWalls: roomWalls
        };
    }
    /* 删除连接且长度近乎为0的墙 */
    delLinkZeroWalls(wall) {
        let pointArr = wall.getPointArr();
        let otherWalls = pointArr[0].getWallArr();
        otherWalls.push(...pointArr[1].getWallArr());
        otherWalls = this.DUService.cal.uniqueByAttr(otherWalls, 'id');
        for (let i = 0; i < otherWalls.length; i++) {
            let otherPoints = otherWalls[i].getPointArr();
            if (this.DUService.pos.isSamePos(otherPoints[0].pos, otherPoints[1].pos, 0.01)) {
                let samePoint = (pointArr[0].id == otherPoints[0].id || pointArr[0].id == otherPoints[1].id) ? pointArr[0] : (pointArr[1].id == otherPoints[0].id || pointArr[1].id == otherPoints[1].id) ? pointArr[1] : undefined;
                if (samePoint) {
                    let otherOtherPoint = otherPoints[0].id == samePoint.id ? otherPoints[1] : otherPoints[0];
                    this.calService.point.transPoint(otherOtherPoint, samePoint);
                    this.calService.point.resetRoomsCowalls(samePoint);
                }
            }
        }
    }
    /** 所有切割和所有重合
     * @param readyWall 先进行第一次单墙切割,切割完再统一切割
     */
    allOverlayAndAllCut(walls, readyWall) {
        /** 相连 */
        let msg = { collectWalls: [], useWalls: [], roomWalls: [] };
        let roomWalls = [];
        let useWalls = [];
        /** 相连================= */
        if (readyWall) {
            try {
                this.delLinkZeroWalls(readyWall);
                this.calService.wall.removeNoUseWalls(walls);
                msg = this.allLinkOverLay(readyWall);
                roomWalls.push(...msg.roomWalls);
                msg.collectWalls.push(...msg.useWalls);
                msg.collectWalls.push(readyWall);
                roomWalls.push(...msg.roomWalls);
                useWalls.push(...msg.useWalls);
                msg.collectWalls.push(...readyWall.getNearWallArr());
                msg.collectWalls = this.DUService.cal.uniqueByAttr(msg.collectWalls, 'id');
            }
            catch (e) {
                console.log('第一次切割失败');
                console.log(readyWall);
                console.log(e);
                return undefined;
            }
        }
        /** 重合================== */
        try {
            msg.collectWalls.push(...walls);
            this.calService.wall.removeNoUseWalls(msg.collectWalls);
            msg.collectWalls = this.DUService.cal.uniqueByAttr(msg.collectWalls, 'id');
            msg = this.allOverlay(msg.collectWalls);
            roomWalls.push(...msg.roomWalls);
            useWalls.push(...msg.useWalls);
        }
        catch (e) {
            console.log("重合失败");
            console.log(e);
            return undefined;
        }
        /** 切割======================= */
        try {
            msg.collectWalls.push(...walls);
            this.calService.wall.removeNoUseWalls(msg.collectWalls);
            msg.collectWalls = this.DUService.cal.uniqueByAttr(msg.collectWalls, 'id');
            msg = this.allCut(msg.collectWalls);
            this.delSamePointWalls();
            this.calService.point.delNoUse();
        }
        catch (e) {
            console.log('切割失败');
            console.log(e);
            return undefined;
        }
        return {
            collectWalls: msg.collectWalls,
            roomWalls: roomWalls,
            useWalls: useWalls
        };
    }
    /** 设置先后顺序 */
    setAllCutMsgSortByPowDistance(msgs) {
        for (let key in msgs) {
            this.DUService.cal.bubbleSortByAttr(msgs[key], 'cutPowDistance');
        }
    }
    /** 切割和重合 */
    wallsOverAndCut(walloverCuts) {
        let wall = walloverCuts[0].wall.wall;
        if (!wall)
            return undefined;
        let collectWalls = [];
        let useWalls = [];
        let roomWalls = [];
        // console.log(`wallID:${wall.id},切割次数:${walloverCuts.length}`)
        let isBreak = false;
        for (let i = 0; i < walloverCuts.length; i++) {
            // console.log(`当前墙ID:${wall.id}`)
            // console.log(`类型:${walloverCuts[i].type},切割对象:${walloverCuts[i].otherWall.wall.id},距离:${walloverCuts[i].cutPowDistance}`)
            // if (!wall || !this.dataService.walls[wall.id])
            //     break
            // while (!this.dataService.walls[walloverCuts[i].wall.wall.id]) {
            //     i += 1
            //     if (i >= walloverCuts.length) {
            //         isBreak = true
            //         break
            //     }
            // }
            // if (isBreak)
            //     break
            let overcutWallMsg = undefined;
            switch (walloverCuts[i].type) {
                case "leftLink":
                    overcutWallMsg = this.wallLeftLinkOver(wall, walloverCuts[i]);
                    wall = overcutWallMsg.wall;
                    break;
                case "rightLink":
                    overcutWallMsg = this.wallRightLinkOver(wall, walloverCuts[i]);
                    wall = undefined;
                    break;
                case "left":
                    overcutWallMsg = this.wallLeftOver(wall, walloverCuts[i]);
                    wall = overcutWallMsg.wall;
                    break;
                case "right":
                    overcutWallMsg = this.wallRightOver(wall, walloverCuts[i]);
                    wall = undefined;
                    break;
                case "big":
                    overcutWallMsg = this.wallBigOver(wall, walloverCuts[i]);
                    wall = overcutWallMsg.wall;
                    break;
                case "small":
                    overcutWallMsg = this.wallSmallOver(wall, walloverCuts[i]);
                    wall = undefined;
                    break;
                case "cut":
                    let cutOver = this.wallCutOver(wall, walloverCuts[i]);
                    if (cutOver) {
                        wall = cutOver.mainWall;
                        collectWalls.push(cutOver.collectWall);
                    }
                    break;
                case "leftPoint":
                    overcutWallMsg = this.wallLeftPointOver(wall, walloverCuts[i]);
                    wall = overcutWallMsg.wall;
                    break;
                case "rightPoint":
                    overcutWallMsg = this.wallRightPointOver(wall, walloverCuts[i]);
                    wall = undefined;
                    break;
            }
            /** 收集 */
            if (overcutWallMsg) {
                roomWalls.push(...overcutWallMsg.roomWalls);
                useWalls.push(...overcutWallMsg.useWalls);
                if (overcutWallMsg.collectWall) {
                    collectWalls.push(overcutWallMsg.collectWall);
                }
            }
        }
        // console.log('==============')
        if (wall)
            collectWalls.push(wall);
        return {
            collectWalls: collectWalls,
            useWalls: useWalls,
            roomWalls: roomWalls
        };
    }
    /** 墙左重合 */
    wallLeftOver(wall, wallOverCut) {
        let mainCut = this.calService.wall.cut.cutByPoint(wall, wallOverCut.intersectPoint);
        let otherCut = this.calService.wall.cut.cutByPoint(wallOverCut.otherWall.wall, wall.getPoint(0));
        let roomWalls = this.getRoomWalls(wall);
        this.calService.wall.absDel(wall);
        return {
            wall: mainCut.wall,
            useWalls: [otherCut.wall, wallOverCut.otherWall.wall],
            roomWalls: roomWalls
        };
    }
    /** 墙右重合 */
    wallRightOver(wall, wallOverCut) {
        let mainPointArr = wall.getPointArr();
        let otherPointArr = this.getPointArrByReverse(wallOverCut.otherWall.wall, wallOverCut.isReverse);
        /** 是否连接 */
        if (mainPointArr[0].id == otherPointArr[0].id) {
            // console.log('rightLink')
            let rightLink = this.wallLeftLinkOver(wall, wallOverCut);
            return rightLink;
        }
        let mainCut = this.calService.wall.cut.cutByPoint(wall, wallOverCut.intersectPoint);
        let otherCut = this.calService.wall.cut.cutByPoint(wallOverCut.otherWall.wall, mainCut.wall.getPoint(1));
        let roomWalls = this.getRoomWalls(mainCut.wall);
        this.calService.wall.absDel(mainCut.wall);
        return {
            wall: undefined,
            collectWall: wall,
            useWalls: [otherCut.wall, wallOverCut.otherWall.wall],
            roomWalls: roomWalls
        };
    }
    /** 墙覆盖 */
    wallBigOver(wall, wallOverCut) {
        let otherPointArr = this.getPointArrByReverse(wallOverCut.otherWall.wall, wallOverCut.isReverse);
        let mainPointArr = wall.getPointArr();
        /** 有左重合点 */
        if (mainPointArr[0].id == otherPointArr[0].id) {
            let over = this.wallLeftLinkOver(wall, wallOverCut);
            return over;
        }
        /** 没有左重合点 */
        let mainCut = this.calService.wall.cut.cutsByPoints(wall, ...otherPointArr);
        let roomWalls = this.getRoomWalls(mainCut[0]);
        this.calService.wall.absDel(mainCut[0]);
        return {
            wall: mainCut[1],
            collectWall: wall,
            useWalls: [wallOverCut.otherWall.wall],
            roomWalls: roomWalls
        };
    }
    /** 墙被覆盖 */
    wallSmallOver(wall, wallOverCut) {
        let points = wall.getPointArr();
        let otherCut = this.calService.wall.cut.cutsByPoints(wallOverCut.otherWall.wall, ...points);
        let roomWalls = this.getRoomWalls(wall);
        this.calService.wall.absDel(wall);
        return {
            wall: undefined,
            useWalls: [wallOverCut.otherWall.wall, ...otherCut],
            roomWalls: roomWalls
        };
    }
    /** 墙被切割 */
    wallCutOver(wall, wallOverCut) {
        let linkMsg = this.getLink(wall, wallOverCut.otherWall.wall);
        /** 如果相连不切割 */
        if (linkMsg) {
            // console.log('link')
            return undefined;
        }
        let pointArr = wall.getPointArr();
        let wallsDistance = this.DUService.pos.getDistance(pointArr[0].pos, pointArr[1].pos);
        let otherDistance = this.DUService.pos.getDistance(pointArr[0].pos, wallOverCut.intersectPoint.pos);
        let mainCut = this.calService.wall.cut.cutByPoint(wall, wallOverCut.intersectPoint);
        return {
            mainWall: mainCut.wall,
            collectWall: wall,
            roomWalls: []
        };
    }
    /** 墙左点重合 */
    wallLeftPointOver(wall, wallOverCut, minDistance = 30) {
        let mainPointArr = wall.getPointArr();
        let otherPointArr = this.getPointArrByReverse(wallOverCut.otherWall.wall, wallOverCut.isReverse);
        this.calService.point.transPoint(mainPointArr[0], otherPointArr[0]);
        return this.wallLeftLinkOver(wall, wallOverCut);
    }
    /** 墙右点重合 */
    wallRightPointOver(wall, wallOverCut, minDistance = 30) {
        let mainPointArr = wall.getPointArr();
        let otherPointArr = this.getPointArrByReverse(wallOverCut.otherWall.wall, wallOverCut.isReverse);
        this.calService.point.transPoint(mainPointArr[1], otherPointArr[1]);
        return this.wallRightLinkOver(wall, wallOverCut);
    }
    /** 左墙点连接重合 */
    wallLeftLinkOver(wall, wallOverCut, minDistance = 30) {
        let mainPointArr = wall.getPointArr();
        let otherPointArr = this.getPointArrByReverse(wallOverCut.otherWall.wall, wallOverCut.isReverse);
        /** 完全重合相连 */
        if (mainPointArr[1].id == otherPointArr[1].id) {
            let roomWalls = this.getRoomWalls(wall);
            this.calService.wall.absDel(wall);
            return {
                wall: undefined,
                useWalls: [wallOverCut.otherWall.wall],
                roomWalls: roomWalls
            };
        }
        /** 距离判断是否完全重合 */
        else {
            let distance = this.DUService.pos.getPowDistance(mainPointArr[1].pos, otherPointArr[1].pos);
            if (distance < minDistance) {
                this.calService.point.transPoint(mainPointArr[1], otherPointArr[1]);
                let roomWalls = this.getRoomWalls(wall);
                this.calService.wall.absDel(wall);
                return {
                    wall: undefined,
                    useWalls: [wallOverCut.otherWall.wall],
                    roomWalls: roomWalls
                };
            }
        }
        /** 不完全重合相连 */
        let mainPowDistance = this.DUService.pos.getPowDistance(mainPointArr[0].pos, mainPointArr[1].pos);
        let otherPowDistance = this.DUService.pos.getPowDistance(otherPointArr[0].pos, otherPointArr[1].pos);
        /** 覆盖其他 */
        if (mainPowDistance > otherPowDistance) {
            let cut = this.calService.wall.cut.cutByPoint(wall, otherPointArr[1]);
            let roomWalls = this.getRoomWalls(wall);
            this.calService.wall.absDel(wall);
            return {
                wall: cut.wall,
                useWalls: [wallOverCut.otherWall.wall],
                roomWalls: roomWalls
            };
        }
        /** 被覆盖 */
        else {
            let cut = this.calService.wall.cut.cutByPoint(wallOverCut.otherWall.wall, mainPointArr[1]);
            let roomWalls = this.getRoomWalls(wall);
            this.calService.wall.absDel(wall);
            return {
                wall: undefined,
                useWalls: [cut.wall, wallOverCut.otherWall.wall],
                roomWalls: roomWalls
            };
        }
    }
    /** 右墙点连接重合(不相连返回undefined) */
    wallRightLinkOver(wall, wallOverCut, minDistance = 30) {
        let mainPointArr = wall.getPointArr();
        let otherPointArr = this.getPointArrByReverse(wallOverCut.otherWall.wall, wallOverCut.isReverse);
        /** 完全重合相连 */
        if (mainPointArr[0].id == otherPointArr[0].id) {
            let roomWalls = this.getRoomWalls(wall);
            this.calService.wall.absDel(wall);
            return {
                wall: undefined,
                useWalls: [wallOverCut.otherWall.wall],
                roomWalls: roomWalls
            };
        }
        /** 距离判断是否完全重合 */
        else {
            let distance = this.DUService.pos.getPowDistance(mainPointArr[0].pos, otherPointArr[0].pos);
            if (distance < minDistance) {
                this.calService.point.transPoint(mainPointArr[0], otherPointArr[0]);
                let roomWalls = this.getRoomWalls(wall);
                this.calService.wall.absDel(wall);
                return {
                    wall: undefined,
                    useWalls: [wallOverCut.otherWall.wall],
                    roomWalls: roomWalls
                };
            }
        }
        /** 不完全重合相连 */
        let mainPowDistance = this.DUService.pos.getPowDistance(mainPointArr[0].pos, mainPointArr[1].pos);
        let otherPowDistance = this.DUService.pos.getPowDistance(otherPointArr[0].pos, otherPointArr[1].pos);
        /** 覆盖其他 */
        if (mainPowDistance > otherPowDistance) {
            let cut = this.calService.wall.cut.cutByPoint(wall, otherPointArr[0]);
            let roomWalls = this.getRoomWalls(cut.wall);
            this.calService.wall.absDel(cut.wall);
            return {
                wall: undefined,
                useWalls: [wallOverCut.otherWall.wall, cut.wall, wall],
                roomWalls: roomWalls
            };
        }
        /** 被覆盖 */
        else {
            let cut = this.calService.wall.cut.cutByPoint(wallOverCut.otherWall.wall, mainPointArr[0]);
            let roomWalls = this.getRoomWalls(wall);
            this.calService.wall.absDel(wall);
            if (wallOverCut.isReverse) {
                return {
                    wall: undefined,
                    collectWall: cut.wall,
                    useWalls: [wallOverCut.otherWall.wall],
                    roomWalls: roomWalls
                };
            }
            else {
                return {
                    wall: undefined,
                    collectWall: wallOverCut.otherWall.wall,
                    useWalls: [],
                    roomWalls: roomWalls
                };
            }
        }
    }
    /** 获取连接信息(没有返回undefined) */
    getLink(wall, otherWall) {
        let pointArr = wall.getPointArr();
        let otherPointArr = otherWall.getPointArr();
        let otherWallotherPoint = undefined;
        let wallOtherPoint = undefined;
        /** 是否相连 */
        if (pointArr[0].id == otherPointArr[0].id) {
            wallOtherPoint = pointArr[1];
            otherWallotherPoint = otherPointArr[1];
        }
        else if (pointArr[1].id == otherPointArr[0].id) {
            wallOtherPoint = pointArr[0];
            otherWallotherPoint = otherPointArr[1];
        }
        else if (pointArr[0].id == otherPointArr[1].id) {
            wallOtherPoint = pointArr[1];
            otherWallotherPoint = otherPointArr[0];
        }
        else if (pointArr[1].id == otherPointArr[1].id) {
            wallOtherPoint = pointArr[0];
            otherWallotherPoint = otherPointArr[0];
        }
        else {
            return undefined;
        }
        return {
            wallOtherPoint: wallOtherPoint,
            otherWallotherPoint: otherWallotherPoint
        };
    }
    /** 获取反序点集合 */
    getPointArrByReverse(wall, isReverse) {
        let pointArr = [];
        try {
            pointArr = wall.getPointArr();
            if (isReverse)
                pointArr = [pointArr[1], pointArr[0]];
            return pointArr;
        }
        catch (e) {
            console.log(wall);
            console.log(wall.getCowall());
            console.log(e);
        }
    }
    /** 删除同点的墙 */
    delSamePointWalls() {
        let roomWalls = [];
        for (let key in this.dataService.walls) {
            let wall = this.dataService.walls[key];
            let pointArr = wall.getPointArr();
            if (pointArr[0].id == pointArr[1].id) {
                roomWalls.push(...this.getRoomWalls(wall));
                this.calService.wall.absDel(wall);
            }
        }
        return roomWalls;
    }
    /** 获取空间所有墙 */
    getRoomWalls(wall) {
        let rooms = wall.getRoomArr();
        let roomWalls = [];
        for (let i = 0; i < rooms.length; i++) {
            if (rooms[i]) {
                // console.log(rooms[i])
                let walls = rooms[i].getWallArr();
                roomWalls.push(...walls);
            }
        }
        return roomWalls;
    }
}
class WallOverCutMsg {
}
class OverCutWallMsg {
}


/***/ }),

/***/ "./src/app/svg/common/calculator/wall.overlay.cal.ts":
/*!***********************************************************!*\
  !*** ./src/app/svg/common/calculator/wall.overlay.cal.ts ***!
  \***********************************************************/
/*! exports provided: WallOverlayCal, WallMsgType, OverlayMsg, OverlayTransMsg */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WallOverlayCal", function() { return WallOverlayCal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WallMsgType", function() { return WallMsgType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OverlayMsg", function() { return OverlayMsg; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OverlayTransMsg", function() { return OverlayTransMsg; });
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");



class WallOverlayCal {
    constructor(calService, dataService, DUService) {
        this.calService = calService;
        this.dataService = dataService;
        this.DUService = DUService;
        this._parallelRadian = Math.PI / 180 * 5;
        this._sameRadian = Math.PI / 180 * 6;
        this._minDistance = 0.1;
    }
    /**
     * 合并墙 如果没有连接点则不执行
     * 且执行cowall删除都以mainWall为标准,
     * delWall的cowall所有删除
     * @summary 合并墙.
     * @param mainWall 主墙,合并delWall
     * @param delWall 副墙,被合并删除
     * @returns 执行成功返回true,不执行返回false
     *
     */
    combineWalls(mainWall, delWall) {
        let mainPointArr = mainWall.getPointArr();
        let delPointArr = delWall.getPointArr();
        let linkMsg = null;
        /** 判断是否连接 */
        if (mainPointArr[0].id == delPointArr[0].id) {
            linkMsg = {
                type: 'start',
                link: mainPointArr[0],
                end: delPointArr[1]
            };
        }
        else if (mainPointArr[0].id == delPointArr[1].id) {
            linkMsg = {
                type: 'start',
                link: mainPointArr[0],
                end: delPointArr[0]
            };
        }
        /**  */
        else if (mainPointArr[1].id == delPointArr[0].id) {
            linkMsg = {
                type: 'end',
                link: mainPointArr[1],
                end: delPointArr[1]
            };
        }
        else if (mainPointArr[1].id == delPointArr[1].id) {
            linkMsg = {
                type: 'end',
                link: mainPointArr[1],
                end: delPointArr[0]
            };
        }
        else {
            return false;
        }
        let mainCowallArr = mainWall.getCowallArr();
        let delCowallArr = delWall.getCowallArr();
        /** 设置顺序为上 */
        let setPrevFunc = (mainCowall) => {
            let prevCowall = null;
            if (delCowallArr[0].pointIDs[1] == linkMsg.link.id) {
                prevCowall = delCowallArr[0];
            }
            else if (delCowallArr.length == 2 && delCowallArr[1].pointIDs[1] == linkMsg.link.id) {
                prevCowall = delCowallArr[1];
            }
            if (prevCowall != null) {
                mainCowall.prevID = prevCowall.prevID;
                prevCowall = prevCowall.getPrevCowall();
                /** 修改上上cowall的next索引 */
                if (prevCowall != null)
                    prevCowall.nextID = mainCowall.id;
            }
            mainCowall.pointIDs = [linkMsg.end.id, mainCowall.pointIDs[1]];
            let room = mainCowall.getRoom();
            if (room != null)
                room.resetCowallIDs(mainCowall);
        };
        /** 设置顺序为下 */
        let setNextFunc = (mainCowall) => {
            let nextCowall = null;
            if (delCowallArr[0].pointIDs[0] == linkMsg.link.id) {
                nextCowall = delCowallArr[0];
            }
            else if (delCowallArr.length == 2 && delCowallArr[1].pointIDs[0] == linkMsg.link.id) {
                nextCowall = delCowallArr[1];
            }
            if (nextCowall != null) {
                mainCowall.nextID = nextCowall.nextID;
                nextCowall = nextCowall.getNextCowall();
                /** 修改下下cowall的prev索引 */
                if (nextCowall != null)
                    nextCowall.prevID = mainCowall.id;
            }
            mainCowall.pointIDs = [mainCowall.pointIDs[0], linkMsg.end.id];
            let room = mainCowall.getRoom();
            if (room != null)
                room.resetCowallIDs(mainCowall);
        };
        if (linkMsg.type == 'start') {
            /** 主cwowall */
            setPrevFunc(mainCowallArr[0]);
            /** 反cowall=============================== */
            if (mainCowallArr.length == 2) {
                setNextFunc(mainCowallArr[1]);
            }
        }
        else if (linkMsg.type == 'end') {
            /** 主cowall */
            setNextFunc(mainCowallArr[0]);
            /** 反cowall==================================== */
            if (mainCowallArr.length == 2) {
                setPrevFunc(mainCowallArr[1]);
            }
        }
        /** 删除旧的东西 */
        for (let i = 0; i < delCowallArr.length; i++) {
            this.calService.cowall.delPrevNext(delCowallArr[i]);
            this.calService.cowall.delPointID(delCowallArr[i]);
            this.calService.cowall.delFloorplan(delCowallArr[i]);
            this.calService.cowall.del(delCowallArr[i]);
        }
        this.calService.wall.delDepend(delWall);
        this.calService.wall.del(delWall);
        return true;
    }
    /**
     * 获取所有墙第一组平行墙
     * @param walls 要对比的墙
     * @returns 返回两个墙组成的数组,如果没找到,返回null
     */
    getFirstParallelWalls(walls, errorValue) {
        for (let i = 0; i < walls.length; i++) {
            for (let j = i + 1; j < walls.length; j++) {
                let radianA = walls[i].getRadian(true);
                let radianB = walls[j].getRadian(true);
                if (this.DUService.pos.isParallelRadian(radianA, radianB, errorValue)) {
                    return {
                        radians: [radianA, radianB],
                        walls: [walls[i], walls[j]]
                    };
                }
            }
        }
        return null;
    }
    /** 判断是否有平行墙 */
    isHaveParallelWall(wallRadian, otherWalls, errorValue) {
        for (let i = 0; i < otherWalls.length; i++) {
            let otherRadian = otherWalls[i].getRadian(true);
            if (this.DUService.pos.isParallelRadian(wallRadian, otherRadian, errorValue))
                return otherWalls[i];
        }
        return null;
    }
    /** 获取墙信息 */
    getWallMsg(wall) {
        let points = wall.getPointArr();
        let posArr = [points[0].pos, points[1].pos];
        let radian = wall.getRadian(true);
        let powDistance = this.DUService.pos.getPowDistance(posArr[0], posArr[1]);
        return {
            wall: wall,
            points: points,
            radian: radian,
            posArr: posArr,
            powDistance: powDistance
        };
    }
    /**
     * 是否为水平墙
     * @param mainWall
     * @param otherWall
     * @param minRadian
     * @returns 返回num(0是不为水平墙,1是正平行墙,-1是反平行墙)
     */
    isHorizontalWall(mainWall, otherWall, minRadian, minDistance) {
        return this.DUService.pos.isHorizontalLine(mainWall, otherWall, minRadian, minDistance);
    }
    /**
     * 平行墙状态
     * @param mainWall
     * @param otherWall
     */
    getParallelWallType(mainWall, otherWall) {
        let a = this.isHorizontalWall(mainWall, otherWall, this._parallelRadian, this._minDistance);
        if (a.isH != 0 && a.distance != undefined) {
            let isreverse = a.isH == -1 ? true : false;
            return this.getParallelTypeByDistance(mainWall, otherWall, isreverse, this._minDistance);
        }
        return undefined;
    }
    /**
     * 通过距离获取墙平行相交的类型
     * @param mainWall
     * @param otherWall
     * @param isReverse
     * @param minDistance
     */
    getParallelTypeByDistance(mainWall, otherWall, isReverse, minDistance) {
        let line = [];
        let linePointIDs = [];
        /** 转线 */
        if (!isReverse) {
            line = [otherWall.posArr[0], otherWall.posArr[1]];
            linePointIDs = [otherWall.points[0].id, otherWall.points[1].id];
        }
        else {
            line = [otherWall.posArr[1], otherWall.posArr[0]];
            linePointIDs = [otherWall.points[1].id, otherWall.points[0].id];
        }
        /** 左点连接 */
        if (mainWall.points[0].id == linePointIDs[0]) {
            return {
                type: 'leftLink',
                isReverse: isReverse
            };
        }
        /** 右点连接 */
        if (mainWall.points[1].id == linePointIDs[1]) {
            return {
                type: 'rightLink',
                isReverse: isReverse
            };
        }
        /** 左点重合 */
        if (this.DUService.pos.isSamePos(mainWall.posArr[0], line[0], minDistance)) {
            return {
                type: 'leftPoint',
                isReverse: isReverse
            };
        }
        /** 右点重合 */
        if (this.DUService.pos.isSamePos(mainWall.posArr[1], line[1], minDistance)) {
            return {
                type: 'rightPoint',
                isReverse: isReverse
            };
        }
        // let MLPowDistanceA = this.DUService.pos.getPowDistance(mainWall.posArr[0], line[0])
        // let MLPowDistanceB = this.DUService.pos.getPowDistance(mainWall.posArr[0], line[1])
        // this.DUService.pos.isLineOut
        // let MLA = mainWall.powDistance > MLPowDistanceA
        // let MLB = mainWall.powDistance > MLPowDistanceB
        // let OLA = otherWall.powDistance > MLPowDistanceA
        // let OLB = otherWall.powDistance > MLPowDistanceB
        // /** 右重合 */
        // if (MLA && !MLB && !OLB) {
        //     return {
        //         type: 'right',
        //         isReverse: isReverse
        //     }
        // }
        // /** 覆盖其他 */
        // if (MLA && MLB && !OLB) {
        //     return {
        //         type: 'big',
        //         isReverse: isReverse
        //     }
        // }
        // /** 左重合 */
        // if (MLB && OLA) {
        //     return {
        //         type: 'left',
        //         isReverse: isReverse
        //     }
        // }
        // /** 被覆盖 */
        // if (OLA && OLB) {
        //     return {
        //         type: 'small',
        //         isReverse: isReverse
        //     }
        // }
        let leftCheck = this.DUService.pos.isLineOut(mainWall.posArr[0], mainWall.posArr[1], line[1]);
        let rightCheck = this.DUService.pos.isLineOut(mainWall.posArr[0], mainWall.posArr[1], line[0]);
        /** 右重合 */
        if (!rightCheck && leftCheck) {
            return {
                type: 'right',
                isReverse: isReverse
            };
        }
        /** 覆盖其他 */
        if (!rightCheck && !leftCheck) {
            return {
                type: 'big',
                isReverse: isReverse
            };
        }
        /** 左重合 */
        if (!leftCheck && rightCheck) {
            return {
                type: 'left',
                isReverse: isReverse
            };
        }
        let otherLeftCheck = this.DUService.pos.isLineOut(line[0], line[1], mainWall.posArr[1]);
        let otherRightCheck = this.DUService.pos.isLineOut(line[0], line[1], mainWall.posArr[0]);
        /** 被覆盖 */
        if (!otherLeftCheck && !otherRightCheck) {
            return {
                type: 'small',
                isReverse: isReverse
            };
        }
        /** 不重合 */
        return undefined;
    }
    /**
     * 获取重合墙转换信息
     * @param overMsg
     * @param mainWall
     * @param otherWall
     */
    getWalloverlayTransMsg(overMsg, mainWall, otherWall) {
        if (!overMsg)
            return undefined;
        let intersectPoint = undefined;
        let getIntersectFunc = (isright) => {
            if (isright)
                return overMsg.isReverse ? otherWall.points[1] : otherWall.points[0];
            else
                return overMsg.isReverse ? otherWall.points[0] : otherWall.points[1];
        };
        let powDistance = undefined;
        let levelDistance = 0;
        switch (overMsg.type) {
            /** 左点连接 */
            case "leftLink":
                intersectPoint = getIntersectFunc(false);
                powDistance = -3;
                break;
            /** 左点重合 */
            case "leftPoint":
                intersectPoint = getIntersectFunc(false);
                powDistance = -3;
                break;
            /** 右点连接 */
            case "rightLink":
                intersectPoint = getIntersectFunc(true);
                powDistance = mainWall.powDistance + 2;
                break;
            /** 右点重合 */
            case "rightPoint":
                intersectPoint = getIntersectFunc(true);
                powDistance = mainWall.powDistance + 2;
                break;
            /** 左相交重合 */
            case "left":
                intersectPoint = getIntersectFunc(false);
                levelDistance -= 2;
                break;
            /** 右相交重合 */
            case "right":
                intersectPoint = getIntersectFunc(true);
                levelDistance += 1;
                break;
            /** 覆盖其他 */
            case "big":
                intersectPoint = getIntersectFunc(false);
                levelDistance -= 1;
                break;
            /** 被覆盖 */
            case "small":
                powDistance = mainWall.powDistance;
                return {
                    intersectPoint: intersectPoint,
                    powDistance: powDistance
                };
        }
        if (powDistance == undefined) {
            powDistance = this.DUService.pos.getPowDistance(mainWall.posArr[0], intersectPoint.pos) + levelDistance;
        }
        return {
            intersectPoint: intersectPoint,
            powDistance: powDistance
        };
    }
}
WallOverlayCal.ctorParameters = () => [
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_0__["CalculatorsService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"] }
];
class WallMsgType {
}
class OverlayMsg {
}
class OverlayTransMsg {
}


/***/ }),

/***/ "./src/app/svg/common/calculator/win.cal.ts":
/*!**************************************************!*\
  !*** ./src/app/svg/common/calculator/win.cal.ts ***!
  \**************************************************/
/*! exports provided: WinCal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WinCal", function() { return WinCal; });
/* harmony import */ var _doorWin_cal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./doorWin.cal */ "./src/app/svg/common/calculator/doorWin.cal.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _three_jDesign3D_JWin3D__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../three/jDesign3D/JWin3D */ "./src/app/three/jDesign3D/JWin3D.ts");
/* harmony import */ var _three_jDesign3D_JBayWin3D__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../three/jDesign3D/JBayWin3D */ "./src/app/three/jDesign3D/JBayWin3D.ts");






class WinCal extends _doorWin_cal__WEBPACK_IMPORTED_MODULE_0__["DoorWinCal"] {
    constructor(dataService, DUService, calService) {
        super(dataService, DUService, calService);
        this.dataService = dataService;
        this.DUService = DUService;
        this.calService = calService;
    }
    /** 获取普通窗的path坐标集合 */
    getNormalPath(win, pos) {
        pos = pos == undefined ? win.pos : pos;
        let size = win.getPixSize();
        let rectPosArr = this.DUService.pos.getRectPosByCenter(pos, size);
        /** 飘窗 */
        if (win.outThickness != 0) {
            let radian = this.DUService.pos.getRadian(rectPosArr[3], rectPosArr[0]);
            rectPosArr[0] = this.DUService.pos.getRayPos(rectPosArr[3], radian, win.outThickness + size.height);
            rectPosArr[1] = this.DUService.pos.getRayPos(rectPosArr[2], radian, win.outThickness + size.height);
        }
        return rectPosArr;
    }
    /** 获取普通窗的path字符串 */
    getNormalPathString(win, pos) {
        let path = this.getNormalPath(win, pos);
        let pathString = this.DUService.svg.getPath(true, ...path);
        return pathString;
    }
    /** 产生新的窗 暂时是测试阶段*/
    createNewNormal(obj) {
        this.dataService.cache.floorplan.createAndMove = true;
        obj.style = 'normal';
        let win = new _three_jDesign3D_JWin3D__WEBPACK_IMPORTED_MODULE_4__["JWin3D"](obj, this.dataService, this.DUService);
        this.dataService.cache.win.createFunc(win);
        return win;
    }
    /** 产生飘窗 */
    createBayWin(size, outThickness, outBoxThickness) {
        this.dataService.cache.floorplan.createAndMove = true;
        size = size ? size : { width: 1600, height: 240, height3D: 1500 };
        outThickness = outThickness ? outThickness : 600;
        outBoxThickness = outBoxThickness ? outBoxThickness : 60;
        let win = new _three_jDesign3D_JBayWin3D__WEBPACK_IMPORTED_MODULE_5__["JBayWin3D"]({ style: "normal", size: size, outThickness: outThickness, isBay: true, outBoxThickness: outBoxThickness, plankType: "bayWin" }, this.dataService, this.DUService);
        this.dataService.cache.win.createFunc(win);
        return win;
    }
    /** 删除 */
    del(win) {
        win.destory3D();
        delete this.dataService.wins[win.id];
    }
    wallChange(win, wall) {
        wall.winIDs.push(win.id);
        wall.winIDs = this.DUService.cal.unique(wall.winIDs);
    }
    /** 遍历加载吸附 */
    listAbosrb() {
        this.commmonListAbosrb('win');
    }
}
WinCal.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_3__["CalculatorsService"] }
];


/***/ }),

/***/ "./src/app/svg/common/event/animation.event.listen.ts":
/*!************************************************************!*\
  !*** ./src/app/svg/common/event/animation.event.listen.ts ***!
  \************************************************************/
/*! exports provided: AnimationEventListen */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnimationEventListen", function() { return AnimationEventListen; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");

class AnimationEventListen {
    constructor(dataService) {
        this.dataService = dataService;
        this.setAnimation();
    }
    /** 设置动画帧 */
    setAnimation() {
        for (let i = 0; i < this.dataService.cache.AnimationFuncs.length; i++) {
            this.dataService.cache.AnimationFuncs[i]();
        }
        // this._actType = null
        requestAnimationFrame(() => {
            this.setAnimation();
        });
    }
}
AnimationEventListen.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] }
];


/***/ }),

/***/ "./src/app/svg/common/event/floatDiv.event.ts":
/*!****************************************************!*\
  !*** ./src/app/svg/common/event/floatDiv.event.ts ***!
  \****************************************************/
/*! exports provided: FloatDivEvent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FloatDivEvent", function() { return FloatDivEvent; });
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");





class FloatDivEvent {
    constructor(popService, dataService, domService, calService, DUService) {
        this.popService = popService;
        this.dataService = dataService;
        this.domService = domService;
        this.calService = calService;
        this.DUService = DUService;
        this._isSvgThumbnail = false;
        this._svgSize = this.dataService.cache.thumbnail.svg.zoomSize;
        this._threeSize = this.dataService.cache.thumbnail.three.zoomSize;
        // this.changeThumbnail()
    }
    /** 改变缩略图 */
    changeThumbnail() {
        if (this._isSvgThumbnail) {
            this.svgThumbnail();
            this._isSvgThumbnail = false;
        }
        else {
            this.threeThumbnail();
            this._isSvgThumbnail = true;
        }
    }
    /** svg缩略图 */
    svgThumbnail() {
        let data = {
            size: this._svgSize,
            toggle: (params) => {
                this.dataService.cache.thumbnail.svg.zIndex = 10;
                this.dataService.cache.thumbnail.svg.isZoom = false;
                this.dataService.cache.thumbnail.svg = this.DUService.obj.clone(this.dataService.cache.thumbnail.svg);
                this.dataService.cache.thumbnail.three.zIndex = 40;
                this.dataService.cache.thumbnail.three.isZoom = true;
                this.dataService.cache.thumbnail.three = this.DUService.obj.clone(this.dataService.cache.thumbnail.three);
                this._svgSize = this.dataService.cache.thumbnail.svg.zoomSize;
                this._threeSize = this.dataService.cache.thumbnail.three.zoomSize;
                // this.popService.inputBoxs.emit(null)
                // this.popService.buttons.emit(null)
                this.domService.allSvg.emit();
                this.domService.three.emit();
                this.changeThumbnail();
            },
            zoomSmall: (params) => {
            },
            zoomLarge: (params) => {
            },
            zoomResize: (vector) => {
                this.dataService.cache.thumbnail.svg.zoomSize.width += vector.x;
                this.dataService.cache.thumbnail.svg.zoomSize.height += vector.y;
                this.dataService.cache.thumbnail.svg = this.DUService.obj.clone(this.dataService.cache.thumbnail.svg);
                this._svgSize.width = this.dataService.cache.thumbnail.svg.zoomSize.width;
                this._svgSize.height = this.dataService.cache.thumbnail.svg.zoomSize.height;
                // this.popService.inputBoxs.emit(null)
                // this.popService.buttons.emit(null)
                this.domService.allSvg.emit();
                this.domService.three.emit();
            }
        };
        this.popService.thumbnail.emit(data);
    }
    /** three缩略图 */
    threeThumbnail() {
        let data = {
            size: this._threeSize,
            toggle: (params) => {
                this.dataService.cache.thumbnail.svg.zIndex = 40;
                this.dataService.cache.thumbnail.svg.isZoom = true;
                this.dataService.cache.thumbnail.svg = this.DUService.obj.clone(this.dataService.cache.thumbnail.svg);
                this.dataService.cache.thumbnail.three.zIndex = 10;
                this.dataService.cache.thumbnail.three.isZoom = false;
                this.dataService.cache.thumbnail.three = this.DUService.obj.clone(this.dataService.cache.thumbnail.three);
                this._svgSize = this.dataService.cache.thumbnail.svg.zoomSize;
                this._threeSize = this.dataService.cache.thumbnail.three.zoomSize;
                this.popService.inputBoxs.emit(null);
                this.popService.buttons.emit(null);
                this.domService.allSvg.emit();
                this.domService.three.emit();
                this.changeThumbnail();
            },
            zoomSmall: (params) => {
            },
            zoomLarge: (params) => {
            },
            zoomResize: (vector) => {
                this.dataService.cache.thumbnail.three.zoomSize.width += vector.x;
                this.dataService.cache.thumbnail.three.zoomSize.height += vector.y;
                this.dataService.cache.thumbnail.three = this.DUService.obj.clone(this.dataService.cache.thumbnail.three);
                // this._svgSize = this.dataService.cache.thumbnail.svg.zoomSize
                this._threeSize.width = this.dataService.cache.thumbnail.three.zoomSize.width;
                this._threeSize.height = this.dataService.cache.thumbnail.three.zoomSize.height;
                this.popService.inputBoxs.emit(null);
                this.popService.buttons.emit(null);
                this.domService.allSvg.emit();
                this.domService.three.emit();
            }
        };
        this.popService.thumbnail.emit(data);
    }
}
FloatDivEvent.ctorParameters = () => [
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_0__["PopDivService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__["JdesignDataService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_2__["DomUpdateService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_3__["CalculatorsService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_4__["JdesignUtil2dService"] }
];


/***/ }),

/***/ "./src/app/svg/common/event/panelTestInput.event.ts":
/*!**********************************************************!*\
  !*** ./src/app/svg/common/event/panelTestInput.event.ts ***!
  \**********************************************************/
/*! exports provided: PanelTestInputEvent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PanelTestInputEvent", function() { return PanelTestInputEvent; });
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");



class PanelTestInputEvent {
    constructor(DUService, dataService, popService) {
        this.DUService = DUService;
        this.dataService = dataService;
        this.popService = popService;
        this.testOn = false;
        this.setTestInput(this.dataService.cmd.floorplan.testInputPos);
    }
    /** 设置测试输入窗口 */
    setTestInput(pos) {
        let data = {
            pos: pos,
            data: [
                {
                    text: "cowall",
                    func: (e, value) => {
                        if (value == '') {
                            this.setNoWordConsole(this.dataService.doCowalls().arr());
                        }
                        else
                            console.log(this.dataService.cowalls["cowall" + value]);
                    }
                },
                {
                    text: "wall",
                    func: (e, value) => {
                        if (value == '') {
                            this.setNoWordConsole(this.dataService.doWalls().arr());
                        }
                        else
                            console.log(this.dataService.walls["wall" + value]);
                    }
                },
                {
                    text: "room",
                    func: (e, value) => {
                        if (value == '')
                            this.setNoWordConsole(this.dataService.doRooms().arr());
                        else
                            console.log(this.dataService.rooms["room" + value]);
                    }
                }, {
                    text: "point",
                    func: (e, value) => {
                        if (value == '')
                            this.setNoWordConsole(this.dataService.doPoints().arr());
                        else
                            console.log(this.dataService.points["point" + value]);
                    }
                },
                {
                    text: 'floorplan',
                    func: () => {
                        console.log(this.dataService.floorplan);
                    }
                },
                {
                    text: 'door',
                    func: (e, value) => {
                        if (value == '')
                            this.setNoWordConsole(this.dataService.doDoors().arr());
                        else
                            console.log(this.dataService.doors["door" + value]);
                    }
                },
                {
                    text: 'win',
                    func: (e, value) => {
                        if (value == '')
                            this.setNoWordConsole(this.dataService.doWins().arr());
                        else
                            console.log(this.dataService.wins["win" + value]);
                    }
                },
                {
                    text: 'furniture',
                    func: (e, value) => {
                        if (value == '')
                            this.setNoWordConsole(this.dataService.doFurnitures().arr());
                        else
                            console.log(this.dataService.furnitures["furniture" + value]);
                    }
                },
                {
                    text: 'cornWin',
                    func: (e, value) => {
                        if (value == '')
                            this.setNoWordConsole(this.dataService.doCornerWins().arr());
                        else
                            console.log(this.dataService.cornerWins["cornerWin" + value]);
                    }
                },
                {
                    text: 'LWin',
                    func: (e, value) => {
                        if (value == '')
                            this.setNoWordConsole(this.dataService.doLWins().arr());
                        else
                            console.log(this.dataService.LWins["LWin" + value]);
                    }
                },
                {
                    text: 'cmd',
                    func: (e, value) => {
                        console.log(this.dataService.cmd);
                    }
                },
                {
                    text: 'cache',
                    func: (e, value) => {
                        this.dataService.cache.test.createRoom = !this.dataService.cache.test.createRoom;
                        console.log(this.dataService.cache);
                    }
                },
                {
                    text: 'pos',
                    func: (e, value) => {
                        let pos = value.split(",");
                        this.dataService.cmd.floorplan.testInputPos.x = parseInt(pos[0]);
                        this.dataService.cmd.floorplan.testInputPos.y = parseInt(pos[1]);
                        this.setTestInput(this.dataService.cmd.floorplan.testInputPos);
                    }
                }
            ]
        };
        this.popService.testInputBtn.emit(data);
    }
    setNoWordConsole(data) {
        let dataIDs = this.DUService.cal.getNewAttrArray(data, 'id');
        console.log(dataIDs);
        console.log(data);
    }
}
PanelTestInputEvent.ctorParameters = () => [
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_0__["JdesignUtil2dService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__["JdesignDataService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_2__["PopDivService"] }
];


/***/ }),

/***/ "./src/app/svg/common/event/readJson.event.ts":
/*!****************************************************!*\
  !*** ./src/app/svg/common/event/readJson.event.ts ***!
  \****************************************************/
/*! exports provided: ReadJsonEvent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReadJsonEvent", function() { return ReadJsonEvent; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_http_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/http.service */ "./src/app/services/http.service.ts");
/* harmony import */ var async__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! async */ "./node_modules/async/dist/async.js");
/* harmony import */ var async__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(async__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _jdesign_JIcon__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../jdesign/JIcon */ "./src/app/svg/common/jdesign/JIcon.ts");
/* harmony import */ var _jdesign_JCmd__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../jdesign/JCmd */ "./src/app/svg/common/jdesign/JCmd.ts");






class ReadJsonEvent {
    constructor(dataService, httpService, DUService) {
        this.dataService = dataService;
        this.httpService = httpService;
        this.DUService = DUService;
        this.urlJsonUrl = './assets/url.json';
    }
    /** 读取所有数据 */
    readData(cb) {
        Object(async__WEBPACK_IMPORTED_MODULE_2__["waterfall"])([
            (cb) => { this.readUrl(cb); },
            (data, cb) => { this.readCmd(data, cb); },
            (data, cb) => { this.readIco(data, cb); },
            (data, cb) => { this.readWallPaper(data, cb); },
            (data, cb) => { this.readFootLine(data, cb); },
            (data, cb) => { this.readRoomType(data, cb); },
            (data, cb) => { this.readPlasterCornice(data, cb); },
            (data, cb) => { this.readDoorFrame(data, cb); },
            (data, cb) => { this.readWinFrame(data, cb); },
            (data, cb) => { this.readDoorFramePic(data, cb); },
            (data, cb) => { this.readPlasterLinePic(data, cb); },
            (data, cb) => { this.readFootLinePic(data, cb); },
            (data, cb) => { this.readRoofPic(data, cb); },
            (data, cb) => { this.readMarblePic(data, cb); },
            (data, cb) => { this.readFloorPic(data, cb); },
            (data, cb) => { this.readJ2d(data, cb); },
        ], (err, result) => { this.readEnd(err, result); cb(); });
    }
    /** 读取链接列表 */
    readUrl(cb) {
        this.httpService.getRes(this.urlJsonUrl, 3, true).subscribe((data) => {
            this.httpService.dataUrls = data;
            this.dataService.cache.common.mainUrl = data.mainUrl;
            // console.log('加载完成url')
            cb(undefined, data);
        });
    }
    /** 读取cmdJSon */
    readCmd(dataUrl, cb) {
        this.httpService.getRes(dataUrl.cmdUrl).subscribe((cmdData) => {
            this.DUService.obj.changeObjUrlByflag(cmdData, dataUrl.mainUrl, "**");
            this.dataService.cmd = new _jdesign_JCmd__WEBPACK_IMPORTED_MODULE_5__["JCmd"](cmdData);
            // console.log('加载完成cmd')
            cb(undefined, dataUrl);
        });
    }
    /* 读取j2d */
    readJ2d(dataUrl, cb) {
        let newUrl = dataUrl.j2dUrl + dataUrl.j2dMap;
        let url = this.httpService.getRealUrl(newUrl);
        let func = (data) => {
            if (data.length > 0) {
                let otherUrl = dataUrl.j2dUrl + "/" + data[0]["url"];
                this.httpService.getRes(otherUrl).subscribe((obj) => {
                    this.dataService.cache.baseData.j2d[data[0]["name"]] = obj;
                    data.splice(0, 1);
                    func(data);
                });
            }
            else {
                cb(undefined, dataUrl);
            }
        };
        let otherUrl = dataUrl.j2dUrl + "/" + dataUrl.j2dMap;
        this.httpService.getRes(otherUrl).subscribe((data) => {
            func(data);
        });
    }
    /** 读取icoJson */
    readIco(dataUrl, cb) {
        this.httpService.getRes(dataUrl.iconUrlsUrl).subscribe((icoData) => {
            this.dataService.icon = new _jdesign_JIcon__WEBPACK_IMPORTED_MODULE_4__["JIcon"](dataUrl.mainUrl, icoData);
            // console.log('加载完成ico')
            cb(undefined, dataUrl);
        });
    }
    /** 读取墙贴纸 */
    readWallPaper(dataUrl, cb) {
        let url = this.httpService.getRealUrl(dataUrl.threeAssetsMapUrl);
        this.httpService.getRes(dataUrl.threeWallMap).subscribe((paperData) => {
            this.DUService.obj.changeObjUrlByattrs(paperData, url);
            this.dataService.json.wallPaper = paperData;
            cb(undefined, dataUrl);
        });
    }
    /** 读取家居 */
    readFurnitureModel(dataUrl, cb) {
        this.httpService.getRes(dataUrl.furnitureModelUrl).subscribe((furnitureData) => {
        });
    }
    /** 读取地脚线 */
    readFootLine(dataUrl, cb) {
        this.httpService.getRes(dataUrl.threeFootLineMap).subscribe((footLineDatas) => {
            Object(async__WEBPACK_IMPORTED_MODULE_2__["each"])(footLineDatas, (footLineData, cb) => {
                this.setVertexData(footLineData, cb);
            }, (err) => {
                this.dataService.json.footLine = footLineDatas;
                cb(undefined, dataUrl);
            });
        });
    }
    /** 石膏线 */
    readPlasterCornice(dataUrl, cb) {
        this.httpService.getRes(dataUrl.threePlasterCorniceMap).subscribe((plasterCorniceDatas) => {
            Object(async__WEBPACK_IMPORTED_MODULE_2__["each"])(plasterCorniceDatas, (plasterCorniceData, cb) => {
                this.setVertexData(plasterCorniceData, cb);
            }, (err) => {
                this.dataService.json.plasterCornice = plasterCorniceDatas;
                cb(undefined, dataUrl);
            });
        });
    }
    /** 门框数据 */
    readDoorFrame(dataUrl, cb) {
        this.httpService.getRes(dataUrl.threeDoorFrameMap).subscribe((doorFrameMaps) => {
            Object(async__WEBPACK_IMPORTED_MODULE_2__["each"])(doorFrameMaps, (doorFrameMap, cb) => {
                this.setVertexData(doorFrameMap, cb);
            }, (err) => {
                this.dataService.json.doorFrame = doorFrameMaps;
                cb(undefined, dataUrl);
            });
        });
    }
    /** 窗框数据 */
    readWinFrame(dataUrl, cb) {
        this.httpService.getRes(dataUrl.threeWinFrameMap).subscribe((winFrameMaps) => {
            Object(async__WEBPACK_IMPORTED_MODULE_2__["each"])(winFrameMaps, (winFrameMap, cb) => {
                this.setVertexData(winFrameMap, cb);
            }, (err) => {
                this.dataService.json.winFrame = winFrameMaps;
                cb(undefined, dataUrl);
            });
        });
    }
    /** 设置 */
    setVertexData(data, cb) {
        this.httpService.getRes(data.vertexDataURL, 3, true).subscribe((vertexData) => {
            // console.log(vertexData.vertexData)
            if (this.checkShun(vertexData.vertexData))
                vertexData.vertexData.reverse();
            data["vertexData"] = vertexData.vertexData;
            cb();
        });
    }
    /** 读取门框图片 */
    readDoorFramePic(dataUrl, cb) {
        let url = this.httpService.getRealUrl(dataUrl.threeAssetsMapUrl);
        this.httpService.getRes(dataUrl.threeDoorFramePic).subscribe((picData) => {
            this.DUService.obj.changeObjUrlByattrs(picData, url);
            this.dataService.json.doorFramePics = picData;
            cb(undefined, dataUrl);
        });
    }
    /** 读取石灰线图片 */
    readPlasterLinePic(dataUrl, cb) {
        let url = this.httpService.getRealUrl(dataUrl.threeAssetsMapUrl);
        this.httpService.getRes(dataUrl.threeWallPlastLinePic).subscribe((picData) => {
            this.DUService.obj.changeObjUrlByattrs(picData, url);
            this.dataService.json.plasterLinePics = picData;
            cb(undefined, dataUrl);
        });
    }
    /** 读取地脚线图片 */
    readFootLinePic(dataUrl, cb) {
        let url = this.httpService.getRealUrl(dataUrl.threeAssetsMapUrl);
        this.httpService.getRes(dataUrl.threeWallFootLinePic).subscribe((picData) => {
            this.DUService.obj.changeObjUrlByattrs(picData, url);
            this.dataService.json.footLinePics = picData;
            cb(undefined, dataUrl);
        });
    }
    /** 读取天花贴图 */
    readRoofPic(dataUrl, cb) {
        let url = this.httpService.getRealUrl(dataUrl.threeAssetsMapUrl);
        this.httpService.getRes(dataUrl.threeRoomRoofPic).subscribe((picData) => {
            this.DUService.obj.changeObjUrlByattrs(picData, url);
            this.dataService.json.roofPics = picData;
            cb(undefined, dataUrl);
        });
    }
    /** 读取飘窗图片 */
    readMarblePic(dataUrl, cb) {
        let url = this.httpService.getRealUrl(dataUrl.threeAssetsMapUrl);
        this.httpService.getRes(dataUrl.threeWinMarblePic).subscribe((picData) => {
            this.DUService.obj.changeObjUrlByattrs(picData, url);
            this.dataService.json.marblePics = picData;
            cb(undefined, dataUrl);
        });
    }
    /** 读取地板图片 */
    readFloorPic(dataUrl, cb) {
        let url = this.httpService.getRealUrl(dataUrl.threeAssetsMapUrl);
        this.httpService.getRes(dataUrl.threeRoomFloorPic).subscribe((picData) => {
            this.DUService.obj.changeObjUrlByattrs(picData, url);
            this.dataService.json.floorPics = picData;
            cb(undefined, dataUrl);
        });
    }
    /** 读取房间类型 */
    readRoomType(dataUrl, cb) {
        this.httpService.getRes(dataUrl.roomType).subscribe((typeData) => {
            this.dataService.json.roomType = typeData;
            cb(undefined, dataUrl);
        });
    }
    /** 加载完成 */
    readEnd(err, result) {
        console.log('主要json加载完成');
        // console.log(result)
    }
    /**
     * 检测数据是否顺时针
     *  @param _allPoints 数据结构是[[x,y],[x,y],[x,y]]这样子。
     */
    checkShun(_allPoints) {
        //获取所有点的坐标。------------------------------------------
        let area = 0;
        for (var i = 0; i < _allPoints.length; i++) {
            let j = (i + 1) % _allPoints.length;
            area += _allPoints[i][0] * _allPoints[j][1];
            area -= _allPoints[j][0] * _allPoints[i][1];
        }
        if (area > 0) {
            return false;
        }
        else {
            return true;
        }
    }
}
ReadJsonEvent.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] },
    { type: _services_http_service__WEBPACK_IMPORTED_MODULE_1__["HttpService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_3__["JdesignUtil2dService"] }
];


/***/ }),

/***/ "./src/app/svg/common/event/svg.event.ts":
/*!***********************************************!*\
  !*** ./src/app/svg/common/event/svg.event.ts ***!
  \***********************************************/
/*! exports provided: SvgEvent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SvgEvent", function() { return SvgEvent; });
/* harmony import */ var _services_mouse_event_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../services/mouse-event.service */ "./src/app/svg/common/services/mouse-event.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _animation_event_listen__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./animation.event.listen */ "./src/app/svg/common/event/animation.event.listen.ts");
/* harmony import */ var _services_right_menu_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../services/right-menu.service */ "./src/app/services/right-menu.service.ts");
/* harmony import */ var _act_mouse_svg_mouse_event__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../act/mouse/svg.mouse.event */ "./src/app/svg/common/act/mouse/svg.mouse.event.ts");
/* harmony import */ var _floatDiv_event__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./floatDiv.event */ "./src/app/svg/common/event/floatDiv.event.ts");
/* harmony import */ var _svg_mouse_listen__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./svg.mouse.listen */ "./src/app/svg/common/event/svg.mouse.listen.ts");
/* harmony import */ var _services_http_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../services/http.service */ "./src/app/services/http.service.ts");
/* harmony import */ var _designStyleData_rightMenu_designStyleData_rightMenu__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../designStyleData/rightMenu/designStyleData.rightMenu */ "./src/app/designStyleData/rightMenu/designStyleData.rightMenu.ts");
/* harmony import */ var _panelTestInput_event__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./panelTestInput.event */ "./src/app/svg/common/event/panelTestInput.event.ts");
/* harmony import */ var _act_absorb_svg_absorb_event__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../act/absorb/svg.absorb.event */ "./src/app/svg/common/act/absorb/svg.absorb.event.ts");
/* harmony import */ var _act_input_svg_input_event__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../act/input/svg.input.event */ "./src/app/svg/common/act/input/svg.input.event.ts");
/* harmony import */ var _designStyleData_shortFunc_design_shortFunc__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../designStyleData/shortFunc/design.shortFunc */ "./src/app/designStyleData/shortFunc/design.shortFunc.ts");
/* harmony import */ var _node_modules_angular_platform_browser__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../../../../node_modules/@angular/platform-browser */ "./node_modules/@angular/platform-browser/fesm2015/platform-browser.js");



















class SvgEvent {
    constructor(mouseEventService, rightEventService, dataService, domService, DUService, calService, popService, el, divName, httpService, sanitizer) {
        this.mouseEventService = mouseEventService;
        this.rightEventService = rightEventService;
        this.dataService = dataService;
        this.domService = domService;
        this.DUService = DUService;
        this.calService = calService;
        this.popService = popService;
        this.el = el;
        this.divName = divName;
        this.httpService = httpService;
        this.sanitizer = sanitizer;
        let a = this.DUService.obj.getQueryStringSuper('isSimplify');
        if (a != 1) {
            this.setEvent();
        }
    }
    /** 设置事件 */
    setEvent() {
        this.calService.undoRedo.save();
        /** 生成快捷方法 */
        let shortFuncEvent = new _designStyleData_shortFunc_design_shortFunc__WEBPACK_IMPORTED_MODULE_17__["DesignShortFunc"](this.popService, this.dataService, this.DUService, this.calService, this.domService);
        /** 吸附事件 */
        let svgAbosrbEvent = new _act_absorb_svg_absorb_event__WEBPACK_IMPORTED_MODULE_15__["SvgAbsorbEvent"](this.dataService, this.DUService, this.calService);
        /** 输入事件 */
        let svgInputEvent = new _act_input_svg_input_event__WEBPACK_IMPORTED_MODULE_16__["SvgInputEvent"](this.dataService, this.DUService, this.calService, this.popService);
        /** 添加鼠标事件 */
        let mouseEvent = new _act_mouse_svg_mouse_event__WEBPACK_IMPORTED_MODULE_9__["SvgMouseEvent"](this.mouseEventService, this.dataService, this.domService, this.DUService, this.calService, this.popService, svgAbosrbEvent, svgInputEvent);
        /** 顶栏 */
        // let panelTopEvent = new PanelTopEvent(this.popService, this.dataService, this.domService, this.calService, undoRedoEvent, this.httpService)
        /** 左边栏 */
        // let panelLeftEvent = new PanelLeftEvent(this.popService, this.dataService, this.domService, this.calService, undoRedoEvent, this.httpService, this.DUService)
        /** 浮动测试栏 */
        let panelTestInputEvent = new _panelTestInput_event__WEBPACK_IMPORTED_MODULE_14__["PanelTestInputEvent"](this.DUService, this.dataService, this.popService);
        /** 浮动框 */
        let floatDivEvent = new _floatDiv_event__WEBPACK_IMPORTED_MODULE_10__["FloatDivEvent"](this.popService, this.dataService, this.domService, this.calService, this.DUService);
        floatDivEvent.changeThumbnail();
        /** 右键  */
        let rightMenus = new _designStyleData_rightMenu_designStyleData_rightMenu__WEBPACK_IMPORTED_MODULE_13__["DesignStyleDataRightMenu"](this.dataService, this.popService, this.rightEventService, this.calService, this.httpService, this.DUService, this.domService, this.sanitizer);
        /** 添加监听 */
        let svg = this.el.nativeElement.getElementsByClassName(this.divName)[0];
        let mouseListen = new _svg_mouse_listen__WEBPACK_IMPORTED_MODULE_11__["SvgMouseListen"](svg, this.mouseEventService, this.dataService);
        /** 事件启动 */
        let svgEventListen = new _animation_event_listen__WEBPACK_IMPORTED_MODULE_7__["AnimationEventListen"](this.dataService);
        /** 由于层原因无法触发 */
        // this.setWheel(svg)
        this.floorplanDataEmit();
    }
    /** 放大 */
    setWheel(dom) {
        dom.addEventListener('wheel', (e) => {
            if (e.deltaY > 0) {
                this.dataService.cmd.floorplan.zoom = Math.max(1, Math.min(3, this.dataService.cmd.floorplan.zoom + 0.02));
            }
            else if (e.deltaY < 0) {
                this.dataService.cmd.floorplan.zoom = Math.max(1, Math.min(3, this.dataService.cmd.floorplan.zoom - 0.02));
            }
            this.popService.setInputBoxs();
            this.popService.setButtons();
            this.domService.mainSvg.emit();
        });
    }
    floorplanDataEmit() {
        this.dataService.cache.floorplan.dataEmit.subscribe((unUpdates = {}) => {
            if (!unUpdates.door)
                this.calService.door.listAbosrb();
            if (!unUpdates.win)
                this.calService.win.listAbosrb();
            if (!unUpdates.LWin)
                this.calService.LWin.listAbosrb();
            if (!unUpdates.UWin)
                this.calService.UWin.listAbosrb();
            if (!unUpdates.cornerWin)
                this.calService.cornerWin.listAbsorb();
        });
    }
    /** 右键功能 */
    setRight() {
    }
}
SvgEvent.ctorParameters = () => [
    { type: _services_mouse_event_service__WEBPACK_IMPORTED_MODULE_0__["MouseEventService"] },
    { type: _services_right_menu_service__WEBPACK_IMPORTED_MODULE_8__["RightMenuService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__["JdesignDataService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_2__["DomUpdateService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_3__["JdesignUtil2dService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_4__["CalculatorsService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_5__["PopDivService"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_6__["ElementRef"] },
    { type: String },
    { type: _services_http_service__WEBPACK_IMPORTED_MODULE_12__["HttpService"] },
    { type: _node_modules_angular_platform_browser__WEBPACK_IMPORTED_MODULE_18__["DomSanitizer"] }
];


/***/ }),

/***/ "./src/app/svg/common/event/svg.mouse.listen.ts":
/*!******************************************************!*\
  !*** ./src/app/svg/common/event/svg.mouse.listen.ts ***!
  \******************************************************/
/*! exports provided: SvgMouseListen */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SvgMouseListen", function() { return SvgMouseListen; });
/* harmony import */ var _services_mouse_event_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../services/mouse-event.service */ "./src/app/svg/common/services/mouse-event.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");


class SvgMouseListen {
    constructor(doc, mouseEventService, dataService) {
        this.doc = doc;
        this.mouseEventService = mouseEventService;
        this.dataService = dataService;
        this._event = null;
        this._downFlag = false;
        this._upFlag = false;
        this._moveFlag = false;
        this.mouseDown(doc);
        this.mouseMove(doc);
        this.mouseUp(doc);
        this.dataService.cache.AnimationFuncs.push(() => {
            this.mouseListen();
        });
    }
    /** 鼠标按下 */
    mouseDown(doc) {
        doc.addEventListener('mousedown', (e) => {
            // this.mouseEventService.doDownEvents(e)
            this._downFlag = true;
            this._event = e;
        });
    }
    /** 鼠标移动 */
    mouseMove(doc) {
        doc.addEventListener('mousemove', (e) => {
            // this.mouseEventService.doMoveEvents(e)
            this._moveFlag = true;
            this._event = e;
        });
    }
    /** 鼠标放开 */
    mouseUp(doc) {
        doc.addEventListener("mouseup", (e) => {
            // this.mouseEventService.doUpEvents(e)
            this._upFlag = true;
            this._event = e;
        });
    }
    /** 鼠标监听 */
    mouseListen() {
        if (this._downFlag) {
            this.mouseEventService.doDownEvents(this._event);
            this._downFlag = false;
        }
        if (this._moveFlag) {
            this.mouseEventService.doMoveEvents(this._event);
            this._moveFlag = false;
        }
        if (this._upFlag) {
            this.mouseEventService.doUpEvents(this._event);
            this._upFlag = false;
        }
    }
}
SvgMouseListen.ctorParameters = () => [
    { type: Document },
    { type: _services_mouse_event_service__WEBPACK_IMPORTED_MODULE_0__["MouseEventService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__["JdesignDataService"] }
];


/***/ }),

/***/ "./src/app/svg/common/jdesign/JBuild.ts":
/*!**********************************************!*\
  !*** ./src/app/svg/common/jdesign/JBuild.ts ***!
  \**********************************************/
/*! exports provided: JBuild, JBuildInitType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JBuild", function() { return JBuild; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JBuildInitType", function() { return JBuildInitType; });
/* harmony import */ var _three_jDesign3D_JGeometry3D__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../three/jDesign3D/JGeometry3D */ "./src/app/three/jDesign3D/JGeometry3D.ts");
/* harmony import */ var _JGeometry__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./JGeometry */ "./src/app/svg/common/jdesign/JGeometry.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");




class JBuild extends _three_jDesign3D_JGeometry3D__WEBPACK_IMPORTED_MODULE_0__["JGeometry3D"] {
    constructor(obj, dataService, DUService) {
        super(obj, dataService, DUService, 'build');
        this.dataService = dataService;
        this.DUService = DUService;
        this.dataService.builds[this.id] = this;
    }
}
JBuild.ctorParameters = () => [
    { type: JBuildInitType },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_3__["JdesignUtil2dService"] }
];
class JBuildInitType extends _JGeometry__WEBPACK_IMPORTED_MODULE_1__["JGeometryInit"] {
}


/***/ }),

/***/ "./src/app/svg/common/jdesign/JCache.ts":
/*!**********************************************!*\
  !*** ./src/app/svg/common/jdesign/JCache.ts ***!
  \**********************************************/
/*! exports provided: JCache, GeometryCache, FurnitureCache, BuildCache, WallCache, PointCache, DoorCache, WinCache, DWCache, CowallCache, RoomCache, AbsorbLineCache, ModeCache, CommonCache, FloorplanCache, CornerWinCache, ThumbnailCache, LUWinCache, LWinCache, UWinCache, BaseDataCache, TestCache */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JCache", function() { return JCache; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GeometryCache", function() { return GeometryCache; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FurnitureCache", function() { return FurnitureCache; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BuildCache", function() { return BuildCache; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WallCache", function() { return WallCache; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PointCache", function() { return PointCache; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DoorCache", function() { return DoorCache; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WinCache", function() { return WinCache; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DWCache", function() { return DWCache; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CowallCache", function() { return CowallCache; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RoomCache", function() { return RoomCache; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AbsorbLineCache", function() { return AbsorbLineCache; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModeCache", function() { return ModeCache; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CommonCache", function() { return CommonCache; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FloorplanCache", function() { return FloorplanCache; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CornerWinCache", function() { return CornerWinCache; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ThumbnailCache", function() { return ThumbnailCache; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LUWinCache", function() { return LUWinCache; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LWinCache", function() { return LWinCache; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UWinCache", function() { return UWinCache; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BaseDataCache", function() { return BaseDataCache; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TestCache", function() { return TestCache; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");

class JCache {
    constructor() {
        /** 墙信息 */
        this._wall = new WallCache();
        this._baseData = new BaseDataCache();
        /** 测试 */
        this._test = new TestCache();
        /** 空间信息 */
        this._room = new RoomCache();
        /** 转角飘窗信息 */
        this._cornerWin = new CornerWinCache();
        /** cowall输入内容 */
        this._cowall = new CowallCache();
        /** 吸附线的信息 */
        this._absorbLines = [];
        /** 测试svg信息 */
        this._testSvg = [];
        /** 模式方法触发 */
        this._mode = new ModeCache();
        /** floorplan属性 */
        this._floorplan = new FloorplanCache;
        /** 公共属性 */
        this._common = new CommonCache();
        /** 撤销数据 */
        this._undoData = [];
        /** 还原数据 */
        this._redoData = [];
        /** 快捷方法 */
        this._shortFuncs = [];
        /** 快捷键 */
        this._hotKeys = [];
        /** 门 */
        this._door = new DoorCache();
        /** 窗 */
        this._win = new WinCache();
        /** 门窗公共 */
        this._doorWin = new DWCache();
        /** 缩略图 */
        this._thumbnail = new ThumbnailCache();
        /** 家居 */
        this._furniture = new FurnitureCache();
        /** 建筑物 */
        this._build = new BuildCache();
        /** L窗 */
        this._LWin = new LWinCache();
        /** U窗 */
        this._UWin = new UWinCache();
        /** 动画方法集合 */
        this._AnimationFuncs = [];
    }
    /** 墙信息 */
    get wall() { return this._wall; }
    set wall(data) { this._wall = data; }
    /* 基础数据 */
    get baseData() { return this._baseData; }
    set baseData(data) { this._baseData = data; }
    /** 测试 */
    get test() { return this._test; }
    set test(data) { this._test = data; }
    /** 空间信息 */
    get room() { return this._room; }
    set room(data) { this._room = data; }
    /** 转角飘窗信息 */
    get cornerWin() { return this._cornerWin; }
    set cornerWin(data) { this._cornerWin = data; }
    /** cowall输入内容 */
    get cowall() { return this._cowall; }
    set cowall(data) { this._cowall = data; }
    /** 吸附线的信息(将设置为联动触发吸附线) */
    get absorbLines() { return this._absorbLines; }
    set absorbLines(data) { this._absorbLines = data; }
    /** 测试svg信息 */
    get testSvg() { return this._testSvg; }
    set testSvg(data) { this._testSvg = data; }
    /** 模式方法触发 */
    get mode() {
        return this._mode;
    }
    set mode(data) {
        this._mode = data;
    }
    /** floorplan属性 */
    get floorplan() { return this._floorplan; }
    set floorplan(data) { this._floorplan = data; }
    /** 公共属性 */
    get common() { return this._common; }
    set common(data) { this._common = data; }
    /** 撤销数据 */
    get undoData() {
        return this._undoData;
    }
    set undoData(data) { this._undoData = data; }
    /** 还原数据 */
    get redoData() { return this._redoData; }
    set redoData(data) { this._redoData = data; }
    /** 快捷方法 */
    get shortFuncs() { return this._shortFuncs; }
    set shortFuncs(data) { this._shortFuncs = data; }
    /** 快捷键 */
    get hotKeys() { return this._hotKeys; }
    set hotKeys(data) { this._hotKeys = data; }
    /** 门 */
    get door() { return this._door; }
    set door(data) { this._door = data; }
    /** 窗 */
    get win() { return this._win; }
    set win(data) { this._win = data; }
    /** 门窗公共 */
    get doorWin() { return this._doorWin; }
    set doorWin(data) { this.doorWin = data; }
    /** 缩略图 */
    get thumbnail() { return this._thumbnail; }
    set thumbnail(data) { this._thumbnail = data; }
    /** 家居 */
    get furniture() { return this._furniture; }
    set furniture(data) { this._furniture = data; }
    /** 建筑物 */
    get build() { return this._build; }
    set build(data) { this._build = data; }
    /** L窗 */
    get LWin() { return this._LWin; }
    set LWin(data) { this._LWin = data; }
    /** U窗 */
    get UWin() { return this._UWin; }
    set UWin(data) { this._UWin = data; }
    get AnimationFuncs() { return this._AnimationFuncs; }
    set AnimationFuncs(data) { this._AnimationFuncs = data; }
    /** 快捷方法强化 */
    shortFuncPlus(name, ...args) {
        if (this.shortFuncs[name] == undefined) {
            console.log(`方法'${name}'还未实现!!!`);
        }
        else
            this.shortFuncs[name](...args);
    }
}
/** 物体缓存 */
class GeometryCache {
    constructor() {
        /** 创建初始化 */
        this.createFunc = () => { };
        this.move = null;
        this.moveEnd = null;
        this.rotate = null;
    }
}
/** 家居缓存 */
class FurnitureCache extends GeometryCache {
}
/** 建筑物缓存 */
class BuildCache extends GeometryCache {
}
/** 墙缓存 */
class WallCache {
    constructor() {
        /** 影子墙的坐标 */
        this.ShadowPosArr = null;
        /** 更新3D */
        this.update3D = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /** 位子 0为居中,1为外,-1为内 */
        this.location = 1;
        /** 是否正交 */
        this.isOrthogonal = true;
    }
}
/** 点缓存 */
class PointCache {
}
/** 门缓存 */
class DoorCache {
    constructor() {
        this.createFunc = () => { };
    }
}
/** 窗缓存 */
class WinCache {
    constructor() {
        this.createFunc = () => { };
    }
}
/** 门窗公共属性 */
class DWCache {
    constructor() {
        this.labelData = [];
        this.displayLabel = false;
        this.move = null;
        this.moveEnd = null;
    }
}
/** 有序墙缓存 */
class CowallCache {
    constructor() {
        this.inputData = [];
        this.hideInput = false;
        /** 创建初始化 */
        this.createInit = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /** 更新3D */
        this.update3D = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /** 反序更新 */
        this.oppsiteUpdate = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
    }
}
/** 空间缓存 */
class RoomCache {
    constructor() {
        /** 影子坐标 */
        this.shadowPosArr = null;
        /** 输入框 */
        this.inputData = [];
        /** 创建初始化 */
        this.createInit = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /** 更新3D */
        this.update3D = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
    }
}
/** 吸附线缓存 */
class AbsorbLineCache {
}
/** 模式触发缓存 */
class ModeCache {
    constructor() {
        this.drawWall = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.drawRoom = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.normal = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
    }
}
/** 公共缓存 */
class CommonCache {
    constructor() {
        /** 选中的对象 */
        this._choose = null;
        this.chooseOtherMsg = undefined;
        /** 对象更新绑定(使用与对象改变时参数改变) */
        this.chooseUpdate = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /** 模式(暂时有normal,drawWall,drawRoom) */
        this.mode = 'normal';
        /** 挡板开关 */
        this.blockON = false;
        /** 触发动作的第一次坐标 */
        this.firstPos = null;
        /** 3d开关 */
        this.threeOn = 1;
        /** 吸附开关 */
        this.isAbosrb = true;
        /** 主要路径 */
        this.mainUrl = '';
        /** 模型路径 */
        this.modelMainUrl = '';
        /** 执行初始化方法组(不是只执行一次,是将一些常用方法强制初始化) */
        this.initUpdate = (noUseKeyArr) => {
            noUseKeyArr = noUseKeyArr ? noUseKeyArr : [];
            for (let key in this.initFuncs) {
                let same = false;
                for (let i = 0; i < noUseKeyArr.length; i++) {
                    if (key == noUseKeyArr[i]) {
                        same = true;
                        break;
                    }
                }
                if (!same) {
                    this.initFuncs[key]();
                }
            }
        };
        /** 初始化某些数据方法组 */
        this.initFuncs = [];
        /** 所有更新完成时 */
        this.allInit = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
    }
    /** 选中的对象 */
    get choose() { return this._choose; }
    set choose(data) {
        let oldChoose = this._choose;
        this._choose = data;
        /** 触发取消选中 */
        if (oldChoose) {
            oldChoose.choose = false;
            oldChoose.chooseUpdate();
        }
        /** 再触发选中 */
        if (data) {
            data.choose = true;
            data.chooseUpdate();
        }
        this.chooseUpdate.emit(data);
    }
    /** 转链接 */
    getAbsUrl(url) {
        let absUrl = url[0] == '/' ? this.mainUrl + url : this.mainUrl + '/' + url;
        return absUrl;
    }
}
/** floorplan缓存 */
class FloorplanCache {
    constructor() {
        /** 默认原点 */
        this.originPos = { x: 0, y: 0 };
        /** 创建移动 */
        this.createAndMove = false;
        /** 居中数据 */
        this.centerData = undefined;
        /** 数据改变监听(用来更新经常性组件(门窗之类)) */
        this.dataEmit = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /** 显示 */
        this.display = {
            area: true,
            label: true,
            outLabel_inLine: false,
            floor: true,
            grid: true,
            roomType: true,
            outLabel_outLine: false,
            outLabel_thickness: false,
            roomImg: true,
            roomSvg: true,
            outLabel: false,
            inLabel: true,
            inLabel_inOrCenterWall: true
        };
    }
}
/** 转角飘窗储存 */
class CornerWinCache {
    constructor() {
        this.hideAllCircle = true;
        this.hideMoveCircle = true;
        this.createFunc = () => { };
        this.move = () => { };
        this.change = () => { };
        this.moveEnd = () => { };
    }
}
class ThumbnailType {
}
/** 缩略图 */
class ThumbnailCache {
    constructor() {
        this.svg = null;
        this.three = null;
    }
}
/** LU窗公共 */
class LUWinCache {
    constructor() {
        this.createFunc = () => { };
    }
}
/** L型窗 */
class LWinCache extends LUWinCache {
}
class UWinCache extends LUWinCache {
}
/* 基础数据缓存 */
class BaseDataCache {
    constructor() {
        this.j2d = [];
    }
}
class TestCache {
    constructor() {
        this.createRoom = true;
    }
}


/***/ }),

/***/ "./src/app/svg/common/jdesign/JCamera.ts":
/*!***********************************************!*\
  !*** ./src/app/svg/common/jdesign/JCamera.ts ***!
  \***********************************************/
/*! exports provided: JCamera, JCameraInitType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JCamera", function() { return JCamera; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JCameraInitType", function() { return JCameraInitType; });
/* harmony import */ var _JDesign__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./JDesign */ "./src/app/svg/common/jdesign/JDesign.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");



class JCamera extends _JDesign__WEBPACK_IMPORTED_MODULE_0__["JDesign"] {
    constructor(obj, dataService, DUService) {
        super({ type: 'camera', id: obj.id }, dataService);
        this.dataService = dataService;
        this.DUService = DUService;
        this.pos = obj.pos ? obj.pos : null;
        this.radian = obj.radian ? obj.radian : 0;
    }
    /** 弧度 */
    get radian() { return this._radian; }
    set radian(data) { this._radian = data; }
    /** 坐标 */
    get pos() { return this._pos; }
    set pos(data) { this._pos = data; }
}
JCamera.ctorParameters = () => [
    { type: JCameraInitType },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"] }
];
class JCameraInitType {
}


/***/ }),

/***/ "./src/app/svg/common/jdesign/JCmd.ts":
/*!********************************************!*\
  !*** ./src/app/svg/common/jdesign/JCmd.ts ***!
  \********************************************/
/*! exports provided: JCmd, BackDefault, CowallDefault, WallDefault, FloorplanDefault, CmdDefault, FloorDefault, CameraDefault, PointDefault, DoorDefault, WinDefault, FurnitureDefault, CornerWinDefault, RoomDefault, LUWinDefault, LWinDefault, UWinDefault, JInitType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JCmd", function() { return JCmd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BackDefault", function() { return BackDefault; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CowallDefault", function() { return CowallDefault; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WallDefault", function() { return WallDefault; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FloorplanDefault", function() { return FloorplanDefault; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CmdDefault", function() { return CmdDefault; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FloorDefault", function() { return FloorDefault; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CameraDefault", function() { return CameraDefault; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PointDefault", function() { return PointDefault; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DoorDefault", function() { return DoorDefault; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WinDefault", function() { return WinDefault; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FurnitureDefault", function() { return FurnitureDefault; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CornerWinDefault", function() { return CornerWinDefault; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RoomDefault", function() { return RoomDefault; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LUWinDefault", function() { return LUWinDefault; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LWinDefault", function() { return LWinDefault; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UWinDefault", function() { return UWinDefault; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JInitType", function() { return JInitType; });
/** 控制参数类 */
class JCmd {
    constructor(obj) {
        // this.back = obj.back
        // this.wall = obj.wall
        // this.cowall = obj.cowall
        // this.floorplan = obj.floorplan
        // this.point = obj.point
        // this.floor = obj.floor
        // this.door = obj.door
        // this.win = obj.win
        // this.furniture = obj.furniture
        // this.cornerWin = obj.cornerWin
        // this.camera = obj.camera
        // this.room = obj.room
        // this.common = obj.common
        /** 墙 */
        this._wall = new WallDefault();
        /** 有序墙 */
        this._cowall = new CowallDefault();
        /** 相机 */
        this._camera = new CameraDefault();
        /** 点 */
        this._point = new PointDefault();
        /** floorplan */
        this._floorplan = new FloorplanDefault();
        /** 公共参数 */
        this._common = new CmdDefault();
        /** 背景 */
        this._back = new BackDefault();
        /** 地板 */
        this._floor = new FloorDefault();
        /** 门参数 */
        this._door = new DoorDefault();
        /** 窗参数 */
        this._win = new WinDefault();
        /** 家具参数 */
        this._furniture = new FurnitureDefault();
        /** 转角飘窗参数 */
        this._cornerWin = new CornerWinDefault();
        /** 空间参数 */
        this._room = new RoomDefault();
        /* L型窗参数 */
        this._LWin = new LWinDefault();
        /* u型窗参数 */
        this._UWin = new UWinDefault();
        this.dataUpdate(this.back, obj.back);
        this.dataUpdate(this.wall, obj.wall);
        this.dataUpdate(this.cowall, obj.cowall);
        this.dataUpdate(this.floorplan, obj.floorplan);
        this.dataUpdate(this.point, obj.point);
        this.dataUpdate(this.floor, obj.floor);
        this.dataUpdate(this.door, obj.door);
        this.dataUpdate(this.win, obj.win);
        this.dataUpdate(this.furniture, obj.furniture);
        this.dataUpdate(this.cornerWin, obj.cornerWin);
        this.dataUpdate(this.camera, obj.camera);
        this.dataUpdate(this.room, obj.room);
        this.dataUpdate(this.common, obj.common);
        this.dataUpdate(this.LWin, obj.LWin);
        this.dataUpdate(this.UWin, obj.UWin);
    }
    /** 墙参数 */
    get wall() { return this._wall; }
    set wall(data) {
        this._wall = data;
    }
    /** 有序墙参数 */
    get cowall() { return this._cowall; }
    set cowall(data) {
        this._cowall = data;
    }
    /** 相机 */
    get camera() { return this._camera; }
    set camera(data) { this._camera = data; }
    /** 点参数 */
    get point() { return this._point; }
    set point(data) {
        this._point = data;
    }
    /** floorplan参数 */
    get floorplan() { return this._floorplan; }
    set floorplan(data) {
        this._floorplan = data;
    }
    /** 公共参数 */
    get common() { return this._common; }
    set common(data) { this._common = data; }
    /** 背景参数 */
    get back() { return this._back; }
    set back(data) {
        this._back = data;
    }
    /** 地板参数 */
    get floor() { return this._floor; }
    set floor(data) { this._floor = data; }
    /** 门参数 */
    get door() { return this._door; }
    set door(data) { this._door = data; }
    /** 窗参数 */
    get win() { return this._win; }
    set win(data) { this._win = data; }
    /** 家具参数 */
    get furniture() { return this._furniture; }
    set furniture(data) { this._furniture = data; }
    /** 转角飘窗参数 */
    get cornerWin() { return this._cornerWin; }
    set cornerWin(data) { this._cornerWin = data; }
    /** 转角飘窗参数 */
    get room() { return this._room; }
    set room(data) { this._room = data; }
    /* L型窗参数 */
    get LWin() { return this._LWin; }
    set LWin(data) { this._LWin = data; }
    /* u型窗参数 */
    get UWin() { return this._UWin; }
    set UWin(data) { this._UWin = data; }
    dataUpdate(obj, importData) {
        for (let key in importData) {
            obj[key] = importData[key];
        }
    }
    /** 长度换算像素点 mm,cm,m*/
    getLengthTransPixel(length, type) {
        let pixel = null;
        switch (type) {
            case 'mm':
                pixel = length / this.floorplan.mm;
                return pixel;
            case 'cm':
                pixel = length * 10 / this.floorplan.mm;
                return pixel;
            case 'm':
                pixel = length * 1000 / this.floorplan.mm;
                return pixel;
            default:
                return null;
        }
    }
    /** 像素点换算长度 */
    getPixelTransLength(pixel, type) {
        let length = null;
        switch (type) {
            case 'mm':
                length = pixel * this.floorplan.mm;
                return length;
            case 'cm':
                length = pixel * this.floorplan.mm / 10;
                return length;
            case 'm':
                length = pixel * this.floorplan.mm / 1000;
                return length;
            default:
                return null;
        }
    }
    /** 获取当前单位模式下的长度 */
    getDefaultLength(pixel) {
        return this.getPixelTransLength(pixel, this.floorplan.ruler);
    }
    /** 获取当前单位模式下的像素点 */
    getDefaultPixel(length) {
        return this.getLengthTransPixel(length, this.floorplan.ruler);
    }
    /** 获取精确坐标 */
    getWindowPos(pos) {
        let movePos = { x: pos.x + this.floorplan.left, y: pos.y + this.floorplan.top };
        if (this.floorplan.zoom == 1)
            return movePos;
        else {
            let centerPos = { x: (this.back.size.width / 2) + this.floorplan.left, y: (this.back.size.height / 2) + this.floorplan.top };
            movePos = {
                x: centerPos.x + ((movePos.x - centerPos.x) * this.floorplan.zoom),
                y: centerPos.y + ((movePos.y - centerPos.y) * this.floorplan.zoom)
            };
            return movePos;
        }
    }
}
JCmd.ctorParameters = () => [
    { type: JInitType }
];
/** 背景默认参数 */
class BackDefault {
}
/** cowall默认参数 */
class CowallDefault {
    constructor() {
        /** 外标签信息 */
        this.outLabel = {
            centerDistance: 500,
            levelDistance: 500
        };
    }
}
/** wall默认参数 */
class WallDefault {
}
/** floorPlan默认参数 */
class FloorplanDefault {
    constructor() {
        /** 指南针 */
        this.compass = 0;
        /** 设计名字 */
        this.designName = "3d户型";
    }
}
/** cmd默认参数 */
class CmdDefault {
}
/** 地板默认参数 */
class FloorDefault {
}
/** 相机默认参数 */
class CameraDefault {
}
/** 点默认参数 */
class PointDefault {
}
/** 门默认参数 */
class DoorDefault {
}
/** 窗默认参数 */
class WinDefault {
}
/** 家具默认参数 */
class FurnitureDefault {
}
/** 转角飘窗默认参数 */
class CornerWinDefault {
}
/** 空间默认参数 */
class RoomDefault {
}
class LUWinDefault {
}
/* LWin默认参数 */
class LWinDefault extends LUWinDefault {
}
class UWinDefault extends LUWinDefault {
}
class JInitType {
}


/***/ }),

/***/ "./src/app/svg/common/jdesign/JCornerWin.ts":
/*!**************************************************!*\
  !*** ./src/app/svg/common/jdesign/JCornerWin.ts ***!
  \**************************************************/
/*! exports provided: JCornerWin, JCornerWinInitType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JCornerWin", function() { return JCornerWin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JCornerWinInitType", function() { return JCornerWinInitType; });
/* harmony import */ var _JDesign__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./JDesign */ "./src/app/svg/common/jdesign/JDesign.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");



class JCornerWin extends _JDesign__WEBPACK_IMPORTED_MODULE_0__["JDesign"] {
    constructor(obj, dataService, DUService) {
        super({ type: 'cornerWin', id: obj.id, flag: obj.flag, mode: obj.mode ? obj.mode : 'move' }, dataService);
        this.dataService = dataService;
        this.DUService = DUService;
        /** 轮廓 */
        this._outLine = [];
        this.pos = obj.pos ? obj.pos : { x: 0, y: 0 };
        this.LRadian = obj.LRadian ? obj.LRadian : Math.PI;
        this.LThickness = obj.LThickness ? obj.LThickness : this.dataService.cmd.cornerWin.thickness;
        this.LWidth = obj.LWidth ? obj.LWidth : 0;
        this.LDepth = obj.LDepth ? obj.LDepth : 0;
        this.DRadian = obj.DRadian ? obj.DRadian : Math.PI / 2;
        this.DThickness = obj.DThickness ? obj.DThickness : this.dataService.cmd.cornerWin.thickness;
        this.DWidth = obj.DWidth ? obj.DWidth : 0;
        this.DDepth = obj.DDepth ? obj.DDepth : 0;
        this.pointID = obj.pointID ? obj.pointID : null;
        this.outThickness = obj.outThickness ? obj.outThickness : 0;
        this.outWallThickness = obj.outWallThickness ? obj.outWallThickness : 0;
        this.height3D = obj.height3D ? obj.height3D : 0;
        this.floorHeight = obj.floorHeight ? obj.floorHeight : 0;
        this.dataService.cornerWins[this.id] = this;
    }
    /** 坐标 */
    get pos() { return this._pos; }
    set pos(data) { this._pos = data; }
    /** 左边厚度 */
    get LThickness() { return this._LThickness; }
    set LThickness(data) { this._LThickness = data; }
    /** 左边宽度 */
    get LWidth() { return this._LWidth; }
    set LWidth(data) { this._LWidth = data; }
    /** 左边深度 */
    get LDepth() { return this._LDepth; }
    set LDepth(data) { this._LDepth = data; }
    /** 左边弧度 */
    get LRadian() { return this._LRadian; }
    set LRadian(data) { this._LRadian = data; }
    /** 下边厚度 */
    get DThickness() { return this._DThickness; }
    set DThickness(data) { this._DThickness = data; }
    /** 下边宽度 */
    get DWidth() { return this._DWidth; }
    set DWidth(data) { this._DWidth = data; }
    /** 下边深度 */
    get DDepth() { return this._DDepth; }
    set DDepth(data) { this._DDepth = data; }
    /** 下边弧度 */
    get DRadian() { return this._DRadian; }
    set DRadian(data) { this._DRadian = data; }
    /** 依赖点 */
    get pointID() { return this._pointID; }
    set pointID(data) { this._pointID = data; }
    /** 轮廓(方向为从中心向左往上循环) */
    get outLine() { return this._outLine; }
    set outLine(data) { this._outLine = data; }
    /**  外厚度 */
    get outThickness() { return this._outThickness; }
    set outThickness(data) { this._outThickness = data; }
    get outWallThickness() { return this._outWallThickness; }
    set outWallThickness(data) { this._outWallThickness = data; }
    /** 3D高度 */
    get height3D() { return this._height3D; }
    set height3D(data) { this._height3D = data; }
    /** 离地高度 */
    get floorHeight() { return this._floorHeight; }
    set floorHeight(data) { this._floorHeight = data; }
    /** 获取左边角度 */
    getLRotate() {
        return this.LRadian * 180 / Math.PI;
    }
    /** 获取下边角度 */
    getDRotate() {
        return this.DRadian * 180 / Math.PI;
    }
    /** 获取点 */
    getPoint() {
        if (this.pointID == null || this.pointID == '')
            return null;
        return this.dataService.points[this.pointID];
    }
    /** 获取path坐标 (pos为空时取飘窗坐标)
     * [pos, LDPos, LUPos, intersectPos, DRPos, DLPos]
     */
    getPathPosArr(pos) {
        pos = pos ? pos : this.pos;
        /** 左边下面坐标 */
        let LDPos = this.DUService.pos.getRayPos(pos, this.LRadian, this.LDepth);
        /** 坐标上面坐标 */
        let LUPos = this.DUService.pos.getRayPos(LDPos, this.LRadian + (Math.PI / 2), this.LWidth);
        /** 下边左面坐标 */
        let DLPos = this.DUService.pos.getRayPos(pos, this.DRadian, this.DDepth);
        /** 下面右面坐标 */
        let DRPos = this.DUService.pos.getRayPos(DLPos, this.DRadian - (Math.PI / 2), this.DWidth);
        let LLinePos = this.DUService.pos.getRayPos(LUPos, this.LRadian + Math.PI, 10);
        let DLinePos = this.DUService.pos.getRayPos(DRPos, this.DRadian + Math.PI, 10);
        let intersectPos = this.DUService.pos.getIntersect(LUPos, LLinePos, DRPos, DLinePos);
        let posArr = [pos, LDPos, LUPos, intersectPos, DRPos, DLPos];
        return posArr;
    }
}
JCornerWin.ctorParameters = () => [
    { type: JCornerWinInitType },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"] }
];
class JCornerWinInitType {
}


/***/ }),

/***/ "./src/app/svg/common/jdesign/JCowall.ts":
/*!***********************************************!*\
  !*** ./src/app/svg/common/jdesign/JCowall.ts ***!
  \***********************************************/
/*! exports provided: JCowall, JCowallInitType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JCowall", function() { return JCowall; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JCowallInitType", function() { return JCowallInitType; });
/* harmony import */ var _JDesign__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./JDesign */ "./src/app/svg/common/jdesign/JDesign.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");



class JCowall extends _JDesign__WEBPACK_IMPORTED_MODULE_0__["JDesign"] {
    constructor(obj, dataService, DUService) {
        super({ type: 'cowall', id: obj.id }, dataService);
        this.dataService = dataService;
        this.DUService = DUService;
        /** 显示隐藏 */
        this._labelDisplay = true;
        this.reversed = obj.reversed != undefined ? obj.reversed : false;
        this.edgeID = obj.edgeID != undefined ? obj.edgeID : null;
        this.nextID = obj.nextID != undefined ? obj.nextID : null;
        this.prevID = obj.prevID != undefined ? obj.prevID : null;
        this.partnerID = obj.partnerID != undefined ? obj.partnerID : null;
        this.roomID = obj.roomID != undefined ? obj.roomID : null;
        this.pointIDs = obj.pointIDs != undefined ? obj.pointIDs : [];
        this.dataService.cowalls[this.id] = this;
    }
    /** 子对象point 改变会联动触发point */
    get pointIDs() { return this._pointIDs; }
    set pointIDs(obj) {
        /** 删除旧的 */
        if (this.pointIDs != undefined && this.pointIDs != []) {
            let oldPointArr = this.getPointArr();
            for (let i = 0; i < oldPointArr.length; i++) {
                for (let j = oldPointArr[i].cowallIDs.length - 1; j >= 0; j--) {
                    if (oldPointArr[i].cowallIDs[j] == this.id) {
                        oldPointArr[i].cowallIDs.splice(j, 1);
                        break;
                    }
                }
            }
        }
        this._pointIDs = obj;
        /** 添加新的 */
        if (obj != undefined && obj.length != 0) {
            let pointArr = this.getPointArr();
            for (let i = 0; i < pointArr.length; i++) {
                pointArr[i].cowallIDs.push(this.id);
                pointArr[i].cowallIDs = this.DUService.cal.unique(pointArr[i].cowallIDs);
            }
        }
    }
    /** 仅有一个空间父对象 改变会联动触发floorplan */
    get roomID() { return this._roomID; }
    set roomID(obj) {
        let remove = false;
        if (this._roomID == undefined || this._roomID == null) {
            remove = true;
        }
        this._roomID = obj;
        /** 如果没值,添加floorplan索引 */
        if (obj == null || obj == undefined) {
            this.dataService.floorplan.cowallIDs.push(this.id);
            this.dataService.floorplan.cowallIDs = this.DUService.cal.unique(this.dataService.floorplan.cowallIDs);
            remove = false;
        }
        /** 如果有值,删除floorplan索引 */
        if (remove) {
            this.DUService.cal.removeByValue(this.dataService.floorplan.cowallIDs, this.id);
        }
    }
    /** 下一个cowallID */
    get nextID() { return this._nextID; }
    set nextID(obj) {
        this._nextID = obj;
        // this.strongUpdate()
    }
    /** 上一个cowallID */
    get prevID() { return this._prevID; }
    set prevID(obj) {
        this._prevID = obj;
        //this.strongUpdate()
    }
    /** wallID */
    get edgeID() { return this._edgeID; }
    set edgeID(obj) {
        this._edgeID = obj;
        // let wall: JWall = this.getWall()
        // if (wall.coedgeID == undefined || wall.coedgeID == null) {
        //     wall.coedgeID = this.id
        // } else {
        //     let partnerCowall = wall.getCowall()
        //     this.partnerID = partnerCowall.id
        //     partnerCowall.partnerID = this.id
        // }
        // this.strongUpdate()
    }
    /** 同一个wall的另外cowall 改变会联动触发cowall */
    get partnerID() { return this._partnerID; }
    set partnerID(obj) {
        this._partnerID = obj;
        if (obj != null) {
            let cowall = this.dataService.cowalls[obj];
            if (cowall != undefined && cowall != null && cowall.partnerID != this.id) {
                cowall.partnerID = this.id;
            }
        }
        //this.strongUpdate()
    }
    /** 是否颠倒 */
    get reversed() { return this._reversed; }
    set reversed(obj) {
        this._reversed = obj;
    }
    /** 显示隐藏 */
    get labelDisplay() { return this._labelDisplay; }
    set labelDisplay(data) { this._labelDisplay = data; }
    /** 获取墙 */
    getWall() {
        let wall = this.dataService.walls[this.edgeID];
        return wall;
    }
    /** 是否为一点 */
    isSamePos() {
        let posArr = this.getPosArr();
        if (posArr[0].x == posArr[1].x && posArr[0].y == posArr[1].y) {
            return true;
        }
        else {
            return false;
        }
    }
    /** 上个为一点 */
    isPointByPrev() {
        let cowall = this.getPrevCowall();
        return cowall.isSamePos();
    }
    /** 下个为一点 */
    isPointBynext() {
        let cowall = this.getNextCowall();
        return cowall.isSamePos();
    }
    /** 获取反向有序墙 */
    getOppsiteCowall() {
        if (this.partnerID == null) {
            return null;
        }
        else {
            let cowall = this.dataService.cowalls[this.partnerID];
            return cowall;
        }
    }
    /** 获取空间 */
    getRoom() {
        if (this.roomID == null)
            return null;
        let room = this.dataService.rooms[this.roomID];
        return room;
    }
    /** 获取点数组 */
    getPointArr() {
        let pointStart = this.getPointStart();
        let pointEnd = this.getPointEnd();
        let pointArr = [pointStart, pointEnd];
        return pointArr;
    }
    /** 获取坐标集 */
    getPosArr() {
        let pointArr = this.getPointArr();
        let posArr = [pointArr[0].pos, pointArr[1].pos];
        return posArr;
    }
    /** 获取起点 */
    getPointStart() {
        if (this.reversed) {
            let point = this.dataService.points[this.pointIDs[1]];
            return point;
        }
        else {
            let point = this.dataService.points[this.pointIDs[0]];
            return point;
        }
    }
    /** 获取终点 */
    getPointEnd() {
        if (!this.reversed) {
            let point = this.dataService.points[this.pointIDs[1]];
            return point;
        }
        else {
            let point = this.dataService.points[this.pointIDs[0]];
            return point;
        }
    }
    /** 获取弧度
     * @param reCal 是否重新计算,默认false,从墙里面取数据
     */
    getRadian(reCal = false) {
        if (reCal) {
            let posArr = this.getPosArr();
            let radian = this.DUService.pos.getRadian(posArr[0], posArr[1]);
            return radian;
        }
        let wall = this.getWall();
        if (wall.coedgeID == this.id)
            return wall.getRadian();
        else
            return wall.getRadian() + Math.PI;
    }
    /** 获取角度 */
    getRotate() {
        let radian = this.getRadian();
        let rotate = radian * 180 / Math.PI;
        return rotate;
    }
    /** 获取上个有序墙 */
    getPrevCowall() {
        let cowall = this.dataService.cowalls[this.prevID];
        return cowall;
    }
    /** 获取下个有序墙 */
    getNextCowall() {
        let cowall = this.dataService.cowalls[this.nextID];
        return cowall;
    }
    /** 获取长度 */
    getDistance() {
        let posArr = this.getPosArr();
        let distance = this.DUService.pos.getDistance(posArr[0], posArr[1]);
        return distance;
    }
    /** 获取内线坐标 */
    getInLine() {
        let wall = this.getWall();
        if (!wall.outLine)
            return undefined;
        if (wall.coedgeID == this.id) {
            return wall.getInLine();
        }
        else {
            return wall.getOutLine();
        }
    }
    /** 获取显示用的内线坐标 */
    getDrawInLine() {
        let wall = this.getWall();
        if (!wall.drawOutLine)
            return undefined;
        if (wall.coedgeID == this.id) {
            return wall.getDrawInLine();
        }
        else {
            return wall.getDrawOutLine();
        }
    }
    /** 获取内线长度*/
    getInLineDistance() {
        let posArr = this.getInLine();
        return this.DUService.pos.getDistance(posArr[0], posArr[1]);
    }
    /** 获取外线坐标 */
    getOutLine() {
        let wall = this.getWall();
        if (wall.outLine == null)
            return null;
        if (wall.coedgeID == this.id) {
            return wall.getOutLine();
        }
        else {
            return wall.getInLine();
        }
    }
    /** 获取显示用的外线坐标 */
    getDrawOutLine() {
        let wall = this.getWall();
        if (!wall.drawOutLine)
            return undefined;
        if (wall.coedgeID == this.id) {
            return wall.getDrawOutLine();
        }
        else {
            return wall.getDrawInLine();
        }
    }
    /** 获取外线长度 */
    getOutLineDistance() {
        let posArr = this.getOutLine();
        return this.DUService.pos.getDistance(posArr[0], posArr[1]);
    }
    /** 获取向量 */
    getVector() {
        let posArr = this.getPosArr();
        let vector = { x: posArr[1].x - posArr[0].x, y: posArr[1].y - posArr[0].y };
        return vector;
    }
}
JCowall.ctorParameters = () => [
    { type: JCowallInitType },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"] }
];
class JCowallInitType {
}


/***/ }),

/***/ "./src/app/svg/common/jdesign/JDWAbstract.ts":
/*!***************************************************!*\
  !*** ./src/app/svg/common/jdesign/JDWAbstract.ts ***!
  \***************************************************/
/*! exports provided: JDWAbstract, JDWInitType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JDWAbstract", function() { return JDWAbstract; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JDWInitType", function() { return JDWInitType; });
/* harmony import */ var _JDesign__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./JDesign */ "./src/app/svg/common/jdesign/JDesign.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");



class JDWAbstract extends _JDesign__WEBPACK_IMPORTED_MODULE_0__["JDesign"] {
    constructor(design, dataService, DUService) {
        super(design, dataService);
        this.dataService = dataService;
        this.DUService = DUService;
        /** 墙对象ID */
        this._wall = null;
        /** 挖洞方法 */
        this._digFunc = null;
    }
    /** 中心坐标 */
    get pos() { return this._pos; }
    set pos(obj) {
        this._pos = obj;
    }
    /** 尺寸 警告:由于数据问题,尺寸单位mm */
    get size() { return this._size; }
    set size(obj) {
        this._size = obj;
        //this.strongUpdate()
    }
    /** 镜像 */
    get mirror() { return this._mirror; }
    set mirror(obj) {
        this._mirror = obj;
    }
    /** 里外 */
    get out() { return this._out; }
    set out(obj) {
        this._out = obj;
    }
    /** 离墙的原点距离比 */
    get distancePer() { return this._distancePer; }
    set distancePer(obj) {
        this._distancePer = obj;
    }
    /** oldwall */
    get oldWallID() { return this._oldWallID; }
    set oldWallID(obj) { this._oldWallID = obj; }
    /** 弧度 */
    get radian() { return this._radian; }
    set radian(obj) { this._radian = obj; }
    /** 3d模型路径 */
    get url3D() { return this._url3D; }
    set url3D(obj) { this._url3D = obj; }
    /** 风格 */
    get style() { return this._style; }
    set style(obj) { this._style = obj; }
    /** 板件图 */
    get svgImg() { return this._svgImg; }
    set svgImg(data) { this._svgImg = data; }
    /** 板件类型 */
    get plankType() { return this._plankType; }
    set plankType(data) { this._plankType = data; }
    /** 挖洞 */
    get digFunc() { return this._digFunc; }
    set digFunc(obj) { this._digFunc = obj; }
    /** 离地高度 */
    get floorHeight() { return this._floorHeight; }
    set floorHeight(data) { this._floorHeight = data; }
    /** 模型路径 */
    get modelUrl() { return this._modelUrl; }
    set modelUrl(data) { this._modelUrl = data; }
    /** 是否有框 */
    get isHaveFrame() { return this._isHaveFrame; }
    set isHaveFrame(data) { this._isHaveFrame = data; }
    /** 数据更新 */
    dataInit(obj) {
        this.wallID = obj.wallID ? obj.wallID : null;
        this.size = obj.size ? obj.size : null;
        this.distancePer = obj.distancePer ? obj.distancePer : 0.5;
        this.mirror = obj.mirror != undefined ? obj.mirror : false;
        this.out = obj.out != undefined ? obj.out : true;
        this.pos = obj.pos ? obj.pos : { x: 0, y: 0 };
        this.radian = obj.radian ? obj.radian : 0;
        this.url3D = obj.url3D ? obj.url3D : null;
        this.style = obj.style ? obj.style : "";
        this.svgImg = obj.svgImg ? obj.svgImg : null;
        this.floorHeight = obj.floorHeight ? obj.floorHeight : 0;
        this.plankType = obj.plankType ? obj.plankType : "normal";
        this.modelUrl = obj.modelUrl ? obj.modelUrl : undefined;
        this.isHaveFrame = obj.isHaveFrame != undefined ? obj.isHaveFrame : true;
    }
    /** 获取墙对象 */
    getwall() {
        let wall = this.dataService.walls[this.wallID];
        return wall;
    }
    /** 获取像素点尺寸 */
    getPixSize() {
        let newSize = {
            width: this.dataService.cmd.getLengthTransPixel(this.size.width, 'mm'),
            height: this.dataService.cmd.getLengthTransPixel(this.size.height, 'mm'),
        };
        return newSize;
    }
    /** 获取原点 */
    getOriginPos(centerPos = { x: 0, y: 0 }) {
        let b = this.out ? 1 : -1;
        let pixSize = this.getPixSize();
        let newPos = { x: centerPos.x - (pixSize.width / 2), y: centerPos.y - (pixSize.height / 2 * b) };
        return newPos;
    }
    /** 获取空间对象 */
    getRoomArr() {
        let wall = this.getwall();
        if (wall == null)
            return null;
        let roomArr = wall.getRoomArr();
        return roomArr;
    }
    /** 获取真实弧度 */
    getRealRadian() {
        if (this.out)
            return this.radian;
        else
            return this.radian + Math.PI;
    }
    /** 获取有序墙对象 */
    getCowallArr() {
        let wall = this.getwall();
        if (wall == null)
            return null;
        let cowallArr = wall.getCowallArr();
        return cowallArr;
    }
    /** 获取中心四点坐标 从左上往右开始循环*/
    getRectPos() {
        if (this.out)
            this.radian += Math.PI;
        let size = this.getPixSize();
        let posArr = this.DUService.pos.getRectPosByCenter(this.pos, size, this.radian);
        return posArr;
    }
    /** 获取弧度(带有方向) */
    getRadian() {
        if (this.out)
            return this.radian + Math.PI;
        else
            return this.radian;
    }
    /** 获取角度 */
    getRotate() {
        let rotate = this.getRadian() * 180 / Math.PI;
        return rotate;
    }
    /** 获取旧墙 */
    getOldWall() {
        let wall = this.dataService.walls[this.oldWallID];
        return wall;
    }
    /** 挖洞 */
    setDig() {
        this.digFunc();
    }
    /** 获取距离墙的距离 */
    getPosByWall() {
        let wall = this.getwall();
        let distance = wall.getDistance();
        distance = distance * this.distancePer;
        let posArr = wall.getPosArr();
        let radian = wall.getRadian();
        let pos = this.DUService.pos.getRayPos(posArr[0], radian, distance);
        return pos;
    }
}
JDWAbstract.ctorParameters = () => [
    { type: _JDesign__WEBPACK_IMPORTED_MODULE_0__["JDesignType"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"] }
];
class JDWInitType {
}


/***/ }),

/***/ "./src/app/svg/common/jdesign/JDesign.ts":
/*!***********************************************!*\
  !*** ./src/app/svg/common/jdesign/JDesign.ts ***!
  \***********************************************/
/*! exports provided: JDesign, JDesignType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JDesign", function() { return JDesign; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JDesignType", function() { return JDesignType; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


class JDesign {
    constructor(obj, dataService) {
        this.dataService = dataService;
        /** 强制更新组 */
        this._updataArr = [];
        /** 强制更新3D组 */
        this._updateArr3D = [];
        /** 选中状态 */
        this._choose = false;
        /** 选中更新方法组 */
        this._chooseFuncArr = [];
        /** 延迟选中更新方法组 */
        this._lateChooseFuncArr = [];
        /** 不选中更新方法组 */
        this._noChooseFuncArr = [];
        /** 延迟选中更新方法组 */
        this._lateNoChooseFuncArr = [];
        this._urgentUpdate = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /** 销毁 */
        this._destoryFuncArr = [];
        /** 3d动态方法 */
        this._act3D = {
            start: () => { }, move: () => { }, end: () => { }, change: () => { }
        };
        this.type = obj.type;
        this.flag = obj.flag ? obj.flag : 0;
        this.id = obj.id ? obj.id : obj.type + this.dataService.cmd.floorplan
            .nextID;
        this.mode = obj.mode ? obj.mode : null;
        this.dataService.cmd.floorplan.nextID++;
        this.calFlag = obj.calFlag ? obj.calFlag : 0;
    }
    /** ID */
    get id() { return this._id; }
    set id(obj) { this._id = obj; }
    /** 标记 */
    get flag() { return this._flag; }
    set flag(obj) { this._flag = obj; }
    /** 计算标记 */
    get calFlag() { return this._calFlag; }
    set calFlag(data) { this._calFlag = data; }
    /** 类型 */
    get type() { return this._type; }
    set type(obj) { this._type = obj; }
    /** 改变模式 */
    get mode() { return this._mode; }
    set mode(obj) {
        this._mode = obj;
    }
    /** 强制更新组 */
    get updateArr() { return this._updataArr; }
    set updateArr(obj) { this._updataArr = obj; }
    /** 强制更新3D组 */
    get updateArr3D() { return this._updateArr3D; }
    set updateArr3D(obj) { this._updateArr3D = obj; }
    /** 选中状态 */
    get choose() { return this._choose; }
    set choose(obj) { this._choose = obj; }
    /** 选中更新方法组 */
    get chooseFuncArr() { return this._chooseFuncArr; }
    set chooseFuncArr(obj) { this._chooseFuncArr = obj; }
    /** 延迟选中更新方法组 */
    get lateChooseFuncArr() { return this._lateChooseFuncArr; }
    set lateChooseFuncArr(data) { this._lateChooseFuncArr = data; }
    /** 不选中更新方法组 */
    get noChooseFuncArr() { return this._noChooseFuncArr; }
    set noChooseFuncArr(obj) { this._noChooseFuncArr = obj; }
    /** 延迟选中更新方法组 */
    get lateNoChooseFuncArr() { return this._lateNoChooseFuncArr; }
    set lateNoChooseFuncArr(data) { this._lateNoChooseFuncArr = data; }
    /** 紧急更新 */
    get urgentUpdate() { return this._urgentUpdate; }
    set urgentUpdate(data) { this._urgentUpdate = data; }
    /** dom信息 */
    get domMsg() { return this._domMsg; }
    set domMsg(obj) {
        this._domMsg = obj;
    }
    get destoryFuncArr() { return this._destoryFuncArr; }
    set destoryFuncArr(obj) { this._destoryFuncArr = obj; }
    get act3D() { return this._act3D; }
    set act3D(data) { this._act3D = data; }
    /** 强制更新 */
    strongUpdate() {
        let func = null;
        for (func of this.updateArr) {
            func(this);
        }
    }
    /** 强制更新3D */
    strongUpdate3D() {
        let func = null;
        for (func of this.updateArr3D) {
            func(this);
        }
    }
    /** 选中更新 */
    chooseUpdate() {
        let func = null;
        if (this.choose) {
            for (func of this.chooseFuncArr) {
                func(this);
            }
            for (func of this.lateChooseFuncArr) {
                func(this);
            }
        }
        else {
            for (func of this.noChooseFuncArr) {
                func(this);
            }
            for (func of this.lateNoChooseFuncArr) {
                func(this);
            }
        }
    }
    /** 销毁触发 */
    destory() {
        let func = null;
        for (func of this.destoryFuncArr) {
            func(this);
        }
    }
    /** 3Dx销毁 */
    destory3D() {
    }
}
JDesign.ctorParameters = () => [
    { type: JDesignType },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] }
];
class JDesignType {
}


/***/ }),

/***/ "./src/app/svg/common/jdesign/JDoor.ts":
/*!*********************************************!*\
  !*** ./src/app/svg/common/jdesign/JDoor.ts ***!
  \*********************************************/
/*! exports provided: JDoor, JDoorInitType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JDoor", function() { return JDoor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JDoorInitType", function() { return JDoorInitType; });
/* harmony import */ var _JDWAbstract__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./JDWAbstract */ "./src/app/svg/common/jdesign/JDWAbstract.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _three_jDesign3D_JDW3D__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../three/jDesign3D/JDW3D */ "./src/app/three/jDesign3D/JDW3D.ts");




class JDoor extends _three_jDesign3D_JDW3D__WEBPACK_IMPORTED_MODULE_3__["JDW3D"] {
    constructor(obj, dataService, DUService) {
        super({ type: 'door', id: obj.id }, dataService, DUService);
        this.dataService = dataService;
        this.DUService = DUService;
        this.dataInit(obj);
        this.dataService.doors[this.id] = this;
    }
    /**  墙对象id 会联动触发  */
    get wallID() { return this._wall; }
    set wallID(obj) {
        if (this.wallID != null) {
            if (this.oldWallID != this.wallID && this.wallID != obj) {
                let wall = this.getwall();
                this.oldWallID = wall ? this.wallID : undefined;
            }
            let wall = this.getwall();
            if (wall != undefined) {
                for (let i = 0; i < wall.doorIDs.length; i++) {
                    if (wall.doorIDs[i] == this.id) {
                        wall.doorIDs.splice(i, 1);
                        break;
                    }
                }
            }
        }
        this._wall = obj;
        if (obj != null) {
            let wall = this.getwall();
            let same = false;
            for (let i = 0; i < wall.doorIDs.length; i++) {
                if (wall.doorIDs[i] == this.id) {
                    same = true;
                    break;
                }
            }
            if (!same) {
                wall.doorIDs.push(this.id);
            }
        }
    }
    getWallDWIDs() {
        let wall = this.getwall();
        if (wall != undefined)
            return wall.doorIDs;
        return undefined;
    }
}
JDoor.ctorParameters = () => [
    { type: JDoorInitType },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"] }
];
class JDoorInitType extends _JDWAbstract__WEBPACK_IMPORTED_MODULE_0__["JDWInitType"] {
}


/***/ }),

/***/ "./src/app/svg/common/jdesign/JFloor.ts":
/*!**********************************************!*\
  !*** ./src/app/svg/common/jdesign/JFloor.ts ***!
  \**********************************************/
/*! exports provided: JFloor, JFloorInitType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JFloor", function() { return JFloor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JFloorInitType", function() { return JFloorInitType; });
/* harmony import */ var _JDesign__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./JDesign */ "./src/app/svg/common/jdesign/JDesign.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");



class JFloor extends _JDesign__WEBPACK_IMPORTED_MODULE_0__["JDesign"] {
    constructor(obj, dataService, DUService) {
        super({ id: obj.id, type: 'floor' }, dataService);
        this.dataService = dataService;
        this.DUService = DUService;
        this.roomID = obj.roomID;
        this.radian = obj.radian ? obj.radian : 0;
        this.size = obj.size ? obj.size : null;
        this.imgUrl = obj.imgUrl ? obj.imgUrl : null;
        this.dataService.floors[this.id] = this;
    }
    /** 空间id */
    get roomID() { return this._roomID; }
    set roomID(data) { this._roomID = data; }
    /** 弧度 */
    get radian() { return this._radian; }
    set radian(data) { this._radian = data; }
    /** 尺寸 */
    get size() { return this._size; }
    set size(data) { this._size = data; }
    /** 图片路径 */
    get imgUrl() { return this._imgUrl; }
    set imgUrl(data) { this._imgUrl = data; }
    /** 获取空间 */
    getRoom() {
        let room = this.dataService.rooms[this.roomID];
        return room;
    }
    /** 获取轮廓 */
    getInLine() {
        let room = this.getRoom();
        return room.getInLine();
    }
}
JFloor.ctorParameters = () => [
    { type: JFloorInitType },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"] }
];
class JFloorInitType {
}


/***/ }),

/***/ "./src/app/svg/common/jdesign/JFloorplan.ts":
/*!**************************************************!*\
  !*** ./src/app/svg/common/jdesign/JFloorplan.ts ***!
  \**************************************************/
/*! exports provided: JFloorplan, JFloorplanInitType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JFloorplan", function() { return JFloorplan; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JFloorplanInitType", function() { return JFloorplanInitType; });
/* harmony import */ var _JDesign__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./JDesign */ "./src/app/svg/common/jdesign/JDesign.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");


/** 操作对象 */
class JFloorplan extends _JDesign__WEBPACK_IMPORTED_MODULE_0__["JDesign"] {
    constructor(obj, dataService) {
        super({ type: "floorplan", mode: obj.mode }, dataService);
        this.dataService = dataService;
        this.roomsID = obj.roomsID != undefined ? obj.roomsID : [];
        this.cowallIDs = obj.cowallIDs != undefined ? obj.cowallIDs : [];
        this.backImg = obj.backImg != undefined ? obj.backImg : null;
    }
    /** 子对象roomID */
    get roomsID() { return this._roomsID; }
    set roomsID(obj) { this._roomsID = obj; }
    /** 没有room对象的有序墙 */
    get cowallIDs() { return this._cowallIDs; }
    set cowallIDs(obj) {
        this._cowallIDs = obj;
    }
    /** 背景图 */
    get backImg() {
        return this._backImg;
    }
    set backImg(data) {
        this._backImg = data;
    }
    /** 获取cowall */
    getCowallArr() {
        let cowallArr = [];
        for (let i = 0; i < this.cowallIDs.length; i++) {
            let cowall = this.dataService.cowalls[this.cowallIDs[i]];
            cowallArr.push(cowall);
        }
        return cowallArr;
    }
    /* 设置居中 */
    setCenter() {
        // console.log(1111)
        let viewSIze = this.getBackPoint(this.dataService.points);
        if (viewSIze.width != 0 && viewSIze.height != 0) {
            let zoom = this.getBackZoom(viewSIze, {
                width: window.innerWidth - 500,
                height: window.innerHeight - 300
            });
            this.dataService.cmd.floorplan.zoom = zoom;
            let left = this.dataService.cache.floorplan.centerData.left - (viewSIze.center.x - Math.abs(this.dataService.cache.floorplan.centerData.left)) * this.dataService.cmd.floorplan.zoom;
            let top = this.dataService.cache.floorplan.centerData.top - (viewSIze.center.y - Math.abs(this.dataService.cache.floorplan.centerData.top)) * this.dataService.cmd.floorplan.zoom;
            this.dataService.cmd.floorplan.left = left;
            this.dataService.cmd.floorplan.top = top;
        }
    }
    getBackZoom(viewSize, rectSize) {
        if (viewSize.width / viewSize.height > rectSize.width / rectSize.height) {
            return rectSize.width / viewSize.width;
        }
        else {
            return rectSize.height / viewSize.height;
        }
    }
    getBackPoint(obj) {
        let maxX = 0;
        let maxY = 0;
        for (let i in obj) {
            if (obj[i].pos.x > maxX) {
                maxX = obj[i].pos.x;
            }
            if (obj[i].pos.y > maxY) {
                maxY = obj[i].pos.y;
            }
        }
        let minX = maxX;
        let minY = maxY;
        for (let i in obj) {
            if (obj[i].pos.x < minX) {
                minX = obj[i].pos.x;
            }
            if (obj[i].pos.y < minY) {
                minY = obj[i].pos.y;
            }
        }
        return {
            width: maxX - minX,
            height: maxY - minY,
            center: {
                x: (minX + maxX) / 2,
                y: (minY + maxY) / 2
            }
        };
    }
}
JFloorplan.ctorParameters = () => [
    { type: JFloorplanInitType },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__["JdesignDataService"] }
];
class JFloorplanInitType {
}
class BackImg {
}


/***/ }),

/***/ "./src/app/svg/common/jdesign/JFurniture.ts":
/*!**************************************************!*\
  !*** ./src/app/svg/common/jdesign/JFurniture.ts ***!
  \**************************************************/
/*! exports provided: JFurniture, JFurnitureInitType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JFurniture", function() { return JFurniture; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JFurnitureInitType", function() { return JFurnitureInitType; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _JGeometry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./JGeometry */ "./src/app/svg/common/jdesign/JGeometry.ts");
/* harmony import */ var _three_jDesign3D_JGeometry3D__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../three/jDesign3D/JGeometry3D */ "./src/app/three/jDesign3D/JGeometry3D.ts");




class JFurniture extends _three_jDesign3D_JGeometry3D__WEBPACK_IMPORTED_MODULE_3__["JGeometry3D"] {
    constructor(obj, dataService, DUService) {
        super(obj, dataService, DUService, 'furniture');
        this.dataService = dataService;
        this.DUService = DUService;
        this.dataService.furnitures[this.id] = this;
    }
}
JFurniture.ctorParameters = () => [
    { type: JFurnitureInitType },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_1__["JdesignUtil2dService"] }
];
class JFurnitureInitType extends _JGeometry__WEBPACK_IMPORTED_MODULE_2__["JGeometryInit"] {
}


/***/ }),

/***/ "./src/app/svg/common/jdesign/JGeometry.ts":
/*!*************************************************!*\
  !*** ./src/app/svg/common/jdesign/JGeometry.ts ***!
  \*************************************************/
/*! exports provided: JGeometry, JGeometryInit */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JGeometry", function() { return JGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JGeometryInit", function() { return JGeometryInit; });
/* harmony import */ var _JDesign__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./JDesign */ "./src/app/svg/common/jdesign/JDesign.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");



class JGeometry extends _JDesign__WEBPACK_IMPORTED_MODULE_0__["JDesign"] {
    constructor(obj, dataService, DUService, geometryType) {
        super({ type: geometryType, id: obj.id, flag: obj.flag }, dataService);
        this.dataService = dataService;
        this.DUService = DUService;
        this.geometryType = geometryType;
        this.mirror = obj.mirror ? obj.mirror : false;
        this.size = obj.size ? obj.size : null;
        this.pos = obj.pos ? obj.pos : { x: 0, y: 0 };
        this.wallID = obj.wallID ? obj.wallID : null;
        this.distancePer = obj.distancePer ? obj.distancePer : 0;
        this.url2D = obj.url2D ? obj.url2D : null;
        this.url3D = obj.url3D ? obj.url3D : null;
        this.radian = obj.radian ? obj.radian : 0;
        this.floorHeight = obj.floorHeight;
        this.hgUrl = obj.hgUrl ? obj.hgUrl : '';
        this.mode = 'move';
        this.wallOut = obj.wallOut ? obj.wallOut : false;
    }
    /** 2d图片路径 */
    get url2D() { return this._url2D; }
    set url2D(obj) { this._url2D = obj; }
    /** 3d模型路径 */
    get url3D() { return this._url3D; }
    set url3D(obj) { this._url3D = obj; }
    /** hg模型路径 */
    get hgUrl() { return this._hgUrl; }
    set hgUrl(obj) { this._hgUrl = obj; }
    /** 离地高度 */
    get floorHeight() { return this._floorHeight; }
    set floorHeight(obj) { this._floorHeight = obj; }
    /** 坐标 */
    get pos() { return this._pos; }
    set pos(obj) { this._pos = obj; }
    /** 弧度 */
    get radian() { return this._radian; }
    set radian(obj) { this._radian = obj; }
    get size() { return this._size; }
    set size(obj) { this._size = obj; }
    /** 镜像 */
    get mirror() { return this._mirror; }
    set mirror(obj) { this._mirror = obj; }
    /** 墙索引 */
    get wallID() { return this._wallID; }
    set wallID(data) { this._wallID = data; }
    /** 墙内外 */
    get wallOut() { return this._wallOut; }
    set wallOut(data) { this._wallOut = data; }
    get distancePer() { return this._distancePer; }
    set distancePer(obj) { this._distancePer = obj; }
    /** 获取角度 */
    getRotate() {
        let rotate = this.radian * 180 / Math.PI;
        return rotate;
    }
    /** 获取wall对象 */
    getwall() {
        if (this.wallID == null)
            return null;
        else {
            let wall = this.dataService.walls[this.wallID];
            return wall;
        }
    }
    /** 获取像素size */
    getPixSize() {
        let newSize = {
            width: this.dataService.cmd.getLengthTransPixel(this.size.width, 'mm'),
            height: this.dataService.cmd.getLengthTransPixel(this.size.height, 'mm')
        };
        return newSize;
    }
    /** 获取像素半径长度 */
    getPixR() {
        let size = this.getPixSize();
        let distance = Math.sqrt(Math.pow(size.width / 2, 2) + Math.pow(size.height / 2, 2));
        return distance;
    }
}
JGeometry.ctorParameters = () => [
    { type: JGeometryInit },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"] },
    { type: String }
];
class JGeometryInit {
}


/***/ }),

/***/ "./src/app/svg/common/jdesign/JIcon.ts":
/*!*********************************************!*\
  !*** ./src/app/svg/common/jdesign/JIcon.ts ***!
  \*********************************************/
/*! exports provided: JIcon */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JIcon", function() { return JIcon; });
class JIcon {
    constructor(mainUrl, data) {
        this._useNames = [];
        this._noNames = [];
        this.mainUrl = mainUrl;
        this.iconData = data;
    }
    get iconData() { return this._iconData; }
    set iconData(data) { this._iconData = data; }
    get mainUrl() { return this._mainUrl; }
    set mainUrl(data) { this._mainUrl = data; }
    get useNames() { return this._useNames; }
    set useNames(data) { this._useNames = data; }
    get noNames() { return this._noNames; }
    set noNames(data) { this._noNames = data; }
    /** 获取图标 */
    getIco(name) {
        this.useNames[name] = true;
        let url = this.iconData[name];
        if (url == undefined) {
            this.noNames[name] = true;
            url = this.iconData['default'];
        }
        if (url[0] == '#')
            return url;
        else
            url = this.mainUrl + '/' + url;
        return url;
    }
    getUseNames() {
        let arr = [];
        for (let key in this.useNames) {
            arr.push(key);
        }
        return arr;
    }
    getNoNames() {
        let arr = [];
        for (let key in this.noNames) {
            arr.push(key);
        }
        return arr;
    }
}
JIcon.ctorParameters = () => [
    { type: String },
    { type: undefined }
];


/***/ }),

/***/ "./src/app/svg/common/jdesign/JJSON.ts":
/*!*********************************************!*\
  !*** ./src/app/svg/common/jdesign/JJSON.ts ***!
  \*********************************************/
/*! exports provided: JJSON */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JJSON", function() { return JJSON; });
class JJSON {
    constructor() {
        this._wallPaper = undefined;
        this._footLine = undefined;
        this._WinFrame = undefined;
        this._doorFrame = undefined;
        this._plasterCornice = undefined;
        this._doorFramePics = undefined;
        this._plasterLinePics = undefined;
        this._footLinePics = undefined;
        this._floorPics = undefined;
        this._roofPics = undefined;
        this._marblePics = undefined;
        this._roomType = undefined;
    }
    /** 墙贴图 */
    get wallPaper() { return this._wallPaper; }
    set wallPaper(data) { this._wallPaper = data; }
    /** 地脚线 */
    get footLine() { return this._footLine; }
    set footLine(data) { this._footLine = data; }
    /** 窗框 */
    get winFrame() { return this._WinFrame; }
    set winFrame(data) {
        this._WinFrame = data;
    }
    /** 门框 */
    get doorFrame() { return this._doorFrame; }
    set doorFrame(data) {
        this._doorFrame = data;
    }
    /** 石膏线 */
    get plasterCornice() { return this._plasterCornice; }
    set plasterCornice(data) {
        this._plasterCornice = data;
    }
    /** 门框图片 */
    get doorFramePics() { return this._doorFramePics; }
    set doorFramePics(data) { this._doorFramePics = data; }
    /** 石灰线图片 */
    get plasterLinePics() { return this._plasterLinePics; }
    set plasterLinePics(data) { this._plasterLinePics = data; }
    /** 地脚线 */
    get footLinePics() { return this._footLinePics; }
    set footLinePics(data) { this._footLinePics = data; }
    /** 地板图 */
    get floorPics() { return this._floorPics; }
    set floorPics(data) { this._floorPics = data; }
    /** 天花贴图 */
    get roofPics() { return this._roofPics; }
    set roofPics(data) { this._roofPics = data; }
    /** 飘窗贴图 */
    get marblePics() { return this._marblePics; }
    set marblePics(data) { this._marblePics = data; }
    /** 空间类型 */
    get roomType() { return this._roomType; }
    set roomType(data) { this._roomType = data; }
}


/***/ }),

/***/ "./src/app/svg/common/jdesign/JLUWin.ts":
/*!**********************************************!*\
  !*** ./src/app/svg/common/jdesign/JLUWin.ts ***!
  \**********************************************/
/*! exports provided: JLUWin, JLUWinTypeInit */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JLUWin", function() { return JLUWin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JLUWinTypeInit", function() { return JLUWinTypeInit; });
/* harmony import */ var _JDesign__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./JDesign */ "./src/app/svg/common/jdesign/JDesign.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");



class JLUWin extends _JDesign__WEBPACK_IMPORTED_MODULE_0__["JDesign"] {
    constructor(type, obj, dataService, DUService) {
        super({ type: type, id: obj.id, flag: obj.flag }, dataService);
        this.dataService = dataService;
        this.DUService = DUService;
        this.leftDistance = obj.leftDistance ? obj.leftDistance : 0;
        this.rightDistance = obj.rightDistance ? obj.rightDistance : 0;
        this.leftThickness = obj.leftThickness ? obj.leftThickness : 0;
        this.rightThickness = obj.rightThickness ? obj.rightThickness : 0;
        this.outLeftDistance = obj.outLeftDistance ? obj.outLeftDistance : 0;
        this.outRightDistance = obj.outRightDistance ? obj.outRightDistance : 0;
        this.j2d = obj.j2d ? obj.j2d : undefined;
        this.floorHeight = obj.floorHeight ? obj.floorHeight : 0;
        this.height3D = obj.height3D ? obj.height3D : 0;
        this.radian = obj.radian ? obj.radian : 0;
        this.pos = obj.pos ? obj.pos : { x: 0, y: 0 };
        this.isTrans = obj.isTrans ? obj.isTrans : false;
    }
    get radian() { return this._radian; }
    set radian(data) { this._radian = data; }
    /** 坐标 */
    get pos() { return this._pos; }
    set pos(data) { this._pos = data; }
    /* j2d数据 */
    get j2d() { return this._j2d; }
    set j2d(data) { this._j2d = data; }
    /* 3d高度 */
    get height3D() { return this._height3D; }
    set height3D(data) { this._height3D = data; }
    /* 离地高度 */
    get floorHeight() { return this._floorHeight; }
    set floorHeight(data) { this._floorHeight = data; }
    /** 左边长度 */
    get leftDistance() { return this._leftDistance; }
    set leftDistance(data) { this._leftDistance = data; }
    /* 左边外长度 */
    get outLeftDistance() { return this._outLeftDistance; }
    set outLeftDistance(data) { this._outLeftDistance = data; }
    /** 左边宽度 */
    get leftThickness() { return this._leftThickness; }
    set leftThickness(data) { this._leftThickness = data; }
    /** 右边长度 */
    get rightDistance() { return this._rightDistance; }
    set rightDistance(data) { this._rightDistance = data; }
    /* 右边外长度 */
    get outRightDistance() { return this._outRightDistance; }
    set outRightDistance(data) { this._outRightDistance = data; }
    /** 获取右边宽度 */
    get rightThickness() { return this._rightThickness; }
    set rightThickness(data) { this._rightThickness = data; }
    get isTrans() { return this._isTrans; }
    set isTrans(obj) { this._isTrans; }
    /** 获取弧度 */
    getRadian(wall, point) {
        let pointArr = wall.getPointArr();
        if (point.id == pointArr[0].id)
            return wall.getRadian();
        else
            return wall.getRadian() + Math.PI;
    }
}
JLUWin.ctorParameters = () => [
    { type: String },
    { type: JLUWinTypeInit },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"] }
];
class JLUWinTypeInit {
}


/***/ }),

/***/ "./src/app/svg/common/jdesign/JLWin.ts":
/*!*********************************************!*\
  !*** ./src/app/svg/common/jdesign/JLWin.ts ***!
  \*********************************************/
/*! exports provided: JLWin, JLWinTypeInit */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JLWin", function() { return JLWin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JLWinTypeInit", function() { return JLWinTypeInit; });
/* harmony import */ var _three_jDesign3D_JLUWin3D__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../three/jDesign3D/JLUWin3D */ "./src/app/three/jDesign3D/JLUWin3D.ts");
/* harmony import */ var _JLUWin__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./JLUWin */ "./src/app/svg/common/jdesign/JLUWin.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");




class JLWin extends _three_jDesign3D_JLUWin3D__WEBPACK_IMPORTED_MODULE_0__["JLUWin3D"] {
    constructor(obj, dataService, DUService) {
        super("LWin", obj, dataService, DUService);
        this.dataService = dataService;
        this.DUService = DUService;
        this.pointID = obj.pointID ? obj.pointID : undefined;
        this.dataService.LWins[this.id] = this;
    }
    /** 点ID */
    get pointID() { return this._pointID; }
    set pointID(data) { this._pointID = data; }
    getPoint() {
        if (!this.pointID)
            return undefined;
        return this.dataService.points[this.pointID];
    }
    get leftStartPoint() {
        return this.getPoint();
    }
    get rightStartPoint() {
        return this.getPoint();
    }
    get leftStartPos() {
        return this.pos;
    }
    get rightStartPos() {
        return this.pos;
    }
    isAbsorb() {
        let point = this.getPoint();
        return point ? true : false;
    }
}
JLWin.ctorParameters = () => [
    { type: JLWinTypeInit },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_3__["JdesignUtil2dService"] }
];
class JLWinTypeInit extends _JLUWin__WEBPACK_IMPORTED_MODULE_1__["JLUWinTypeInit"] {
}


/***/ }),

/***/ "./src/app/svg/common/jdesign/JParamsModel.ts":
/*!****************************************************!*\
  !*** ./src/app/svg/common/jdesign/JParamsModel.ts ***!
  \****************************************************/
/*! exports provided: JParamsModel, movePointDetail, inputDetail, JParamsModelInitType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JParamsModel", function() { return JParamsModel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "movePointDetail", function() { return movePointDetail; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "inputDetail", function() { return inputDetail; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JParamsModelInitType", function() { return JParamsModelInitType; });
/* harmony import */ var _JDesign__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./JDesign */ "./src/app/svg/common/jdesign/JDesign.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");



class JParamsModel extends _JDesign__WEBPACK_IMPORTED_MODULE_0__["JDesign"] {
    constructor(obj, dataService, DUService) {
        super({ type: 'paramsModel', id: obj.id }, dataService);
        this.dataService = dataService;
        this.DUService = DUService;
        this.j2d = obj.j2d ? obj.j2d : undefined;
        this.originJ2d = obj.originJ2d ? obj.originJ2d : undefined;
        this.absorbData = obj.absorbData ? obj.absorbData : undefined;
        this.pos = obj.pos ? obj.pos : { x: 0, y: 0 };
        this.radian = obj.radian ? obj.radian : 0;
        this.inputData = obj.inputData ? obj.inputData : undefined;
        this.movePointData = obj.movePointData ? obj.movePointData : undefined;
        this.dataService.paramsModels[this.id] = this;
    }
    /* j2d数据 */
    get j2d() { return this._j2d; }
    set j2d(data) { this._j2d = data; }
    /* 原始j2d */
    get originJ2d() { return this._originJ2d; }
    set originJ2d(data) { this._originJ2d = data; }
    get absorbData() { return this._absorbData; }
    set absorbData(data) { this._absorbData = data; }
    /* 坐标 */
    get pos() { return this._pos; }
    set pos(data) { this._pos = data; }
    /* 弧度 */
    get radian() { return this._radian; }
    set radian(data) { this._radian = data; }
    /* 交互数据 */
    get movePointData() { return this._movePointData; }
    set movePointData(data) { this._movePointData = data; }
    /* 输入数据 */
    get inputData() { return this._inputData; }
    set inputData(data) { this._inputData = data; }
    getAbsorbObj() {
        if (!this.absorbData || !this.absorbData.objType || !this.absorbData.objID)
            return undefined;
        switch (this.absorbData.objType) {
            case "wall":
                return this.dataService.walls[this.absorbData.objID];
            case "point":
                return this.dataService.points[this.absorbData.objID];
        }
    }
}
JParamsModel.ctorParameters = () => [
    { type: JParamsModelInitType },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"] }
];
class AbsorbDetail {
}
class movePointDetail {
}
class inputDetail {
}
class JParamsModelInitType {
}


/***/ }),

/***/ "./src/app/svg/common/jdesign/JPoint.ts":
/*!**********************************************!*\
  !*** ./src/app/svg/common/jdesign/JPoint.ts ***!
  \**********************************************/
/*! exports provided: JPoint, JPointInitType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JPoint", function() { return JPoint; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JPointInitType", function() { return JPointInitType; });
/* harmony import */ var _JDesign__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./JDesign */ "./src/app/svg/common/jdesign/JDesign.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");



/** 点类 */
class JPoint extends _JDesign__WEBPACK_IMPORTED_MODULE_0__["JDesign"] {
    constructor(obj, dataService, DUService) {
        super({ type: 'point', id: obj.id }, dataService);
        this.dataService = dataService;
        this.DUService = DUService;
        this.pos = obj.pos != undefined ? obj.pos : null;
        this.cowallIDs = obj.cowallIDs != undefined ? obj.cowallIDs : [];
        this.cornWinID = obj.cornWinID ? obj.cornWinID : null;
        this.dataService.points[this.id] = this;
    }
    /** 父对象cowallID*/
    get cowallIDs() {
        return this._cowallIDs;
    }
    set cowallIDs(obj) {
        this._cowallIDs = obj;
        //this.strongUpdate()
    }
    /** 转角飘窗IDs */
    get cornWinID() { return this._cornWinID; }
    set cornWinID(data) { this._cornWinID = data; }
    /** 坐标 */
    get pos() { return this._pos; }
    set pos(obj) {
        this._pos = obj;
    }
    /** 获取射线cowall */
    getRayCowallArr() {
        let cowallArr = this.getCowallArr();
        for (let i = cowallArr.length - 1; i >= 0; i--) {
            if (cowallArr[i].getPointStart().id != this.id) {
                cowallArr.splice(i, 1);
            }
        }
        return cowallArr;
    }
    /** 获取cowall */
    getCowallArr() {
        let cowallArr = [];
        if (this.cowallIDs == undefined || this.cowallIDs == null)
            return [];
        for (let i = 0; i < this.cowallIDs.length; i++) {
            let obj = this.dataService.cowalls[this.cowallIDs[i]];
            cowallArr.push(obj);
        }
        return cowallArr;
    }
    /** 获取转角飘窗对象 */
    getCornWin() {
        if (this.cornWinID == null)
            return null;
        else
            return this.dataService.cornerWins[this.cornWinID];
    }
    /** 获取wall */
    getWallArr() {
        let cowallArr = this.getCowallArr();
        let wallArr = [];
        let wallIDArr = [];
        let wall = null;
        for (let i = 0; i < cowallArr.length; i++) {
            wallIDArr.push(cowallArr[i].edgeID);
        }
        /** 去数组重复 */
        wallIDArr = this.DUService.cal.unique(wallIDArr);
        for (let i = 0; i < wallIDArr.length; i++) {
            wall = this.dataService.walls[wallIDArr[i]];
            wallArr.push(wall);
        }
        return wallArr;
    }
    /** 获取空间ID */
    getRoomsID() {
        let cowallArr = this.getCowallArr();
        let roomsID = [];
        for (let i = 0; i < cowallArr.length; i++) {
            if (cowallArr[i].roomID != null || cowallArr[i].roomID != undefined)
                roomsID.push(cowallArr[i].roomID);
        }
        roomsID = this.DUService.cal.unique(roomsID);
        return roomsID;
    }
    /** 获取空间 */
    getRoomArr() {
        let roomsID = this.getRoomsID();
        let roomArr = [];
        for (let i = 0; i < roomsID.length; i++) {
            roomArr.push(this.dataService.rooms[roomsID[i]]);
        }
        return roomArr;
    }
    /** set移动 */
    setTrans(plusPos, RadianInterval) {
        if (RadianInterval == undefined)
            this.pos = { x: this.pos.x + plusPos.x, y: this.pos.y + plusPos.y };
        else {
            let pos = { x: this.pos.x + plusPos.x, y: this.pos.y + plusPos.y };
            let pointArr = this.getNearPointArr();
            let point = null;
            for (point of pointArr) {
                let radian = this.DUService.pos.getRadian(pos, point.pos);
                if (Math.abs(radian % (Math.PI / 2)) < RadianInterval) {
                    console.log(radian);
                }
            }
            this.pos = { x: this.pos.x + plusPos.x, y: this.pos.y + plusPos.y };
        }
    }
    /** 获取相邻的点 */
    getNearPointArr() {
        let wallArr = this.getWallArr();
        let nearPointArr = [];
        let pointArr = null;
        for (let i = 0; i < wallArr.length; i++) {
            pointArr = wallArr[i].getPointArr();
            if (pointArr[0].id == this.id) {
                nearPointArr.push(pointArr[1]);
            }
            else {
                nearPointArr.push(pointArr[0]);
            }
        }
        return nearPointArr;
    }
}
JPoint.ctorParameters = () => [
    { type: JPointInitType },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"] }
];
class JPointInitType {
}


/***/ }),

/***/ "./src/app/svg/common/jdesign/JRoof.ts":
/*!*********************************************!*\
  !*** ./src/app/svg/common/jdesign/JRoof.ts ***!
  \*********************************************/
/*! exports provided: JRoof, JRoofInitType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JRoof", function() { return JRoof; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JRoofInitType", function() { return JRoofInitType; });
/* harmony import */ var _JDesign__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./JDesign */ "./src/app/svg/common/jdesign/JDesign.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");



class JRoof extends _JDesign__WEBPACK_IMPORTED_MODULE_0__["JDesign"] {
    constructor(obj, dataService, DUService) {
        super({ type: 'roof', id: obj.id, }, dataService);
        this.dataService = dataService;
        this.DUService = DUService;
        this.roomID = obj.roomID;
        this.dataService.roofs[this.id] = this;
    }
    /** 空间id */
    get roomID() { return this._roomID; }
    set roomID(data) { this._roomID = data; }
    /** 获取空间 */
    getRoom() {
        let room = this.dataService.rooms[this.roomID];
        return room;
    }
    /** 获取轮廓 */
    getInLine() {
        let room = this.getRoom();
        return room.getInLine();
    }
}
JRoof.ctorParameters = () => [
    { type: JRoofInitType },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"] }
];
class JRoofInitType {
}


/***/ }),

/***/ "./src/app/svg/common/jdesign/JRoom.ts":
/*!*********************************************!*\
  !*** ./src/app/svg/common/jdesign/JRoom.ts ***!
  \*********************************************/
/*! exports provided: JRoom, JRoomInitType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JRoom", function() { return JRoom; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JRoomInitType", function() { return JRoomInitType; });
/* harmony import */ var _JDesign__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./JDesign */ "./src/app/svg/common/jdesign/JDesign.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");



class JRoom extends _JDesign__WEBPACK_IMPORTED_MODULE_0__["JDesign"] {
    constructor(obj, dataService, DUService) {
        super({ type: 'room', id: obj.id }, dataService);
        this.dataService = dataService;
        this.DUService = DUService;
        /* 是否可以自动移动 */
        this._isAutoMoveAreaPos = true;
        this.parentID = obj.parentID != undefined ? obj.parentID : null;
        this.cowallIDs = obj.cowallIDs != undefined ? obj.cowallIDs : [];
        this.floorID = obj.floorID != undefined ? obj.floorID : null;
        this.roofID = obj.roofID != undefined ? obj.roofID : null;
        this.roomName = obj.roomName != undefined ? obj.roomName : '未命名';
        this.displayPos = obj.displayPos != undefined ? obj.displayPos : undefined;
        this.isAutoMoveAreaPos = obj.isAutoMoveAreaPos != undefined ? obj.isAutoMoveAreaPos : true;
        this.dataService.rooms[this.id] = this;
        this.dataService.floorplan.roomsID.push(this.id);
        // if (obj.floorID != undefined)
        //     this.floorID = obj.floorID
        //this.floor = new JFloor()
    }
    /** 父对象 */
    get parentID() { return this._parentID; }
    set parentID(obj) {
        this._parentID = obj;
        //this.strongUpdate()
    }
    /** 子对象cowallID(联动触发cowall) */
    get cowallIDs() { return this._cowallIDs; }
    set cowallIDs(obj) {
        this._cowallIDs = obj;
        for (let i = 0; i < obj.length; i++) {
            let cowall = this.dataService.cowalls[obj[i]];
            if (cowall)
                cowall.roomID = this.id;
        }
        //this.strongUpdate()
    }
    /** floor对象 */
    get floorID() { return this._floorID; }
    set floorID(obj) {
        this._floorID = obj;
    }
    /** 天花 */
    get roofID() { return this._roofID; }
    set roofID(data) {
        this._roofID = data;
    }
    /** 空间名 */
    get roomName() { return this._roomName; }
    set roomName(data) { this._roomName = data; }
    /** 面积 */
    get areaCache() { return this._areaCache; }
    set areaCache(data) { this._areaCache = data; }
    /** 显示坐标 */
    get displayPos() { return this._displayPos; }
    set displayPos(data) { this._displayPos = data; }
    get isAutoMoveAreaPos() { return this._isAutoMoveAreaPos; }
    set isAutoMoveAreaPos(data) { this._isAutoMoveAreaPos = data; }
    /** 获取cowall集合带顺序 */
    getCowallArrBySort() {
        if (this.cowallIDs.length == 0)
            return [];
        let cowallArr = [];
        let newCowall = this.dataService.cowalls[this.cowallIDs[0]];
        cowallArr.push(newCowall);
        let startID = newCowall.prevID;
        while (startID != newCowall.id) {
            newCowall = this.dataService.cowalls[newCowall.nextID];
            // console.log(newCowall)
            cowallArr.push(newCowall);
        }
        return cowallArr;
    }
    /** 获取cowall集合 */
    getCowallArr() {
        let cowallArr = [];
        for (let i = 0; i < this.cowallIDs.length; i++) {
            cowallArr.push(this.dataService.cowalls[this.cowallIDs[i]]);
        }
        return cowallArr;
    }
    /** 获取wall集合,带有顺序 */
    getWallArr() {
        let cowalls = this.getCowallArrBySort();
        if (cowalls.length == 0)
            return [];
        let wallArr = [];
        let wall = null;
        for (let i = 0; i < cowalls.length; i++) {
            wall = cowalls[i].getWall();
            wallArr.push(wall);
        }
        return wallArr;
    }
    /** 获取点集合,带有顺序 */
    getPointArr() {
        let cowalls = this.getCowallArrBySort();
        if (cowalls.length == 0)
            return [];
        let pointArr = [];
        let point = null;
        for (let i = 0; i < cowalls.length; i++) {
            point = cowalls[i].getPointStart();
            pointArr.push(point);
        }
        return pointArr;
    }
    /** 获取坐标集合,带有顺序 */
    getPosArr() {
        let points = this.getPointArr();
        if (points.length == 0)
            return [];
        let posArr = [];
        for (let i = 0; i < points.length; i++) {
            posArr.push(points[i].pos);
        }
        return posArr;
    }
    /** 获取地板 */
    getFloor() {
        let floor = this.dataService.floors[this.floorID];
        return floor;
    }
    /** 获取天花 */
    getRoof() {
        let roof = this.dataService.roofs[this.roofID];
        return roof;
    }
    /** 获取轮廓坐标 */
    getInLine() {
        let cowallArr = this.getCowallArrBySort();
        cowallArr.push(cowallArr[0]);
        let posArr = [];
        for (let i = 0; i < cowallArr.length - 1; i++) {
            let inLine = cowallArr[i].getInLine();
            if (!inLine)
                return [];
            posArr.push(inLine[0]);
            if (this.DUService.pos.isParallelRadian(cowallArr[i].getRadian(), cowallArr[i + 1].getRadian()) && cowallArr[i].getWall().thickness != cowallArr[i + 1].getWall().thickness) {
                posArr.push(inLine[1]);
            }
        }
        return posArr;
    }
    /** 重设cowalls */
    resetCowallIDs(cowall) {
        let cowallIDs = [];
        let endID = cowall.id;
        cowallIDs.push(cowall.id);
        let nextCowall = cowall.getNextCowall();
        while (nextCowall.id != endID) {
            cowallIDs.push(nextCowall.id);
            nextCowall = nextCowall.getNextCowall();
        }
        this.cowallIDs = cowallIDs;
    }
}
JRoom.ctorParameters = () => [
    { type: JRoomInitType },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"] }
];
class JRoomInitType {
}


/***/ }),

/***/ "./src/app/svg/common/jdesign/JUWin.ts":
/*!*********************************************!*\
  !*** ./src/app/svg/common/jdesign/JUWin.ts ***!
  \*********************************************/
/*! exports provided: JUWin, JUWinTypeInit */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JUWin", function() { return JUWin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JUWinTypeInit", function() { return JUWinTypeInit; });
/* harmony import */ var _three_jDesign3D_JLUWin3D__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../three/jDesign3D/JLUWin3D */ "./src/app/three/jDesign3D/JLUWin3D.ts");
/* harmony import */ var _JLUWin__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./JLUWin */ "./src/app/svg/common/jdesign/JLUWin.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");




class JUWin extends _three_jDesign3D_JLUWin3D__WEBPACK_IMPORTED_MODULE_0__["JLUWin3D"] {
    constructor(obj, dataService, DUService) {
        super("UWin", obj, dataService, DUService);
        this.dataService = dataService;
        this.DUService = DUService;
        this.centerWallID = obj.centerWallID ? obj.centerWallID : undefined;
        this.centerRadian = obj.centerRadian ? obj.centerRadian : 0;
        this.dataService.UWins[this.id] = this;
    }
    /** 中间墙id */
    get centerWallID() { return this._centerWallID; }
    set centerWallID(data) { this._centerWallID = data; }
    /* 中间弧度 */
    get centerRadian() { return this._centerRadian; }
    set centerRadian(data) { this._centerRadian = data; }
    /** 获取中间墙 */
    getCenterWall() {
        if (this.centerWallID)
            return this.dataService.walls[this.centerWallID];
        return undefined;
    }
    get leftStartPoint() {
        let wall = this.getCenterWall();
        if (!wall)
            return undefined;
        return wall.getPoint(0);
    }
    get rightStartPoint() {
        let wall = this.getCenterWall();
        if (!wall)
            return undefined;
        return wall.getPoint(1);
    }
    getLeftWall() {
        let wall = this.getCenterWall();
        if (wall) {
            let cowall = wall.getCowall();
            let prevCowall = cowall.getPrevCowall();
            let prevWall = prevCowall.getWall();
            return prevWall;
        }
        return undefined;
    }
    getRightWall() {
        let wall = this.getCenterWall();
        if (wall) {
            let cowall = wall.getCowall();
            let nextCowall = cowall.getNextCowall();
            let nextWall = nextCowall.getWall();
            return nextWall;
        }
        return undefined;
    }
    /** 获取左边墙弧度 */
    getLeftRadian() {
        let point = this.leftStartPoint;
        if (!point)
            return -Math.PI / 2;
        let wall = this.getLeftWall();
        if (!wall)
            return -Math.PI / 2;
        return this.getRadian(wall, point);
    }
    /** 获取右边墙弧度 */
    getRightRadian() {
        let point = this.rightStartPoint;
        if (!point)
            return -Math.PI / 2;
        let wall = this.getRightWall();
        if (!wall)
            return -Math.PI / 2;
        return this.getRadian(wall, point);
    }
    getCenterLine(distance) {
        let rayPos = this.DUService.pos.getRayPos(this.pos, this.centerRadian, distance);
        return [{ x: this.pos.x, y: this.pos.y }, rayPos];
    }
    isAbsorb() {
        let wall = this.getCenterWall();
        return wall ? true : false;
    }
}
JUWin.ctorParameters = () => [
    { type: JUWinTypeInit },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_3__["JdesignUtil2dService"] }
];
class JUWinTypeInit extends _JLUWin__WEBPACK_IMPORTED_MODULE_1__["JLUWinTypeInit"] {
}


/***/ }),

/***/ "./src/app/svg/common/jdesign/JWall.ts":
/*!*********************************************!*\
  !*** ./src/app/svg/common/jdesign/JWall.ts ***!
  \*********************************************/
/*! exports provided: JWall, JWallInitType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JWall", function() { return JWall; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JWallInitType", function() { return JWallInitType; });
/* harmony import */ var _JDesign__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./JDesign */ "./src/app/svg/common/jdesign/JDesign.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");



class JWall extends _JDesign__WEBPACK_IMPORTED_MODULE_0__["JDesign"] {
    constructor(obj, dataService, DUService) {
        super({ type: 'wall', id: obj.id }, dataService);
        this.dataService = dataService;
        this.DUService = DUService;
        /** 门 */
        this._doorIDs = [];
        /** 窗 */
        this._winIDs = [];
        /** 家具 */
        this._geometryIDs = [];
        /** 墙的轮廓 */
        this._outLine = null;
        /** 画墙轮廓(不一定是真实轮廓) */
        this._drawOutLine = undefined;
        /** 弧形半径 */
        this._arcRadius = undefined;
        /** 弧形圆点 */
        this._circlePos = undefined;
        /** 是否过短 */
        this._isVeryShort = false;
        /** 隐藏运算 */
        this._shadowRadian = undefined;
        this._shadowDistance = undefined;
        this.thickness = obj.thickness ? obj.thickness : this.dataService.cmd.wall.thickness;
        this.coedgeID = obj.coedgeID ? obj.coedgeID : null;
        this.doorIDs = obj.doorIDs ? obj.doorIDs : [];
        this.winIDs = obj.winIDs ? obj.winIDs : [];
        this.geometryIDs = obj.furnitureIDs ? obj.furnitureIDs : [];
        this.arcDistance = obj.arcDistance ? obj.arcDistance : 0;
        this.cornWinIDs = obj.cornWinIDs ? obj.cornWinIDs : [];
        this.wallType = obj.wallType ? obj.wallType : 0;
        this.arcPer = obj.arcPer ? obj.arcPer : 0;
        this.dataService.walls[this.id] = this;
    }
    /** 有序墙映射 */
    get coedgeID() { return this._coedgeID; }
    set coedgeID(obj) {
        this._coedgeID = obj;
        // if (this.coedgeID != undefined && this.coedgeID != null) {
        //     let cowall: JCowall = this.getCowall()
        //     if (cowall.edgeID != this.id)
        //         cowall.edgeID = this.id
        //     //this.strongUpdate()
        // }
    }
    /** 厚度 */
    get thickness() { return this._thickness; }
    set thickness(obj) {
        this._thickness = obj;
        //this.strongUpdate()
    }
    /** 门 */
    get doorIDs() { return this._doorIDs; }
    set doorIDs(obj) {
        this._doorIDs = obj;
        //this.strongUpdate()
    }
    /** 窗 */
    get winIDs() { return this._winIDs; }
    set winIDs(obj) { this._winIDs = obj; }
    /** 家具 */
    get geometryIDs() { return this._geometryIDs; }
    set geometryIDs(data) { this._geometryIDs = data; }
    /** 墙的轮廓 以从左往右为标准,坐标数组为: [[左上,左下],[右下,右上]] */
    get outLine() { return this._outLine; }
    set outLine(data) { this._outLine = data; }
    /**
     * 画墙轮廓(不一定是真实轮廓)
     * @returns 如果undefined,将返回outLine
     * @returns 以从左往右为标准,坐标数组为: [[左上,左下],[右下,右上]]
      */
    get drawOutLine() {
        if (!this._drawOutLine)
            return this.outLine;
        return this._drawOutLine;
    }
    set drawOutLine(data) { this._drawOutLine = data; }
    /** 弧形距离值(触发联动arcPer) */
    get arcDistance() { return this._arcDistance; }
    set arcDistance(data) {
        this.arcPer = data / this.getDistance();
        this._arcDistance = data;
    }
    /** 弧形半径 */
    get arcRadius() { return this._arcRadius; }
    set arcRadius(data) { this._arcRadius = data; }
    /** 弧形圆点 */
    get circlePos() { return this._circlePos; }
    set circlePos(data) { this._circlePos = data; }
    /** 弧形比例 */
    get arcPer() { return this._arcPer; }
    set arcPer(data) { this._arcPer = data; }
    /** 转角飘窗IDs */
    get cornWinIDs() { return this._cornWinIDs; }
    set cornWinIDs(data) { this._cornWinIDs = data; }
    /** 墙类型 */
    get wallType() { return this._wallType; }
    set wallType(data) { this._wallType = data; }
    /** 是否过短 */
    get isVeryShort() { return this._isVeryShort; }
    set isVeryShort(data) { this._isVeryShort = data; }
    /** 获取点 */
    getPoint(num) {
        if (num != 0 && num != 1)
            return null;
        let cowall = this.getCowall();
        if (!cowall)
            return undefined;
        /** 为确定方向,以便让有序墙有个依赖 */
        if (!cowall.reversed) {
            let point = this.dataService.points[cowall.pointIDs[num]];
            return point;
        }
        else {
            let point = this.dataService.points[cowall.pointIDs[num == 0 ? 1 : 0]];
            return point;
        }
    }
    /** 是否大弧 */
    isBigArc() {
        if (this.arcDistance > this.arcRadius)
            return true;
        else
            return false;
    }
    /** 获取path */
    getPathPos() {
        if (this.isSamePos()) {
            return null;
        }
        else {
            /** new */
            let pathArr = [];
            return pathArr;
        }
    }
    /** 获取长度 */
    getDistance(reCal = false) {
        if (reCal || this._shadowDistance == undefined) {
            let posArr = this.getPosArr();
            let distance = this.DUService.pos.getDistance(posArr[0], posArr[1]);
            this._shadowDistance = distance;
            return distance;
        }
        return this._shadowDistance;
    }
    /** 获取点集合 有顺序的 */
    getPointArr() {
        let pointStart = this.getPoint(0);
        let pointEnd = this.getPoint(1);
        if (!pointStart || !pointEnd)
            return undefined;
        return [pointStart, pointEnd];
    }
    /** 获取点ID集合(无序) */
    getPointIDArr() {
        let cowall = this.dataService.cowalls[this.coedgeID];
        return cowall.pointIDs;
    }
    /** 获取中心点 */
    getCenterPos() {
        let posArr = this.getPosArr();
        let pos = this.DUService.pos.getCenterPos(posArr[0], posArr[1]);
        return pos;
    }
    /** 获取坐标 */
    getPosArr() {
        let pointArr = this.getPointArr();
        return [pointArr[0].pos, pointArr[1].pos];
    }
    /** 获取弧度
     * @param reCal 是否重新计算,默认false,从_shadowRadian里取数据
     */
    getRadian(reCal = false) {
        if (this._shadowRadian == undefined || reCal) {
            let posArr = this.getPosArr();
            let radian = this.DUService.pos.getRadian(posArr[0], posArr[1]);
            this._shadowRadian = radian;
            return radian;
        }
        return this._shadowRadian;
    }
    /** 获取角度 */
    getRotate() {
        let cowall = this.getCowall();
        return cowall.getRotate();
    }
    /** 获取有序墙集合 */
    getCowallArr() {
        let cowallArr = [];
        let obj = this.dataService.cowalls[this.coedgeID];
        if (!obj)
            return [];
        cowallArr.push(obj);
        if (obj.partnerID != null) {
            let objA = this.dataService.cowalls[obj.partnerID];
            cowallArr.push(objA);
        }
        return cowallArr;
    }
    /** 获取有序墙 */
    getCowall() {
        let cowall = this.dataService.cowalls[this.coedgeID];
        return cowall;
    }
    /** 是否为一点 */
    isSamePos() {
        let posArr = this.getPosArr();
        if (posArr[0].x == posArr[1].x && posArr[0].y == posArr[1].y)
            return true;
        else
            return false;
    }
    /** 获取反向墙 */
    getOppsiteCowall() {
        let cowall = this.getCowall();
        let newCowall = this.dataService.cowalls[cowall.partnerID];
        return newCowall;
    }
    /** 获取空间 */
    getRoomArr() {
        let cowallArr = this.getCowallArr();
        let roomArr = [];
        for (let cowall of cowallArr) {
            if (cowall.roomID != null) {
                let room = cowall.getRoom();
                roomArr.push(room);
            }
        }
        return roomArr;
    }
    /** 获取门集合 */
    getDoorArr() {
        if (this.doorIDs == null)
            return [];
        let doors = [];
        for (let i = 0; i < this.doorIDs.length; i++) {
            doors.push(this.dataService.doors[this.doorIDs[i]]);
        }
        return doors;
    }
    /** 获取窗集合 */
    getWinArr() {
        if (this.winIDs == null)
            return [];
        let wins = [];
        for (let i = 0; i < this.winIDs.length; i++) {
            wins.push(this.dataService.wins[this.winIDs[i]]);
        }
        return wins;
    }
    /** 获取家具集合 */
    getGeometryArr() {
        if (this.geometryIDs == null)
            return [];
        let geometry = [];
        for (let i = 0; i < this.geometryIDs.length; i++) {
            if (this.geometryIDs[i].indexOf('furniture') != -1)
                geometry.push(this.dataService.furnitures[this.geometryIDs[i]]);
            else {
                geometry.push(this.dataService.builds[this.geometryIDs[i]]);
            }
        }
        return geometry;
    }
    /** 获取附近的空间 */
    getNearRoomArr() {
        let pointArr = this.getPointArr();
        let cowallArr = [];
        cowallArr.push(...pointArr[0].getCowallArr());
        cowallArr.push(...pointArr[1].getCowallArr());
        let roomArr = [];
        let cowall = null;
        let room = null;
        let same = false;
        let newRoom = null;
        for (cowall of cowallArr) {
            if (cowall.roomID != null) {
                newRoom = cowall.getRoom();
                same = false;
                for (room of roomArr) {
                    if (room.id == newRoom.id)
                        same = true;
                    break;
                }
                if (!same) {
                    roomArr.push(newRoom);
                }
            }
        }
        return roomArr;
    }
    /** 获取所有的相邻墙(排除自己) */
    getNearWallArr() {
        let pointArr = this.getPointArr();
        let handWalls = pointArr[0].getWallArr();
        this.DUService.cal.removeByAttr(handWalls, 'id', this.id);
        let endWalls = pointArr[1].getWallArr();
        this.DUService.cal.removeByAttr(endWalls, 'id', this.id);
        handWalls.push(...endWalls);
        return handWalls;
    }
    /** 获取转角飘窗数组 */
    getCornWinArr() {
        let cornWins = [];
        for (let i = 0; i < this.cornWinIDs.length; i++) {
            cornWins.push(this.dataService.cornerWins[this.cornWinIDs[i]]);
        }
        return cornWins;
    }
    /** 获取内线坐标 */
    getInLine() {
        return [this.outLine[0][1], this.outLine[1][0]];
    }
    /** 获取显示用的内线坐标 */
    getDrawInLine() {
        return [this.drawOutLine[0][1], this.drawOutLine[1][0]];
    }
    /** 获取内线长度 */
    getInLineDistance() {
        let posArr = this.getInLine();
        return this.DUService.pos.getDistance(posArr[0], posArr[1]);
    }
    /** 获取外线坐标 */
    getOutLine() {
        return [this.outLine[1][1], this.outLine[0][0]];
    }
    /** 获取显示用的外线坐标 */
    getDrawOutLine() {
        return [this.drawOutLine[1][1], this.drawOutLine[0][0]];
    }
    /** 获取外线长度 */
    getOutLineDistance() {
        let posArr = this.getOutLine();
        return this.DUService.pos.getDistance(posArr[0], posArr[1]);
    }
    /** 转弧形墙 */
    transArc(arcDistance) {
        this.arcDistance = arcDistance == undefined ? this.arcDistance : arcDistance;
        let distance = this.getDistance();
        let radius = (Math.pow(this.arcDistance, 2) + Math.pow(distance / 2, 2)) / (2 * this.arcDistance);
        this.arcRadius = radius;
        let posArr = this.getPosArr();
        let radian = this.getRadian();
        let centerPos = this.DUService.pos.getCenterPos(posArr[0], posArr[1]);
        let circlePos = this.DUService.pos.getRayPos(centerPos, radian - (Math.PI / 2), this.arcDistance - radius);
        this.circlePos = circlePos;
    }
}
JWall.ctorParameters = () => [
    { type: JWallInitType },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"] }
];
class JWallInitType {
}


/***/ }),

/***/ "./src/app/svg/common/jdesign/JWin.ts":
/*!********************************************!*\
  !*** ./src/app/svg/common/jdesign/JWin.ts ***!
  \********************************************/
/*! exports provided: JWin, JWinInitType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JWin", function() { return JWin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JWinInitType", function() { return JWinInitType; });
/* harmony import */ var _JDWAbstract__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./JDWAbstract */ "./src/app/svg/common/jdesign/JDWAbstract.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _three_jDesign3D_JDW3D__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../three/jDesign3D/JDW3D */ "./src/app/three/jDesign3D/JDW3D.ts");




class JWin extends _three_jDesign3D_JDW3D__WEBPACK_IMPORTED_MODULE_3__["JDW3D"] {
    constructor(obj, dataService, DUService) {
        super({ type: 'win', id: obj.id }, dataService, DUService);
        this.dataService = dataService;
        this.DUService = DUService;
        this.dataInit(obj);
        this.outThickness = obj.outThickness ? obj.outThickness : 0;
        this.outBoxThickness = obj.outBoxThickness ? obj.outBoxThickness : 0;
        this.isBay = obj.isBay ? obj.isBay : false;
        this.dataService.wins[this.id] = this;
    }
    /** 墙对象ID */
    // private _wall: string = null;
    /**  墙对象id 会联动触发  */
    set wallID(obj) {
        if (this.wallID != null) {
            if (this.oldWallID != this.wallID && this.wallID != obj) {
                let wall = this.getwall();
                this.oldWallID = wall ? this.wallID : undefined;
            }
            let wall = this.getwall();
            if (wall != undefined) {
                for (let i = 0; i < wall.winIDs.length; i++) {
                    if (wall.winIDs[i] == this.id) {
                        wall.winIDs.splice(i, 1);
                        break;
                    }
                }
            }
        }
        this._wall = obj;
        if (obj != undefined) {
            let wall = this.getwall();
            let same = false;
            for (let i = 0; i < wall.winIDs.length; i++) {
                if (wall.winIDs[i] == this.id) {
                    same = true;
                    break;
                }
            }
            if (!same) {
                wall.winIDs.push(this.id);
            }
        }
        //this.strongUpdate()
    }
    get wallID() { return this._wall; }
    getWallDWIDs() {
        let wall = this.getwall();
        if (wall != undefined)
            return wall.winIDs;
        return undefined;
    }
    /** 离外墙厚度(飘窗用的)  */
    get outThickness() { return this._outThickness; }
    set outThickness(data) { this._outThickness = data; }
    /** 离外墙框架的厚度(飘窗用的) */
    get outBoxThickness() { return this._outBoxThickness; }
    set outBoxThickness(data) { this._outBoxThickness = data; }
    /** 是否为飘窗 */
    get isBay() { return this._isBay; }
    set isBay(data) { this._isBay = data; }
}
JWin.ctorParameters = () => [
    { type: JWinInitType },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"] }
];
class JWinInitType extends _JDWAbstract__WEBPACK_IMPORTED_MODULE_0__["JDWInitType"] {
}


/***/ }),

/***/ "./src/app/svg/common/save/SaveType.ts":
/*!*********************************************!*\
  !*** ./src/app/svg/common/save/SaveType.ts ***!
  \*********************************************/
/*! exports provided: SaveType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SaveType", function() { return SaveType; });
var SaveType;
(function (SaveType) {
    class JDesign {
        constructor() {
            this.id = null;
            this.flag = null;
            this.type = null;
            this.mode = null;
        }
    }
    SaveType.JDesign = JDesign;
    class JPoint extends JDesign {
        constructor() {
            super();
            this.pos = null;
            this.cowallIDs = null;
        }
    }
    SaveType.JPoint = JPoint;
    class JWall extends JDesign {
        constructor() {
            super();
            this.coedgeID = null;
            this.thickness = null;
            this.doorIDs = null;
            this.winIDs = null;
            this.outLine = null;
            this.wallType = null;
            this.furnitureIDs = null;
            this.arcDistance = null;
            this.arcPer = null;
            this.cornWinIDs = null;
            // this.windowsID = null
        }
    }
    SaveType.JWall = JWall;
    class JCowall extends JDesign {
        constructor() {
            super();
            this.pointIDs = null;
            this.roomID = null;
            this.nextID = null;
            this.prevID = null;
            this.edgeID = null;
            this.partnerID = null;
            this.reversed = null;
        }
    }
    SaveType.JCowall = JCowall;
    class JRoom extends JDesign {
        constructor() {
            super();
            this.parentID = null;
            this.cowallIDs = null;
            this.floorID = null;
            this.roofID = null;
            this.roomName = null;
            this.displayPos = null;
            this.isAutoMoveAreaPos = null;
        }
    }
    SaveType.JRoom = JRoom;
    class JLUWin extends JDesign {
        constructor() {
            super();
            this.pos = null;
            this.j2d = null;
            this.radian = null;
            this.height3D = null;
            this.floorHeight = null;
        }
    }
    SaveType.JLUWin = JLUWin;
    class JLWin extends JLUWin {
        constructor() {
            super();
            this.pointID = null;
        }
    }
    SaveType.JLWin = JLWin;
    class JUWin extends JLUWin {
        constructor() {
            super();
            this.centerWallID = null;
        }
    }
    SaveType.JUWin = JUWin;
    class JFloor extends JDesign {
        constructor() {
            super();
            this.roomID = null;
            this.radian = null;
            this.size = null;
            this.imgUrl = null;
        }
    }
    SaveType.JFloor = JFloor;
    class JRoof extends JDesign {
        constructor() {
            super();
            this.roomID = null;
        }
    }
    SaveType.JRoof = JRoof;
    class JFloorplan extends JDesign {
        constructor() {
            super();
            this.roomsID = null;
            this.cowallIDs = null;
            this.backImg = null;
        }
    }
    SaveType.JFloorplan = JFloorplan;
    class JDWAbstract extends JDesign {
        constructor() {
            super();
            this.wallID = null;
            this.pos = null;
            this.size = null;
            this.mirror = null;
            this.out = null;
            this.distancePer = null;
            this.oldWallID = null;
            this.radian = null;
            this.url3D = null;
            this.svgImg = null;
            this.plankType = null;
            this.floorHeight = null;
            this.modelUrl = null;
            this.isHaveFrame = null;
            this.style = null;
        }
    }
    SaveType.JDWAbstract = JDWAbstract;
    class JDoor extends JDWAbstract {
    }
    SaveType.JDoor = JDoor;
    class JWin extends JDWAbstract {
        constructor() {
            super(...arguments);
            this.isBay = null;
            this.outBoxThickness = null;
            this.outThickness = null;
            // constructor() {
            //     super()
            //     this.isBay = false
            // }
        }
    }
    SaveType.JWin = JWin;
    class JCornerWin extends JDesign {
        constructor() {
            super();
            this.pos = null;
            this.LThickness = null;
            this.LWidth = null;
            this.LDepth = null;
            this.LRadian = null;
            this.DThickness = null;
            this.DWidth = null;
            this.DDepth = null;
            this.DRadian = null;
            this.pointID = null;
            this.outLine = null;
            this.outThickness = null;
            this.outWallThickness = null;
            this.height3D = null;
            this.floorHeight = null;
        }
    }
    SaveType.JCornerWin = JCornerWin;
    class JCamera extends JDesign {
        constructor() {
            super();
            this.radian = null;
            this.headUrl = null;
            this.headSize = null;
            this.rotateSize = null;
            this.rotateUrl = null;
            this.pos = null;
        }
    }
    SaveType.JCamera = JCamera;
    class JGeometry extends JDesign {
        constructor() {
            super();
            this.url2D = null;
            this.url3D = null;
            this.pos = null;
            this.radian = null;
            this.size = null;
            this.mirror = null;
            this.distancePer = null;
            this.wallID = null;
            this.wallOut = null;
            this.hgUrl = null;
        }
    }
    SaveType.JGeometry = JGeometry;
    class JFurniture extends JGeometry {
    }
    SaveType.JFurniture = JFurniture;
    class JBuild extends JGeometry {
    }
    SaveType.JBuild = JBuild;
    class JCmd {
        constructor() {
            this.wall = null;
            this.cowall = null;
            this.point = null;
            // this.floorplan = null
            this.back = null;
            this.floor = null;
            // this.common = null
            this.win = null;
            this.door = null;
            this.furniture = null;
            this.cornerWin = null;
            this.room = null;
        }
    }
    SaveType.JCmd = JCmd;
    class JCache {
        constructor() {
            this.wall = null;
            this.room = null;
            this.cowall = null;
            this.floorplan = null;
            this.common = null;
            this.door = null;
            this.win = null;
            this.doorWin = null;
            this.furniture = null;
            this.build = null;
        }
    }
    SaveType.JCache = JCache;
})(SaveType || (SaveType = {}));


/***/ }),

/***/ "./src/app/svg/common/services/console.service.ts":
/*!********************************************************!*\
  !*** ./src/app/svg/common/services/console.service.ts ***!
  \********************************************************/
/*! exports provided: ConsoleService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConsoleService", function() { return ConsoleService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _Util_consoleUtil__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Util/consoleUtil */ "./src/app/svg/common/Util/consoleUtil.ts");



let ConsoleService = class ConsoleService {
    constructor() {
        this._consoleUtil = new _Util_consoleUtil__WEBPACK_IMPORTED_MODULE_2__["ConsoleUtil"]();
    }
    logArr(arr) {
        this._consoleUtil.logArr(arr);
    }
};
ConsoleService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
], ConsoleService);



/***/ }),

/***/ "./src/app/svg/common/services/mouse-event.service.ts":
/*!************************************************************!*\
  !*** ./src/app/svg/common/services/mouse-event.service.ts ***!
  \************************************************************/
/*! exports provided: MouseEventService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MouseEventService", function() { return MouseEventService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let MouseEventService = class MouseEventService {
    constructor() {
        this._mouseDownEvents = [];
        this._mouseMoveEvents = [];
        this._mouseUpEvents = [];
        this._mouseWheelEvents = [];
    }
    /** 获取鼠标按下的事件 */
    getDownEvents() {
        return this._mouseDownEvents;
    }
    /** 实施鼠标按下事件 */
    doDownEvents(e) {
        for (let i = 0; i < this._mouseDownEvents.length; i++) {
            this._mouseDownEvents[i](e);
        }
    }
    /** 获取鼠标移动的事件 */
    getMoveEvents() {
        return this._mouseMoveEvents;
    }
    /** 实施鼠标移动事件 */
    doMoveEvents(e) {
        for (let i = 0; i < this._mouseMoveEvents.length; i++) {
            this._mouseMoveEvents[i](e);
        }
    }
    /** 获取鼠标放开事件 */
    getUpEvents() {
        return this._mouseUpEvents;
    }
    /** 实施鼠标放开事件 */
    doUpEvents(e) {
        for (let i = 0; i < this._mouseUpEvents.length; i++) {
            this._mouseUpEvents[i](e);
        }
    }
};
MouseEventService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
], MouseEventService);



/***/ }),

/***/ "./src/app/svg/dom/back/back.component.scss":
/*!**************************************************!*\
  !*** ./src/app/svg/dom/back/back.component.scss ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".path_small {\n  stroke: #d5d5d5;\n}\n\n.path_big {\n  stroke: #d5d5d5;\n}\n\n.rect_protect {\n  fill-opacity: 0;\n}\n\n.back_color {\n  fill: #ffffff;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc3ZnL2RvbS9iYWNrL0Q6XFxrbm93bGVkZ2VcXGhnXFxvbGRcXG9sZFJvb20vc3JjXFxhcHBcXHN2Z1xcZG9tXFxiYWNrXFxiYWNrLmNvbXBvbmVudC5zY3NzIiwic3JjL2FwcC9zdmcvZG9tL2JhY2svYmFjay5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUVJLGVBQUE7QUNBSjs7QURHQTtFQUVJLGVBQUE7QUNESjs7QURJQTtFQUNJLGVBQUE7QUNESjs7QURJQTtFQUNJLGFBQUE7QUNESiIsImZpbGUiOiJzcmMvYXBwL3N2Zy9kb20vYmFjay9iYWNrLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLnBhdGhfc21hbGwge1xyXG4gICAgLy8gc3Ryb2tlLXdpZHRoOiAxO1xyXG4gICAgc3Ryb2tlOiAjZDVkNWQ1O1xyXG59XHJcblxyXG4ucGF0aF9iaWcge1xyXG4gICAgLy8gc3Ryb2tlLXdpZHRoOiAyO1xyXG4gICAgc3Ryb2tlOiAjZDVkNWQ1O1xyXG59XHJcblxyXG4ucmVjdF9wcm90ZWN0IHtcclxuICAgIGZpbGwtb3BhY2l0eTogMDtcclxufVxyXG5cclxuLmJhY2tfY29sb3J7XHJcbiAgICBmaWxsOiAjZmZmZmZmXHJcbn0iLCIucGF0aF9zbWFsbCB7XG4gIHN0cm9rZTogI2Q1ZDVkNTtcbn1cblxuLnBhdGhfYmlnIHtcbiAgc3Ryb2tlOiAjZDVkNWQ1O1xufVxuXG4ucmVjdF9wcm90ZWN0IHtcbiAgZmlsbC1vcGFjaXR5OiAwO1xufVxuXG4uYmFja19jb2xvciB7XG4gIGZpbGw6ICNmZmZmZmY7XG59Il19 */"

/***/ }),

/***/ "./src/app/svg/dom/back/back.component.ts":
/*!************************************************!*\
  !*** ./src/app/svg/dom/back/back.component.ts ***!
  \************************************************/
/*! exports provided: BackComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BackComponent", function() { return BackComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");
/* harmony import */ var _services_right_menu_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../services/right-menu.service */ "./src/app/services/right-menu.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");







let BackComponent = class BackComponent {
    constructor(ref, domUpdateService, dataService, popService, rightService, DUService) {
        this.ref = ref;
        this.domUpdateService = domUpdateService;
        this.dataService = dataService;
        this.popService = popService;
        this.rightService = rightService;
        this.DUService = DUService;
        this._backConfig = null;
        this.domUpdateService.svgBack.subscribe(() => {
            this.ref.detectChanges();
        });
    }
    set back(data) {
        this._backConfig = data;
    }
    get back() { return this._backConfig; }
    ngOnInit() {
        this.dataService.floorplan.lateChooseFuncArr.push(() => {
            this.popService.panelRight.emit(undefined);
        });
        if (this.dataService.cmd.common.initLog) {
            this.DUService.out.redLog('backs is ok!!');
        }
    }
    onmousedown(e) {
        // if (this.dataService.cache.common.mode == 'normal') {
        if (e.which == 1) {
            this.dataService.cache.common.choose = this.dataService.floorplan;
            this.dataService.cache.common.blockON = true;
            this.dataService.cache.common.firstPos = { x: e.offsetX, y: e.offsetY };
            this.dataService.cmd.cowall.hide = false;
            this.popService.inputBoxs.emit([]);
            this.dataService.cache.common.initUpdate();
            this.domUpdateService.allSvg.emit();
        }
        else if (e.which == 3) {
            this.rightService.back.emit({ e: e });
        }
    }
    onmouseover(e) {
        // if (this.dataService.cache.common.mode == 'normal') {
        if (this.dataService.cmd.floorplan.debugPos != null && this.dataService.cmd.floorplan.debugPos != undefined) {
            let data = {
                text: `floorplan:{
          cos:${this.dataService.floorplan.cowallIDs},
          chooseID:${this.dataService.cache.common.choose ? this.dataService.cache.common.choose.id : null}
        }`,
                position: this.dataService.cmd.floorplan.debugPos
            };
            this.popService.message.emit(data);
        }
    }
    /** 获取小格的path排列 */
    getSmallPathD() {
        if (this._backConfig == null)
            return null;
        let smallWidth = this._backConfig.pattern.width / this._backConfig.pattern.split;
        let pathD = '';
        for (let i = 1; i < this._backConfig.pattern.split; i++) {
            let m = `M${smallWidth * i} 0,L${smallWidth * i} ${this._backConfig.pattern.width}`;
            pathD += m;
            m = `M0 ${smallWidth * i},L${this._backConfig.pattern.width} ${smallWidth * i}`;
            pathD += m;
        }
        return pathD;
    }
    /** 获取大格的path排列 */
    getBigPathD() {
        if (this._backConfig == null)
            return null;
        let pathD = '';
        let m = `M0 0,L0 ${this._backConfig.pattern.width}`;
        pathD += m;
        m = `M0 0,L${this._backConfig.pattern.width} 0`;
        pathD += m;
        m = `M${this._backConfig.pattern.width} 0,L${this._backConfig.pattern.width} ${this._backConfig.pattern.width}`;
        pathD += m;
        m = `M0 ${this._backConfig.pattern.width},L${this._backConfig.pattern.width} ${this._backConfig.pattern.width}`;
        pathD += m;
        return pathD;
    }
};
BackComponent.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_2__["DomUpdateService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_3__["JdesignDataService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_4__["PopDivService"] },
    { type: _services_right_menu_service__WEBPACK_IMPORTED_MODULE_5__["RightMenuService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_6__["JdesignUtil2dService"] }
];
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [Object])
], BackComponent.prototype, "back", null);
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["HostListener"])('mousedown', ['$event']),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Function),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [MouseEvent]),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:returntype", void 0)
], BackComponent.prototype, "onmousedown", null);
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["HostListener"])('mouseover', ['$event']),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Function),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [MouseEvent]),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:returntype", void 0)
], BackComponent.prototype, "onmouseover", null);
BackComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[back]',
        template: __webpack_require__(/*! raw-loader!./back.component.html */ "./node_modules/raw-loader/index.js!./src/app/svg/dom/back/back.component.html"),
        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
        styles: [__webpack_require__(/*! ./back.component.scss */ "./src/app/svg/dom/back/back.component.scss")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"],
        _services_dom_update_service__WEBPACK_IMPORTED_MODULE_2__["DomUpdateService"],
        _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_3__["JdesignDataService"],
        _services_pop_div_service__WEBPACK_IMPORTED_MODULE_4__["PopDivService"],
        _services_right_menu_service__WEBPACK_IMPORTED_MODULE_5__["RightMenuService"],
        _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_6__["JdesignUtil2dService"]])
], BackComponent);



/***/ }),

/***/ "./src/app/svg/dom/back/back.module.ts":
/*!*********************************************!*\
  !*** ./src/app/svg/dom/back/back.module.ts ***!
  \*********************************************/
/*! exports provided: BackModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BackModule", function() { return BackModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _back_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./back.component */ "./src/app/svg/dom/back/back.component.ts");




let BackModule = class BackModule {
};
BackModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]
        ],
        declarations: [_back_component__WEBPACK_IMPORTED_MODULE_3__["BackComponent"]],
        exports: [_back_component__WEBPACK_IMPORTED_MODULE_3__["BackComponent"]]
    })
], BackModule);



/***/ }),

/***/ "./src/app/svg/dom/block/block.component.scss":
/*!****************************************************!*\
  !*** ./src/app/svg/dom/block/block.component.scss ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".svg_block {\n  position: relative;\n  cursor: crosshair;\n}\n\n.div_block {\n  position: absolute;\n  top: 0;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc3ZnL2RvbS9ibG9jay9EOlxca25vd2xlZGdlXFxoZ1xcb2xkXFxvbGRSb29tL3NyY1xcYXBwXFxzdmdcXGRvbVxcYmxvY2tcXGJsb2NrLmNvbXBvbmVudC5zY3NzIiwic3JjL2FwcC9zdmcvZG9tL2Jsb2NrL2Jsb2NrLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksa0JBQUE7RUFDQSxpQkFBQTtBQ0NKOztBREVBO0VBQ0ksa0JBQUE7RUFDQSxNQUFBO0FDQ0oiLCJmaWxlIjoic3JjL2FwcC9zdmcvZG9tL2Jsb2NrL2Jsb2NrLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLnN2Z19ibG9jayB7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICBjdXJzb3I6IGNyb3NzaGFpcjtcclxufVxyXG5cclxuLmRpdl9ibG9jayB7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICB0b3A6IDA7XHJcbn0iLCIuc3ZnX2Jsb2NrIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBjdXJzb3I6IGNyb3NzaGFpcjtcbn1cblxuLmRpdl9ibG9jayB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAwO1xufSJdfQ== */"

/***/ }),

/***/ "./src/app/svg/dom/block/block.component.ts":
/*!**************************************************!*\
  !*** ./src/app/svg/dom/block/block.component.ts ***!
  \**************************************************/
/*! exports provided: BlockComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlockComponent", function() { return BlockComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _common_services_mouse_event_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../common/services/mouse-event.service */ "./src/app/svg/common/services/mouse-event.service.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _common_event_svg_event__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../common/event/svg.event */ "./src/app/svg/common/event/svg.event.ts");
/* harmony import */ var _services_right_menu_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../services/right-menu.service */ "./src/app/services/right-menu.service.ts");
/* harmony import */ var _services_http_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../services/http.service */ "./src/app/services/http.service.ts");
/* harmony import */ var _node_modules_angular_platform_browser__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../../node_modules/@angular/platform-browser */ "./node_modules/@angular/platform-browser/fesm2015/platform-browser.js");












let BlockComponent = class BlockComponent {
    constructor(dataService, DUService, domUpdateService, ref, el, mouseEventService, popService, calService, rightEventService, httpService, sanitizer) {
        this.dataService = dataService;
        this.DUService = DUService;
        this.domUpdateService = domUpdateService;
        this.ref = ref;
        this.el = el;
        this.mouseEventService = mouseEventService;
        this.popService = popService;
        this.calService = calService;
        this.rightEventService = rightEventService;
        this.httpService = httpService;
        this.sanitizer = sanitizer;
        /** 强制更新 */
        this.domUpdateService.svgBlock.subscribe(() => {
            // this.dataService.cache.common.initUpdate(['cowallLabel'])
            // this.domUpdateService.mainSvg.emit()
            this.ref.detectChanges();
        });
    }
    set block(data) {
        if (data) {
            this.setEvent();
        }
    }
    ngOnInit() {
        if (this.dataService.cmd.common.initLog) {
            this.DUService.out.redLog('block is ok!!');
        }
        //this.setEvent()
    }
    /** 设置事件 */
    setEvent() {
        let svgEvent = new _common_event_svg_event__WEBPACK_IMPORTED_MODULE_8__["SvgEvent"](this.mouseEventService, this.rightEventService, this.dataService, this.domUpdateService, this.DUService, this.calService, this.popService, this.el, 'svg_block', this.httpService, this.sanitizer);
    }
    /** 是否激活 */
    isActive() {
        if (this.dataService.cache.common.mode != 'moveWall') {
            this.dataService.cache.common.blockON = true;
        }
    }
};
BlockComponent.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_4__["JdesignUtil2dService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_3__["DomUpdateService"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] },
    { type: _common_services_mouse_event_service__WEBPACK_IMPORTED_MODULE_5__["MouseEventService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_6__["PopDivService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_7__["CalculatorsService"] },
    { type: _services_right_menu_service__WEBPACK_IMPORTED_MODULE_9__["RightMenuService"] },
    { type: _services_http_service__WEBPACK_IMPORTED_MODULE_10__["HttpService"] },
    { type: _node_modules_angular_platform_browser__WEBPACK_IMPORTED_MODULE_11__["DomSanitizer"] }
];
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [Object])
], BlockComponent.prototype, "block", null);
BlockComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-block',
        template: __webpack_require__(/*! raw-loader!./block.component.html */ "./node_modules/raw-loader/index.js!./src/app/svg/dom/block/block.component.html"),
        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
        styles: [__webpack_require__(/*! ./block.component.scss */ "./src/app/svg/dom/block/block.component.scss")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__["JdesignDataService"],
        _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_4__["JdesignUtil2dService"],
        _services_dom_update_service__WEBPACK_IMPORTED_MODULE_3__["DomUpdateService"],
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"],
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"],
        _common_services_mouse_event_service__WEBPACK_IMPORTED_MODULE_5__["MouseEventService"],
        _services_pop_div_service__WEBPACK_IMPORTED_MODULE_6__["PopDivService"],
        _services_calculators_service__WEBPACK_IMPORTED_MODULE_7__["CalculatorsService"],
        _services_right_menu_service__WEBPACK_IMPORTED_MODULE_9__["RightMenuService"],
        _services_http_service__WEBPACK_IMPORTED_MODULE_10__["HttpService"],
        _node_modules_angular_platform_browser__WEBPACK_IMPORTED_MODULE_11__["DomSanitizer"]])
], BlockComponent);



/***/ }),

/***/ "./src/app/svg/dom/block/block.module.ts":
/*!***********************************************!*\
  !*** ./src/app/svg/dom/block/block.module.ts ***!
  \***********************************************/
/*! exports provided: BlockModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlockModule", function() { return BlockModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _block_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./block.component */ "./src/app/svg/dom/block/block.component.ts");




let BlockModule = class BlockModule {
};
BlockModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]
        ],
        declarations: [_block_component__WEBPACK_IMPORTED_MODULE_3__["BlockComponent"]],
        exports: [_block_component__WEBPACK_IMPORTED_MODULE_3__["BlockComponent"]]
    })
], BlockModule);



/***/ }),

/***/ "./src/app/svg/dom/camera/camera.component.scss":
/*!******************************************************!*\
  !*** ./src/app/svg/dom/camera/camera.component.scss ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".camera_rotate:hover {\n  cursor: move;\n}\n\n.camera_rotate {\n  fill: rgba(0, 0, 0, 0);\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc3ZnL2RvbS9jYW1lcmEvRDpcXGtub3dsZWRnZVxcaGdcXG9sZFxcb2xkUm9vbS9zcmNcXGFwcFxcc3ZnXFxkb21cXGNhbWVyYVxcY2FtZXJhLmNvbXBvbmVudC5zY3NzIiwic3JjL2FwcC9zdmcvZG9tL2NhbWVyYS9jYW1lcmEuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFFSSxZQUFBO0FDQUo7O0FER0E7RUFDSSxzQkFBQTtBQ0FKIiwiZmlsZSI6InNyYy9hcHAvc3ZnL2RvbS9jYW1lcmEvY2FtZXJhLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmNhbWVyYV9yb3RhdGU6aG92ZXIge1xyXG4gICAgLy8gZmlsbDogcmdiYSg5MiwgMzksIDM5LCAwLjU0OCk7XHJcbiAgICBjdXJzb3I6IG1vdmU7XHJcbn1cclxuXHJcbi5jYW1lcmFfcm90YXRlIHtcclxuICAgIGZpbGw6IHJnYmEoMCwgMCwgMCwgMCk7XHJcbn0iLCIuY2FtZXJhX3JvdGF0ZTpob3ZlciB7XG4gIGN1cnNvcjogbW92ZTtcbn1cblxuLmNhbWVyYV9yb3RhdGUge1xuICBmaWxsOiByZ2JhKDAsIDAsIDAsIDApO1xufSJdfQ== */"

/***/ }),

/***/ "./src/app/svg/dom/camera/camera.component.ts":
/*!****************************************************!*\
  !*** ./src/app/svg/dom/camera/camera.component.ts ***!
  \****************************************************/
/*! exports provided: CameraComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CameraComponent", function() { return CameraComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");





let CameraComponent = class CameraComponent {
    constructor(dataService, domService, ref, DUService) {
        this.dataService = dataService;
        this.domService = domService;
        this.ref = ref;
        this.DUService = DUService;
        this.domService.svgCamera.subscribe(() => {
            this.ref.detectChanges();
        });
    }
    ngOnInit() {
        if (this.dataService.cmd.common.initLog) {
            this.DUService.out.redLog('camera is ok!!');
        }
    }
    /** 获取transform */
    getTransform() {
        let cosA = Math.cos(this.dataService.camera.radian);
        let sinA = Math.sin(this.dataService.camera.radian);
        let transform = this.DUService.pos.getTransfromString(cosA, sinA, -sinA, cosA, this.dataService.camera.pos.x, this.dataService.camera.pos.y);
        return transform;
    }
    /** 获取fill */
    getFill() {
        let string = `url(#${this.dataService.camera.id})`;
        return string;
    }
    onmousedown(e) {
        this.dataService.cache.common.choose = this.dataService.camera;
        this.dataService.cache.common.firstPos = { x: e.offsetX, y: e.offsetY };
        this.dataService.cache.common.blockON = true;
        this.domService.allSvg.emit();
        this.dataService.cache.common.initUpdate();
    }
    setMode(mode) {
        this.dataService.camera.mode = mode;
    }
};
CameraComponent.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__["JdesignDataService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_3__["DomUpdateService"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_4__["JdesignUtil2dService"] }
];
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["HostListener"])('mousedown', ['$event']),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Function),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [MouseEvent]),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:returntype", void 0)
], CameraComponent.prototype, "onmousedown", null);
CameraComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[svgCamera]',
        template: __webpack_require__(/*! raw-loader!./camera.component.html */ "./node_modules/raw-loader/index.js!./src/app/svg/dom/camera/camera.component.html"),
        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
        styles: [__webpack_require__(/*! ./camera.component.scss */ "./src/app/svg/dom/camera/camera.component.scss")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__["JdesignDataService"],
        _services_dom_update_service__WEBPACK_IMPORTED_MODULE_3__["DomUpdateService"],
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"],
        _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_4__["JdesignUtil2dService"]])
], CameraComponent);



/***/ }),

/***/ "./src/app/svg/dom/camera/camera.module.ts":
/*!*************************************************!*\
  !*** ./src/app/svg/dom/camera/camera.module.ts ***!
  \*************************************************/
/*! exports provided: CameraModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CameraModule", function() { return CameraModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _camera_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./camera.component */ "./src/app/svg/dom/camera/camera.component.ts");




let CameraModule = class CameraModule {
};
CameraModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]
        ],
        declarations: [_camera_component__WEBPACK_IMPORTED_MODULE_3__["CameraComponent"]],
        exports: [_camera_component__WEBPACK_IMPORTED_MODULE_3__["CameraComponent"]]
    })
], CameraModule);



/***/ }),

/***/ "./src/app/svg/dom/common/absorb-lines/absorb-lines.component.scss":
/*!*************************************************************************!*\
  !*** ./src/app/svg/dom/common/absorb-lines/absorb-lines.component.scss ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".line_path {\n  stroke: #1ad6bd;\n}\n\n.point_circle {\n  fill: #f0e225;\n  stroke: #331d3b;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc3ZnL2RvbS9jb21tb24vYWJzb3JiLWxpbmVzL0Q6XFxrbm93bGVkZ2VcXGhnXFxvbGRcXG9sZFJvb20vc3JjXFxhcHBcXHN2Z1xcZG9tXFxjb21tb25cXGFic29yYi1saW5lc1xcYWJzb3JiLWxpbmVzLmNvbXBvbmVudC5zY3NzIiwic3JjL2FwcC9zdmcvZG9tL2NvbW1vbi9hYnNvcmItbGluZXMvYWJzb3JiLWxpbmVzLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksZUFBQTtBQ0NKOztBREVBO0VBQ0ksYUFBQTtFQUNBLGVBQUE7QUNDSiIsImZpbGUiOiJzcmMvYXBwL3N2Zy9kb20vY29tbW9uL2Fic29yYi1saW5lcy9hYnNvcmItbGluZXMuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIubGluZV9wYXRoIHtcclxuICAgIHN0cm9rZTogcmdiKDI2LCAyMTQsIDE4OSk7XHJcbn1cclxuXHJcbi5wb2ludF9jaXJjbGUge1xyXG4gICAgZmlsbDogcmdiYSgkY29sb3I6ICNmMGUyMjUsICRhbHBoYTogMS4wKTtcclxuICAgIHN0cm9rZTogcmdiKDUxLCAyOSwgNTkpO1xyXG59IiwiLmxpbmVfcGF0aCB7XG4gIHN0cm9rZTogIzFhZDZiZDtcbn1cblxuLnBvaW50X2NpcmNsZSB7XG4gIGZpbGw6ICNmMGUyMjU7XG4gIHN0cm9rZTogIzMzMWQzYjtcbn0iXX0= */"

/***/ }),

/***/ "./src/app/svg/dom/common/absorb-lines/absorb-lines.component.ts":
/*!***********************************************************************!*\
  !*** ./src/app/svg/dom/common/absorb-lines/absorb-lines.component.ts ***!
  \***********************************************************************/
/*! exports provided: AbsorbLinesComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AbsorbLinesComponent", function() { return AbsorbLinesComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");



let AbsorbLinesComponent = class AbsorbLinesComponent {
    constructor(DUService, ref) {
        this.DUService = DUService;
        this.ref = ref;
        this.absorbLine = {
            data: null,
            ref: this.ref
        };
        this.ABEvent = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
    }
    ngOnInit() {
        this.ABEvent.emit(this.absorbLine);
    }
    /** 获取path */
    getPath(line) {
        !line.radius ? line.radius = 100000 : null;
        let rayPosA = this.DUService.pos.getRayPos(line.pos, line.radian, line.radius);
        let rayPosB = this.DUService.pos.getRayPos(line.pos, line.radian, -line.radius);
        let path = this.DUService.svg.getPath(false, rayPosA, rayPosB);
        return path;
    }
};
AbsorbLinesComponent.ctorParameters = () => [
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"] }
];
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])
], AbsorbLinesComponent.prototype, "ABEvent", void 0);
AbsorbLinesComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[absorbLines]',
        template: __webpack_require__(/*! raw-loader!./absorb-lines.component.html */ "./node_modules/raw-loader/index.js!./src/app/svg/dom/common/absorb-lines/absorb-lines.component.html"),
        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
        styles: [__webpack_require__(/*! ./absorb-lines.component.scss */ "./src/app/svg/dom/common/absorb-lines/absorb-lines.component.scss")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"],
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]])
], AbsorbLinesComponent);



/***/ }),

/***/ "./src/app/svg/dom/common/absorb-lines/absorb-lines.module.ts":
/*!********************************************************************!*\
  !*** ./src/app/svg/dom/common/absorb-lines/absorb-lines.module.ts ***!
  \********************************************************************/
/*! exports provided: AbsorbLinesModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AbsorbLinesModule", function() { return AbsorbLinesModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _absorb_lines_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./absorb-lines.component */ "./src/app/svg/dom/common/absorb-lines/absorb-lines.component.ts");




let AbsorbLinesModule = class AbsorbLinesModule {
};
AbsorbLinesModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]
        ],
        declarations: [_absorb_lines_component__WEBPACK_IMPORTED_MODULE_3__["AbsorbLinesComponent"]],
        exports: [_absorb_lines_component__WEBPACK_IMPORTED_MODULE_3__["AbsorbLinesComponent"]]
    })
], AbsorbLinesModule);



/***/ }),

/***/ "./src/app/svg/dom/common/label-circle/label-circle.component.scss":
/*!*************************************************************************!*\
  !*** ./src/app/svg/dom/common/label-circle/label-circle.component.scss ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".label_circle {\n  fill: #ffffff;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  stroke: #257ab9;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc3ZnL2RvbS9jb21tb24vbGFiZWwtY2lyY2xlL0Q6XFxrbm93bGVkZ2VcXGhnXFxvbGRcXG9sZFJvb20vc3JjXFxhcHBcXHN2Z1xcZG9tXFxjb21tb25cXGxhYmVsLWNpcmNsZVxcbGFiZWwtY2lyY2xlLmNvbXBvbmVudC5zY3NzIiwic3JjL2FwcC9zdmcvZG9tL2NvbW1vbi9sYWJlbC1jaXJjbGUvbGFiZWwtY2lyY2xlLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksYUFBQTtFQUNBLDZDQUFBO0VBQ0EsZUFBQTtBQ0NKIiwiZmlsZSI6InNyYy9hcHAvc3ZnL2RvbS9jb21tb24vbGFiZWwtY2lyY2xlL2xhYmVsLWNpcmNsZS5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5sYWJlbF9jaXJjbGUge1xyXG4gICAgZmlsbDogI2ZmZmZmZjtcclxuICAgIC13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwKTtcclxuICAgIHN0cm9rZTogIzI1N2FiOTtcclxufSIsIi5sYWJlbF9jaXJjbGUge1xuICBmaWxsOiAjZmZmZmZmO1xuICAtd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMCk7XG4gIHN0cm9rZTogIzI1N2FiOTtcbn0iXX0= */"

/***/ }),

/***/ "./src/app/svg/dom/common/label-circle/label-circle.component.ts":
/*!***********************************************************************!*\
  !*** ./src/app/svg/dom/common/label-circle/label-circle.component.ts ***!
  \***********************************************************************/
/*! exports provided: LabelCircleComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LabelCircleComponent", function() { return LabelCircleComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let LabelCircleComponent = class LabelCircleComponent {
    constructor(el) {
        this.el = el;
        this.circleClass = 'label_circle';
    }
    set labelCircle(data) {
        this._data = data;
        // this.setMouseOver()
        // this.ref.detectChanges()
    }
    get labelCircle() { return this._data; }
    /** 设置半径 */
    setRadius(ele, r) {
        ele.setAttribute('r', r.toString());
    }
    setMouseOver() {
        let dom = this.el.nativeElement;
        let circles = dom.getElementsByClassName(this.circleClass);
        for (let i = 0; i < circles.length; i++) {
            circles[i].onmouseover = () => {
                this.setRadius(circles[i], this.labelCircle.overR);
            };
            circles[i].onmouseleave = () => {
                this.setRadius(circles[i], this.labelCircle.r);
            };
            circles[i].onmousedown = (e) => {
                this.labelCircle.data[i].func(e);
            };
        }
    }
    ngOnInit() {
    }
    ngAfterViewChecked() {
        this.setMouseOver();
    }
};
LabelCircleComponent.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] }
];
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [Object])
], LabelCircleComponent.prototype, "labelCircle", null);
LabelCircleComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[labelCircle]',
        template: __webpack_require__(/*! raw-loader!./label-circle.component.html */ "./node_modules/raw-loader/index.js!./src/app/svg/dom/common/label-circle/label-circle.component.html"),
        styles: [__webpack_require__(/*! ./label-circle.component.scss */ "./src/app/svg/dom/common/label-circle/label-circle.component.scss")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]])
], LabelCircleComponent);



/***/ }),

/***/ "./src/app/svg/dom/common/label-circle/label-circle.module.ts":
/*!********************************************************************!*\
  !*** ./src/app/svg/dom/common/label-circle/label-circle.module.ts ***!
  \********************************************************************/
/*! exports provided: LabelCircleModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LabelCircleModule", function() { return LabelCircleModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _label_circle_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./label-circle.component */ "./src/app/svg/dom/common/label-circle/label-circle.component.ts");




let LabelCircleModule = class LabelCircleModule {
};
LabelCircleModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]
        ],
        declarations: [_label_circle_component__WEBPACK_IMPORTED_MODULE_3__["LabelCircleComponent"]],
        exports: [_label_circle_component__WEBPACK_IMPORTED_MODULE_3__["LabelCircleComponent"]]
    })
], LabelCircleModule);



/***/ }),

/***/ "./src/app/svg/dom/common/label-lines/label-lines.component.scss":
/*!***********************************************************************!*\
  !*** ./src/app/svg/dom/common/label-lines/label-lines.component.scss ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".label_img {\n  text-align: center;\n}\n\n.label_line {\n  stroke: #5f5f5f;\n}\n\n.label_text {\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  text-anchor: middle;\n  font-family: \"Frutiger Next LT W1G\", Calibri, Arial, Helvetica, sans-serif;\n  fill: #5f5f5f;\n  font-weight: 900;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc3ZnL2RvbS9jb21tb24vbGFiZWwtbGluZXMvRDpcXGtub3dsZWRnZVxcaGdcXG9sZFxcb2xkUm9vbS9zcmNcXGFwcFxcc3ZnXFxkb21cXGNvbW1vblxcbGFiZWwtbGluZXNcXGxhYmVsLWxpbmVzLmNvbXBvbmVudC5zY3NzIiwic3JjL2FwcC9zdmcvZG9tL2NvbW1vbi9sYWJlbC1saW5lcy9sYWJlbC1saW5lcy5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGtCQUFBO0FDQ0o7O0FERUE7RUFDSSxlQUFBO0FDQ0o7O0FERUE7RUFDSSw2Q0FBQTtFQUNBLG1CQUFBO0VBQ0EsMEVBQUE7RUFDQSxhQUFBO0VBQ0EsZ0JBQUE7QUNDSiIsImZpbGUiOiJzcmMvYXBwL3N2Zy9kb20vY29tbW9uL2xhYmVsLWxpbmVzL2xhYmVsLWxpbmVzLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmxhYmVsX2ltZyB7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbn1cclxuXHJcbi5sYWJlbF9saW5lIHtcclxuICAgIHN0cm9rZTogIzVmNWY1ZjtcclxufVxyXG5cclxuLmxhYmVsX3RleHQge1xyXG4gICAgLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiByZ2JhKDAsIDAsIDAsIDApO1xyXG4gICAgdGV4dC1hbmNob3I6IG1pZGRsZTtcclxuICAgIGZvbnQtZmFtaWx5OiBcIkZydXRpZ2VyIE5leHQgTFQgVzFHXCIsIENhbGlicmksIEFyaWFsLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWY7XHJcbiAgICBmaWxsOiAjNWY1ZjVmO1xyXG4gICAgZm9udC13ZWlnaHQ6IDkwMDtcclxufSIsIi5sYWJlbF9pbWcge1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG5cbi5sYWJlbF9saW5lIHtcbiAgc3Ryb2tlOiAjNWY1ZjVmO1xufVxuXG4ubGFiZWxfdGV4dCB7XG4gIC13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwKTtcbiAgdGV4dC1hbmNob3I6IG1pZGRsZTtcbiAgZm9udC1mYW1pbHk6IFwiRnJ1dGlnZXIgTmV4dCBMVCBXMUdcIiwgQ2FsaWJyaSwgQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZjtcbiAgZmlsbDogIzVmNWY1ZjtcbiAgZm9udC13ZWlnaHQ6IDkwMDtcbn0iXX0= */"

/***/ }),

/***/ "./src/app/svg/dom/common/label-lines/label-lines.component.ts":
/*!*********************************************************************!*\
  !*** ./src/app/svg/dom/common/label-lines/label-lines.component.ts ***!
  \*********************************************************************/
/*! exports provided: LabelLinesComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LabelLinesComponent", function() { return LabelLinesComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");



let LabelLinesComponent = class LabelLinesComponent {
    constructor(DUService) {
        this.DUService = DUService;
        this._transformMsg = null;
        this.domDatas = [];
        this.defualtDasharray = '50,50';
        this.moveTransfrom = this.DUService.pos.getTransformStringByRM({});
        this.rotateTransform = this.DUService.pos.getTransformStringByRM({});
        this.labelData = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
    }
    set labelLines(data) {
        this._data = data;
        this.domDatas = [];
        if (data) {
            this.moveTransfrom = this.DUService.pos.getTransformStringByRM(data.movePos ? { movePos: data.movePos } : {});
            this.rotateTransform = this.DUService.pos.getTransformStringByRM(data.moveRadian ? { radian: data.moveRadian } : {});
            for (let i = 0; i < this._data.data.length; i++) {
                this.domDatas.push(this.getDomData(this._data.data[i]));
            }
        }
    }
    get labelLines() { return this._data; }
    ngOnInit() {
    }
    /* 获取html使用的数据 */
    getDomData(lineData) {
        let textTransform = this.getTextTransform(lineData.line, lineData.radian);
        let a = this.isShow(lineData.line);
        if (!a)
            return undefined;
        let data = {
            path: this.getPath(lineData.line),
            textTransform: lineData.text ? textTransform : undefined,
            transformStart: this.labelLines.img ? this.getTransformStart(lineData.line) : undefined,
            transformEnd: this.labelLines.img ? this.getTransformEnd(lineData.line) : undefined,
            text: lineData.text,
            auxiliaryLines: lineData.auxiliary ? this.getauxiliarypaths(lineData.auxiliary) : [],
            dasharray: lineData.dasharray ? lineData.dasharray : this.defualtDasharray
        };
        return data;
    }
    /* 获取辅助线段paths */
    getauxiliarypaths(lines) {
        let paths = [];
        for (let i = 0; i < lines.length; i++) {
            paths.push(this.DUService.svg.getPath(false, ...lines[i]));
        }
        return paths;
    }
    /** 获取path */
    getPath(line) {
        let newPosArr = [];
        for (let i = 0; i < line.length; i++) {
            newPosArr.push({
                x: line[i].x,
                y: line[i].y
            });
        }
        let path = this.DUService.svg.getPath(false, ...newPosArr);
        /** 设置transform */
        this.setTransformMsg(newPosArr);
        return path;
    }
    /** 设置transfromMsg */
    setTransformMsg(line) {
        let radian = this.DUService.pos.getRadian(line[0], line[1]);
        let sinA = Math.sin(radian);
        let cosA = Math.cos(radian);
        this._transformMsg = {
            radian: radian,
            sin: sinA,
            cos: cosA
        };
    }
    /** 获取头transform信息 */
    getTransformStart(line) {
        let transform = this.DUService.pos.getTransfromString(this._transformMsg.cos, this._transformMsg.sin, -this._transformMsg.sin, this._transformMsg.cos, line[0].x, line[0].y);
        return transform;
    }
    /** 获取尾transform信息 */
    getTransformEnd(line) {
        let transform = this.DUService.pos.getTransfromString(this._transformMsg.cos, this._transformMsg.sin, -this._transformMsg.sin, this._transformMsg.cos, line[1].x, line[1].y);
        return transform;
    }
    /** 获取文本坐标 */
    getTextTransform(line, radian) {
        let cosA = radian ? Math.cos(radian) : 1;
        let sinA = radian ? Math.sin(radian) : 0;
        let centerPos = this.DUService.pos.getCenterPos(line[0], line[1]);
        let transform = this.DUService.pos.getTransfromString(cosA, sinA, -sinA, cosA, centerPos.x, centerPos.y);
        this.labelData.emit({
            pos: centerPos
        });
        return transform;
    }
    /** 是否显示 */
    isShow(line) {
        return !this.DUService.pos.isSamePos(line[0], line[1]);
    }
    /* 获取文字class */
    getTextClass() {
        let className = '';
        if (!this.labelLines.isRemoveStyle)
            className = "label_text font_size text_shadow ";
        if (this.labelLines.className != undefined) {
            className += this.labelLines.className;
        }
        return className;
    }
    getTextStyle() {
        let style = [];
        if (this.labelLines.fontSize != undefined) {
            style['font-size'] = this.labelLines.fontSize + 'px';
            style['font-weight'] = 0;
        }
        return style;
    }
};
LabelLinesComponent.ctorParameters = () => [
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"] }
];
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [Object])
], LabelLinesComponent.prototype, "labelLines", null);
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object)
], LabelLinesComponent.prototype, "labelData", void 0);
LabelLinesComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[labelLines]',
        template: __webpack_require__(/*! raw-loader!./label-lines.component.html */ "./node_modules/raw-loader/index.js!./src/app/svg/dom/common/label-lines/label-lines.component.html"),
        styles: [__webpack_require__(/*! ./label-lines.component.scss */ "./src/app/svg/dom/common/label-lines/label-lines.component.scss")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"]])
], LabelLinesComponent);

class LineType {
}
class LabelType {
}
class DomType {
}
class TransformMsg {
}


/***/ }),

/***/ "./src/app/svg/dom/common/label-lines/label-lines.module.ts":
/*!******************************************************************!*\
  !*** ./src/app/svg/dom/common/label-lines/label-lines.module.ts ***!
  \******************************************************************/
/*! exports provided: LabelLinesModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LabelLinesModule", function() { return LabelLinesModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _label_lines_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./label-lines.component */ "./src/app/svg/dom/common/label-lines/label-lines.component.ts");




let LabelLinesModule = class LabelLinesModule {
};
LabelLinesModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]
        ],
        declarations: [_label_lines_component__WEBPACK_IMPORTED_MODULE_3__["LabelLinesComponent"]],
        exports: [_label_lines_component__WEBPACK_IMPORTED_MODULE_3__["LabelLinesComponent"]]
    })
], LabelLinesModule);



/***/ }),

/***/ "./src/app/svg/dom/common/repeat-path/repeat-path.component.scss":
/*!***********************************************************************!*\
  !*** ./src/app/svg/dom/common/repeat-path/repeat-path.component.scss ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".lu_path {\n  opacity: 0.5;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc3ZnL2RvbS9jb21tb24vcmVwZWF0LXBhdGgvRDpcXGtub3dsZWRnZVxcaGdcXG9sZFxcb2xkUm9vbS9zcmNcXGFwcFxcc3ZnXFxkb21cXGNvbW1vblxccmVwZWF0LXBhdGhcXHJlcGVhdC1wYXRoLmNvbXBvbmVudC5zY3NzIiwic3JjL2FwcC9zdmcvZG9tL2NvbW1vbi9yZXBlYXQtcGF0aC9yZXBlYXQtcGF0aC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLFlBQUE7QUNDSiIsImZpbGUiOiJzcmMvYXBwL3N2Zy9kb20vY29tbW9uL3JlcGVhdC1wYXRoL3JlcGVhdC1wYXRoLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmx1X3BhdGgge1xyXG4gICAgb3BhY2l0eTogMC41O1xyXG59IiwiLmx1X3BhdGgge1xuICBvcGFjaXR5OiAwLjU7XG59Il19 */"

/***/ }),

/***/ "./src/app/svg/dom/common/repeat-path/repeat-path.component.ts":
/*!*********************************************************************!*\
  !*** ./src/app/svg/dom/common/repeat-path/repeat-path.component.ts ***!
  \*********************************************************************/
/*! exports provided: RepeatPathComponent, LUPathType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RepeatPathComponent", function() { return RepeatPathComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LUPathType", function() { return LUPathType; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let RepeatPathComponent = class RepeatPathComponent {
    constructor() {
        this._ColorData = ['red', 'blue', "green"];
        this._colorInt = 0;
    }
    set repeatPathDatas(data) {
        this._pathDatas = data;
    }
    get repeatPathDatas() { return this._pathDatas; }
    ngOnInit() {
    }
    getColor() {
        if (this._colorInt > this._ColorData.length) {
            this._colorInt = 0;
        }
        this._colorInt += 1;
        return this._ColorData[this._colorInt - 1];
    }
};
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Array),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [Array])
], RepeatPathComponent.prototype, "repeatPathDatas", null);
RepeatPathComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[repeatPathDatas]',
        template: __webpack_require__(/*! raw-loader!./repeat-path.component.html */ "./node_modules/raw-loader/index.js!./src/app/svg/dom/common/repeat-path/repeat-path.component.html"),
        styles: [__webpack_require__(/*! ./repeat-path.component.scss */ "./src/app/svg/dom/common/repeat-path/repeat-path.component.scss")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
], RepeatPathComponent);

class LUPathType {
}


/***/ }),

/***/ "./src/app/svg/dom/common/repeat-path/repeat-path.module.ts":
/*!******************************************************************!*\
  !*** ./src/app/svg/dom/common/repeat-path/repeat-path.module.ts ***!
  \******************************************************************/
/*! exports provided: RepeatPathModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RepeatPathModule", function() { return RepeatPathModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _repeat_path_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./repeat-path.component */ "./src/app/svg/dom/common/repeat-path/repeat-path.component.ts");




let RepeatPathModule = class RepeatPathModule {
};
RepeatPathModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]
        ],
        declarations: [_repeat_path_component__WEBPACK_IMPORTED_MODULE_3__["RepeatPathComponent"]],
        exports: [_repeat_path_component__WEBPACK_IMPORTED_MODULE_3__["RepeatPathComponent"]]
    })
], RepeatPathModule);



/***/ }),

/***/ "./src/app/svg/dom/common/test-svg/test-svg.component.scss":
/*!*****************************************************************!*\
  !*** ./src/app/svg/dom/common/test-svg/test-svg.component.scss ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".point_circle {\n  fill: #eb540e;\n  stroke: #331d3b;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc3ZnL2RvbS9jb21tb24vdGVzdC1zdmcvRDpcXGtub3dsZWRnZVxcaGdcXG9sZFxcb2xkUm9vbS9zcmNcXGFwcFxcc3ZnXFxkb21cXGNvbW1vblxcdGVzdC1zdmdcXHRlc3Qtc3ZnLmNvbXBvbmVudC5zY3NzIiwic3JjL2FwcC9zdmcvZG9tL2NvbW1vbi90ZXN0LXN2Zy90ZXN0LXN2Zy5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGFBQUE7RUFDQSxlQUFBO0FDQ0oiLCJmaWxlIjoic3JjL2FwcC9zdmcvZG9tL2NvbW1vbi90ZXN0LXN2Zy90ZXN0LXN2Zy5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5wb2ludF9jaXJjbGUge1xyXG4gICAgZmlsbDogcmdiYSgkY29sb3I6ICNlYjU0MGUsICRhbHBoYTogMS4wKTtcclxuICAgIHN0cm9rZTogcmdiKDUxLCAyOSwgNTkpO1xyXG59IiwiLnBvaW50X2NpcmNsZSB7XG4gIGZpbGw6ICNlYjU0MGU7XG4gIHN0cm9rZTogIzMzMWQzYjtcbn0iXX0= */"

/***/ }),

/***/ "./src/app/svg/dom/common/test-svg/test-svg.component.ts":
/*!***************************************************************!*\
  !*** ./src/app/svg/dom/common/test-svg/test-svg.component.ts ***!
  \***************************************************************/
/*! exports provided: TestSvgComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TestSvgComponent", function() { return TestSvgComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let TestSvgComponent = class TestSvgComponent {
    constructor(ref) {
        this.ref = ref;
        this.testSvgData = {
            data: null,
            ref: this.ref
        };
        this.TSEvent = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
    }
    ngOnInit() {
        this.TSEvent.emit(this.testSvgData);
    }
};
TestSvgComponent.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"] }
];
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])
], TestSvgComponent.prototype, "TSEvent", void 0);
TestSvgComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[testSvg]',
        template: __webpack_require__(/*! raw-loader!./test-svg.component.html */ "./node_modules/raw-loader/index.js!./src/app/svg/dom/common/test-svg/test-svg.component.html"),
        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
        styles: [__webpack_require__(/*! ./test-svg.component.scss */ "./src/app/svg/dom/common/test-svg/test-svg.component.scss")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]])
], TestSvgComponent);



/***/ }),

/***/ "./src/app/svg/dom/common/test-svg/test-svg.module.ts":
/*!************************************************************!*\
  !*** ./src/app/svg/dom/common/test-svg/test-svg.module.ts ***!
  \************************************************************/
/*! exports provided: TestSvgModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TestSvgModule", function() { return TestSvgModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _test_svg_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./test-svg.component */ "./src/app/svg/dom/common/test-svg/test-svg.component.ts");




let TestSvgModule = class TestSvgModule {
};
TestSvgModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]
        ],
        declarations: [_test_svg_component__WEBPACK_IMPORTED_MODULE_3__["TestSvgComponent"]],
        exports: [_test_svg_component__WEBPACK_IMPORTED_MODULE_3__["TestSvgComponent"]]
    })
], TestSvgModule);



/***/ }),

/***/ "./src/app/svg/dom/corner-wins/corner-win/corner-win.component.scss":
/*!**************************************************************************!*\
  !*** ./src/app/svg/dom/corner-wins/corner-win/corner-win.component.scss ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".CW_path {\n  fill: white;\n  stroke: #333333;\n}\n\n.wall_path {\n  fill: #acacac;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  stroke-linejoin: round;\n  stroke: #333333;\n  cursor: default;\n}\n\n.win_circle {\n  fill: #ffffff;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  stroke: #257ab9;\n}\n\n.up_path {\n  fill: #257ab9;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc3ZnL2RvbS9jb3JuZXItd2lucy9jb3JuZXItd2luL0Q6XFxrbm93bGVkZ2VcXGhnXFxvbGRcXG9sZFJvb20vc3JjXFxhcHBcXHN2Z1xcZG9tXFxjb3JuZXItd2luc1xcY29ybmVyLXdpblxcY29ybmVyLXdpbi5jb21wb25lbnQuc2NzcyIsInNyYy9hcHAvc3ZnL2RvbS9jb3JuZXItd2lucy9jb3JuZXItd2luL2Nvcm5lci13aW4uY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxXQUFBO0VBQ0EsZUFBQTtBQ0NKOztBREVBO0VBQ0ksYUFBQTtFQUNBLDZDQUFBO0VBQ0Esc0JBQUE7RUFDQSxlQUFBO0VBQ0EsZUFBQTtBQ0NKOztBREVBO0VBQ0ksYUFBQTtFQUNBLDZDQUFBO0VBQ0EsZUFBQTtBQ0NKOztBREVBO0VBQ0ksYUFBQTtBQ0NKIiwiZmlsZSI6InNyYy9hcHAvc3ZnL2RvbS9jb3JuZXItd2lucy9jb3JuZXItd2luL2Nvcm5lci13aW4uY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuQ1dfcGF0aCB7XHJcbiAgICBmaWxsOiB3aGl0ZTtcclxuICAgIHN0cm9rZTogIzMzMzMzMztcclxufVxyXG5cclxuLndhbGxfcGF0aCB7XHJcbiAgICBmaWxsOiAjYWNhY2FjO1xyXG4gICAgLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiByZ2JhKDAsIDAsIDAsIDApO1xyXG4gICAgc3Ryb2tlLWxpbmVqb2luOiByb3VuZDtcclxuICAgIHN0cm9rZTogIzMzMzMzMztcclxuICAgIGN1cnNvcjogZGVmYXVsdDtcclxufVxyXG5cclxuLndpbl9jaXJjbGUge1xyXG4gICAgZmlsbDogI2ZmZmZmZjtcclxuICAgIC13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwKTtcclxuICAgIHN0cm9rZTogIzI1N2FiOTtcclxufVxyXG5cclxuLnVwX3BhdGgge1xyXG4gICAgZmlsbDogIzI1N2FiOVxyXG59XHJcbiIsIi5DV19wYXRoIHtcbiAgZmlsbDogd2hpdGU7XG4gIHN0cm9rZTogIzMzMzMzMztcbn1cblxuLndhbGxfcGF0aCB7XG4gIGZpbGw6ICNhY2FjYWM7XG4gIC13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwKTtcbiAgc3Ryb2tlLWxpbmVqb2luOiByb3VuZDtcbiAgc3Ryb2tlOiAjMzMzMzMzO1xuICBjdXJzb3I6IGRlZmF1bHQ7XG59XG5cbi53aW5fY2lyY2xlIHtcbiAgZmlsbDogI2ZmZmZmZjtcbiAgLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiByZ2JhKDAsIDAsIDAsIDApO1xuICBzdHJva2U6ICMyNTdhYjk7XG59XG5cbi51cF9wYXRoIHtcbiAgZmlsbDogIzI1N2FiOTtcbn0iXX0= */"

/***/ }),

/***/ "./src/app/svg/dom/corner-wins/corner-win/corner-win.component.ts":
/*!************************************************************************!*\
  !*** ./src/app/svg/dom/corner-wins/corner-win/corner-win.component.ts ***!
  \************************************************************************/
/*! exports provided: CornerWinComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CornerWinComponent", function() { return CornerWinComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");
/* harmony import */ var _services_right_menu_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../services/right-menu.service */ "./src/app/services/right-menu.service.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");








let CornerWinComponent = class CornerWinComponent {
    constructor(calService, DUService, dataService, domService, rightService, popService) {
        this.calService = calService;
        this.DUService = DUService;
        this.dataService = dataService;
        this.domService = domService;
        this.rightService = rightService;
        this.popService = popService;
        this.path = '';
        this.transform = undefined;
    }
    set cornerWin(data) {
        this._cornerWin = data;
    }
    get cornerWin() { return this._cornerWin; }
    ngDoCheck() {
        this.setTransform();
        this.setPath();
    }
    /** 选中状态 */
    setChoose(e) {
        this.cornerWin.act3D.start();
        this.dataService.cache.common.choose = this.cornerWin;
        this.dataService.cache.common.firstPos = { x: e.offsetX, y: e.offsetY };
        this.dataService.cache.common.blockON = true;
        this.dataService.cmd.cowall.hide = true;
        this.domService.allSvg.emit();
        this.rightService.wall.emit(null);
    }
    /** 是否选中 */
    isChoose() {
        return (this.dataService.cache.common.choose &&
            this.dataService.cache.common.choose.id == this.cornerWin.id);
    }
    /** 显示信息 */
    setMsg(e) {
        if (this.dataService.cmd.floorplan.debugPos != null && this.dataService.cmd.floorplan.debugPos != undefined) {
            let data = {
                text: `${this.cornerWin.id}:{
        point:${this.cornerWin.pointID};
        LRotate:${this.cornerWin.getLRotate()};
        DRotate:${this.cornerWin.getDRotate()};
        LWidth:${this.cornerWin.LWidth};
        DWidth:${this.cornerWin.DWidth};
        LDepth:${this.cornerWin.LDepth};
        DDepth:${this.cornerWin.DDepth};
      }`,
                position: this.dataService.cmd.floorplan.debugPos
            };
            this.popService.message.emit(data);
        }
    }
    /** 设置path */
    setPath() {
        let outLinePosArr = this.cornerWin.getPathPosArr({ x: 0, y: 0 });
        this.cornerWin.outLine = outLinePosArr;
        this.path = this.DUService.svg.getPath(true, ...outLinePosArr);
    }
    /** 设置transform */
    setTransform() {
        let transformString = this.DUService.pos.getTransfromString(1, 0, 0, 1, this.cornerWin.pos.x, this.cornerWin.pos.y);
        this.transform = transformString;
    }
    /** 获取左边轮廓 */
    getLPath(isWall) {
        let thickness = isWall ? this.cornerWin.outWallThickness : this.cornerWin.outThickness;
        let newLDPos = this.DUService.pos.getRayPos(this.cornerWin.outLine[1], this.cornerWin.LRadian, thickness);
        let distance = this.DUService.pos.getDistance(this.cornerWin.outLine[1], this.cornerWin.outLine[2]) + this.cornerWin.outThickness;
        let rayPos = this.DUService.pos.getRayPos(this.cornerWin.outLine[1], this.cornerWin.LRadian + (Math.PI / 2), distance);
        let newLUPos = this.DUService.pos.getRayPos(rayPos, this.cornerWin.LRadian, thickness);
        let path = this.DUService.svg.getPath(true, this.cornerWin.outLine[1], newLDPos, newLUPos, rayPos);
        return path;
    }
    /** 获取下边轮廓 */
    getDPath(isWall) {
        let thickness = isWall ? this.cornerWin.outWallThickness : this.cornerWin.outThickness;
        let newDLPos = this.DUService.pos.getRayPos(this.cornerWin.outLine[5], this.cornerWin.DRadian, thickness);
        let distance = this.DUService.pos.getDistance(this.cornerWin.outLine[5], this.cornerWin.outLine[4]) + this.cornerWin.outThickness;
        let rayPos = this.DUService.pos.getRayPos(this.cornerWin.outLine[5], this.cornerWin.DRadian - (Math.PI / 2), distance);
        let newDRPos = this.DUService.pos.getRayPos(rayPos, this.cornerWin.DRadian, thickness);
        let path = this.DUService.svg.getPath(true, this.cornerWin.outLine[5], rayPos, newDRPos, newDLPos);
        return path;
    }
    /** 获取上轮廓 */
    getUPath() {
        let rayPosA = this.DUService.pos.getRayPos(this.cornerWin.outLine[2], this.cornerWin.LRadian + (Math.PI / 2), this.cornerWin.outThickness);
        let shadowPosA = this.DUService.pos.getRayPos(rayPosA, this.cornerWin.LRadian, 10);
        let rayPosB = this.DUService.pos.getRayPos(this.cornerWin.outLine[4], this.cornerWin.DRadian - (Math.PI / 2), this.cornerWin.outThickness);
        let shadowPosB = this.DUService.pos.getRayPos(rayPosB, this.cornerWin.DRadian, 10);
        let intersectPos = this.DUService.pos.getIntersect(rayPosA, shadowPosA, rayPosB, shadowPosB);
        let posArr = [this.cornerWin.outLine[2], rayPosA, intersectPos, rayPosB, this.cornerWin.outLine[4], this.cornerWin.outLine[3]];
        let path = this.DUService.svg.getPath(true, ...posArr);
        return path;
    }
    /** 获取path的特定线段中心坐标 */
    getCenterPos(num) {
        return this.DUService.pos.getCenterPos(this.cornerWin.outLine[num], this.cornerWin.outLine[num + 1] ? this.cornerWin.outLine[num + 1] : this.cornerWin.outLine[0]);
    }
    /** 获取点数据 */
    getALLCircleData(transform) {
        if (!transform)
            return null;
        let data = {
            r: 96,
            overR: 128,
            data: [
                /** 左 */
                {
                    pos: this.getCenterPos(1), func: (e) => {
                        this.cornerWin.mode = 'leftMove';
                        this.setChoose(e);
                        console.log("left");
                    }
                },
                /** 右 */
                {
                    pos: this.getCenterPos(3), func: (e) => {
                        this.cornerWin.mode = 'rightMove';
                        this.setChoose(e);
                        console.log("right");
                    }
                },
                /** 上 */
                {
                    pos: this.getCenterPos(2), func: (e) => {
                        this.cornerWin.mode = 'upMove';
                        this.setChoose(e);
                        console.log("up");
                    }
                },
                /** 下 */
                {
                    pos: this.getCenterPos(4), func: (e) => {
                        this.cornerWin.mode = 'downMove';
                        this.setChoose(e);
                        console.log("down");
                    }
                },
            ],
            transform: transform
        };
        return data;
    }
    /** 激活窗 */
    setActive(e) {
        if (e.which == 1) {
            this.setChoose(e);
            this.dataService.cache.cornerWin.hideAllCircle = false;
            this.dataService.cache.cornerWin.hideMoveCircle = true;
            this.cornerWin.mode = 'move';
            this.domService.svgCornerWin.emit();
        }
        else if (e.which == 3) {
            this.rightService.cornWin.emit({ e: e, cornerWin: this.cornerWin });
        }
    }
    /** 获取标注线 */
    getLabelLines() {
        /* 判断 */
        if (this.cornerWin.outLine == undefined || this.cornerWin.outLine == null || this.cornerWin.outLine.length != 6)
            return null;
        /* 主体数据 */
        let datas = {
            img: this.dataService.cmd.cornerWin.ico.url,
            imgWidth: this.dataService.cmd.cornerWin.ico.width,
            imgHeight: this.dataService.cmd.cornerWin.ico.height,
            data: [],
            movePos: this.cornerWin.pos
        };
        let text = null;
        /* 获取单独标签数据方法 */
        let getDataFunc = (posArr) => {
            text = this.dataService.cmd.getPixelTransLength(this.DUService.pos.getDistance(posArr[0], posArr[1]), 'mm');
            text = parseInt(text.toFixed(0));
            return {
                line: [posArr[0], posArr[1]],
                text: text
            };
        };
        /** 左深度 */
        let newPosArr = this.DUService.pos.getPosTrans(this.cornerWin.outLine[0], this.cornerWin.outLine[1], -this.dataService.cmd.cornerWin.depthHeight);
        datas.data.push(getDataFunc(newPosArr));
        /** 下深度 */
        newPosArr = this.DUService.pos.getPosTrans(this.cornerWin.outLine[5], this.cornerWin.outLine[0], -this.dataService.cmd.cornerWin.depthHeight);
        datas.data.push(getDataFunc(newPosArr));
        /** 左宽度 */
        newPosArr = this.DUService.pos.getPosTrans(this.cornerWin.outLine[1], this.cornerWin.outLine[2], this.dataService.cmd.cornerWin.widthHight + this.cornerWin.LThickness);
        datas.data.push(getDataFunc(newPosArr));
        /** 下宽度 */
        newPosArr = this.DUService.pos.getPosTrans(this.cornerWin.outLine[4], this.cornerWin.outLine[5], this.dataService.cmd.cornerWin.widthHight + this.cornerWin.DThickness);
        datas.data.push(getDataFunc(newPosArr));
        return datas;
    }
    ngOnInit() {
        this.cornerWin.lateChooseFuncArr.push(() => {
            this.popService.panelRight.emit(this.cornerWin);
        });
    }
};
CornerWinComponent.ctorParameters = () => [
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__["CalculatorsService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_3__["JdesignUtil2dService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_4__["JdesignDataService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_5__["DomUpdateService"] },
    { type: _services_right_menu_service__WEBPACK_IMPORTED_MODULE_6__["RightMenuService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_7__["PopDivService"] }
];
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [Object])
], CornerWinComponent.prototype, "cornerWin", null);
CornerWinComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[cornerWin]',
        template: __webpack_require__(/*! raw-loader!./corner-win.component.html */ "./node_modules/raw-loader/index.js!./src/app/svg/dom/corner-wins/corner-win/corner-win.component.html"),
        styles: [__webpack_require__(/*! ./corner-win.component.scss */ "./src/app/svg/dom/corner-wins/corner-win/corner-win.component.scss")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_services_calculators_service__WEBPACK_IMPORTED_MODULE_2__["CalculatorsService"],
        _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_3__["JdesignUtil2dService"],
        _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_4__["JdesignDataService"],
        _services_dom_update_service__WEBPACK_IMPORTED_MODULE_5__["DomUpdateService"],
        _services_right_menu_service__WEBPACK_IMPORTED_MODULE_6__["RightMenuService"],
        _services_pop_div_service__WEBPACK_IMPORTED_MODULE_7__["PopDivService"]])
], CornerWinComponent);



/***/ }),

/***/ "./src/app/svg/dom/corner-wins/corner-wins.component.scss":
/*!****************************************************************!*\
  !*** ./src/app/svg/dom/corner-wins/corner-wins.component.scss ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3N2Zy9kb20vY29ybmVyLXdpbnMvY29ybmVyLXdpbnMuY29tcG9uZW50LnNjc3MifQ== */"

/***/ }),

/***/ "./src/app/svg/dom/corner-wins/corner-wins.component.ts":
/*!**************************************************************!*\
  !*** ./src/app/svg/dom/corner-wins/corner-wins.component.ts ***!
  \**************************************************************/
/*! exports provided: CornerWinsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CornerWinsComponent", function() { return CornerWinsComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");





let CornerWinsComponent = class CornerWinsComponent {
    constructor(DUService, dataService, domService, ref) {
        this.DUService = DUService;
        this.dataService = dataService;
        this.domService = domService;
        this.ref = ref;
        this.domService.svgCornerWin.subscribe(() => {
            this.ref.detectChanges();
        });
    }
    ngOnInit() {
        if (this.dataService.cmd.common.initLog) {
            this.DUService.out.redLog('cornWins is ok!!');
        }
    }
};
CornerWinsComponent.ctorParameters = () => [
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_3__["JdesignDataService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_4__["DomUpdateService"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"] }
];
CornerWinsComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[cornerWins]',
        template: __webpack_require__(/*! raw-loader!./corner-wins.component.html */ "./node_modules/raw-loader/index.js!./src/app/svg/dom/corner-wins/corner-wins.component.html"),
        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
        styles: [__webpack_require__(/*! ./corner-wins.component.scss */ "./src/app/svg/dom/corner-wins/corner-wins.component.scss")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"],
        _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_3__["JdesignDataService"],
        _services_dom_update_service__WEBPACK_IMPORTED_MODULE_4__["DomUpdateService"],
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]])
], CornerWinsComponent);



/***/ }),

/***/ "./src/app/svg/dom/corner-wins/corner-wins.module.ts":
/*!***********************************************************!*\
  !*** ./src/app/svg/dom/corner-wins/corner-wins.module.ts ***!
  \***********************************************************/
/*! exports provided: CornerWinsModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CornerWinsModule", function() { return CornerWinsModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _corner_wins_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./corner-wins.component */ "./src/app/svg/dom/corner-wins/corner-wins.component.ts");
/* harmony import */ var _corner_win_corner_win_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./corner-win/corner-win.component */ "./src/app/svg/dom/corner-wins/corner-win/corner-win.component.ts");
/* harmony import */ var _common_label_circle_label_circle_module__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common/label-circle/label-circle.module */ "./src/app/svg/dom/common/label-circle/label-circle.module.ts");
/* harmony import */ var _common_label_lines_label_lines_module__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../common/label-lines/label-lines.module */ "./src/app/svg/dom/common/label-lines/label-lines.module.ts");







let CornerWinsModule = class CornerWinsModule {
};
CornerWinsModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
            _common_label_circle_label_circle_module__WEBPACK_IMPORTED_MODULE_5__["LabelCircleModule"],
            _common_label_lines_label_lines_module__WEBPACK_IMPORTED_MODULE_6__["LabelLinesModule"]
        ],
        declarations: [_corner_wins_component__WEBPACK_IMPORTED_MODULE_3__["CornerWinsComponent"], _corner_win_corner_win_component__WEBPACK_IMPORTED_MODULE_4__["CornerWinComponent"]],
        exports: [_corner_wins_component__WEBPACK_IMPORTED_MODULE_3__["CornerWinsComponent"]]
    })
], CornerWinsModule);



/***/ }),

/***/ "./src/app/svg/dom/cowalls/cowall-shadow/cowall-shadow.component.scss":
/*!****************************************************************************!*\
  !*** ./src/app/svg/dom/cowalls/cowall-shadow/cowall-shadow.component.scss ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3N2Zy9kb20vY293YWxscy9jb3dhbGwtc2hhZG93L2Nvd2FsbC1zaGFkb3cuY29tcG9uZW50LnNjc3MifQ== */"

/***/ }),

/***/ "./src/app/svg/dom/cowalls/cowall-shadow/cowall-shadow.component.ts":
/*!**************************************************************************!*\
  !*** ./src/app/svg/dom/cowalls/cowall-shadow/cowall-shadow.component.ts ***!
  \**************************************************************************/
/*! exports provided: CowallShadowComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CowallShadowComponent", function() { return CowallShadowComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");







let CowallShadowComponent = class CowallShadowComponent {
    constructor(dataService, DUService, domService, ref, calService, popService) {
        this.dataService = dataService;
        this.DUService = DUService;
        this.domService = domService;
        this.ref = ref;
        this.calService = calService;
        this.popService = popService;
        this.transformMsg = null;
        this.labelPosArr = [{ x: 0, y: 0 }, { x: 0, y: 0 }];
        this.domService.svgCowallShadow.subscribe(() => {
            this.ref.detectChanges();
        });
    }
    ngOnInit() {
        if (this.dataService.cmd.common.initLog) {
            this.DUService.out.redLog('cowall-shadow is ok!!');
        }
    }
    /** 返回是否为 */
    isShow() {
        if (this.dataService.cmd != undefined
            && this.dataService.cache.common.mode == 'drawWall'
            && this.dataService.cache.wall.ShadowPosArr != null
            && !this.DUService.pos.isSamePos(this.dataService.cache.wall.ShadowPosArr[0], this.dataService.cache.wall.ShadowPosArr[1]))
            return true;
        else
            return false;
    }
    /** 数据获取 */
    getLabelData() {
        let line = this.DUService.pos.getPosTrans(this.dataService.cache.wall.ShadowPosArr[0], this.dataService.cache.wall.ShadowPosArr[1], -(this.dataService.cmd.wall.thickness / 2 + this.dataService.cmd.cowall.height));
        let distance = this.DUService.pos.getDistance(line[0], line[1]);
        distance = this.dataService.cmd.getDefaultLength(distance);
        distance = parseInt(distance.toFixed(0));
        let data = {
            img: this.dataService.cmd.cowall.ico.url,
            imgWidth: this.dataService.cmd.cowall.ico.width,
            imgHeight: this.dataService.cmd.cowall.ico.height,
            data: [{
                    line: line,
                    text: ''
                }]
        };
        return data;
    }
};
CowallShadowComponent.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_3__["JdesignUtil2dService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_4__["DomUpdateService"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_5__["CalculatorsService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_6__["PopDivService"] }
];
CowallShadowComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[cowall-shadow]',
        template: __webpack_require__(/*! raw-loader!./cowall-shadow.component.html */ "./node_modules/raw-loader/index.js!./src/app/svg/dom/cowalls/cowall-shadow/cowall-shadow.component.html"),
        styles: [__webpack_require__(/*! ./cowall-shadow.component.scss */ "./src/app/svg/dom/cowalls/cowall-shadow/cowall-shadow.component.scss")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__["JdesignDataService"],
        _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_3__["JdesignUtil2dService"],
        _services_dom_update_service__WEBPACK_IMPORTED_MODULE_4__["DomUpdateService"],
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"],
        _services_calculators_service__WEBPACK_IMPORTED_MODULE_5__["CalculatorsService"],
        _services_pop_div_service__WEBPACK_IMPORTED_MODULE_6__["PopDivService"]])
], CowallShadowComponent);



/***/ }),

/***/ "./src/app/svg/dom/cowalls/cowall/cowall.component.scss":
/*!**************************************************************!*\
  !*** ./src/app/svg/dom/cowalls/cowall/cowall.component.scss ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".label_img {\n  text-align: center;\n}\n\n.label_text {\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  text-anchor: middle;\n  font-family: \"Frutiger Next LT W1G\", Calibri, Arial, Helvetica, sans-serif;\n  font-size: 18px;\n  text-shadow: #f3f3f3 -1px -1px 0px, #f3f3f3 -1px 1px 0px, #f3f3f3 1px -1px 0px, #f3f3f3 1px 1px 0px;\n  fill: #5f5f5f;\n  font-weight: 900;\n}\n\n.label_path {\n  stroke: #5f5f5f;\n  stroke-width: 1;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc3ZnL2RvbS9jb3dhbGxzL2Nvd2FsbC9EOlxca25vd2xlZGdlXFxoZ1xcb2xkXFxvbGRSb29tL3NyY1xcYXBwXFxzdmdcXGRvbVxcY293YWxsc1xcY293YWxsXFxjb3dhbGwuY29tcG9uZW50LnNjc3MiLCJzcmMvYXBwL3N2Zy9kb20vY293YWxscy9jb3dhbGwvY293YWxsLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksa0JBQUE7QUNDSjs7QURFQTtFQUNJLDZDQUFBO0VBQ0EsbUJBQUE7RUFDQSwwRUFBQTtFQUNBLGVBQUE7RUFDQSxtR0FBQTtFQUNBLGFBQUE7RUFDQSxnQkFBQTtBQ0NKOztBREVBO0VBQ0ksZUFBQTtFQUNBLGVBQUE7QUNDSiIsImZpbGUiOiJzcmMvYXBwL3N2Zy9kb20vY293YWxscy9jb3dhbGwvY293YWxsLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmxhYmVsX2ltZyB7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbn1cclxuXHJcbi5sYWJlbF90ZXh0IHtcclxuICAgIC13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwKTtcclxuICAgIHRleHQtYW5jaG9yOiBtaWRkbGU7XHJcbiAgICBmb250LWZhbWlseTogXCJGcnV0aWdlciBOZXh0IExUIFcxR1wiLCBDYWxpYnJpLCBBcmlhbCwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmO1xyXG4gICAgZm9udC1zaXplOiAxOHB4O1xyXG4gICAgdGV4dC1zaGFkb3c6IHJnYigyNDMsIDI0MywgMjQzKSAtMXB4IC0xcHggMHB4LCByZ2IoMjQzLCAyNDMsIDI0MykgLTFweCAxcHggMHB4LCByZ2IoMjQzLCAyNDMsIDI0MykgMXB4IC0xcHggMHB4LCByZ2IoMjQzLCAyNDMsIDI0MykgMXB4IDFweCAwcHg7XHJcbiAgICBmaWxsOiAjNWY1ZjVmO1xyXG4gICAgZm9udC13ZWlnaHQ6IDkwMDtcclxufVxyXG5cclxuLmxhYmVsX3BhdGgge1xyXG4gICAgc3Ryb2tlOiAjNWY1ZjVmO1xyXG4gICAgc3Ryb2tlLXdpZHRoOiAxXHJcbn0iLCIubGFiZWxfaW1nIHtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xufVxuXG4ubGFiZWxfdGV4dCB7XG4gIC13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwKTtcbiAgdGV4dC1hbmNob3I6IG1pZGRsZTtcbiAgZm9udC1mYW1pbHk6IFwiRnJ1dGlnZXIgTmV4dCBMVCBXMUdcIiwgQ2FsaWJyaSwgQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZjtcbiAgZm9udC1zaXplOiAxOHB4O1xuICB0ZXh0LXNoYWRvdzogI2YzZjNmMyAtMXB4IC0xcHggMHB4LCAjZjNmM2YzIC0xcHggMXB4IDBweCwgI2YzZjNmMyAxcHggLTFweCAwcHgsICNmM2YzZjMgMXB4IDFweCAwcHg7XG4gIGZpbGw6ICM1ZjVmNWY7XG4gIGZvbnQtd2VpZ2h0OiA5MDA7XG59XG5cbi5sYWJlbF9wYXRoIHtcbiAgc3Ryb2tlOiAjNWY1ZjVmO1xuICBzdHJva2Utd2lkdGg6IDE7XG59Il19 */"

/***/ }),

/***/ "./src/app/svg/dom/cowalls/cowall/cowall.component.ts":
/*!************************************************************!*\
  !*** ./src/app/svg/dom/cowalls/cowall/cowall.component.ts ***!
  \************************************************************/
/*! exports provided: CowallComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CowallComponent", function() { return CowallComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _common_jdesign_JCowall__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../common/jdesign/JCowall */ "./src/app/svg/common/jdesign/JCowall.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");







let CowallComponent = class CowallComponent {
    constructor(dataService, DUService, calService, popService) {
        this.dataService = dataService;
        this.DUService = DUService;
        this.calService = calService;
        this.popService = popService;
        this._distance = null;
        this._radian = undefined;
        this._displayText = undefined;
        this.inLine = undefined;
        this.labelData = undefined;
    }
    set cowall(data) {
        this._cowall = data;
    }
    get cowall() { return this._cowall; }
    ngOnInit() {
        this.cowall.lateChooseFuncArr.push(() => {
            // console.log(this.cowall)
            this.popService.panelRight.emit(this.cowall);
        });
    }
    ngDoCheck() {
        this.inLine = this.cowall.getDrawInLine();
        if (this.inLine)
            this.labelData = this.getLabelData();
        else
            this.labelData = undefined;
    }
    mouseOver(e) {
        if (this.dataService.cmd.floorplan.debugPos != null && this.dataService.cmd.floorplan.debugPos != undefined) {
            let data = {
                text: `${this.cowall.id}:{
          edge:${this.cowall.edgeID};
          next:${this.cowall.nextID};
          prev:${this.cowall.prevID};
          partner:${this.cowall.partnerID};
          room:${this.cowall.roomID};
          points:${this.cowall.getPointStart().id},${this.cowall.getPointEnd().id};
          rotate:${this.cowall.getRotate()},
          distance:${this.cowall.getDistance()}
        }`,
                position: this.dataService.cmd.floorplan.debugPos
            };
            this.popService.message.emit(data);
        }
    }
    /** 获取文本 */
    getText(line) {
        let text = this.cowall.id;
        if (!this.dataService.cmd.cowall.displayName) {
            this._distance = this.DUService.pos.getDistance(line[0], line[1]);
            // this._distance = this.dataService.cmd.getDefaultLength(this._distance)
            if (!this.cowall.labelDisplay || (this.dataService.cache.common.mode != 'normal' &&
                this.dataService.cache.common.choose != null &&
                this.dataService.cache.common.choose.type == "wall"))
                return '';
            // let numText = this._distance.toString().split('.')[0]
            let numText = this._distance.toFixed(0);
            text = numText;
        }
        return text;
    }
    /* 数据获取(调试模式) */
    getLabelDataDebug() {
        let radian = this.DUService.pos.getRadian(this.inLine[0], this.inLine[1]);
        radian = this.DUService.pos.getLimitRadian(radian, Math.PI / 2);
        let data = {
            img: this.dataService.cmd.cowall.ico.url,
            imgWidth: this.dataService.cmd.cowall.ico.width,
            imgHeight: this.dataService.cmd.cowall.ico.height,
            className: this.cowall.id,
            fontSize: 100,
            isRemoveStyle: true,
            data: [{
                    line: this.inLine,
                    text: this.cowall.id,
                    radian: radian
                }]
        };
        return data;
    }
    /** 数据获取 */
    getLabelData() {
        if (this.dataService.cache.floorplan.display.inLabel_inOrCenterWall) {
            this.inLine = this.DUService.pos.getPosTrans(this.inLine[0], this.inLine[1], -this.dataService.cmd.cowall.height);
        }
        else {
            let posArr = this.cowall.getPosArr();
            this.inLine = this.DUService.pos.getPosTrans(posArr[0], posArr[1], -this.dataService.cmd.cowall.height);
        }
        if (!this.inLine)
            return undefined;
        let radian = this.DUService.pos.getRadian(this.inLine[0], this.inLine[1]);
        this._radian = radian;
        radian = this.DUService.pos.getLimitRadian(radian, Math.PI / 2);
        let data = {
            img: this.dataService.cmd.cowall.ico.url,
            imgWidth: this.dataService.cmd.cowall.ico.width,
            imgHeight: this.dataService.cmd.cowall.ico.height,
            className: this.cowall.id,
            data: [{
                    line: this.inLine,
                    // text: this.getText(this.inLine),
                    text: this.cowall.id,
                    radian: radian
                }]
        };
        return data;
    }
    /** 设置输出 */
    setInput(event) {
        // this.isInPut(this._distance, event.pos)
        let displayDistance = this.DUService.pos.getDistance(this.inLine[0], this.inLine[1]);
        this.dataService.cache.cowall.inputData[this.cowall.id] = {
            pos: event.pos,
            text: this._distance,
            radian: this._radian,
            displayText: displayDistance,
            distance: this._distance
        };
    }
    /** 是否显示 */
    isShow() {
        let posArr = this.cowall.getPosArr();
        let a = !this._cowall.getWall().isVeryShort && !this.DUService.pos.isSamePos(posArr[0], posArr[1]);
        return a;
    }
};
CowallComponent.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_3__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_4__["JdesignUtil2dService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_5__["CalculatorsService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_6__["PopDivService"] }
];
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _common_jdesign_JCowall__WEBPACK_IMPORTED_MODULE_2__["JCowall"]),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_common_jdesign_JCowall__WEBPACK_IMPORTED_MODULE_2__["JCowall"]])
], CowallComponent.prototype, "cowall", null);
CowallComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[cowall]',
        template: __webpack_require__(/*! raw-loader!./cowall.component.html */ "./node_modules/raw-loader/index.js!./src/app/svg/dom/cowalls/cowall/cowall.component.html"),
        styles: [__webpack_require__(/*! ./cowall.component.scss */ "./src/app/svg/dom/cowalls/cowall/cowall.component.scss")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_3__["JdesignDataService"],
        _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_4__["JdesignUtil2dService"],
        _services_calculators_service__WEBPACK_IMPORTED_MODULE_5__["CalculatorsService"],
        _services_pop_div_service__WEBPACK_IMPORTED_MODULE_6__["PopDivService"]])
], CowallComponent);



/***/ }),

/***/ "./src/app/svg/dom/cowalls/cowalls.component.scss":
/*!********************************************************!*\
  !*** ./src/app/svg/dom/cowalls/cowalls.component.scss ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3N2Zy9kb20vY293YWxscy9jb3dhbGxzLmNvbXBvbmVudC5zY3NzIn0= */"

/***/ }),

/***/ "./src/app/svg/dom/cowalls/cowalls.component.ts":
/*!******************************************************!*\
  !*** ./src/app/svg/dom/cowalls/cowalls.component.ts ***!
  \******************************************************/
/*! exports provided: CowallsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CowallsComponent", function() { return CowallsComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");





let CowallsComponent = class CowallsComponent {
    constructor(ref, dataService, DUService, domSerive) {
        this.ref = ref;
        this.dataService = dataService;
        this.DUService = DUService;
        this.domSerive = domSerive;
        this.domSerive.svgCowall.subscribe(() => {
            this.ref.detectChanges();
        });
    }
    ngOnInit() {
        if (this.dataService.cmd.common.initLog) {
            this.DUService.out.redLog('cowalls is ok!!');
        }
    }
    getCowallArr() {
        let cowalls = this.DUService.cal.getStringArrByNum(this.dataService.cowalls);
        return cowalls;
    }
    isDisplayOutLine() {
        // let a = (
        //   this.dataService.cache.floorplan.display.outLabel_inLine || this.dataService.cache.floorplan.display.outLabel_outLine ||
        //   this.dataService.cache.floorplan.display.outLabel_thickness)
        let a = this.dataService.cache.floorplan.display.outLabel;
        return a;
    }
};
CowallsComponent.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_3__["JdesignUtil2dService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_4__["DomUpdateService"] }
];
CowallsComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[cowalls]',
        template: __webpack_require__(/*! raw-loader!./cowalls.component.html */ "./node_modules/raw-loader/index.js!./src/app/svg/dom/cowalls/cowalls.component.html"),
        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
        styles: [__webpack_require__(/*! ./cowalls.component.scss */ "./src/app/svg/dom/cowalls/cowalls.component.scss")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"],
        _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__["JdesignDataService"],
        _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_3__["JdesignUtil2dService"],
        _services_dom_update_service__WEBPACK_IMPORTED_MODULE_4__["DomUpdateService"]])
], CowallsComponent);



/***/ }),

/***/ "./src/app/svg/dom/cowalls/cowalls.module.ts":
/*!***************************************************!*\
  !*** ./src/app/svg/dom/cowalls/cowalls.module.ts ***!
  \***************************************************/
/*! exports provided: CowallsModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CowallsModule", function() { return CowallsModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _cowalls_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cowalls.component */ "./src/app/svg/dom/cowalls/cowalls.component.ts");
/* harmony import */ var _cowall_cowall_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./cowall/cowall.component */ "./src/app/svg/dom/cowalls/cowall/cowall.component.ts");
/* harmony import */ var _cowall_shadow_cowall_shadow_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./cowall-shadow/cowall-shadow.component */ "./src/app/svg/dom/cowalls/cowall-shadow/cowall-shadow.component.ts");
/* harmony import */ var _common_label_lines_label_lines_module__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../common/label-lines/label-lines.module */ "./src/app/svg/dom/common/label-lines/label-lines.module.ts");
/* harmony import */ var _out_label_out_label_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./out-label/out-label.component */ "./src/app/svg/dom/cowalls/out-label/out-label.component.ts");








let CowallsModule = class CowallsModule {
};
CowallsModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
            _common_label_lines_label_lines_module__WEBPACK_IMPORTED_MODULE_6__["LabelLinesModule"]
        ],
        declarations: [_cowalls_component__WEBPACK_IMPORTED_MODULE_3__["CowallsComponent"], _cowall_cowall_component__WEBPACK_IMPORTED_MODULE_4__["CowallComponent"], _cowall_shadow_cowall_shadow_component__WEBPACK_IMPORTED_MODULE_5__["CowallShadowComponent"], _out_label_out_label_component__WEBPACK_IMPORTED_MODULE_7__["OutLabelComponent"]],
        exports: [_cowalls_component__WEBPACK_IMPORTED_MODULE_3__["CowallsComponent"]]
    })
], CowallsModule);



/***/ }),

/***/ "./src/app/svg/dom/cowalls/out-label/AnalysisOutLines.ts":
/*!***************************************************************!*\
  !*** ./src/app/svg/dom/cowalls/out-label/AnalysisOutLines.ts ***!
  \***************************************************************/
/*! exports provided: AnalysisOutLines */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnalysisOutLines", function() { return AnalysisOutLines; });
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../services/calculators.service */ "./src/app/services/calculators.service.ts");


class AnalysisOutLines {
    constructor(DUService, calService) {
        this.DUService = DUService;
        this.calService = calService;
    }
    /* 通过线段方向分类 */
    getMsgsByLineCompass(msgs) {
        let LMsgs = [];
        let RMsgs = [];
        let DMsgs = [];
        let UMsgs = [];
        /** 判断是否轴上相同 */
        let func = (arr, msg, isVertical) => {
            let minDistance = 1;
            let same = false;
            /** 垂直 */
            if (isVertical) {
                for (let i = 0; i < arr.length; i++) {
                    let absDistance = Math.abs(arr[i].pos.y - msg.pos.y);
                    let sameDistance = Math.abs(arr[i].length - msg.length);
                    if (absDistance <= minDistance && sameDistance <= minDistance) {
                        same = true;
                        break;
                    }
                }
                if (!same)
                    arr.push(msg);
            }
            /** 水平 */
            else {
                for (let i = 0; i < arr.length; i++) {
                    let absDistance = Math.abs(arr[i].pos.x - msg.pos.x);
                    let sameDistance = Math.abs(arr[i].length - msg.length);
                    if (absDistance <= minDistance && sameDistance <= minDistance) {
                        same = true;
                        break;
                    }
                }
                if (!same)
                    arr.push(msg);
            }
        };
        /** 对数据进行方向分类 */
        for (let i = 0; i < msgs.length; i++) {
            if (msgs[i] == undefined) {
                i += 1;
                if (i >= msgs.length) {
                    break;
                }
            }
            /** 垂直 */
            if (msgs[i].isVertical) {
                if (msgs[i].line[0].y > msgs[i].line[1].y) {
                    msgs[i].line[0].x = -1;
                    msgs[i].line[1].x = -1;
                    func(LMsgs, msgs[i], true);
                }
                else {
                    msgs[i].line[0].x = 1;
                    msgs[i].line[1].x = 1;
                    func(RMsgs, msgs[i], true);
                }
            }
            /** 水平 */
            else {
                if (msgs[i].line[0].x < msgs[i].line[1].x) {
                    msgs[i].line[0].y = -1;
                    msgs[i].line[1].y = -1;
                    func(UMsgs, msgs[i], false);
                }
                else {
                    msgs[i].line[0].y = 1;
                    msgs[i].line[1].y = 1;
                    func(DMsgs, msgs[i], false);
                }
            }
        }
        /** 长度 */
        this.DUService.cal.bubbleSortByAttr(LMsgs, 'length');
        this.DUService.cal.bubbleSortByAttr(RMsgs, 'length');
        this.DUService.cal.bubbleSortByAttr(UMsgs, 'length');
        this.DUService.cal.bubbleSortByAttr(DMsgs, 'length');
        return [LMsgs, RMsgs, UMsgs, DMsgs];
    }
    /**
   * 通过位置方向分类
   * @param centerPos
   * @returns (左,右,上,下)
   */
    getMsgsByDirection(centerPos, msgs) {
        let LMsgs = [];
        let RMsgs = [];
        let DMsgs = [];
        let UMsgs = [];
        /** 判断是否轴上相同 */
        let func = (arr, msg, isVertical) => {
            let minDistance = 1;
            let same = false;
            /** 垂直 */
            if (isVertical) {
                for (let i = 0; i < arr.length; i++) {
                    let absDistance = Math.abs(arr[i].pos.y - msg.pos.y);
                    let sameDistance = Math.abs(arr[i].length - msg.length);
                    if (absDistance <= minDistance && sameDistance <= minDistance) {
                        same = true;
                        break;
                    }
                }
                if (!same)
                    arr.push(msg);
            }
            /** 水平 */
            else {
                for (let i = 0; i < arr.length; i++) {
                    let absDistance = Math.abs(arr[i].pos.x - msg.pos.x);
                    let sameDistance = Math.abs(arr[i].length - msg.length);
                    if (absDistance <= minDistance && sameDistance <= minDistance) {
                        same = true;
                        break;
                    }
                }
                if (!same)
                    arr.push(msg);
            }
        };
        /** 对数据进行方向分类 */
        for (let i = 0; i < msgs.length; i++) {
            if (msgs[i] == undefined) {
                i += 1;
                if (i >= msgs.length) {
                    break;
                }
            }
            /** 垂直 */
            if (msgs[i].isVertical) {
                if (msgs[i].pos.x <= centerPos.x) {
                    func(LMsgs, msgs[i], true);
                }
                else {
                    func(RMsgs, msgs[i], true);
                }
            }
            /** 水平 */
            else {
                if (msgs[i].pos.y <= centerPos.y) {
                    func(UMsgs, msgs[i], false);
                }
                else {
                    func(DMsgs, msgs[i], false);
                }
            }
        }
        /** 长度 */
        this.DUService.cal.bubbleSortByAttr(LMsgs, 'length');
        this.DUService.cal.bubbleSortByAttr(RMsgs, 'length');
        this.DUService.cal.bubbleSortByAttr(UMsgs, 'length');
        this.DUService.cal.bubbleSortByAttr(DMsgs, 'length');
        return [LMsgs, RMsgs, UMsgs, DMsgs];
    }
    /** 获取合并线 */
    getCombineLines(lineMsgs, compass) {
        let headPos = undefined;
        let endPos = undefined;
        let originLine = [undefined, undefined];
        compass = compass.toUpperCase();
        let int = 0;
        let func = (cb) => {
            for (let i = 0; i < lineMsgs.length; i++) {
                int++;
                cb(lineMsgs[i]);
            }
        };
        switch (compass) {
            case "U":
            case "D":
                func((lineMsg) => {
                    let lineStartPos = lineMsg.line[0].x > lineMsg.line[1].x ? lineMsg.line[0] : lineMsg.line[1];
                    let lineEndPos = lineMsg.line[0].x > lineMsg.line[1].x ? lineMsg.line[1] : lineMsg.line[0];
                    if (headPos == undefined || lineStartPos.x > headPos.x) {
                        headPos = lineStartPos;
                        let newOriginLine = lineMsg.line[0].x > lineMsg.line[1].x ? lineMsg.originLine[0] : lineMsg.originLine[1];
                        originLine[0] = { x: newOriginLine.x, y: newOriginLine.y };
                        if (endPos == undefined)
                            endPos = headPos;
                        else
                            endPos.y = headPos.y;
                    }
                    if (endPos == undefined || lineEndPos.x < endPos.x) {
                        endPos = lineEndPos;
                        let newOriginLine = lineMsg.line[0].x > lineMsg.line[1].x ? lineMsg.originLine[1] : lineMsg.originLine[0];
                        originLine[1] = { x: newOriginLine.x, y: newOriginLine.y };
                        headPos.y = endPos.y;
                    }
                });
                break;
            case "L":
            case "R":
                func((lineMsg) => {
                    let lineStartPos = lineMsg.line[0].y > lineMsg.line[1].y ? lineMsg.originLine[0] : lineMsg.originLine[1];
                    let lineEndPos = lineMsg.line[0].y > lineMsg.line[1].y ? lineMsg.line[1] : lineMsg.line[0];
                    if (headPos == undefined || lineStartPos.y > headPos.y) {
                        headPos = lineStartPos;
                        let newOriginLine = lineMsg.line[0].y > lineMsg.line[1].y ? lineMsg.originLine[0] : lineMsg.originLine[1];
                        originLine[0] = { x: newOriginLine.x, y: newOriginLine.y };
                        if (endPos == undefined)
                            endPos = headPos;
                        else
                            endPos.x = headPos.x;
                    }
                    if (endPos == undefined || lineEndPos.y < endPos.y) {
                        let newOriginLine = lineMsg.line[0].y > lineMsg.line[1].y ? lineMsg.originLine[1] : lineMsg.originLine[0];
                        originLine[1] = { x: newOriginLine.x, y: newOriginLine.y };
                        endPos = lineEndPos;
                        headPos.x = endPos.x;
                    }
                });
                break;
        }
        if (!endPos || !headPos)
            return [];
        let centerPos = { x: (endPos.x + headPos.x) / 2, y: (endPos.y + headPos.y) / 2 };
        let distance = this.DUService.pos.getDistance(endPos, headPos);
        let newLine = {
            pos: centerPos,
            length: distance,
            isVertical: compass == 'U' || compass == 'D' ? false : true,
            line: [endPos, headPos],
            radian: compass == 'U' || compass == 'D' ? 0 : Math.PI / 2,
            level: lineMsgs[0].level,
            originLine: (originLine[0] && originLine[1]) ? (compass == "L" || compass == "D") ? originLine : [originLine[1], originLine[0]] : undefined
        };
        return [newLine];
    }
    /** 获取所有合并线 */
    getCombineAllLines(lineMsgs) {
        let newLineMsgs = [];
        newLineMsgs.push(this.getCombineLines(lineMsgs[0], 'L'));
        newLineMsgs.push(this.getCombineLines(lineMsgs[1], 'R'));
        newLineMsgs.push(this.getCombineLines(lineMsgs[2], 'U'));
        newLineMsgs.push(this.getCombineLines(lineMsgs[3], 'D'));
        return newLineMsgs;
    }
    /** 设置线段级数 */
    setMsgsLevel(msgs, isVertical, upLevel = 0) {
        let maxLevel = 0;
        for (let i = 0; i < msgs.length; i++) {
            msgs[i].level = upLevel;
            let isIntersect = false;
            let levelInt = 0;
            for (let j = 0; j < i; j++) {
                let absDistance = isVertical ? Math.abs(msgs[i].pos.y - msgs[j].pos.y) : Math.abs(msgs[i].pos.x - msgs[j].pos.x);
                let maxDistance = (msgs[i].length + msgs[j].length) / 2;
                if (absDistance < maxDistance) {
                    isIntersect = true;
                    levelInt = msgs[j].level;
                }
            }
            if (isIntersect) {
                msgs[i].level = levelInt + 1;
            }
            if (maxLevel < msgs[i].level)
                maxLevel = msgs[i].level;
        }
        return maxLevel;
    }
}
AnalysisOutLines.ctorParameters = () => [
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_0__["JdesignUtil2dService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_1__["CalculatorsService"] }
];


/***/ }),

/***/ "./src/app/svg/dom/cowalls/out-label/TransOutLines.ts":
/*!************************************************************!*\
  !*** ./src/app/svg/dom/cowalls/out-label/TransOutLines.ts ***!
  \************************************************************/
/*! exports provided: TransOutLines, LinePoint */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TransOutLines", function() { return TransOutLines; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinePoint", function() { return LinePoint; });
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../services/calculators.service */ "./src/app/services/calculators.service.ts");


class TransOutLines {
    constructor(DUService, calService) {
        this.DUService = DUService;
        this.calService = calService;
    }
    /** 墙转信息 */
    wallTransCenterLineMsg(wall) {
        let radian = wall.getRadian();
        if (radian == undefined)
            return undefined;
        let isVertical = false;
        if (this.DUService.pos.isParallelRadian(radian, 0)) {
            isVertical = false;
        }
        else if (this.DUService.pos.isParallelRadian(radian, Math.PI / 2)) {
            isVertical = true;
        }
        else {
            return undefined;
        }
        let line = wall.getPosArr();
        let distance = wall.getDistance();
        return {
            pos: { x: (line[0].x + line[1].x) / 2, y: (line[0].y + line[1].y) / 2 },
            level: 0,
            length: distance,
            isVertical: isVertical,
            radian: radian,
            line: this.DUService.obj.clone(line),
            wallID: wall.id,
            originLine: this.DUService.obj.clone(line)
        };
    }
    /** 有序墙转内线信息 */
    cowallTransInLineMsg(cowall) {
        let radian = cowall.getRadian();
        if (radian == undefined)
            return undefined;
        let isVertical = false;
        if (this.DUService.pos.isParallelRadian(radian, 0)) {
            isVertical = false;
        }
        else if (this.DUService.pos.isParallelRadian(radian, Math.PI / 2)) {
            isVertical = true;
        }
        else {
            return undefined;
        }
        let line = cowall.getInLine();
        let distance = this.DUService.pos.getDistance(line[0], line[1]);
        let data = {
            pos: { x: (line[0].x + line[1].x) / 2, y: (line[0].y + line[1].y) / 2 },
            level: 0,
            length: distance,
            isVertical: isVertical,
            radian: radian,
            line: this.DUService.obj.clone(line),
            cowallID: cowall.id,
            originLine: this.DUService.obj.clone(line)
        };
        return data;
    }
    /** 墙转墙厚信息 */
    wallTransThicknessMsg(wall) {
        let radian = wall.getRadian();
        if (radian == undefined)
            return undefined;
        let isVertical = false;
        if (this.DUService.pos.isParallelRadian(radian, 0)) {
            isVertical = false;
        }
        else if (this.DUService.pos.isParallelRadian(radian, Math.PI / 2)) {
            isVertical = true;
        }
        else {
            return undefined;
        }
        let wallPosArr = wall.getPosArr();
        let pointPos = { x: (wallPosArr[0].x + wallPosArr[1].x) / 2, y: (wallPosArr[0].y + wallPosArr[1].y) / 2 };
        radian = radian - Math.PI;
        let distance = wall.thickness;
        let line = [this.DUService.pos.getRayPos(pointPos, radian, distance), this.DUService.pos.getRayPos(pointPos, radian, -distance)];
        let data = {
            pos: pointPos,
            level: 0,
            length: distance,
            isVertical: !isVertical,
            radian: radian,
            line: this.DUService.obj.clone(line)
        };
        return data;
    }
    /** 墙转线段信息 */
    wallTransLineMsg(wall, isOut) {
        let cowalls = wall.getCowallArr();
        let radian = wall.getRadian();
        let isVertical = false;
        if (this.DUService.pos.isParallelRadian(radian, 0)) {
            isVertical = false;
        }
        else if (this.DUService.pos.isParallelRadian(radian, Math.PI / 2)) {
            isVertical = true;
        }
        else {
            return undefined;
        }
        let line = isOut ? wall.getOutLine() : wall.getInLine();
        let distance = this.DUService.pos.getDistance(line[0], line[1]);
        let data = {
            pos: { x: (line[0].x + line[1].x) / 2, y: (line[0].y + line[1].y) / 2 },
            level: 0,
            length: distance,
            isVertical: isVertical,
            radian: radian,
            line: this.DUService.obj.clone(line),
            wallID: wall.id,
            originLine: this.DUService.obj.clone(line)
        };
        return data;
    }
}
TransOutLines.ctorParameters = () => [
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_0__["JdesignUtil2dService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_1__["CalculatorsService"] }
];
class LinePoint {
}


/***/ }),

/***/ "./src/app/svg/dom/cowalls/out-label/out-label.component.scss":
/*!********************************************************************!*\
  !*** ./src/app/svg/dom/cowalls/out-label/out-label.component.scss ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3N2Zy9kb20vY293YWxscy9vdXQtbGFiZWwvb3V0LWxhYmVsLmNvbXBvbmVudC5zY3NzIn0= */"

/***/ }),

/***/ "./src/app/svg/dom/cowalls/out-label/out-label.component.ts":
/*!******************************************************************!*\
  !*** ./src/app/svg/dom/cowalls/out-label/out-label.component.ts ***!
  \******************************************************************/
/*! exports provided: OutLabelComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OutLabelComponent", function() { return OutLabelComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _TransOutLines__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./TransOutLines */ "./src/app/svg/dom/cowalls/out-label/TransOutLines.ts");
/* harmony import */ var _AnalysisOutLines__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./AnalysisOutLines */ "./src/app/svg/dom/cowalls/out-label/AnalysisOutLines.ts");







let OutLabelComponent = class OutLabelComponent {
    constructor(dataService, calService, DUService) {
        this.dataService = dataService;
        this.calService = calService;
        this.DUService = DUService;
        this.testPosArr = [];
        this.labelData = undefined;
        this.maxLevels = [];
        this.transOutLines = new _TransOutLines__WEBPACK_IMPORTED_MODULE_5__["TransOutLines"](this.DUService, this.calService);
        this.analysisOutLines = new _AnalysisOutLines__WEBPACK_IMPORTED_MODULE_6__["AnalysisOutLines"](this.DUService, this.calService);
    }
    ngOnInit() {
    }
    ngDoCheck() {
        this.maxLevels = [0, 0, 0, 0];
        let rectPosArr = this.getrectPosArr();
        if (rectPosArr && rectPosArr.length == 4) {
            this.testPosArr = rectPosArr;
            this.labelData = this.getHeadLabelData();
            this.labelData.data = this.getMainLabelDataByLineCompassTest(rectPosArr);
        }
        else {
            this.labelData = undefined;
        }
    }
    /** 筛选外墙 */
    selectOutWalls(walls) {
        for (let i = walls.length - 1; i >= 0; i--) {
            let cowalls = walls[i].getCowallArr();
            if (cowalls.length == 2)
                walls.splice(i, 1);
            else if (walls[i].getRadian() == undefined) {
                walls.splice(i, 1);
            }
        }
    }
    /** 收集内外线 */
    collectWallLinePoints(walls, isOut) {
        let msgs = [];
        for (let i = 0; i < walls.length; i++) {
            let msg = this.transOutLines.wallTransLineMsg(walls[i], isOut);
            if (msg)
                msgs.push(msg);
        }
        return msgs;
    }
    /* 收集点线数据(线段方向版测试) */
    getMainLabelDataByLineCompassTest(rect) {
        let walls = this.calService.transData.getUnArcWalls();
        this.selectOutWalls(walls);
        let labelData = [];
        let outMsgs = [];
        let centerPos = this.getCenterPos(rect[0], rect[2]);
        /** 内线计算 */
        outMsgs = this.collectWallLinePoints(walls, false);
        // outMsgs.push(...this.collectWallLinePoints(walls, true))
        let newMsgs = this.analysisOutLines.getMsgsByLineCompass(outMsgs);
        this.setCompassAndLevelMsgs(newMsgs);
        labelData.push(...this.pointLinesTransLabelData(newMsgs, rect));
        /** 外线计算 */
        this.setMaxLevelsPlus(1);
        outMsgs = this.collectWallLinePoints(walls, true);
        newMsgs = this.analysisOutLines.getMsgsByLineCompass(outMsgs);
        this.setCompassAndLevelMsgs(newMsgs, this.maxLevels);
        newMsgs = this.analysisOutLines.getCombineAllLines(newMsgs);
        labelData.push(...this.pointLinesTransLabelData(newMsgs, rect));
        return labelData;
    }
    /* 收集点线数据(线段方向版) */
    getMainLabelDataByLineCompass(rect) {
        let walls = this.calService.transData.getUnArcWalls();
        let cowalls = this.calService.wall.getCowallArr(walls);
        // this.selectOutWalls(walls)
        let labelData = [];
        let outMsgs = [];
        let centerPos = { x: 0, y: 0 };
        /** 内线计算 */
        for (let i = 0; i < cowalls.length; i++) {
            outMsgs.push(this.transOutLines.cowallTransInLineMsg(cowalls[i]));
        }
        let newMsgs = this.analysisOutLines.getMsgsByLineCompass(outMsgs);
        this.setCompassAndLevelMsgs(newMsgs);
        labelData.push(...this.pointLinesTransLabelData(newMsgs, rect));
        return labelData;
    }
    /** 收集点线数据(方向版) */
    getMainLabelDataByCompass(rect) {
        let walls = this.calService.transData.getUnArcWalls();
        this.selectOutWalls(walls);
        let labelData = [];
        let outMsgs = [];
        let centerPos = this.getCenterPos(rect[0], rect[2]);
        /** 内线计算 */
        outMsgs = this.collectWallLinePoints(walls, false);
        outMsgs.push(...this.collectWallLinePoints(walls, true));
        let newMsgs = this.analysisOutLines.getMsgsByDirection(centerPos, outMsgs);
        this.setCompassAndLevelMsgs(newMsgs);
        labelData.push(...this.pointLinesTransLabelData(newMsgs, rect));
        return labelData;
    }
    /** 收集点线数据(两层版) */
    getMainLabelDataByTwoLevel(rect) {
        let walls = this.calService.transData.getUnArcWalls();
        this.selectOutWalls(walls);
        let labelData = [];
        let outMsgs = [];
        let centerPos = this.getCenterPos(rect[0], rect[2]);
        /** 内线计算 */
        outMsgs = this.collectWallLinePoints(walls, false);
        // outMsgs.push(...this.collectWallLinePoints(walls, true))
        let newMsgs = this.analysisOutLines.getMsgsByDirection(centerPos, outMsgs);
        this.setCompassAndLevelMsgs(newMsgs);
        labelData.push(...this.pointLinesTransLabelData(newMsgs, rect));
        /** 外线计算 */
        this.setMaxLevelsPlus(1);
        outMsgs = this.collectWallLinePoints(walls, true);
        newMsgs = this.analysisOutLines.getMsgsByDirection(centerPos, outMsgs);
        this.setCompassAndLevelMsgs(newMsgs, this.maxLevels);
        newMsgs = this.analysisOutLines.getCombineAllLines(newMsgs);
        labelData.push(...this.pointLinesTransLabelData(newMsgs, rect));
        return labelData;
    }
    /* 追加级数 */
    setMaxLevelsPlus(num) {
        for (let i = 0; i < this.maxLevels.length; i++) {
            this.maxLevels[i] += 1;
        }
    }
    /** 设置方向和数据 */
    setCompassAndLevelMsgs(msgs, upLevels = [0, 0, 0, 0]) {
        this.maxLevels[0] = this.analysisOutLines.setMsgsLevel(msgs[0], true, upLevels[0]);
        this.maxLevels[1] = this.analysisOutLines.setMsgsLevel(msgs[1], true, upLevels[1]);
        this.maxLevels[2] = this.analysisOutLines.setMsgsLevel(msgs[2], false, upLevels[2]);
        this.maxLevels[3] = this.analysisOutLines.setMsgsLevel(msgs[3], false, upLevels[3]);
    }
    /** 获取中心点 */
    getCenterPos(startPos, endPos) {
        let newPos = { x: (startPos.x + endPos.x) / 2, y: (startPos.y + endPos.y) / 2 };
        return newPos;
    }
    /** 获取矩形四点 */
    getrectPosArr() {
        let posArr = this.calService.floorplan.getRectPosArr();
        return posArr;
    }
    /**
     * 获取线段头数据
     * @param msgs
     * @param rect
     */
    getHeadLabelData() {
        let datas = {
            img: this.dataService.cmd.cowall.ico.url,
            imgWidth: this.dataService.cmd.cowall.ico.width,
            imgHeight: this.dataService.cmd.cowall.ico.height,
            data: []
        };
        return datas;
    }
    /** 点线转线段数据 */
    pointLinesTransLabelData(msgs, rect) {
        let datas = [];
        let data = this.getLabelData(msgs[0], 'l', rect[0].x);
        datas.push(...data);
        data = this.getLabelData(msgs[1], 'r', rect[1].x);
        datas.push(...data);
        data = this.getLabelData(msgs[2], 'u', rect[0].y);
        datas.push(...data);
        data = this.getLabelData(msgs[3], 'd', rect[3].y);
        datas.push(...data);
        return datas;
    }
    /**
     * 获取方向坐标
     * @param compass 方向有(u上,d下,l左,r右)大小写通用
     * @param distance
     */
    getCompassPos(compass, distance) {
        let compassPos;
        compass = compass.toUpperCase();
        switch (compass) {
            case "U":
                compassPos = { x: 0, y: -distance };
                break;
            case "D":
                compassPos = { x: 0, y: distance };
                break;
            case "L":
                compassPos = { x: -distance, y: 0 };
                break;
            case "R":
                compassPos = { x: distance, y: 0 };
                break;
        }
        return compassPos;
    }
    /**
     *
     * @param msgs
     * @param compass 方向有(u上,d下,l左,r右)大小写通用
     *  @param originDistance 起源距离(实际上只是坐标一部分)
     */
    getLabelData(msgs, compass, originDistance) {
        let datas = [];
        compass = compass.toUpperCase();
        let compassPos = this.getCompassPos(compass, this.dataService.cmd.cowall.outLabel.centerDistance);
        let levelPos = this.getCompassPos(compass, this.dataService.cmd.cowall.outLabel.levelDistance);
        let getMultiFunc = (pos, level) => {
            let newPos = { x: pos.x * level, y: pos.y * level };
            return newPos;
        };
        for (let i = 0; i < msgs.length; i++) {
            let newLevelPos = getMultiFunc(levelPos, msgs[i].level);
            let posX = compass == "L" || compass == "R" ? originDistance : msgs[i].pos.x;
            let posY = compass == "U" || compass == "D" ? originDistance : msgs[i].pos.y;
            let newPoint = { x: posX + compassPos.x + newLevelPos.x, y: posY + compassPos.y + newLevelPos.y };
            let lineRadian = msgs[i].isVertical ? Math.PI / 2 : 0;
            let rayPosA = this.DUService.pos.getRayPos(newPoint, lineRadian, msgs[i].length / 2);
            let rayPosB = this.DUService.pos.getRayPos(newPoint, lineRadian, -msgs[i].length / 2);
            let line = [rayPosA, rayPosB];
            let text = msgs[i].length.toFixed(0).toString();
            // console.log(msgs[i].originLine)
            let data = {
                line: line,
                text: text,
                radian: lineRadian,
                auxiliary: msgs[i].originLine ? (compass == "L" || compass == "D") ? [[msgs[i].originLine[0], line[0]], [msgs[i].originLine[1], line[1]]] : [[msgs[i].originLine[1], line[0]], [msgs[i].originLine[0], line[1]]] : []
            };
            datas.push(data);
        }
        return datas;
    }
};
OutLabelComponent.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__["JdesignDataService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_3__["CalculatorsService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_4__["JdesignUtil2dService"] }
];
OutLabelComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[outLabel]',
        template: __webpack_require__(/*! raw-loader!./out-label.component.html */ "./node_modules/raw-loader/index.js!./src/app/svg/dom/cowalls/out-label/out-label.component.html"),
        styles: [__webpack_require__(/*! ./out-label.component.scss */ "./src/app/svg/dom/cowalls/out-label/out-label.component.scss")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__["JdesignDataService"],
        _services_calculators_service__WEBPACK_IMPORTED_MODULE_3__["CalculatorsService"],
        _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_4__["JdesignUtil2dService"]])
], OutLabelComponent);



/***/ }),

/***/ "./src/app/svg/dom/doors/door/door.component.scss":
/*!********************************************************!*\
  !*** ./src/app/svg/dom/doors/door/door.component.scss ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".door_path {\n  fill: white;\n  stroke: black;\n}\n\n.door_mirror {\n  -webkit-transform: scaleX(-1);\n          transform: scaleX(-1);\n}\n\n.door_in {\n  -webkit-transform: scaleY(-1);\n          transform: scaleY(-1);\n}\n\n.door_mirror_in {\n  -webkit-transform: scale(-1, -1);\n          transform: scale(-1, -1);\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc3ZnL2RvbS9kb29ycy9kb29yL0Q6XFxrbm93bGVkZ2VcXGhnXFxvbGRcXG9sZFJvb20vc3JjXFxhcHBcXHN2Z1xcZG9tXFxkb29yc1xcZG9vclxcZG9vci5jb21wb25lbnQuc2NzcyIsInNyYy9hcHAvc3ZnL2RvbS9kb29ycy9kb29yL2Rvb3IuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxXQUFBO0VBQ0EsYUFBQTtBQ0NKOztBREVBO0VBRUksNkJBQUE7VUFBQSxxQkFBQTtBQ0FKOztBREdBO0VBQ0ksNkJBQUE7VUFBQSxxQkFBQTtBQ0FKOztBREdBO0VBQ0ksZ0NBQUE7VUFBQSx3QkFBQTtBQ0FKIiwiZmlsZSI6InNyYy9hcHAvc3ZnL2RvbS9kb29ycy9kb29yL2Rvb3IuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuZG9vcl9wYXRoIHtcclxuICAgIGZpbGw6IHJnYmEoJGNvbG9yOiAjZmZmZmZmLCAkYWxwaGE6IDEpO1xyXG4gICAgc3Ryb2tlOiBibGFjaztcclxufVxyXG5cclxuLmRvb3JfbWlycm9yIHtcclxuICAgIC8vIHRyYW5zZm9ybS1vcmlnaW46IDUwJSwgNTAlO1xyXG4gICAgdHJhbnNmb3JtOiBzY2FsZVgoLTEpXHJcbn1cclxuXHJcbi5kb29yX2luIHtcclxuICAgIHRyYW5zZm9ybTogc2NhbGVZKC0xKVxyXG59XHJcblxyXG4uZG9vcl9taXJyb3JfaW4ge1xyXG4gICAgdHJhbnNmb3JtOiBzY2FsZSgtMSwgLTEpXHJcbn0iLCIuZG9vcl9wYXRoIHtcbiAgZmlsbDogd2hpdGU7XG4gIHN0cm9rZTogYmxhY2s7XG59XG5cbi5kb29yX21pcnJvciB7XG4gIHRyYW5zZm9ybTogc2NhbGVYKC0xKTtcbn1cblxuLmRvb3JfaW4ge1xuICB0cmFuc2Zvcm06IHNjYWxlWSgtMSk7XG59XG5cbi5kb29yX21pcnJvcl9pbiB7XG4gIHRyYW5zZm9ybTogc2NhbGUoLTEsIC0xKTtcbn0iXX0= */"

/***/ }),

/***/ "./src/app/svg/dom/doors/door/door.component.ts":
/*!******************************************************!*\
  !*** ./src/app/svg/dom/doors/door/door.component.ts ***!
  \******************************************************/
/*! exports provided: DoorComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DoorComponent", function() { return DoorComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");
/* harmony import */ var _services_right_menu_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../services/right-menu.service */ "./src/app/services/right-menu.service.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");








let DoorComponent = class DoorComponent {
    constructor(calService, DUService, dataService, domService, rightService, popService) {
        this.calService = calService;
        this.DUService = DUService;
        this.dataService = dataService;
        this.domService = domService;
        this.rightService = rightService;
        this.popService = popService;
        this.originPos = null;
        this.pixSize = null;
        this.transformString = null;
        this._leftPos = undefined;
        this._rightPos = undefined;
    }
    set door(data) {
        this._door = data;
    }
    get door() { return this._door; }
    mouseDown(e) {
        this.dataService.cache.common.choose = this.door;
        this.dataService.cache.common.firstPos = { x: e.offsetX, y: e.offsetY };
        this.dataService.cache.common.blockON = true;
        this.dataService.cmd.cowall.hide = true;
        this.door.mode = 'move';
        this.domService.allSvg.emit();
        this.dataService.cache.common.initUpdate(['door']);
        this.dataService.cache.doorWin.displayLabel = true;
        this.door.act3D.start();
        if (e.which == 3) {
            this.rightService.door.emit({ e: e, door: this.door });
        }
    }
    mouseOver(e) {
        if (this.dataService.cmd.floorplan.debugPos != null && this.dataService.cmd.floorplan.debugPos != undefined) {
            let data = {
                text: `${this.door.id}:{
        wall:${this.door.wallID};
        rotate:${this.door.getRotate()};
        per:${this.door.distancePer};
        out:${this.door.out};
        mirror:${this.door.mirror};
      }`,
                position: this.dataService.cmd.floorplan.debugPos
            };
            this.popService.message.emit(data);
        }
    }
    /** 获取path */
    getPath() {
        let pathString = this.calService.door.getNormalPathString(this.door, { x: 0, y: 0 });
        return pathString;
    }
    ngOnInit() {
        this.door.lateChooseFuncArr.push(() => {
            this.popService.panelRight.emit(this.door);
        });
    }
    ngDoCheck() {
        this.originPos = this.door.getOriginPos();
        let size = this.door.getPixSize();
        this._leftPos = { x: -size.width / 2, y: 0 };
        this._rightPos = { x: size.width / 2, y: 0 };
        this.pixSize = {
            width: size.width,
            height: this.door.plankType == 'twoDoor' ? size.width / 2 : this.door.plankType == 'pullDoor' ? size.height : size.width
        };
        this.transformString = this.getTransform();
    }
    /** 获取transform */
    getTransform() {
        let cosA = Math.cos(this.door.radian);
        let sinA = Math.sin(this.door.radian);
        let transformString = this.DUService.pos.getTransfromString(cosA, sinA, -sinA, cosA, this.door.pos.x, this.door.pos.y);
        return transformString;
    }
    /** 获取标签data集合 */
    getLabelDatas() {
        let datas = {
            img: this.dataService.cmd.door.ico.url,
            imgWidth: this.dataService.cmd.door.ico.width,
            imgHeight: this.dataService.cmd.door.ico.height,
            data: []
        };
        let cacheData = [];
        let ceterLine = this.getCenterLine();
        let line = this.getLabelLine(ceterLine[0], ceterLine[1]);
        if (!line)
            return undefined;
        let data = {
            line: line,
            text: ''
        };
        datas.data.push(data);
        cacheData.push({ pos: { x: (line[0].x + line[1].x) / 2, y: (line[0].y + line[1].y) / 2 }, text: this.door.size.width });
        let msg = this.calService.door.getNearPosArr(this.door);
        let text = this.dataService.cmd.getPixelTransLength(this.DUService.pos.getDistance(ceterLine[1], msg.endPos), 'mm');
        text = parseInt(text.toString());
        line = this.getLabelLine(ceterLine[1], msg.endPos);
        if (!line)
            return undefined;
        data = {
            line: line,
            text: ''
        };
        datas.data.push(data);
        cacheData.push({ pos: { x: (line[0].x + line[1].x) / 2, y: (line[0].y + line[1].y) / 2 }, text: text });
        text = this.dataService.cmd.getPixelTransLength(this.DUService.pos.getDistance(msg.StartPos, ceterLine[0]), 'mm');
        text = parseInt(text.toString());
        line = this.getLabelLine(msg.StartPos, ceterLine[0]);
        if (!line)
            return undefined;
        data = {
            line: line,
            text: ''
        };
        datas.data.push(data);
        cacheData.push({ pos: { x: (line[0].x + line[1].x) / 2, y: (line[0].y + line[1].y) / 2 }, text: text });
        this.dataService.cache.doorWin.labelData = cacheData;
        return datas;
    }
    /** 获取标签坐标组 */
    getLabelLine(lineStart, lineEnd) {
        let halfHeight = this.dataService.cmd.getLengthTransPixel(this.door.size.height / 2, 'mm');
        let newPosArr = this.DUService.pos.getPosTrans(lineStart, lineEnd, (halfHeight + this.dataService.cmd.door.labelHeight));
        return newPosArr;
    }
    /** 获取线坐标 */
    getCenterLine() {
        let halfWidth = this.dataService.cmd.getLengthTransPixel(this.door.size.width / 2, 'mm');
        let posA = this.DUService.pos.getRayPos(this.door.pos, this.door.radian, -halfWidth);
        let posB = this.DUService.pos.getRayPos(this.door.pos, this.door.radian, halfWidth);
        let posArr = [posA, posB];
        return posArr;
    }
    showLabel() {
        let a = (this.dataService.cache.common.choose != null &&
            this.dataService.cache.common.choose.type == "door" &&
            this.dataService.cache.common.mode == "normal" &&
            this.dataService.cache.common.choose.id == this.door.id &&
            this.door.wallID != null &&
            this.dataService.cache.thumbnail.three.zIndex > this.dataService.cache.thumbnail.svg.zIndex &&
            this.dataService.cache.doorWin.displayLabel);
        return a;
    }
    /* 获取所有点 */
    getALLPointData(transform) {
        if (!transform || !this._leftPos || !this._rightPos)
            return null;
        let data = {
            r: 96,
            overR: 128,
            data: [
                /** 左 */
                {
                    pos: this._leftPos, func: (e) => {
                        this.mouseDown(e);
                        this.door.mode = 'leftMove';
                        console.log("left");
                    }
                },
                /** 右 */
                {
                    pos: this._rightPos, func: (e) => {
                        this.mouseDown(e);
                        this.door.mode = 'rightMove';
                        console.log("right");
                    }
                }
            ],
            transform: transform
        };
        return data;
    }
};
DoorComponent.ctorParameters = () => [
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__["CalculatorsService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_3__["JdesignUtil2dService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_4__["JdesignDataService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_5__["DomUpdateService"] },
    { type: _services_right_menu_service__WEBPACK_IMPORTED_MODULE_6__["RightMenuService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_7__["PopDivService"] }
];
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [Object])
], DoorComponent.prototype, "door", null);
DoorComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[door]',
        template: __webpack_require__(/*! raw-loader!./door.component.html */ "./node_modules/raw-loader/index.js!./src/app/svg/dom/doors/door/door.component.html"),
        styles: [__webpack_require__(/*! ./door.component.scss */ "./src/app/svg/dom/doors/door/door.component.scss")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_services_calculators_service__WEBPACK_IMPORTED_MODULE_2__["CalculatorsService"],
        _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_3__["JdesignUtil2dService"],
        _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_4__["JdesignDataService"],
        _services_dom_update_service__WEBPACK_IMPORTED_MODULE_5__["DomUpdateService"],
        _services_right_menu_service__WEBPACK_IMPORTED_MODULE_6__["RightMenuService"],
        _services_pop_div_service__WEBPACK_IMPORTED_MODULE_7__["PopDivService"]])
], DoorComponent);



/***/ }),

/***/ "./src/app/svg/dom/doors/doors.component.scss":
/*!****************************************************!*\
  !*** ./src/app/svg/dom/doors/doors.component.scss ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3N2Zy9kb20vZG9vcnMvZG9vcnMuY29tcG9uZW50LnNjc3MifQ== */"

/***/ }),

/***/ "./src/app/svg/dom/doors/doors.component.ts":
/*!**************************************************!*\
  !*** ./src/app/svg/dom/doors/doors.component.ts ***!
  \**************************************************/
/*! exports provided: DoorsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DoorsComponent", function() { return DoorsComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");





let DoorsComponent = class DoorsComponent {
    constructor(DUService, dataService, domService, ref) {
        this.DUService = DUService;
        this.dataService = dataService;
        this.domService = domService;
        this.ref = ref;
        this.domService.svgDoor.subscribe(() => {
            this.ref.detectChanges();
        });
    }
    ngOnInit() {
        if (this.dataService.cmd.common.initLog) {
            this.DUService.out.redLog('doors is ok!!');
        }
    }
};
DoorsComponent.ctorParameters = () => [
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_3__["JdesignDataService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_4__["DomUpdateService"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"] }
];
DoorsComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[doors]',
        template: __webpack_require__(/*! raw-loader!./doors.component.html */ "./node_modules/raw-loader/index.js!./src/app/svg/dom/doors/doors.component.html"),
        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
        styles: [__webpack_require__(/*! ./doors.component.scss */ "./src/app/svg/dom/doors/doors.component.scss")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"],
        _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_3__["JdesignDataService"],
        _services_dom_update_service__WEBPACK_IMPORTED_MODULE_4__["DomUpdateService"],
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]])
], DoorsComponent);



/***/ }),

/***/ "./src/app/svg/dom/doors/doors.module.ts":
/*!***********************************************!*\
  !*** ./src/app/svg/dom/doors/doors.module.ts ***!
  \***********************************************/
/*! exports provided: DoorsModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DoorsModule", function() { return DoorsModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _doors_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./doors.component */ "./src/app/svg/dom/doors/doors.component.ts");
/* harmony import */ var _door_door_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./door/door.component */ "./src/app/svg/dom/doors/door/door.component.ts");
/* harmony import */ var _common_label_lines_label_lines_module__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common/label-lines/label-lines.module */ "./src/app/svg/dom/common/label-lines/label-lines.module.ts");
/* harmony import */ var _common_label_circle_label_circle_module__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../common/label-circle/label-circle.module */ "./src/app/svg/dom/common/label-circle/label-circle.module.ts");







let DoorsModule = class DoorsModule {
};
DoorsModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
            _common_label_lines_label_lines_module__WEBPACK_IMPORTED_MODULE_5__["LabelLinesModule"],
            _common_label_circle_label_circle_module__WEBPACK_IMPORTED_MODULE_6__["LabelCircleModule"],
        ],
        declarations: [_doors_component__WEBPACK_IMPORTED_MODULE_3__["DoorsComponent"], _door_door_component__WEBPACK_IMPORTED_MODULE_4__["DoorComponent"]],
        exports: [_doors_component__WEBPACK_IMPORTED_MODULE_3__["DoorsComponent"]]
    })
], DoorsModule);



/***/ }),

/***/ "./src/app/svg/dom/geometrys/geometry/geometry.component.scss":
/*!********************************************************************!*\
  !*** ./src/app/svg/dom/geometrys/geometry/geometry.component.scss ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".geometry_path {\n  fill: rgba(255, 255, 255, 0);\n  stroke: black;\n}\n\n.circle_line {\n  stroke: green;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc3ZnL2RvbS9nZW9tZXRyeXMvZ2VvbWV0cnkvRDpcXGtub3dsZWRnZVxcaGdcXG9sZFxcb2xkUm9vbS9zcmNcXGFwcFxcc3ZnXFxkb21cXGdlb21ldHJ5c1xcZ2VvbWV0cnlcXGdlb21ldHJ5LmNvbXBvbmVudC5zY3NzIiwic3JjL2FwcC9zdmcvZG9tL2dlb21ldHJ5cy9nZW9tZXRyeS9nZW9tZXRyeS5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLDRCQUFBO0VBQ0EsYUFBQTtBQ0NKOztBREVBO0VBQ0ksYUFBQTtBQ0NKIiwiZmlsZSI6InNyYy9hcHAvc3ZnL2RvbS9nZW9tZXRyeXMvZ2VvbWV0cnkvZ2VvbWV0cnkuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuZ2VvbWV0cnlfcGF0aCB7XHJcbiAgICBmaWxsOiByZ2JhKCRjb2xvcjogI2ZmZmZmZiwgJGFscGhhOiAwKTtcclxuICAgIHN0cm9rZTogYmxhY2s7XHJcbn1cclxuXHJcbi5jaXJjbGVfbGluZSB7XHJcbiAgICBzdHJva2U6IGdyZWVuXHJcbn0iLCIuZ2VvbWV0cnlfcGF0aCB7XG4gIGZpbGw6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMCk7XG4gIHN0cm9rZTogYmxhY2s7XG59XG5cbi5jaXJjbGVfbGluZSB7XG4gIHN0cm9rZTogZ3JlZW47XG59Il19 */"

/***/ }),

/***/ "./src/app/svg/dom/geometrys/geometry/geometry.component.ts":
/*!******************************************************************!*\
  !*** ./src/app/svg/dom/geometrys/geometry/geometry.component.ts ***!
  \******************************************************************/
/*! exports provided: GeometryComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GeometryComponent", function() { return GeometryComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");
/* harmony import */ var _services_right_menu_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../services/right-menu.service */ "./src/app/services/right-menu.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");








let GeometryComponent = class GeometryComponent {
    constructor(dataService, domService, rightService, calService, DUService, popService) {
        this.dataService = dataService;
        this.domService = domService;
        this.rightService = rightService;
        this.calService = calService;
        this.DUService = DUService;
        this.popService = popService;
    }
    set geometry(data) {
        this.pixSize = data.getPixSize();
        this._geometry = data;
    }
    get geometry() { return this._geometry; }
    mouseDown(e, mode) {
        this.dataService.cache.common.choose = this.geometry;
        this.dataService.cache.common.firstPos = { x: e.offsetX, y: e.offsetY };
        this.dataService.cache.common.blockON = true;
        this.domService.allSvg.emit();
        this.dataService.cache.common.initUpdate(['furniture']);
        this.setMode(mode);
        if (e.which == 3) {
            this.rightService.furniture.emit({ e: e, furniture: this.geometry });
        }
    }
    mouseOver(e) {
        if (this.dataService.cmd.floorplan.debugPos != null && this.dataService.cmd.floorplan.debugPos != undefined) {
            let data = {
                text: `${this.geometry.id}:{
        wall:${this.geometry.wallID};
        rotate:${this.geometry.getRotate()};
        per:${this.geometry.distancePer};
        out:${this.geometry.wallOut};
        mirror:${this.geometry.mirror};
      }`,
                position: this.dataService.cmd.floorplan.debugPos
            };
            this.popService.message.emit(data);
        }
    }
    ngOnInit() {
        this.geometry.chooseFuncArr.push(() => {
            this.domService.svgGeometry.emit();
        });
        this.geometry.noChooseFuncArr.push(() => {
            this.domService.svgGeometry.emit();
        });
        this.geometry.lateChooseFuncArr.push(() => {
            if (this.dataService.cache.common.threeOn == 1)
                this.popService.panelRight.emit(this.geometry);
        });
    }
    /** 获取path */
    getPath() {
        return this.calService.geometry.getPath(this.geometry);
    }
    /** 获取transform */
    getTransform() {
        let cosA = Math.cos(this.geometry.radian);
        let sinA = Math.sin(this.geometry.radian);
        let transformString = this.DUService.pos.getTransfromString(cosA, sinA, -sinA, cosA, this.geometry.pos.x, this.geometry.pos.y);
        return transformString;
    }
    /** 获取旋转transform */
    getRotateTransform() {
        let cosA = Math.cos(this.geometry.radian);
        let sinA = Math.sin(this.geometry.radian);
        let pos = this.DUService.pos.getRayPos(this.geometry.pos, this.geometry.radian + Math.PI / 2, this.dataService.cmd.furniture.radius);
        let transformString = this.DUService.pos.getTransfromString(cosA, sinA, -sinA, cosA, pos.x, pos.y);
        return transformString;
    }
    /** 设置模式 */
    setMode(mode) {
        this.geometry.mode = mode;
    }
};
GeometryComponent.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__["JdesignDataService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_3__["DomUpdateService"] },
    { type: _services_right_menu_service__WEBPACK_IMPORTED_MODULE_4__["RightMenuService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_5__["CalculatorsService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_6__["JdesignUtil2dService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_7__["PopDivService"] }
];
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [Object])
], GeometryComponent.prototype, "geometry", null);
GeometryComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[geometry]',
        template: __webpack_require__(/*! raw-loader!./geometry.component.html */ "./node_modules/raw-loader/index.js!./src/app/svg/dom/geometrys/geometry/geometry.component.html"),
        styles: [__webpack_require__(/*! ./geometry.component.scss */ "./src/app/svg/dom/geometrys/geometry/geometry.component.scss")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__["JdesignDataService"],
        _services_dom_update_service__WEBPACK_IMPORTED_MODULE_3__["DomUpdateService"],
        _services_right_menu_service__WEBPACK_IMPORTED_MODULE_4__["RightMenuService"],
        _services_calculators_service__WEBPACK_IMPORTED_MODULE_5__["CalculatorsService"],
        _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_6__["JdesignUtil2dService"],
        _services_pop_div_service__WEBPACK_IMPORTED_MODULE_7__["PopDivService"]])
], GeometryComponent);



/***/ }),

/***/ "./src/app/svg/dom/geometrys/geometrys.component.scss":
/*!************************************************************!*\
  !*** ./src/app/svg/dom/geometrys/geometrys.component.scss ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3N2Zy9kb20vZ2VvbWV0cnlzL2dlb21ldHJ5cy5jb21wb25lbnQuc2NzcyJ9 */"

/***/ }),

/***/ "./src/app/svg/dom/geometrys/geometrys.component.ts":
/*!**********************************************************!*\
  !*** ./src/app/svg/dom/geometrys/geometrys.component.ts ***!
  \**********************************************************/
/*! exports provided: GeometrysComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GeometrysComponent", function() { return GeometrysComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");





let GeometrysComponent = class GeometrysComponent {
    constructor(DUService, dataService, domService, ref) {
        this.DUService = DUService;
        this.dataService = dataService;
        this.domService = domService;
        this.ref = ref;
        this.domService.svgGeometry.subscribe(() => {
            this.ref.detectChanges();
        });
    }
    ngOnInit() {
        if (this.dataService.cmd.common.initLog) {
            this.DUService.out.redLog('geometrys is ok!!');
        }
    }
    /** 获取数据 */
    getData() {
        let furnitures = this.dataService.doFurnitures().arr();
        let builds = this.dataService.doBuilds().arr();
        let arr = [...furnitures, ...builds];
        return arr;
    }
};
GeometrysComponent.ctorParameters = () => [
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_3__["JdesignDataService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_4__["DomUpdateService"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"] }
];
GeometrysComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[geometrys]',
        template: __webpack_require__(/*! raw-loader!./geometrys.component.html */ "./node_modules/raw-loader/index.js!./src/app/svg/dom/geometrys/geometrys.component.html"),
        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
        styles: [__webpack_require__(/*! ./geometrys.component.scss */ "./src/app/svg/dom/geometrys/geometrys.component.scss")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"],
        _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_3__["JdesignDataService"],
        _services_dom_update_service__WEBPACK_IMPORTED_MODULE_4__["DomUpdateService"],
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]])
], GeometrysComponent);



/***/ }),

/***/ "./src/app/svg/dom/geometrys/geometrys.module.ts":
/*!*******************************************************!*\
  !*** ./src/app/svg/dom/geometrys/geometrys.module.ts ***!
  \*******************************************************/
/*! exports provided: GeometrysModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GeometrysModule", function() { return GeometrysModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _geometrys_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./geometrys.component */ "./src/app/svg/dom/geometrys/geometrys.component.ts");
/* harmony import */ var _geometry_geometry_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./geometry/geometry.component */ "./src/app/svg/dom/geometrys/geometry/geometry.component.ts");





let GeometrysModule = class GeometrysModule {
};
GeometrysModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]
        ],
        declarations: [_geometrys_component__WEBPACK_IMPORTED_MODULE_3__["GeometrysComponent"], _geometry_geometry_component__WEBPACK_IMPORTED_MODULE_4__["GeometryComponent"]],
        exports: [_geometrys_component__WEBPACK_IMPORTED_MODULE_3__["GeometrysComponent"]]
    })
], GeometrysModule);



/***/ }),

/***/ "./src/app/svg/dom/lu-wins/lu-win/lu-win.component.scss":
/*!**************************************************************!*\
  !*** ./src/app/svg/dom/lu-wins/lu-win/lu-win.component.scss ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".lu_path {\n  fill: red;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc3ZnL2RvbS9sdS13aW5zL2x1LXdpbi9EOlxca25vd2xlZGdlXFxoZ1xcb2xkXFxvbGRSb29tL3NyY1xcYXBwXFxzdmdcXGRvbVxcbHUtd2luc1xcbHUtd2luXFxsdS13aW4uY29tcG9uZW50LnNjc3MiLCJzcmMvYXBwL3N2Zy9kb20vbHUtd2lucy9sdS13aW4vbHUtd2luLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksU0FBQTtBQ0NKIiwiZmlsZSI6InNyYy9hcHAvc3ZnL2RvbS9sdS13aW5zL2x1LXdpbi9sdS13aW4uY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIubHVfcGF0aCB7XHJcbiAgICBmaWxsOiByZWRcclxufSIsIi5sdV9wYXRoIHtcbiAgZmlsbDogcmVkO1xufSJdfQ== */"

/***/ }),

/***/ "./src/app/svg/dom/lu-wins/lu-win/lu-win.component.ts":
/*!************************************************************!*\
  !*** ./src/app/svg/dom/lu-wins/lu-win/lu-win.component.ts ***!
  \************************************************************/
/*! exports provided: LuWinComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LuWinComponent", function() { return LuWinComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");
/* harmony import */ var _services_right_menu_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../services/right-menu.service */ "./src/app/services/right-menu.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");








let LuWinComponent = class LuWinComponent {
    constructor(dataService, domService, rightService, calService, DUService, popService) {
        this.dataService = dataService;
        this.domService = domService;
        this.rightService = rightService;
        this.calService = calService;
        this.DUService = DUService;
        this.popService = popService;
        this.pathD = "";
        this.pathDatas = undefined;
    }
    set LUWin(data) {
        this._LUWin = data;
    }
    get LUWin() { return this._LUWin; }
    ngOnInit() {
        this.LUWin.lateChooseFuncArr.push(() => {
            if (this.dataService.cache.common.threeOn == 1) {
                this.popService.panelRight.emit(this.LUWin);
            }
        });
    }
    ngDoCheck() {
        /* 初版 */
        // switch (this.LUWin.type) {
        //   case "LWin":
        //     this.setLWinData(<JLWin>this.LUWin)
        //     break;
        //   case "UWin":
        //     this.setUWinData(<JUWin>this.LUWin)
        //     break;
        // }
        /* 参数化版 */
        switch (this.LUWin.type) {
            case "LWin":
                this.setLWinData(this.LUWin);
                break;
            case "UWin":
                this.setUWinData(this.LUWin);
                break;
        }
        /* 测试 */
        // this.test(this.LUWin, this.LUWin.j2d)
    }
    /* 设置L型窗数据 */
    setLWinData(LWin) {
        let point = LWin.getPoint();
        if (point) {
            this.pathDatas = this.getLWinDataByPoint(LWin, LWin.j2d);
        }
        else {
            this.pathDatas = this.getLWinDataByNoPoint(LWin);
        }
    }
    test(LWin, j2d) {
        let newJ2d = this.DUService.parseJ2D.getRealData(j2d.childs[0].params, j2d.params);
        let pointArr = this.DUService.parseJ2D.getRealPoint(j2d.childs[0].childs, newJ2d);
        console.log(pointArr);
    }
    getDataByj2d(j2d, obj) {
        let newJ2d = this.DUService.parseJ2D.getRealData(j2d.childs[0].params, j2d.params);
        let pointArr = this.DUService.parseJ2D.getRealPoint(j2d.childs[0].childs, newJ2d);
        let path = this.DUService.svg.getPath(true, ...pointArr);
        let transform = this.DUService.pos.getTransformStringByRM({ movePos: obj.movePos });
        let transformRotate = this.DUService.pos.getTransformStringByRM({ radian: obj.radian ? obj.radian : 0 });
        let data = [{
                transform: transform,
                children: [{ transform: transformRotate, children: [{ paths: [path] }] }]
            }];
        return data;
    }
    /* 不吸附获取L型窗的数据 */
    getLWinDataByNoPoint(LWin) {
        let data = this.getDataByj2d(this.dataService.cache.baseData.j2d['LWin'], { movePos: LWin.pos, radian: LWin.radian });
        return data;
    }
    getEndPos(point, wall) {
        let pos = this.calService.point.isOppositeRayPoint(point, wall) ? wall.outLine[1][1] : wall.outLine[0][0];
        return pos;
    }
    getStartPos(point, wall) {
        let pos = this.calService.point.isOppositeRayPoint(point, wall) ? wall.outLine[1][1] : wall.outLine[0][0];
        return pos;
    }
    /* 通过点获取L型窗的数据 */
    getLWinDataByPoint(LWin, j2d) {
        let leftAndRightWalls = this.calService.LWin.getLeftAndRightWall(LWin);
        let point = LWin.getPoint();
        /* 弧度计算 */
        let a = this.calService.point.isOppositeRayPoint(point, leftAndRightWalls[0]);
        let leftRadian = leftAndRightWalls[0].getRadian();
        leftRadian = a ? leftRadian + Math.PI : leftRadian;
        a = this.calService.point.isOppositeRayPoint(point, leftAndRightWalls[1]);
        let rightRadian = leftAndRightWalls[1].getRadian();
        rightRadian = a ? rightRadian + Math.PI : rightRadian;
        LWin.radian = rightRadian;
        let b = -rightRadian + leftRadian;
        // console.log(b * 180 / Math.PI)
        j2d.params["leftThickness"].formula = leftAndRightWalls[0].thickness;
        j2d.params["rightThickness"].formula = leftAndRightWalls[1].thickness;
        j2d.params["radian"].formula = b;
        /* 解析数据 */
        let data = this.getDataByj2d(j2d, { movePos: LWin.pos, radian: LWin.radian });
        return data;
    }
    /* 获取U型窗的数据(不吸附) */
    getUWinDataByNoWall(UWin) {
        let data = this.getDataByj2d(this.dataService.cache.baseData.j2d['UWin'], { movePos: UWin.pos, radian: UWin.radian });
        return data;
    }
    /* 通过墙获取U型窗 */
    getUWinDataByWall(UWin, j2d) {
        let centerWall = UWin.getCenterWall();
        let centerCowall = centerWall.getCowall();
        let centerRadian = centerCowall.getRadian();
        j2d.params["centerThickness"].formula = centerWall.thickness;
        j2d.params["centerWidth"].formula = centerWall.getInLineDistance();
        let prevCowall = centerCowall.getPrevCowall();
        let prevWall = prevCowall.getWall();
        let prevRadian = prevCowall.getRadian() + Math.PI;
        j2d.params["leftThickness"].formula = prevWall.thickness;
        j2d.params["leftRadian"].formula = -centerRadian + prevRadian;
        let nextCowall = centerCowall.getNextCowall();
        let nextWall = nextCowall.getWall();
        let nextRadian = nextCowall.getRadian();
        j2d.params["rightThickness"].formula = nextWall.thickness;
        j2d.params["rightRadian"].formula = centerRadian + Math.PI - nextRadian;
        /* 解析数据 */
        let data = this.getDataByj2d(UWin.j2d, { movePos: UWin.pos, radian: UWin.radian });
        return data;
    }
    /* 设置U型窗数据 */
    setUWinData(UWin) {
        let wall = UWin.getCenterWall();
        if (wall) {
            this.pathDatas = this.getUWinDataByWall(UWin, UWin.j2d);
        }
        else {
            this.pathDatas = this.getUWinDataByNoWall(UWin);
        }
    }
    getCircles(obj) {
        let func = (j2d) => {
            let newJ2d = this.DUService.parseJ2D.getRealData(j2d.childs[0].params, j2d.params);
            let pointArr = this.DUService.parseJ2D.getRealPoint(j2d.childs[0].childs, newJ2d);
            let transform = this.DUService.pos.getTransformStringByRM({ movePos: obj.pos });
            let transformRotate = this.DUService.pos.getTransformStringByRM({ radian: obj.radian ? obj.radian : 0 });
            return {
                posArr: pointArr,
                transforms: [transform, transformRotate]
            };
        };
        let data = undefined;
        switch (obj.type) {
            case 'LWin':
                let lwin = obj;
                data = func(lwin.getPoint() ? lwin.j2d : this.dataService.cache.baseData.j2d['LWin']);
                return this.getLWinCirles(data.posArr, data.transforms);
            case 'UWin':
                let uwin = obj;
                data = func(uwin.getCenterWall() ? uwin.j2d : this.dataService.cache.baseData.j2d['UWin']);
                return this.getUWinCircles(data.posArr, data.transforms);
        }
    }
    /* 获取L型窗小圆圈 */
    getLWinCirles(pointArr, transforms) {
        let data = {
            r: 96,
            overR: 128,
            data: [
                /** 左 */
                {
                    pos: pointArr[1], func: (e) => {
                        this.mouseDown(e);
                        this.LUWin.mode = 'leftMove';
                        console.log("left");
                    }
                },
                /** 右 */
                {
                    pos: pointArr[5], func: (e) => {
                        this.mouseDown(e);
                        this.LUWin.mode = 'rightMove';
                        console.log("right");
                    }
                }
            ],
            transform: transforms[0],
            otherTransform: transforms[1]
        };
        return data;
    }
    /* 获取U型窗小圆圈 */
    getUWinCircles(pointArr, transforms) {
        let data = {
            r: 96,
            overR: 128,
            data: [
                /** 左 */
                {
                    pos: pointArr[8], func: (e) => {
                        this.mouseDown(e);
                        this.LUWin.mode = 'leftMove';
                        console.log("left");
                    }
                },
                /** 右 */
                {
                    pos: pointArr[3], func: (e) => {
                        this.mouseDown(e);
                        this.LUWin.mode = 'rightMove';
                        console.log("right");
                    }
                }
            ],
            transform: transforms[0],
            otherTransform: transforms[1]
        };
        return data;
    }
    mouseDown(e) {
        this.dataService.cache.common.choose = this.LUWin;
        this.LUWin.mode = 'move';
        this.dataService.cache.common.firstPos = { x: e.offsetX, y: e.offsetY };
        this.dataService.cache.common.blockON = true;
        this.domService.allSvg.emit();
        this.dataService.cache.common.initUpdate();
    }
    isShowCircles() {
        let a = this.dataService.cache.common.choose != null && this.dataService.cache.common.choose.id == this.LUWin.id &&
            this.LUWin.isAbsorb();
        return a;
    }
};
LuWinComponent.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__["JdesignDataService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_3__["DomUpdateService"] },
    { type: _services_right_menu_service__WEBPACK_IMPORTED_MODULE_4__["RightMenuService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_5__["CalculatorsService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_6__["JdesignUtil2dService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_7__["PopDivService"] }
];
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [Object])
], LuWinComponent.prototype, "LUWin", null);
LuWinComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[LUWin]',
        template: __webpack_require__(/*! raw-loader!./lu-win.component.html */ "./node_modules/raw-loader/index.js!./src/app/svg/dom/lu-wins/lu-win/lu-win.component.html"),
        styles: [__webpack_require__(/*! ./lu-win.component.scss */ "./src/app/svg/dom/lu-wins/lu-win/lu-win.component.scss")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__["JdesignDataService"],
        _services_dom_update_service__WEBPACK_IMPORTED_MODULE_3__["DomUpdateService"],
        _services_right_menu_service__WEBPACK_IMPORTED_MODULE_4__["RightMenuService"],
        _services_calculators_service__WEBPACK_IMPORTED_MODULE_5__["CalculatorsService"],
        _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_6__["JdesignUtil2dService"],
        _services_pop_div_service__WEBPACK_IMPORTED_MODULE_7__["PopDivService"]])
], LuWinComponent);



/***/ }),

/***/ "./src/app/svg/dom/lu-wins/lu-wins.component.scss":
/*!********************************************************!*\
  !*** ./src/app/svg/dom/lu-wins/lu-wins.component.scss ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3N2Zy9kb20vbHUtd2lucy9sdS13aW5zLmNvbXBvbmVudC5zY3NzIn0= */"

/***/ }),

/***/ "./src/app/svg/dom/lu-wins/lu-wins.component.ts":
/*!******************************************************!*\
  !*** ./src/app/svg/dom/lu-wins/lu-wins.component.ts ***!
  \******************************************************/
/*! exports provided: LuWinsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LuWinsComponent", function() { return LuWinsComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");





let LuWinsComponent = class LuWinsComponent {
    constructor(DUService, dataService, domService, ref) {
        this.DUService = DUService;
        this.dataService = dataService;
        this.domService = domService;
        this.ref = ref;
        this.domService.svgLUWin.subscribe(() => {
            this.ref.detectChanges();
        });
    }
    ngOnInit() {
        if (this.dataService.cmd.common.initLog) {
            this.DUService.out.redLog('LUWins is ok!!');
        }
    }
    getData() {
        let LWins = this.dataService.doLWins().arr();
        let UWins = this.dataService.doUWins().arr();
        let data = [...LWins, ...UWins];
        return data;
    }
};
LuWinsComponent.ctorParameters = () => [
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_3__["JdesignDataService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_4__["DomUpdateService"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"] }
];
LuWinsComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[LUWins]',
        template: __webpack_require__(/*! raw-loader!./lu-wins.component.html */ "./node_modules/raw-loader/index.js!./src/app/svg/dom/lu-wins/lu-wins.component.html"),
        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
        styles: [__webpack_require__(/*! ./lu-wins.component.scss */ "./src/app/svg/dom/lu-wins/lu-wins.component.scss")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"],
        _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_3__["JdesignDataService"],
        _services_dom_update_service__WEBPACK_IMPORTED_MODULE_4__["DomUpdateService"],
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]])
], LuWinsComponent);



/***/ }),

/***/ "./src/app/svg/dom/lu-wins/lu-wins.module.ts":
/*!***************************************************!*\
  !*** ./src/app/svg/dom/lu-wins/lu-wins.module.ts ***!
  \***************************************************/
/*! exports provided: LuWinsModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LuWinsModule", function() { return LuWinsModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _lu_wins_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lu-wins.component */ "./src/app/svg/dom/lu-wins/lu-wins.component.ts");
/* harmony import */ var _lu_win_lu_win_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lu-win/lu-win.component */ "./src/app/svg/dom/lu-wins/lu-win/lu-win.component.ts");
/* harmony import */ var _common_label_circle_label_circle_module__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common/label-circle/label-circle.module */ "./src/app/svg/dom/common/label-circle/label-circle.module.ts");
/* harmony import */ var _common_repeat_path_repeat_path_module__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../common/repeat-path/repeat-path.module */ "./src/app/svg/dom/common/repeat-path/repeat-path.module.ts");







let LuWinsModule = class LuWinsModule {
};
LuWinsModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
            _common_label_circle_label_circle_module__WEBPACK_IMPORTED_MODULE_5__["LabelCircleModule"],
            _common_repeat_path_repeat_path_module__WEBPACK_IMPORTED_MODULE_6__["RepeatPathModule"]
        ],
        declarations: [_lu_wins_component__WEBPACK_IMPORTED_MODULE_3__["LuWinsComponent"], _lu_win_lu_win_component__WEBPACK_IMPORTED_MODULE_4__["LuWinComponent"]],
        exports: [_lu_wins_component__WEBPACK_IMPORTED_MODULE_3__["LuWinsComponent"]]
    })
], LuWinsModule);



/***/ }),

/***/ "./src/app/svg/dom/params-models/params-model/params-model.component.scss":
/*!********************************************************************************!*\
  !*** ./src/app/svg/dom/params-models/params-model/params-model.component.scss ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3N2Zy9kb20vcGFyYW1zLW1vZGVscy9wYXJhbXMtbW9kZWwvcGFyYW1zLW1vZGVsLmNvbXBvbmVudC5zY3NzIn0= */"

/***/ }),

/***/ "./src/app/svg/dom/params-models/params-model/params-model.component.ts":
/*!******************************************************************************!*\
  !*** ./src/app/svg/dom/params-models/params-model/params-model.component.ts ***!
  \******************************************************************************/
/*! exports provided: ParamsModelComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ParamsModelComponent", function() { return ParamsModelComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");







let ParamsModelComponent = class ParamsModelComponent {
    constructor(dataService, domService, calService, DUService, popService) {
        this.dataService = dataService;
        this.domService = domService;
        this.calService = calService;
        this.DUService = DUService;
        this.popService = popService;
        this.pathDatas = undefined;
        this.labelData = undefined;
        this.circleData = undefined;
    }
    get paramsModel() { return this._paramsModel; }
    set paramsModel(data) {
        this._paramsModel = data;
    }
    ngOnInit() {
        this.paramsModel.lateChooseFuncArr.push(() => {
            if (this.dataService.cache.common.threeOn == 1) {
                this.popService.panelRight.emit(this.paramsModel);
            }
        });
    }
    ngDoCheck() {
        if (this.paramsModel.absorbData && this.paramsModel.originJ2d) {
            let obj = this.paramsModel.getAbsorbObj();
            if (obj) {
                let data = this.getDataByj2dSuper(this.paramsModel.j2d);
                this.pathDatas = data.path;
                this.labelData = data.label;
                this.circleData = data.circle;
                // this.pathDatas = this.getDataByj2d(this.paramsModel.j2d)
            }
            else {
                let data = this.getDataByj2dSuper(this.paramsModel.originJ2d);
                this.pathDatas = data.path;
                this.labelData = undefined;
                this.circleData = undefined;
                // this.pathDatas = this.getDataByj2d(this.paramsModel.originJ2d)
            }
        }
        else {
            let data = this.getDataByj2dSuper(this.paramsModel.j2d);
            this.pathDatas = data.path;
            this.labelData = data.label;
            this.circleData = data.circle;
        }
    }
    mouseDown(e) {
        this.dataService.cache.common.choose = this.paramsModel;
        this.paramsModel.mode = 'move';
        this.dataService.cache.common.firstPos = { x: e.offsetX, y: e.offsetY };
        this.dataService.cache.common.blockON = true;
        this.domService.allSvg.emit();
        this.dataService.cache.common.initUpdate();
    }
    /* 获取数据 */
    getDataByj2d(j2d) {
        let pointArr = this.DUService.parseJ2D.getAllPoints(j2d);
        let paths = [];
        for (let i = 0; i < pointArr[0].length; i++) {
            let path = this.DUService.svg.getPath(true, ...pointArr[0][i]);
            paths.push(path);
        }
        let transform = this.DUService.pos.getTransformStringByRM({ movePos: this.paramsModel.pos });
        let transformRotate = this.DUService.pos.getTransformStringByRM({ radian: this.paramsModel.radian });
        let data = [{
                transform: transform,
                children: [{ transform: transformRotate, children: [{ paths: paths }] }]
            }];
        return data;
    }
    /* 获取数据 */
    getDataByj2dSuper(j2d) {
        let pointArr = this.DUService.parseJ2D.getAllPoints(j2d);
        let newJ2d = this.DUService.parseJ2D.getslipData(j2d);
        let paths = [];
        let labelLines = [];
        let moveData = [];
        /* 收集数据 */
        for (let i = 0; i < newJ2d.length; i++) {
            if (newJ2d[i].params) {
                if (newJ2d[i].params['jtype'] && newJ2d[i].params['jtype'].formula == 'label') {
                    // console.log(newJ2d[i].point)
                    for (let j = 0; j < (newJ2d[i].point.length / 2); j++) {
                        let posA = { x: newJ2d[i].point[2 * j]['x'], y: newJ2d[i].point[2 * j]['y'] };
                        let posB = { x: newJ2d[i].point[2 * j + 1]['x'], y: newJ2d[i].point[2 * j + 1]['y'] };
                        labelLines.push([posA, posB]);
                    }
                }
                else if (newJ2d[i].params['jtype'] && newJ2d[i].params['jtype'].formula == 'move') {
                    moveData.push(newJ2d[i]);
                }
                else {
                    paths.push(newJ2d[i].point);
                }
            }
        }
        // console.log(paths)
        /* 处理数据 */
        let pathData = this.getPathData(paths, this.paramsModel.pos, this.paramsModel.radian);
        let labelData = this.getLabelData(labelLines, this.paramsModel.pos, this.paramsModel.radian);
        let circleData = this.getCircleData(moveData, this.paramsModel.pos, this.paramsModel.radian);
        return {
            path: pathData,
            label: labelData,
            circle: circleData
        };
    }
    /* 获取svg数据 */
    getPathData(lines, movePos, moveRadian) {
        let paths = [];
        for (let i = 0; i < lines.length; i++) {
            let path = this.DUService.svg.getPath(true, ...lines[i]);
            paths.push(path);
        }
        let transform = this.DUService.pos.getTransformStringByRM({ movePos: movePos });
        let transformRotate = this.DUService.pos.getTransformStringByRM({ radian: moveRadian });
        let pathData = [{
                transform: transform,
                children: [{ transform: transformRotate, children: [{ paths: paths }] }]
            }];
        return pathData;
    }
    getCircleData(j2ds, movePos, moveRadian) {
        let moveData = {
            r: 96,
            overR: 128,
            data: [],
            transform: this.DUService.pos.getTransformStringByRM({ movePos: movePos }),
            otherTransform: this.DUService.pos.getTransformStringByRM({ radian: moveRadian })
        };
        for (let i = 0; i < j2ds.length; i++) {
            let obj = {
                pos: { x: j2ds[i].point[0]['x'], y: j2ds[i].point[0]["y"] }, func: (e) => {
                    this.mouseDown(e);
                    this.paramsModel.mode = 'paramsMove';
                    this.paramsModel.movePointData = {
                        type: j2ds[i].params['moveType'].formula,
                        radian: j2ds[i].params['moveRadian'].formula,
                        tag: j2ds[i].params['moveTag'].formula,
                        add: j2ds[i].params['moveAdd'].formula,
                    };
                }
            };
            moveData.data.push(obj);
        }
        return moveData;
    }
    /* 获取标签数据 */
    getLabelData(lines, movePos, moveRadian) {
        let data = {
            img: this.dataService.cmd.cowall.ico.url,
            imgWidth: this.dataService.cmd.cowall.ico.width,
            imgHeight: this.dataService.cmd.cowall.ico.height,
            movePos: movePos,
            moveRadian: moveRadian,
            data: []
        };
        for (let i = 0; i < lines.length; i++) {
            let obj = {
                line: lines[i],
                text: this.DUService.pos.getDistance(lines[i][0], lines[i][1]).toFixed(0),
                radian: this.DUService.pos.getRadian(lines[i][0], lines[i][1])
            };
            data.data.push(obj);
        }
        return data;
    }
};
ParamsModelComponent.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__["JdesignDataService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_3__["DomUpdateService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_4__["CalculatorsService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_5__["JdesignUtil2dService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_6__["PopDivService"] }
];
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [Object])
], ParamsModelComponent.prototype, "paramsModel", null);
ParamsModelComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[paramsModel]',
        template: __webpack_require__(/*! raw-loader!./params-model.component.html */ "./node_modules/raw-loader/index.js!./src/app/svg/dom/params-models/params-model/params-model.component.html"),
        styles: [__webpack_require__(/*! ./params-model.component.scss */ "./src/app/svg/dom/params-models/params-model/params-model.component.scss")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__["JdesignDataService"],
        _services_dom_update_service__WEBPACK_IMPORTED_MODULE_3__["DomUpdateService"],
        _services_calculators_service__WEBPACK_IMPORTED_MODULE_4__["CalculatorsService"],
        _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_5__["JdesignUtil2dService"],
        _services_pop_div_service__WEBPACK_IMPORTED_MODULE_6__["PopDivService"]])
], ParamsModelComponent);



/***/ }),

/***/ "./src/app/svg/dom/params-models/params-models.component.scss":
/*!********************************************************************!*\
  !*** ./src/app/svg/dom/params-models/params-models.component.scss ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3N2Zy9kb20vcGFyYW1zLW1vZGVscy9wYXJhbXMtbW9kZWxzLmNvbXBvbmVudC5zY3NzIn0= */"

/***/ }),

/***/ "./src/app/svg/dom/params-models/params-models.component.ts":
/*!******************************************************************!*\
  !*** ./src/app/svg/dom/params-models/params-models.component.ts ***!
  \******************************************************************/
/*! exports provided: ParamsModelsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ParamsModelsComponent", function() { return ParamsModelsComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");





let ParamsModelsComponent = class ParamsModelsComponent {
    constructor(DUService, dataService, domService, ref) {
        this.DUService = DUService;
        this.dataService = dataService;
        this.domService = domService;
        this.ref = ref;
        this.domService.svgParamsModel.subscribe(() => {
            this.ref.detectChanges();
        });
    }
    ngOnInit() {
        if (this.dataService.cmd.common.initLog) {
            this.DUService.out.redLog('paramsModels is ok!!');
        }
    }
};
ParamsModelsComponent.ctorParameters = () => [
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_3__["JdesignDataService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_4__["DomUpdateService"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"] }
];
ParamsModelsComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[paramsModels]',
        template: __webpack_require__(/*! raw-loader!./params-models.component.html */ "./node_modules/raw-loader/index.js!./src/app/svg/dom/params-models/params-models.component.html"),
        styles: [__webpack_require__(/*! ./params-models.component.scss */ "./src/app/svg/dom/params-models/params-models.component.scss")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"],
        _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_3__["JdesignDataService"],
        _services_dom_update_service__WEBPACK_IMPORTED_MODULE_4__["DomUpdateService"],
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]])
], ParamsModelsComponent);



/***/ }),

/***/ "./src/app/svg/dom/params-models/params-models.module.ts":
/*!***************************************************************!*\
  !*** ./src/app/svg/dom/params-models/params-models.module.ts ***!
  \***************************************************************/
/*! exports provided: ParamsModelsModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ParamsModelsModule", function() { return ParamsModelsModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _params_models_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./params-models.component */ "./src/app/svg/dom/params-models/params-models.component.ts");
/* harmony import */ var _params_model_params_model_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./params-model/params-model.component */ "./src/app/svg/dom/params-models/params-model/params-model.component.ts");
/* harmony import */ var _common_label_circle_label_circle_module__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common/label-circle/label-circle.module */ "./src/app/svg/dom/common/label-circle/label-circle.module.ts");
/* harmony import */ var _common_repeat_path_repeat_path_module__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../common/repeat-path/repeat-path.module */ "./src/app/svg/dom/common/repeat-path/repeat-path.module.ts");
/* harmony import */ var _common_label_lines_label_lines_module__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../common/label-lines/label-lines.module */ "./src/app/svg/dom/common/label-lines/label-lines.module.ts");








let ParamsModelsModule = class ParamsModelsModule {
};
ParamsModelsModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
            _common_label_circle_label_circle_module__WEBPACK_IMPORTED_MODULE_5__["LabelCircleModule"],
            _common_label_lines_label_lines_module__WEBPACK_IMPORTED_MODULE_7__["LabelLinesModule"],
            _common_repeat_path_repeat_path_module__WEBPACK_IMPORTED_MODULE_6__["RepeatPathModule"]
        ],
        declarations: [_params_models_component__WEBPACK_IMPORTED_MODULE_3__["ParamsModelsComponent"], _params_model_params_model_component__WEBPACK_IMPORTED_MODULE_4__["ParamsModelComponent"]],
        exports: [_params_models_component__WEBPACK_IMPORTED_MODULE_3__["ParamsModelsComponent"]]
    })
], ParamsModelsModule);



/***/ }),

/***/ "./src/app/svg/dom/points/point/point.component.scss":
/*!***********************************************************!*\
  !*** ./src/app/svg/dom/points/point/point.component.scss ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".svg_circle {\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  stroke-opacity: 0.25;\n  fill-opacity: 0;\n  fill: #909090;\n  stroke: #909090;\n  cursor: move;\n}\n\n.svg_circle_shadow {\n  fill-opacity: 0.8;\n  fill: #422222;\n  cursor: move;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc3ZnL2RvbS9wb2ludHMvcG9pbnQvRDpcXGtub3dsZWRnZVxcaGdcXG9sZFxcb2xkUm9vbS9zcmNcXGFwcFxcc3ZnXFxkb21cXHBvaW50c1xccG9pbnRcXHBvaW50LmNvbXBvbmVudC5zY3NzIiwic3JjL2FwcC9zdmcvZG9tL3BvaW50cy9wb2ludC9wb2ludC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLDZDQUFBO0VBQ0Esb0JBQUE7RUFDQSxlQUFBO0VBQ0EsYUFBQTtFQUNBLGVBQUE7RUFDQSxZQUFBO0FDQ0o7O0FERUE7RUFDSSxpQkFBQTtFQUNBLGFBQUE7RUFDQSxZQUFBO0FDQ0oiLCJmaWxlIjoic3JjL2FwcC9zdmcvZG9tL3BvaW50cy9wb2ludC9wb2ludC5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5zdmdfY2lyY2xlIHtcclxuICAgIC13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwKTtcclxuICAgIHN0cm9rZS1vcGFjaXR5OiAwLjI1O1xyXG4gICAgZmlsbC1vcGFjaXR5OiAwO1xyXG4gICAgZmlsbDogIzkwOTA5MDtcclxuICAgIHN0cm9rZTogIzkwOTA5MDtcclxuICAgIGN1cnNvcjogbW92ZTtcclxufVxyXG5cclxuLnN2Z19jaXJjbGVfc2hhZG93IHtcclxuICAgIGZpbGwtb3BhY2l0eTogMC44O1xyXG4gICAgZmlsbDogIzQyMjIyMjtcclxuICAgIGN1cnNvcjogbW92ZTtcclxufSIsIi5zdmdfY2lyY2xlIHtcbiAgLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiByZ2JhKDAsIDAsIDAsIDApO1xuICBzdHJva2Utb3BhY2l0eTogMC4yNTtcbiAgZmlsbC1vcGFjaXR5OiAwO1xuICBmaWxsOiAjOTA5MDkwO1xuICBzdHJva2U6ICM5MDkwOTA7XG4gIGN1cnNvcjogbW92ZTtcbn1cblxuLnN2Z19jaXJjbGVfc2hhZG93IHtcbiAgZmlsbC1vcGFjaXR5OiAwLjg7XG4gIGZpbGw6ICM0MjIyMjI7XG4gIGN1cnNvcjogbW92ZTtcbn0iXX0= */"

/***/ }),

/***/ "./src/app/svg/dom/points/point/point.component.ts":
/*!*********************************************************!*\
  !*** ./src/app/svg/dom/points/point/point.component.ts ***!
  \*********************************************************/
/*! exports provided: PointComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PointComponent", function() { return PointComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_right_menu_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../services/right-menu.service */ "./src/app/services/right-menu.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");






let PointComponent = class PointComponent {
    constructor(popService, dataService, rightService, domService) {
        this.popService = popService;
        this.dataService = dataService;
        this.rightService = rightService;
        this.domService = domService;
        this.isOver = false;
        this.testPos = undefined;
    }
    set point(data) {
        this._point = data;
    }
    get point() { return this._point; }
    ngOnInit() {
    }
    ngDoCheck() {
        this.testPos = this.point.pos;
        if (!this.testPos) {
            console.log(this.testPos);
            console.log(this.point.cowallIDs);
        }
    }
    mouseDown(e) {
        if (e.which == 3) {
            this.rightService.point.emit({ e: e, point: this.point });
            this.dataService.cache.common.initUpdate(['rightMenu']);
        }
        else {
            this.dataService.cache.common.choose = this.point;
            this.dataService.cache.common.firstPos = { x: e.offsetX, y: e.offsetY };
            this.dataService.cache.common.blockON = true;
            this.dataService.cmd.cowall.hide = false;
            this.domService.allSvg.emit();
            this.dataService.cache.common.initUpdate();
        }
    }
    mouseOver(e) {
        if (this.dataService.cmd.floorplan.debugPos != null && this.dataService.cmd.floorplan.debugPos != undefined) {
            let data = {
                text: `${this.point.id}:{
         cos:${this.point.cowallIDs};
         x:${this.point.pos.x};
         y:${this.point.pos.y};
        }`,
                position: this.dataService.cmd.floorplan.debugPos
            };
            this.popService.message.emit(data);
        }
        this.isOver = true;
    }
    mouseLeave(e) {
        this.isOver = false;
    }
};
PointComponent.ctorParameters = () => [
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_2__["PopDivService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_3__["JdesignDataService"] },
    { type: _services_right_menu_service__WEBPACK_IMPORTED_MODULE_4__["RightMenuService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_5__["DomUpdateService"] }
];
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [Object])
], PointComponent.prototype, "point", null);
PointComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[point]',
        template: __webpack_require__(/*! raw-loader!./point.component.html */ "./node_modules/raw-loader/index.js!./src/app/svg/dom/points/point/point.component.html"),
        styles: [__webpack_require__(/*! ./point.component.scss */ "./src/app/svg/dom/points/point/point.component.scss")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_services_pop_div_service__WEBPACK_IMPORTED_MODULE_2__["PopDivService"],
        _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_3__["JdesignDataService"],
        _services_right_menu_service__WEBPACK_IMPORTED_MODULE_4__["RightMenuService"],
        _services_dom_update_service__WEBPACK_IMPORTED_MODULE_5__["DomUpdateService"]])
], PointComponent);



/***/ }),

/***/ "./src/app/svg/dom/points/points.component.scss":
/*!******************************************************!*\
  !*** ./src/app/svg/dom/points/points.component.scss ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3N2Zy9kb20vcG9pbnRzL3BvaW50cy5jb21wb25lbnQuc2NzcyJ9 */"

/***/ }),

/***/ "./src/app/svg/dom/points/points.component.ts":
/*!****************************************************!*\
  !*** ./src/app/svg/dom/points/points.component.ts ***!
  \****************************************************/
/*! exports provided: PointsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PointsComponent", function() { return PointsComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");





let PointsComponent = class PointsComponent {
    constructor(DUService, dataService, domUpdateService, ref) {
        this.DUService = DUService;
        this.dataService = dataService;
        this.domUpdateService = domUpdateService;
        this.ref = ref;
        this.domUpdateService.svgPoint.subscribe(() => {
            this.ref.detectChanges();
        });
    }
    ngOnInit() {
        if (this.dataService.cmd.common.initLog) {
            this.DUService.out.redLog('points is ok!!');
        }
    }
    getPointArr() {
        return this.DUService.cal.getStringArrByNum(this.dataService.points);
    }
};
PointsComponent.ctorParameters = () => [
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_3__["JdesignDataService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_4__["DomUpdateService"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"] }
];
PointsComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[points]',
        template: __webpack_require__(/*! raw-loader!./points.component.html */ "./node_modules/raw-loader/index.js!./src/app/svg/dom/points/points.component.html"),
        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
        styles: [__webpack_require__(/*! ./points.component.scss */ "./src/app/svg/dom/points/points.component.scss")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"],
        _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_3__["JdesignDataService"],
        _services_dom_update_service__WEBPACK_IMPORTED_MODULE_4__["DomUpdateService"],
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]])
], PointsComponent);



/***/ }),

/***/ "./src/app/svg/dom/points/points.module.ts":
/*!*************************************************!*\
  !*** ./src/app/svg/dom/points/points.module.ts ***!
  \*************************************************/
/*! exports provided: PointsModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PointsModule", function() { return PointsModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _points_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./points.component */ "./src/app/svg/dom/points/points.component.ts");
/* harmony import */ var _point_point_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./point/point.component */ "./src/app/svg/dom/points/point/point.component.ts");





let PointsModule = class PointsModule {
};
PointsModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]
        ],
        declarations: [_points_component__WEBPACK_IMPORTED_MODULE_3__["PointsComponent"], _point_point_component__WEBPACK_IMPORTED_MODULE_4__["PointComponent"]],
        exports: [_points_component__WEBPACK_IMPORTED_MODULE_3__["PointsComponent"]]
    })
], PointsModule);



/***/ }),

/***/ "./src/app/svg/dom/rooms/floor/floor.component.scss":
/*!**********************************************************!*\
  !*** ./src/app/svg/dom/rooms/floor/floor.component.scss ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3N2Zy9kb20vcm9vbXMvZmxvb3IvZmxvb3IuY29tcG9uZW50LnNjc3MifQ== */"

/***/ }),

/***/ "./src/app/svg/dom/rooms/floor/floor.component.ts":
/*!********************************************************!*\
  !*** ./src/app/svg/dom/rooms/floor/floor.component.ts ***!
  \********************************************************/
/*! exports provided: FloorComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FloorComponent", function() { return FloorComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");



let FloorComponent = class FloorComponent {
    constructor(dataService) {
        this.dataService = dataService;
    }
    set floor(data) {
        this._floor = data;
    }
    get floor() { return this._floor; }
    ngOnInit() {
    }
};
FloorComponent.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__["JdesignDataService"] }
];
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [Object])
], FloorComponent.prototype, "floor", null);
FloorComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[floor]',
        template: __webpack_require__(/*! raw-loader!./floor.component.html */ "./node_modules/raw-loader/index.js!./src/app/svg/dom/rooms/floor/floor.component.html"),
        styles: [__webpack_require__(/*! ./floor.component.scss */ "./src/app/svg/dom/rooms/floor/floor.component.scss")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__["JdesignDataService"]])
], FloorComponent);



/***/ }),

/***/ "./src/app/svg/dom/rooms/room-shadow/room-shadow.component.scss":
/*!**********************************************************************!*\
  !*** ./src/app/svg/dom/rooms/room-shadow/room-shadow.component.scss ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".room_shadow_path {\n  fill: #c5daeb;\n  stroke: #a8ceec;\n  fill-opacity: 0.5;\n}\n\n.room_shadow_area {\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  text-anchor: middle;\n  font-family: \"Frutiger Next LT W1G\", Calibri, Arial, Helvetica, sans-serif;\n  fill: #202020;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc3ZnL2RvbS9yb29tcy9yb29tLXNoYWRvdy9EOlxca25vd2xlZGdlXFxoZ1xcb2xkXFxvbGRSb29tL3NyY1xcYXBwXFxzdmdcXGRvbVxccm9vbXNcXHJvb20tc2hhZG93XFxyb29tLXNoYWRvdy5jb21wb25lbnQuc2NzcyIsInNyYy9hcHAvc3ZnL2RvbS9yb29tcy9yb29tLXNoYWRvdy9yb29tLXNoYWRvdy5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGFBQUE7RUFDQSxlQUFBO0VBQ0EsaUJBQUE7QUNDSjs7QURFQTtFQUNJLDZDQUFBO0VBQ0EsbUJBQUE7RUFDQSwwRUFBQTtFQUNBLGFBQUE7QUNDSiIsImZpbGUiOiJzcmMvYXBwL3N2Zy9kb20vcm9vbXMvcm9vbS1zaGFkb3cvcm9vbS1zaGFkb3cuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIucm9vbV9zaGFkb3dfcGF0aCB7XHJcbiAgICBmaWxsOiByZ2IoMTk3LCAyMTgsIDIzNSk7XHJcbiAgICBzdHJva2U6IHJnYigxNjgsIDIwNiwgMjM2KTtcclxuICAgIGZpbGwtb3BhY2l0eTogMC41O1xyXG59XHJcblxyXG4ucm9vbV9zaGFkb3dfYXJlYSB7XHJcbiAgICAtd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMCk7XHJcbiAgICB0ZXh0LWFuY2hvcjogbWlkZGxlO1xyXG4gICAgZm9udC1mYW1pbHk6IFwiRnJ1dGlnZXIgTmV4dCBMVCBXMUdcIiwgQ2FsaWJyaSwgQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZjtcclxuICAgIGZpbGw6ICMyMDIwMjA7XHJcbn0iLCIucm9vbV9zaGFkb3dfcGF0aCB7XG4gIGZpbGw6ICNjNWRhZWI7XG4gIHN0cm9rZTogI2E4Y2VlYztcbiAgZmlsbC1vcGFjaXR5OiAwLjU7XG59XG5cbi5yb29tX3NoYWRvd19hcmVhIHtcbiAgLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiByZ2JhKDAsIDAsIDAsIDApO1xuICB0ZXh0LWFuY2hvcjogbWlkZGxlO1xuICBmb250LWZhbWlseTogXCJGcnV0aWdlciBOZXh0IExUIFcxR1wiLCBDYWxpYnJpLCBBcmlhbCwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmO1xuICBmaWxsOiAjMjAyMDIwO1xufSJdfQ== */"

/***/ }),

/***/ "./src/app/svg/dom/rooms/room-shadow/room-shadow.component.ts":
/*!********************************************************************!*\
  !*** ./src/app/svg/dom/rooms/room-shadow/room-shadow.component.ts ***!
  \********************************************************************/
/*! exports provided: RoomShadowComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RoomShadowComponent", function() { return RoomShadowComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");





let RoomShadowComponent = class RoomShadowComponent {
    constructor(dataService, ref, domService, DUService) {
        this.dataService = dataService;
        this.ref = ref;
        this.domService = domService;
        this.DUService = DUService;
        this._assistPosA = null;
        this._assistPosB = null;
        this.centerPos = null;
        this.size = null;
        this.domService.svgRoomShadow.subscribe(() => {
            this.ref.detectChanges();
        });
    }
    ngOnInit() {
        if (this.dataService.cmd.common.initLog) {
            this.DUService.out.redLog('room-shadow is ok!!');
        }
    }
    /** 是否隐藏 */
    isShow() {
        if (this.dataService.cmd != undefined
            && this.dataService.cache.common.mode == 'drawRoom'
            && this.dataService.cache.room.shadowPosArr != null
            && !this.DUService.pos.isSamePos(this.dataService.cache.room.shadowPosArr[0], this.dataService.cache.room.shadowPosArr[1]))
            return true;
        else
            return false;
        // return false
    }
    /** 是否显示标签 */
    isLabel() {
        this.centerPos = this.getCenterPos();
        this.size = this.getSize();
        if (this.size.width <= 0 || this.size.height <= 0) {
            this.dataService.cache.room.inputData = [];
            return false;
        }
        return true;
    }
    /** 获取厚度 */
    getThickness() {
        return this.dataService.cmd.wall.thickness;
    }
    /** 获取path */
    getPath() {
        this._assistPosA = { x: this.dataService.cache.room.shadowPosArr[0].x, y: this.dataService.cache.room.shadowPosArr[1].y };
        this._assistPosB = { x: this.dataService.cache.room.shadowPosArr[1].x, y: this.dataService.cache.room.shadowPosArr[0].y };
        let path = this.DUService.svg.getPath(true, this.dataService.cache.room.shadowPosArr[0], this._assistPosA, this.dataService.cache.room.shadowPosArr[1], this._assistPosB);
        return path;
    }
    /** 获取中心 */
    getCenterPos() {
        let pos = { x: (this.dataService.cache.room.shadowPosArr[0].x + this.dataService.cache.room.shadowPosArr[1].x) / 2, y: (this.dataService.cache.room.shadowPosArr[0].y + this.dataService.cache.room.shadowPosArr[1].y) / 2 };
        return pos;
    }
    /** 获取宽高 */
    getSize() {
        let width = Math.abs(this.dataService.cache.room.shadowPosArr[1].x - this.dataService.cache.room.shadowPosArr[0].x);
        width -= this.dataService.cmd.wall.thickness;
        let height = Math.abs(this.dataService.cache.room.shadowPosArr[1].y - this.dataService.cache.room.shadowPosArr[0].y);
        height -= this.dataService.cmd.wall.thickness;
        return {
            width: width,
            height: height
        };
    }
    /** 获取标签线 返回的数组[水平线,垂直线] */
    getLabelLine(centerPos, size) {
        let lineA = this.DUService.pos.getLineByCenterPos(centerPos, size.width / 2, 0);
        let lineB = this.DUService.pos.getLineByCenterPos(centerPos, size.height / 2, Math.PI / 2);
        /** 水平线 */
        lineA = this.DUService.pos.getPosTrans(lineA[0], lineA[1], -(size.height / 2 - this.dataService.cmd.cowall.height));
        /** 垂直线 */
        lineB = this.DUService.pos.getPosTrans(lineB[0], lineB[1], -(size.width / 2 - this.dataService.cmd.cowall.height));
        return [lineA, lineB];
    }
    /** 获取标签数据 */
    getLabelData(centerPos, size) {
        let lines = this.getLabelLine(centerPos, size);
        let inputDatas = [];
        let datas = {
            img: this.dataService.cmd.cowall.ico.url,
            imgWidth: this.dataService.cmd.cowall.ico.width,
            imgHeight: this.dataService.cmd.cowall.ico.height,
            data: [],
            movePos: { x: 0, y: 0 }
        };
        let text = null;
        let getDataFunc = (posArr) => {
            text = this.dataService.cmd.getPixelTransLength(this.DUService.pos.getDistance(posArr[0], posArr[1]), 'mm');
            text = parseInt(text.toFixed(0));
            return {
                line: [posArr[0], posArr[1]],
                text: text
            };
        };
        for (let i = 0; i < lines.length; i++) {
            let data = getDataFunc(lines[i]);
            let inputData = {
                pos: { x: (data.line[1].x + data.line[0].x) / 2, y: (data.line[1].y + data.line[0].y) / 2 },
                text: data.text,
                isX: true
            };
            data.text = null;
            inputDatas.push(inputData);
            datas.data.push(data);
        }
        inputDatas[1].isX = false;
        this.dataService.cache.room.inputData = inputDatas;
        return datas;
    }
    /** 获取textTransform */
    getTextTransform(centerPos) {
        let transform = this.DUService.pos.getTransfromString(1, 0, 0, 1, centerPos.x, centerPos.y);
        return transform;
    }
    /** 获取面积 */
    getArea(size) {
        let area = size.width * size.height;
        area = this.dataService.cmd.getPixelTransLength(area, 'm');
        area = this.dataService.cmd.getPixelTransLength(area, 'm');
        let text = area.toFixed(2) + 'm²';
        return text;
    }
};
RoomShadowComponent.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__["JdesignDataService"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_3__["DomUpdateService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_4__["JdesignUtil2dService"] }
];
RoomShadowComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[room-shadow]',
        template: __webpack_require__(/*! raw-loader!./room-shadow.component.html */ "./node_modules/raw-loader/index.js!./src/app/svg/dom/rooms/room-shadow/room-shadow.component.html"),
        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
        styles: [__webpack_require__(/*! ./room-shadow.component.scss */ "./src/app/svg/dom/rooms/room-shadow/room-shadow.component.scss")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__["JdesignDataService"],
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"],
        _services_dom_update_service__WEBPACK_IMPORTED_MODULE_3__["DomUpdateService"],
        _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_4__["JdesignUtil2dService"]])
], RoomShadowComponent);



/***/ }),

/***/ "./src/app/svg/dom/rooms/room/room.component.scss":
/*!********************************************************!*\
  !*** ./src/app/svg/dom/rooms/room/room.component.scss ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".room_path {\n  fill: rgba(62, 127, 168, 0.712);\n}\n\n.room_area {\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  text-anchor: middle;\n  font-family: \"Frutiger Next LT W1G\", Calibri, Arial, Helvetica, sans-serif;\n  fill: #202020;\n}\n\n.test_circle {\n  fill: firebrick;\n}\n\n.test_room {\n  fill: rgba(62, 127, 168, 0.712);\n}\n\n.shadow_room:hover {\n  fill: rgba(99, 103, 105, 0.512);\n}\n\n.shadow_room {\n  fill: rgba(0, 0, 0, 0);\n}\n\n.room_click {\n  fill: rgba(124, 197, 240, 0.312);\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc3ZnL2RvbS9yb29tcy9yb29tL0Q6XFxrbm93bGVkZ2VcXGhnXFxvbGRcXG9sZFJvb20vc3JjXFxhcHBcXHN2Z1xcZG9tXFxyb29tc1xccm9vbVxccm9vbS5jb21wb25lbnQuc2NzcyIsInNyYy9hcHAvc3ZnL2RvbS9yb29tcy9yb29tL3Jvb20uY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSwrQkFBQTtBQ0NKOztBREVBO0VBQ0ksNkNBQUE7RUFDQSxtQkFBQTtFQUNBLDBFQUFBO0VBQ0EsYUFBQTtBQ0NKOztBREVBO0VBQ0ksZUFBQTtBQ0NKOztBREVBO0VBQ0ksK0JBQUE7QUNDSjs7QURFQTtFQUNJLCtCQUFBO0FDQ0o7O0FEQ0E7RUFDSSxzQkFBQTtBQ0VKOztBRENBO0VBQ0ksZ0NBQUE7QUNFSiIsImZpbGUiOiJzcmMvYXBwL3N2Zy9kb20vcm9vbXMvcm9vbS9yb29tLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLnJvb21fcGF0aCB7XHJcbiAgICBmaWxsOiByZ2JhKDYyLCAxMjcsIDE2OCwgMC43MTIpO1xyXG59XHJcblxyXG4ucm9vbV9hcmVhIHtcclxuICAgIC13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwKTtcclxuICAgIHRleHQtYW5jaG9yOiBtaWRkbGU7XHJcbiAgICBmb250LWZhbWlseTogXCJGcnV0aWdlciBOZXh0IExUIFcxR1wiLCBDYWxpYnJpLCBBcmlhbCwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmO1xyXG4gICAgZmlsbDogIzIwMjAyMDtcclxufVxyXG5cclxuLnRlc3RfY2lyY2xlIHtcclxuICAgIGZpbGw6IGZpcmVicmljaztcclxufVxyXG5cclxuLnRlc3Rfcm9vbSB7XHJcbiAgICBmaWxsOiByZ2JhKDYyLCAxMjcsIDE2OCwgMC43MTIpO1xyXG59XHJcblxyXG4uc2hhZG93X3Jvb206aG92ZXIge1xyXG4gICAgZmlsbDogcmdiYSg5OSwgMTAzLCAxMDUsIDAuNTEyKTtcclxufVxyXG4uc2hhZG93X3Jvb217XHJcbiAgICBmaWxsOnJnYmEoMCwgMCwgMCwgMClcclxufVxyXG5cclxuLnJvb21fY2xpY2sge1xyXG4gICAgZmlsbDogcmdiYSgxMjQsIDE5NywgMjQwLCAwLjMxMik7XHJcbn0iLCIucm9vbV9wYXRoIHtcbiAgZmlsbDogcmdiYSg2MiwgMTI3LCAxNjgsIDAuNzEyKTtcbn1cblxuLnJvb21fYXJlYSB7XG4gIC13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwKTtcbiAgdGV4dC1hbmNob3I6IG1pZGRsZTtcbiAgZm9udC1mYW1pbHk6IFwiRnJ1dGlnZXIgTmV4dCBMVCBXMUdcIiwgQ2FsaWJyaSwgQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZjtcbiAgZmlsbDogIzIwMjAyMDtcbn1cblxuLnRlc3RfY2lyY2xlIHtcbiAgZmlsbDogZmlyZWJyaWNrO1xufVxuXG4udGVzdF9yb29tIHtcbiAgZmlsbDogcmdiYSg2MiwgMTI3LCAxNjgsIDAuNzEyKTtcbn1cblxuLnNoYWRvd19yb29tOmhvdmVyIHtcbiAgZmlsbDogcmdiYSg5OSwgMTAzLCAxMDUsIDAuNTEyKTtcbn1cblxuLnNoYWRvd19yb29tIHtcbiAgZmlsbDogcmdiYSgwLCAwLCAwLCAwKTtcbn1cblxuLnJvb21fY2xpY2sge1xuICBmaWxsOiByZ2JhKDEyNCwgMTk3LCAyNDAsIDAuMzEyKTtcbn0iXX0= */"

/***/ }),

/***/ "./src/app/svg/dom/rooms/room/room.component.ts":
/*!******************************************************!*\
  !*** ./src/app/svg/dom/rooms/room/room.component.ts ***!
  \******************************************************/
/*! exports provided: RoomComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RoomComponent", function() { return RoomComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");
/* harmony import */ var _services_right_menu_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../services/right-menu.service */ "./src/app/services/right-menu.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");








let RoomComponent = class RoomComponent {
    constructor(dataService, DUService, calService, popService, rightService, domService) {
        this.dataService = dataService;
        this.DUService = DUService;
        this.calService = calService;
        this.popService = popService;
        this.rightService = rightService;
        this.domService = domService;
        this.transform = null;
        this.path = null;
        this.fillString = null;
        this.area = null;
    }
    set room(data) {
        this._roomData = data;
    }
    get room() { return this._roomData; }
    ngOnInit() {
        this.fillString = this.getFillString();
        let floor = this.room.getFloor();
        floor.lateChooseFuncArr.push(() => {
            this.popService.panelRight.emit(floor);
        });
        this.room.lateChooseFuncArr.push(() => {
            this.popService.panelRight.emit(floor);
        });
        let roof = this.room.getRoof();
        roof.lateChooseFuncArr.push(() => {
            this.popService.panelRight.emit(roof);
        });
    }
    ngDoCheck() {
        let inPosArr = null;
        try {
            inPosArr = this.room.getInLine();
            this.path = this.getPath(inPosArr);
            this.area = this.getArea(inPosArr);
            if (this.room.isAutoMoveAreaPos) {
                /* 矩形算法 */
                // let centerPos = this.DUService.pos.getCenterPosByPolygon(...inPosArr)
                /* 延长算法 */
                let centerPos = this.getCenterPosSuper(inPosArr);
                // if (centerPos.x < 0 || centerPos.y < 0) {
                //   centerPos = this.DUService.pos.getCenterPosByPolygon(...inPosArr)
                // }
                this.room.displayPos = centerPos;
            }
            // if (this.room.displayPos == null) {
            //   this.transform = null
            // }
            // else {
            //   this.transform = this.getTextTransform(this.room.displayPos)
            // }
        }
        catch (e) {
            console.log(e);
            // console.log(this.area)
        }
    }
    mouseOver(e) {
        if (this.dataService.cmd.floorplan.debugPos != null && this.dataService.cmd.floorplan.debugPos != undefined) {
            let data = {
                text: `${this.room.id}:{
         cos:${this.room.cowallIDs},
         floor:${this.room.floorID}
        }`,
                position: this.dataService.cmd.floorplan.debugPos
            };
            this.popService.message.emit(data);
        }
    }
    mouseDown(e) {
        if (this.dataService.cmd.floorplan.debugPos != null && this.dataService.cmd.floorplan.debugPos != undefined) {
            let data = {
                text: `${this.room.getFloor().id}:{
         room:${this.room.getFloor().roomID}
        }`,
                position: this.dataService.cmd.floorplan.debugPos
            };
            this.popService.message.emit(data);
        }
        this.dataService.cache.common.blockON = true;
        this.dataService.cache.common.firstPos = { x: e.offsetX, y: e.offsetY };
        // this.dataService.cmd.cowall.hide = true
        this.dataService.cache.common.choose = this.room;
        this.dataService.cache.common.chooseOtherMsg = 'room';
        this.dataService.cache.common.initUpdate();
        this.domService.allSvg.emit();
        if (e.which == 3) {
            this.rightService.room.emit({ e: e, room: this.room });
        }
    }
    textDown(e) {
        this.mouseDown(e);
        this.room.isAutoMoveAreaPos = false;
        this.dataService.cache.common.chooseOtherMsg = 'text';
    }
    /** 获取path */
    getPath(posArr) {
        let path = this.DUService.svg.getPath(true, ...posArr);
        let wallArr = this.room.getWallArr();
        for (let i = 0; i < wallArr.length; i++) {
            if (wallArr[i].arcDistance != 0)
                path += this.getArcPath(wallArr[i]);
        }
        return path;
    }
    getCenterPosSuper(posArr) {
        let centerPos = this.DUService.pos.getCenterPosByPolygon(...posArr);
        let a = this.DUService.pos.isInPosArrByPos(centerPos, posArr);
        if (a)
            return centerPos;
        let lines = this.DUService.pos.getLines(posArr);
        let minInt = undefined;
        let minDistance = undefined;
        let intersectPos = undefined;
        for (let i = 0; i < lines.length; i++) {
            let newPos = this.DUService.pos.getRightAngleIntersect(centerPos, lines[i][0], lines[i][1], false);
            if (!newPos) {
                continue;
            }
            let distance = this.DUService.pos.getPowDistance(newPos, centerPos);
            if (minDistance == undefined || minDistance > distance) {
                minInt = i;
                minDistance = distance;
                intersectPos = newPos;
            }
        }
        if (minInt == undefined)
            return centerPos;
        let lineA = lines[minInt];
        let newLine = [intersectPos, centerPos];
        newLine = this.DUService.pos.getlongLine(newLine);
        lines.splice(minInt, 1);
        for (let i = 0; i < lines.length; i++) {
            let newIntersectPos = this.DUService.pos.getIntersect(newLine[0], newLine[1], lines[i][0], lines[i][1], false);
            if (newIntersectPos) {
                let newCenterPos = this.DUService.pos.getCenterPos(newIntersectPos, intersectPos);
                return newCenterPos;
            }
        }
        return centerPos;
    }
    /** 获取圆弧的path */
    getArcPath(wall) {
        let a = wall.isBigArc();
        let path = this.DUService.svg.getArcPath(wall.arcRadius - (wall.thickness / 2), wall.outLine[0][1], a);
        path = this.DUService.svg.getAddPath(wall.outLine[1][0], true) + ',' + path;
        path += ',Z';
        return path;
    }
    /** 获取面积 */
    getArea(posArr) {
        let area = this.DUService.pos.getArea(...posArr);
        let wallArr = this.room.getWallArr();
        for (let i = 0; i < wallArr.length; i++) {
            if (wallArr[i].arcDistance != 0) {
                area += this.getArcArea(wallArr[i]);
            }
        }
        area = this.dataService.cmd.getPixelTransLength(area, 'm');
        area = this.dataService.cmd.getPixelTransLength(area, 'm');
        this.room.areaCache = area;
        let text = area.toFixed(2) + 'm²';
        return text;
    }
    /** 获取弧形面积 */
    getArcArea(wall) {
        let distance = this.DUService.pos.getDistance(wall.outLine[0][1], wall.outLine[1][0]);
        let a = wall.isBigArc();
        let area = this.DUService.pos.getArcArea(distance, wall.arcRadius - (wall.thickness / 2), a);
        return area;
    }
    /** 获取textTransform */
    getTextTransform(centerPos) {
        let transform = this.DUService.pos.getTransfromString(1, 0, 0, 1, centerPos.x, centerPos.y);
        return transform;
    }
    /** 中心算法 */
    getCenterPos(posArr) {
        let triangles = this.getTriangles(posArr);
        if (triangles.length == 0) {
            return undefined;
        }
        let lineArr = this.getAllLines(...posArr);
        this.DUService.pos.removeSamePosLine(lineArr);
        let len = triangles.length - 1;
        let circlePos = triangles[len].centerPos;
        // return circlePos
        let normalLengthFactor = 500;
        let lengthFactor = normalLengthFactor;
        let minLengthFactor = 1;
        let int = 0;
        while (int < 50 && minLengthFactor < lengthFactor) {
            let msg = this.getNewCircleMsg(circlePos, lineArr, lengthFactor);
            /** 距离变大,用新的圆心继续计算 */
            if (msg.distance > 0) {
                circlePos = msg.pos;
                if (!this.DUService.pos.isInPosArrByPos(circlePos, posArr)) {
                    len--;
                    if (len < 0)
                        return null;
                    circlePos = triangles[len].centerPos;
                    lengthFactor = normalLengthFactor;
                }
            }
            /** 距离变小,减少步长因子继续计算 */
            else if (msg.distance < 0) {
                lengthFactor = lengthFactor * 0.618;
            }
            int++;
        }
        return circlePos;
    }
    /** 测试用的 */
    testSetCenterPos(posArr) {
        let lineArr = this.getAllLines(...posArr);
        let triangles = this.getTriangles(posArr);
        let len = triangles.length - 1;
        let circlePos = triangles[len].centerPos;
        // return circlePos
        let normalLengthFactor = 500;
        let lengthFactor = normalLengthFactor;
        let minLengthFactor = 1;
        let int = 0;
        let time = 200;
        let isGo = true;
        this.dataService.cache.testSvg = [{
                mode: 'circle',
                radius: 300,
                pos: circlePos
            }];
        this.domService.testSvg.emit();
        // console.log(`pos:x:${circlePos.x},y:${circlePos.y}`)
        let func = (int, minLengthFactor, lengthFactor, isGo) => {
            setTimeout(() => {
                let msg = this.getNewCircleMsg(circlePos, lineArr, lengthFactor);
                /** 距离变大,用新的圆心继续计算 */
                if (msg.distance > 0) {
                    circlePos = msg.pos;
                    if (!this.DUService.pos.isInPosArrByPos(circlePos, posArr)) {
                        isGo = false;
                        // len--
                        // circlePos = triangles[len].centerPos
                        // lengthFactor = normalLengthFactor
                    }
                }
                /** 距离变小,减少步长因子继续计算 */
                else if (msg.distance < 0) {
                    lengthFactor = lengthFactor * 0.618;
                }
                int++;
                this.dataService.cache.testSvg = [{
                        mode: 'circle',
                        radius: 300,
                        pos: circlePos
                    }];
                this.domService.testSvg.emit();
                // console.log(`pos:x:${circlePos.x},y:${circlePos.y}`)
                // console.log("%c" + int, 'color:red')
                if (int < 50 && minLengthFactor < lengthFactor && isGo) {
                    func(int, minLengthFactor, lengthFactor, isGo);
                }
            }, time);
        };
        setTimeout(() => {
            func(int, minLengthFactor, lengthFactor, isGo);
        }, time);
    }
    /** 获取第一次圆心 必须由三个点及以上组成 num从第0个算起 */
    getTriangles(posArr) {
        let triangles = [];
        let newPosArr = [];
        let newArea = null;
        let centerPos = null;
        for (let i = 0; i < posArr.length - 2; i++) {
            newPosArr = [posArr[i], posArr[i + 1], posArr[i + 2]];
            if (!this.DUService.pos.isSamePos(posArr[i], posArr[i + 1]) &&
                !this.DUService.pos.isSamePos(posArr[i + 1], posArr[i + 2]) &&
                !this.DUService.pos.isSamePos(posArr[i + 2], posArr[i])) {
                centerPos = this.DUService.pos.getTriangleCenterPos(newPosArr[0], newPosArr[1], newPosArr[2]);
                newArea = this.DUService.pos.getArea(...newPosArr);
                let a = this.DUService.pos.isInPosArrByPos(centerPos, posArr);
                if (newArea > 0 && a) {
                    triangles.push({ centerPos: centerPos, area: newArea });
                }
            }
        }
        this.DUService.cal.bubbleSortByAttr(triangles, 'area');
        return triangles;
    }
    /** 计算新新圆心 */
    getNewCircleMsg(circlePos, lineArr, lengthFactor) {
        let twoCrossPosArr = this.getTwoCrossPosArr(circlePos, ...lineArr);
        let referencePos = this.getReferencePos(circlePos, twoCrossPosArr[0], twoCrossPosArr[1]);
        let extendsCirclePos = this.getExtendsCirclePos(circlePos, referencePos, lengthFactor);
        let newCrossPos = this.getCrossPos(extendsCirclePos, ...lineArr);
        let newDistance = newCrossPos.distance - twoCrossPosArr[0].distance;
        return {
            distance: newDistance,
            pos: extendsCirclePos
        };
    }
    /** 获取所有线段 */
    getAllLines(...posArr) {
        let lines = [];
        for (let i = 0; i < posArr.length - 1; i++) {
            lines.push([posArr[i], posArr[i + 1]]);
        }
        lines.push([posArr[posArr.length - 1], posArr[0]]);
        return lines;
    }
    /** 获取最小距离两个坐标 */
    getTwoCrossPosArr(pos, ...lineArr) {
        /** 第一小 */
        let posA = null;
        /** 第二小 */
        let posB = null;
        let distanceA = null;
        let distanceB = null;
        let distance = null;
        let crossPos = null;
        for (let i = 0; i < lineArr.length; i++) {
            crossPos = this.DUService.pos.getPointToLinePos(pos, lineArr[i][0], lineArr[i][1]);
            distance = this.DUService.pos.getDistance(pos, crossPos);
            /** 初始值 */
            if (distanceA == null) {
                distanceA = distance;
                posA = crossPos;
            }
            /** 第二初始值 */
            else if (distanceB == null) {
                if (distance < distanceA) {
                    distanceB = distanceA;
                    posB = posA;
                    distanceA = distance;
                    posA = crossPos;
                }
                else {
                    distanceB = distance;
                    posB = crossPos;
                }
            }
            /** 开始比较 */
            /** 先比较第一小 */
            else if (distance < distanceA) {
                distanceA = distance;
                posA = crossPos;
            }
            /** 再比较`第二小 */
            else if (distance < distanceB) {
                distanceB = distance;
                posB = crossPos;
            }
        }
        return [{ pos: posA, distance: distanceA }, { pos: posB, distance: distanceB }];
    }
    /** 获取最近距离的坐标 */
    getCrossPos(pos, ...lineArr) {
        let minPos = null;
        let minDistance = null;
        let crossPos = null;
        let distance = null;
        for (let i = 0; i < lineArr.length; i++) {
            crossPos = this.DUService.pos.getPointToLinePos(pos, lineArr[i][0], lineArr[i][1]);
            distance = this.DUService.pos.getDistance(pos, crossPos);
            if (minDistance == null || minDistance > distance) {
                minDistance = distance;
                minPos = crossPos;
            }
        }
        return { pos: minPos, distance: minDistance };
    }
    /** 获取参考点 */
    getReferencePos(pos, crossPosA, crossPosB) {
        /** 三点共线 */
        let radianA = this.DUService.pos.getRadian(pos, crossPosA.pos);
        let radianB = this.DUService.pos.getRadian(pos, crossPosB.pos);
        let radian = Math.abs(radianA - radianB);
        if (radian % Math.PI == 0 || radian == 0) {
            return crossPosA.pos;
        }
        else {
            let a = crossPosA.distance / (crossPosA.distance + crossPosB.distance);
            let x = crossPosA.pos.x + (a * (crossPosB.pos.x - crossPosA.pos.x));
            let y = crossPosA.pos.y + (a * (crossPosB.pos.y - crossPosA.pos.y));
            let newPos = { x: x, y: y };
            return newPos;
        }
    }
    /** 获取延长圆心 lengthFactor为步长因子*/
    getExtendsCirclePos(oldCirclePos, extendsPos, lengthFactor) {
        let b = Math.sqrt(Math.pow(oldCirclePos.x - extendsPos.x, 2) + Math.pow(oldCirclePos.y - extendsPos.y, 2));
        let x = oldCirclePos.x + (lengthFactor * ((oldCirclePos.x - extendsPos.x) / b));
        let y = oldCirclePos.y + (lengthFactor * ((oldCirclePos.y - extendsPos.y) / b));
        let newPos = { x: x, y: y };
        return newPos;
    }
    /** 获取fillID */
    getFillString() {
        let id = this.room.getFloor().id;
        let text = `url(#${id})`;
        return text;
    }
};
RoomComponent.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_3__["JdesignUtil2dService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_4__["CalculatorsService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_5__["PopDivService"] },
    { type: _services_right_menu_service__WEBPACK_IMPORTED_MODULE_6__["RightMenuService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_7__["DomUpdateService"] }
];
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [Object])
], RoomComponent.prototype, "room", null);
RoomComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[room]',
        template: __webpack_require__(/*! raw-loader!./room.component.html */ "./node_modules/raw-loader/index.js!./src/app/svg/dom/rooms/room/room.component.html"),
        styles: [__webpack_require__(/*! ./room.component.scss */ "./src/app/svg/dom/rooms/room/room.component.scss")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__["JdesignDataService"],
        _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_3__["JdesignUtil2dService"],
        _services_calculators_service__WEBPACK_IMPORTED_MODULE_4__["CalculatorsService"],
        _services_pop_div_service__WEBPACK_IMPORTED_MODULE_5__["PopDivService"],
        _services_right_menu_service__WEBPACK_IMPORTED_MODULE_6__["RightMenuService"],
        _services_dom_update_service__WEBPACK_IMPORTED_MODULE_7__["DomUpdateService"]])
], RoomComponent);

class CrossPos {
}
class TriangleType {
}


/***/ }),

/***/ "./src/app/svg/dom/rooms/rooms-text/rooms-text.component.scss":
/*!********************************************************************!*\
  !*** ./src/app/svg/dom/rooms/rooms-text/rooms-text.component.scss ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "@charset \"UTF-8\";\n.room_area {\n  text-anchor: middle;\n  /* 文本水平居中 */\n  dominant-baseline: middle;\n  /* 文本垂直居中 */\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc3ZnL2RvbS9yb29tcy9yb29tcy10ZXh0L3Jvb21zLXRleHQuY29tcG9uZW50LnNjc3MiLCJzcmMvYXBwL3N2Zy9kb20vcm9vbXMvcm9vbXMtdGV4dC9EOlxca25vd2xlZGdlXFxoZ1xcb2xkXFxvbGRSb29tL3NyY1xcYXBwXFxzdmdcXGRvbVxccm9vbXNcXHJvb21zLXRleHRcXHJvb21zLXRleHQuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZ0JBQWdCO0FDQWhCO0VBQ0ksbUJBQUE7RUFDQSxXQUFBO0VBQ0EseUJBQUE7RUFDQSxXQUFBO0FERUoiLCJmaWxlIjoic3JjL2FwcC9zdmcvZG9tL3Jvb21zL3Jvb21zLXRleHQvcm9vbXMtdGV4dC5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIkBjaGFyc2V0IFwiVVRGLThcIjtcbi5yb29tX2FyZWEge1xuICB0ZXh0LWFuY2hvcjogbWlkZGxlO1xuICAvKiDmlofmnKzmsLTlubPlsYXkuK0gKi9cbiAgZG9taW5hbnQtYmFzZWxpbmU6IG1pZGRsZTtcbiAgLyog5paH5pys5Z6C55u05bGF5LitICovXG59IiwiLnJvb21fYXJlYSB7XHJcbiAgICB0ZXh0LWFuY2hvcjogbWlkZGxlO1xyXG4gICAgLyog5paH5pys5rC05bmz5bGF5LitICovXHJcbiAgICBkb21pbmFudC1iYXNlbGluZTogbWlkZGxlO1xyXG4gICAgLyog5paH5pys5Z6C55u05bGF5LitICovXHJcbn0iXX0= */"

/***/ }),

/***/ "./src/app/svg/dom/rooms/rooms-text/rooms-text.component.ts":
/*!******************************************************************!*\
  !*** ./src/app/svg/dom/rooms/rooms-text/rooms-text.component.ts ***!
  \******************************************************************/
/*! exports provided: RoomsTextComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RoomsTextComponent", function() { return RoomsTextComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");
/* harmony import */ var _services_right_menu_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../services/right-menu.service */ "./src/app/services/right-menu.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");







let RoomsTextComponent = class RoomsTextComponent {
    constructor(dataService, DUService, popService, rightService, domService) {
        this.dataService = dataService;
        this.DUService = DUService;
        this.popService = popService;
        this.rightService = rightService;
        this.domService = domService;
    }
    ngOnInit() {
    }
    /** 获取对象 */
    getRoomArr() {
        let rooms = this.DUService.cal.getStringArrByNum(this.dataService.rooms);
        return rooms;
    }
    /** 获取位置 */
    getTransform(room) {
        if (!room.displayPos) {
            return undefined;
        }
        else {
            return this.getTextTransform(room.displayPos);
        }
    }
    /** 获取面积 */
    getArea(room) {
        let text = room.areaCache.toFixed(2) + 'm²';
        return text;
    }
    getClassName(room) {
        let className = "room_area font_size ";
        className += room.id;
        return className;
    }
    mouseDown(e, room) {
        this.dataService.cache.common.blockON = true;
        this.dataService.cache.common.firstPos = { x: e.offsetX, y: e.offsetY };
        // this.dataService.cmd.cowall.hide = true
        this.dataService.cache.common.choose = room;
        this.dataService.cache.common.chooseOtherMsg = 'room';
        this.dataService.cache.common.initUpdate();
        this.domService.allSvg.emit();
        if (e.which == 3) {
            this.rightService.room.emit({ e: e, room: room });
        }
        this.dataService.cache.common.chooseOtherMsg = 'text';
    }
    /** 获取textTransform */
    getTextTransform(centerPos) {
        let transform = this.DUService.pos.getTransfromString(1, 0, 0, 1, centerPos.x, centerPos.y);
        return transform;
    }
};
RoomsTextComponent.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_3__["JdesignUtil2dService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_4__["PopDivService"] },
    { type: _services_right_menu_service__WEBPACK_IMPORTED_MODULE_5__["RightMenuService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_6__["DomUpdateService"] }
];
RoomsTextComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[roomsText]',
        template: __webpack_require__(/*! raw-loader!./rooms-text.component.html */ "./node_modules/raw-loader/index.js!./src/app/svg/dom/rooms/rooms-text/rooms-text.component.html"),
        styles: [__webpack_require__(/*! ./rooms-text.component.scss */ "./src/app/svg/dom/rooms/rooms-text/rooms-text.component.scss")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__["JdesignDataService"],
        _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_3__["JdesignUtil2dService"],
        _services_pop_div_service__WEBPACK_IMPORTED_MODULE_4__["PopDivService"],
        _services_right_menu_service__WEBPACK_IMPORTED_MODULE_5__["RightMenuService"],
        _services_dom_update_service__WEBPACK_IMPORTED_MODULE_6__["DomUpdateService"]])
], RoomsTextComponent);



/***/ }),

/***/ "./src/app/svg/dom/rooms/rooms.component.scss":
/*!****************************************************!*\
  !*** ./src/app/svg/dom/rooms/rooms.component.scss ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3N2Zy9kb20vcm9vbXMvcm9vbXMuY29tcG9uZW50LnNjc3MifQ== */"

/***/ }),

/***/ "./src/app/svg/dom/rooms/rooms.component.ts":
/*!**************************************************!*\
  !*** ./src/app/svg/dom/rooms/rooms.component.ts ***!
  \**************************************************/
/*! exports provided: RoomsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RoomsComponent", function() { return RoomsComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");





let RoomsComponent = class RoomsComponent {
    constructor(dataService, DUService, domService, ref) {
        this.dataService = dataService;
        this.DUService = DUService;
        this.domService = domService;
        this.ref = ref;
        this.domService.svgRoom.subscribe(() => {
            this.ref.detectChanges();
        });
    }
    ngOnInit() {
        if (this.dataService.cmd.common.initLog) {
            this.DUService.out.redLog('rooms is ok!!');
        }
    }
    /*获取房间的集合 */
    getRoomArr() {
        let rooms = this.DUService.cal.getStringArrByNum(this.dataService.rooms);
        return rooms;
    }
};
RoomsComponent.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_3__["JdesignUtil2dService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_4__["DomUpdateService"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"] }
];
RoomsComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[rooms]',
        template: __webpack_require__(/*! raw-loader!./rooms.component.html */ "./node_modules/raw-loader/index.js!./src/app/svg/dom/rooms/rooms.component.html"),
        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
        styles: [__webpack_require__(/*! ./rooms.component.scss */ "./src/app/svg/dom/rooms/rooms.component.scss")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__["JdesignDataService"],
        _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_3__["JdesignUtil2dService"],
        _services_dom_update_service__WEBPACK_IMPORTED_MODULE_4__["DomUpdateService"],
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]])
], RoomsComponent);



/***/ }),

/***/ "./src/app/svg/dom/rooms/rooms.module.ts":
/*!***********************************************!*\
  !*** ./src/app/svg/dom/rooms/rooms.module.ts ***!
  \***********************************************/
/*! exports provided: RoomsModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RoomsModule", function() { return RoomsModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _rooms_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./rooms.component */ "./src/app/svg/dom/rooms/rooms.component.ts");
/* harmony import */ var _room_room_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./room/room.component */ "./src/app/svg/dom/rooms/room/room.component.ts");
/* harmony import */ var _room_shadow_room_shadow_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./room-shadow/room-shadow.component */ "./src/app/svg/dom/rooms/room-shadow/room-shadow.component.ts");
/* harmony import */ var _floor_floor_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./floor/floor.component */ "./src/app/svg/dom/rooms/floor/floor.component.ts");
/* harmony import */ var _common_label_lines_label_lines_module__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../common/label-lines/label-lines.module */ "./src/app/svg/dom/common/label-lines/label-lines.module.ts");
/* harmony import */ var _rooms_text_rooms_text_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./rooms-text/rooms-text.component */ "./src/app/svg/dom/rooms/rooms-text/rooms-text.component.ts");









let RoomsModule = class RoomsModule {
};
RoomsModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
            _common_label_lines_label_lines_module__WEBPACK_IMPORTED_MODULE_7__["LabelLinesModule"]
        ],
        declarations: [_rooms_component__WEBPACK_IMPORTED_MODULE_3__["RoomsComponent"], _room_room_component__WEBPACK_IMPORTED_MODULE_4__["RoomComponent"], _room_shadow_room_shadow_component__WEBPACK_IMPORTED_MODULE_5__["RoomShadowComponent"], _floor_floor_component__WEBPACK_IMPORTED_MODULE_6__["FloorComponent"], _rooms_text_rooms_text_component__WEBPACK_IMPORTED_MODULE_8__["RoomsTextComponent"]],
        exports: [_rooms_component__WEBPACK_IMPORTED_MODULE_3__["RoomsComponent"], _room_shadow_room_shadow_component__WEBPACK_IMPORTED_MODULE_5__["RoomShadowComponent"]]
    })
], RoomsModule);



/***/ }),

/***/ "./src/app/svg/dom/walls/wall-shadow/wall-shadow.component.scss":
/*!**********************************************************************!*\
  !*** ./src/app/svg/dom/walls/wall-shadow/wall-shadow.component.scss ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".wall_shadow_path {\n  stroke: #636363;\n  stroke-width: 2;\n  fill: rgba(50, 79, 143, 0.5);\n}\n\n.wall_circle {\n  fill: rgba(84, 85, 87, 0.5);\n  stroke: #636363;\n  stroke-width: 30;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc3ZnL2RvbS93YWxscy93YWxsLXNoYWRvdy9EOlxca25vd2xlZGdlXFxoZ1xcb2xkXFxvbGRSb29tL3NyY1xcYXBwXFxzdmdcXGRvbVxcd2FsbHNcXHdhbGwtc2hhZG93XFx3YWxsLXNoYWRvdy5jb21wb25lbnQuc2NzcyIsInNyYy9hcHAvc3ZnL2RvbS93YWxscy93YWxsLXNoYWRvdy93YWxsLXNoYWRvdy5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGVBQUE7RUFDQSxlQUFBO0VBQ0EsNEJBQUE7QUNDSjs7QURFQTtFQUNJLDJCQUFBO0VBQ0EsZUFBQTtFQUNBLGdCQUFBO0FDQ0oiLCJmaWxlIjoic3JjL2FwcC9zdmcvZG9tL3dhbGxzL3dhbGwtc2hhZG93L3dhbGwtc2hhZG93LmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLndhbGxfc2hhZG93X3BhdGgge1xyXG4gICAgc3Ryb2tlOiByZ2IoOTksIDk5LCA5OSk7XHJcbiAgICBzdHJva2Utd2lkdGg6IDI7XHJcbiAgICBmaWxsOiByZ2JhKCRjb2xvcjogIzMyNGY4ZiwgJGFscGhhOiAwLjUpXHJcbn1cclxuXHJcbi53YWxsX2NpcmNsZSB7XHJcbiAgICBmaWxsOnJnYmEoJGNvbG9yOiAjNTQ1NTU3LCAkYWxwaGE6IDAuNSk7XHJcbiAgICBzdHJva2U6IHJnYig5OSwgOTksIDk5KTtcclxuICAgIHN0cm9rZS13aWR0aDogMzA7XHJcbn0iLCIud2FsbF9zaGFkb3dfcGF0aCB7XG4gIHN0cm9rZTogIzYzNjM2MztcbiAgc3Ryb2tlLXdpZHRoOiAyO1xuICBmaWxsOiByZ2JhKDUwLCA3OSwgMTQzLCAwLjUpO1xufVxuXG4ud2FsbF9jaXJjbGUge1xuICBmaWxsOiByZ2JhKDg0LCA4NSwgODcsIDAuNSk7XG4gIHN0cm9rZTogIzYzNjM2MztcbiAgc3Ryb2tlLXdpZHRoOiAzMDtcbn0iXX0= */"

/***/ }),

/***/ "./src/app/svg/dom/walls/wall-shadow/wall-shadow.component.ts":
/*!********************************************************************!*\
  !*** ./src/app/svg/dom/walls/wall-shadow/wall-shadow.component.ts ***!
  \********************************************************************/
/*! exports provided: WallShadowComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WallShadowComponent", function() { return WallShadowComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");





let WallShadowComponent = class WallShadowComponent {
    constructor(dataService, DUService, domService, ref) {
        this.dataService = dataService;
        this.DUService = DUService;
        this.domService = domService;
        this.ref = ref;
        this.circlePos = null;
        this.domService.svgWallShadow.subscribe(() => {
            this.ref.detectChanges();
        });
    }
    ngOnInit() {
        if (this.dataService.cmd.common.initLog) {
            this.DUService.out.redLog('wall-shadow is ok!!');
        }
    }
    /** 返回是否为 */
    isShow() {
        if (this.dataService.cmd != undefined && this.dataService.cache.common.mode == 'drawWall')
            return true;
        else
            return false;
    }
    /** 获取path */
    getPath() {
        let wallHThickness = this.dataService.cmd.wall.thickness / 2;
        if (this.dataService.cache.wall.ShadowPosArr != null && !this.isSamePos()) {
            switch (this.dataService.cache.wall.location) {
                case 0:
                    return this.getCenterPath(this.dataService.cmd.wall.thickness / 2, this.dataService.cache.wall.ShadowPosArr);
                case 1:
                    return this.getOutPath(this.dataService.cmd.wall.thickness, this.dataService.cache.wall.ShadowPosArr);
                case -1:
                    return this.getInPath(this.dataService.cmd.wall.thickness, this.dataService.cache.wall.ShadowPosArr);
            }
        }
        else {
            return '';
        }
    }
    /** 获取居中轮廓 */
    getCenterPath(wallHThickness, posArr) {
        let LPosArr = this.DUService.pos.getPosTrans(posArr[0], posArr[1], wallHThickness);
        let RPosArr = this.DUService.pos.getPosTrans(posArr[0], posArr[1], -wallHThickness);
        let newPosArr = [LPosArr[0], LPosArr[1], RPosArr[1], RPosArr[0]];
        let path = this.DUService.svg.getPath(false, ...newPosArr);
        return path;
    }
    /** 获取靠外轮廓 */
    getOutPath(wallThickness, posArr) {
        let LPosArr = this.DUService.pos.getPosTrans(posArr[0], posArr[1], wallThickness);
        let newPosArr = [LPosArr[0], LPosArr[1], posArr[1], posArr[0]];
        let path = this.DUService.svg.getPath(false, ...newPosArr);
        return path;
    }
    /** 获取靠内轮廓 */
    getInPath(wallThickness, posArr) {
        let RPosArr = this.DUService.pos.getPosTrans(posArr[0], posArr[1], -wallThickness);
        let newPosArr = [RPosArr[0], RPosArr[1], posArr[1], posArr[0]];
        let path = this.DUService.svg.getPath(false, ...newPosArr);
        return path;
    }
    setCircle(pos) {
        if (this.dataService.cache.wall.ShadowPosArr != null && !this.isSamePos()) {
            this.circlePos = this.dataService.cache.wall.ShadowPosArr[1];
        }
        else {
            this.circlePos = null;
        }
        return this.circlePos;
    }
    /** 是否相同坐标 */
    isSamePos() {
        return this.DUService.pos.isSamePos(this.dataService.cache.wall.ShadowPosArr[0], this.dataService.cache.wall.ShadowPosArr[1]);
    }
};
WallShadowComponent.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_3__["JdesignUtil2dService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_4__["DomUpdateService"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"] }
];
WallShadowComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[wall-shadow]',
        template: __webpack_require__(/*! raw-loader!./wall-shadow.component.html */ "./node_modules/raw-loader/index.js!./src/app/svg/dom/walls/wall-shadow/wall-shadow.component.html"),
        styles: [__webpack_require__(/*! ./wall-shadow.component.scss */ "./src/app/svg/dom/walls/wall-shadow/wall-shadow.component.scss")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__["JdesignDataService"],
        _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_3__["JdesignUtil2dService"],
        _services_dom_update_service__WEBPACK_IMPORTED_MODULE_4__["DomUpdateService"],
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]])
], WallShadowComponent);



/***/ }),

/***/ "./src/app/svg/dom/walls/wall/wall.component.scss":
/*!********************************************************!*\
  !*** ./src/app/svg/dom/walls/wall/wall.component.scss ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".null,\n.normal {\n  fill: rgba(172, 172, 172, 0.4);\n}\n\n.balcony {\n  fill: #b131a6;\n}\n\n.choose_wall {\n  fill: #51aae6;\n  fill-opacity: 0.3;\n}\n\n.wall_path {\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  stroke-linejoin: round;\n  cursor: default;\n}\n\n.wall_line {\n  fill: none;\n}\n\n.wall_stroke_color {\n  fill: #ACACAC;\n  stroke: #ACACAC;\n  stroke-width: 16;\n}\n\n.wall_path:focus {\n  fill: #51aae6;\n}\n\n.test_center_line {\n  stroke: #b131a6;\n}\n\n.test_out_line {\n  stroke: #51aae6;\n}\n\n.test_in_line {\n  stroke: aquamarine;\n}\n\n.wall_label {\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  text-anchor: middle;\n  font-family: \"Frutiger Next LT W1G\", Calibri, Arial, Helvetica, sans-serif;\n  fill: #202020;\n  font-size: 200px;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc3ZnL2RvbS93YWxscy93YWxsL0Q6XFxrbm93bGVkZ2VcXGhnXFxvbGRcXG9sZFJvb20vc3JjXFxhcHBcXHN2Z1xcZG9tXFx3YWxsc1xcd2FsbFxcd2FsbC5jb21wb25lbnQuc2NzcyIsInNyYy9hcHAvc3ZnL2RvbS93YWxscy93YWxsL3dhbGwuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0VBRUksOEJBQUE7QUNDSjs7QURFQTtFQUNJLGFBQUE7QUNDSjs7QURFQTtFQUNJLGFBQUE7RUFDQSxpQkFBQTtBQ0NKOztBREVBO0VBQ0ksNkNBQUE7RUFDQSxzQkFBQTtFQUNBLGVBQUE7QUNDSjs7QURFQTtFQUNJLFVBQUE7QUNDSjs7QURFQTtFQUNJLGFBQUE7RUFDQSxlQUFBO0VBQ0EsZ0JBQUE7QUNDSjs7QURFQTtFQUNJLGFBQUE7QUNDSjs7QURFQTtFQUNJLGVBQUE7QUNDSjs7QURFQTtFQUNJLGVBQUE7QUNDSjs7QURFQTtFQUNJLGtCQUFBO0FDQ0o7O0FERUE7RUFDSSw2Q0FBQTtFQUNBLG1CQUFBO0VBQ0EsMEVBQUE7RUFDQSxhQUFBO0VBQ0EsZ0JBQUE7QUNDSiIsImZpbGUiOiJzcmMvYXBwL3N2Zy9kb20vd2FsbHMvd2FsbC93YWxsLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLm51bGwsXHJcbi5ub3JtYWwge1xyXG4gICAgZmlsbDogcmdiYSgxNzIsIDE3MiwgMTcyLCAwLjQpO1xyXG59XHJcblxyXG4uYmFsY29ueSB7XHJcbiAgICBmaWxsOiAjYjEzMWE2O1xyXG59XHJcblxyXG4uY2hvb3NlX3dhbGwge1xyXG4gICAgZmlsbDogIzUxYWFlNjtcclxuICAgIGZpbGwtb3BhY2l0eTogMC4zO1xyXG59XHJcblxyXG4ud2FsbF9wYXRoIHtcclxuICAgIC13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwKTtcclxuICAgIHN0cm9rZS1saW5lam9pbjogcm91bmQ7XHJcbiAgICBjdXJzb3I6IGRlZmF1bHQ7XHJcbn1cclxuXHJcbi53YWxsX2xpbmUge1xyXG4gICAgZmlsbDogbm9uZVxyXG59XHJcblxyXG4ud2FsbF9zdHJva2VfY29sb3Ige1xyXG4gICAgZmlsbDogI0FDQUNBQztcclxuICAgIHN0cm9rZTogI0FDQUNBQztcclxuICAgIHN0cm9rZS13aWR0aDogMTY7XHJcbn1cclxuXHJcbi53YWxsX3BhdGg6Zm9jdXMge1xyXG4gICAgZmlsbDogIzUxYWFlNjtcclxufVxyXG5cclxuLnRlc3RfY2VudGVyX2xpbmUge1xyXG4gICAgc3Ryb2tlOiAjYjEzMWE2O1xyXG59XHJcblxyXG4udGVzdF9vdXRfbGluZSB7XHJcbiAgICBzdHJva2U6ICM1MWFhZTY7XHJcbn1cclxuXHJcbi50ZXN0X2luX2xpbmUge1xyXG4gICAgc3Ryb2tlOiBhcXVhbWFyaW5lO1xyXG59XHJcblxyXG4ud2FsbF9sYWJlbCB7XHJcbiAgICAtd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMCk7XHJcbiAgICB0ZXh0LWFuY2hvcjogbWlkZGxlO1xyXG4gICAgZm9udC1mYW1pbHk6IFwiRnJ1dGlnZXIgTmV4dCBMVCBXMUdcIiwgQ2FsaWJyaSwgQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZjtcclxuICAgIGZpbGw6ICMyMDIwMjA7XHJcbiAgICBmb250LXNpemU6IDIwMHB4O1xyXG59IiwiLm51bGwsXG4ubm9ybWFsIHtcbiAgZmlsbDogcmdiYSgxNzIsIDE3MiwgMTcyLCAwLjQpO1xufVxuXG4uYmFsY29ueSB7XG4gIGZpbGw6ICNiMTMxYTY7XG59XG5cbi5jaG9vc2Vfd2FsbCB7XG4gIGZpbGw6ICM1MWFhZTY7XG4gIGZpbGwtb3BhY2l0eTogMC4zO1xufVxuXG4ud2FsbF9wYXRoIHtcbiAgLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiByZ2JhKDAsIDAsIDAsIDApO1xuICBzdHJva2UtbGluZWpvaW46IHJvdW5kO1xuICBjdXJzb3I6IGRlZmF1bHQ7XG59XG5cbi53YWxsX2xpbmUge1xuICBmaWxsOiBub25lO1xufVxuXG4ud2FsbF9zdHJva2VfY29sb3Ige1xuICBmaWxsOiAjQUNBQ0FDO1xuICBzdHJva2U6ICNBQ0FDQUM7XG4gIHN0cm9rZS13aWR0aDogMTY7XG59XG5cbi53YWxsX3BhdGg6Zm9jdXMge1xuICBmaWxsOiAjNTFhYWU2O1xufVxuXG4udGVzdF9jZW50ZXJfbGluZSB7XG4gIHN0cm9rZTogI2IxMzFhNjtcbn1cblxuLnRlc3Rfb3V0X2xpbmUge1xuICBzdHJva2U6ICM1MWFhZTY7XG59XG5cbi50ZXN0X2luX2xpbmUge1xuICBzdHJva2U6IGFxdWFtYXJpbmU7XG59XG5cbi53YWxsX2xhYmVsIHtcbiAgLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiByZ2JhKDAsIDAsIDAsIDApO1xuICB0ZXh0LWFuY2hvcjogbWlkZGxlO1xuICBmb250LWZhbWlseTogXCJGcnV0aWdlciBOZXh0IExUIFcxR1wiLCBDYWxpYnJpLCBBcmlhbCwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmO1xuICBmaWxsOiAjMjAyMDIwO1xuICBmb250LXNpemU6IDIwMHB4O1xufSJdfQ== */"

/***/ }),

/***/ "./src/app/svg/dom/walls/wall/wall.component.ts":
/*!******************************************************!*\
  !*** ./src/app/svg/dom/walls/wall/wall.component.ts ***!
  \******************************************************/
/*! exports provided: WallComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WallComponent", function() { return WallComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");
/* harmony import */ var _services_right_menu_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../services/right-menu.service */ "./src/app/services/right-menu.service.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");








let WallComponent = class WallComponent {
    constructor(calService, DUService, dataService, domService, rightService, popService) {
        this.calService = calService;
        this.DUService = DUService;
        this.dataService = dataService;
        this.domService = domService;
        this.rightService = rightService;
        this.popService = popService;
        this.path = null;
        this.linePaths = [];
        this.centerLine = [];
        this.outLine = [];
        this.inLine = [];
        this.centertransform = null;
        this.posArr = [];
        this.typeSrc = '';
        this.wallRotate = 0;
        this.patternName = '';
        this.fillName = '';
        this.PIArr = [Math.PI / 180 * 45, Math.PI / 180 * 135];
    }
    set wall(data) {
        this._wall = data;
        this.patternName = 'pattern' + this._wall.id;
        this.fillName = `url(#${this.patternName})`;
    }
    get wall() { return this._wall; }
    mouseDown(e) {
        if (e.which == 3) {
            this.rightService.wall.emit({ e: e, wall: this.wall });
            this.dataService.cache.common.initUpdate(['rightMenu']);
        }
        else {
            this.calService.wall.setWallsCalFlag(undefined);
            this.dataService.cache.cowall.inputData = [];
            this.dataService.cache.common.choose = this.wall;
            this.dataService.cache.common.firstPos = { x: e.offsetX, y: e.offsetY };
            this.dataService.cache.common.blockON = true;
            this.dataService.cmd.cowall.hide = false;
            this.domService.allSvg.emit();
            this.dataService.cache.common.initUpdate();
            let cowalls = this.wall.getCowallArr();
            console.log(this.dataService.floorplan);
            console.log(this.dataService.points);
            console.log(this.dataService.walls);
            console.log(this.dataService.cowalls);
            console.log(this.dataService.rooms);
            /* 隐藏标签 */
            let otherCowalls = this.calService.cowall.getNearCowalls(cowalls[0]);
            if (cowalls[1]) {
                this.DUService.cal.removeByAttr(otherCowalls, 'id', cowalls[1].id);
            }
            for (let key in this.dataService.cowalls) {
                let cowall = this.dataService.cowalls[key];
                cowall.labelDisplay = true;
            }
            for (let i = 0; i < otherCowalls.length; i++) {
                otherCowalls[i].labelDisplay = false;
            }
        }
    }
    mouseOver(e) {
        if (this.dataService.cmd.floorplan.debugPos) {
            let pointIDArr = this.wall.getPointIDArr();
            let data = {
                text: `${this.wall.id}:{
        co:${this.wall.coedgeID};
        door:${this.wall.doorIDs};
        win:${this.wall.winIDs};
        furn:${this.wall.geometryIDs};
        rotate:${this.wall.getRotate()};
        pointID:${pointIDArr[0]},${pointIDArr[1]};
    } `,
                position: this.dataService.cmd.floorplan.debugPos
            };
            this.popService.message.emit(data);
        }
        this.dataService.cmd.cowall.hide = false;
        this.domService.svgCowall.emit();
    }
    ngOnInit() {
        this.wall.lateChooseFuncArr.push(() => {
            if (this.dataService.cache.common.threeOn == 1) {
                this.popService.panelRight.emit(this.wall);
            }
        });
        this.wall.urgentUpdate.subscribe(() => {
            let msg = this.getPathMsg();
            if (!msg) {
                this.path = undefined;
                this.linePaths = undefined;
                return false;
            }
            this.path = msg.path;
            // let bearPath = this.getBearingWallPath()
            // if (bearPath != undefined)
            //   this.path = bearPath
            // this.wall.isVeryShort = this.wall.getDistance() <= this.wall.thickness / 2
            this.typeSrc = this.getTypeSrc();
            let radian = this.wall.getRadian(true);
            this.wall.getDistance(true);
            if (this.wall.arcDistance == 0)
                this.setDisplayOutLine();
            else
                this.wall.drawOutLine = undefined;
            this.linePaths = this.getLines(this.wall.getPointArr(), this.wall.drawOutLine, radian);
            this.linePaths.push(...msg.lines);
            this.wallRotate = radian * 180 / Math.PI;
            if (this.dataService.cmd.wall.displayName) {
                let centerPos = this.DUService.pos.getCenterPos(this.posArr[0], this.posArr[1]);
                radian = this.DUService.pos.getAbsRadian(radian);
                radian = radian < 0 ? radian + Math.PI : radian;
                let cosA = Math.cos(radian);
                let sinA = Math.sin(radian);
                this.centertransform = this.DUService.pos.getTransfromString(cosA, sinA, -sinA, cosA, centerPos.x, centerPos.y);
            }
            if (this.wall.arcDistance != 0) {
                this.calService.wall.arcWallUpdata(this.wall);
            }
            return true;
        });
    }
    ngDoCheck() {
        this.wall.urgentUpdate.emit();
    }
    /** 是否选中 */
    isChoose() {
        return (this.dataService.cache.common.choose && this.dataService.cache.common.choose.id == this.wall.id);
    }
    /** 是否垂直 */
    isVertical() {
        let radian = this.DUService.pos.getAbsRadian(this.wall.getRadian(), false);
        return ((radian > this.PIArr[0] && radian < this.PIArr[1]) || (radian > -this.PIArr[1] && radian < -this.PIArr[0]));
    }
    getPathMsg() {
        let msg = { path: undefined, lines: [] };
        this.posArr = this.wall.getPosArr();
        if (this.wall.arcDistance != 0 && !this.wall.arcRadius) {
            this.wall.transArc();
        }
        let posArrS = this.calService.wall.getOutLine(this.wall);
        if (!posArrS)
            return undefined;
        this.wall.outLine = posArrS;
        /** 直墙 */
        if (this.wall.arcDistance == 0) {
            let newPosArr = [this.posArr[0], posArrS[0][0], posArrS[1][1], this.posArr[1], posArrS[1][0], posArrS[0][1]];
            msg.path = this.DUService.svg.getPath(true, ...newPosArr);
            msg.lines = [this.DUService.svg.getPath(false, posArrS[0][0], posArrS[1][1]), this.DUService.svg.getPath(false, posArrS[1][0], posArrS[0][1])];
        }
        /** 弧形墙 */
        else {
            let halfThickness = this.wall.thickness / 2;
            let a = this.wall.isBigArc();
            // /** 内圆 */
            let inPath = this.DUService.svg.getArcPath(this.wall.arcRadius - halfThickness, this.wall.outLine[1][0], a, true);
            /** 外圆 */
            let outPath = this.DUService.svg.getArcPath(this.wall.arcRadius + halfThickness, this.wall.outLine[0][0], a, false);
            msg.path = this.DUService.svg.getAddPath(this.posArr[0], true);
            msg.path += this.DUService.svg.getAddPath(this.wall.outLine[0][1]);
            msg.path += `,${inPath}`;
            msg.path += this.DUService.svg.getAddPath(this.posArr[1]);
            msg.path += this.DUService.svg.getAddPath(this.wall.outLine[1][1]);
            msg.path += `,${outPath},Z`;
            let line = this.DUService.svg.getPath(false, this.wall.outLine[0][1]);
            line += `,${inPath}`;
            msg.lines.push(line);
            line = this.DUService.svg.getPath(false, this.wall.outLine[1][1]);
            line += `,${outPath}`;
            msg.lines.push(line);
            // console.log(msg.lines)
            // let newPath = `M${LDPos.x} ${LDPos.y},L${LUPos.x} ${LUPos.y},L${RUPos.x} ${RUPos.y},L${RDPos.x} ${RDPos.y},Z`
            // path += newPath
        }
        return msg;
    }
    /** 设置体制墙 */
    getTypePath(radianNum, step) {
        let lineA = [this.wall.outLine[0][0], this.wall.outLine[1][1]];
        let lineB = [this.wall.outLine[0][1], this.wall.outLine[1][0]];
        let path = '';
        let radianA = this.DUService.pos.getRadian(lineA[0], lineA[1]);
        let distance = 0;
        let distanceA = this.DUService.pos.getDistance(lineA[0], lineA[1]);
        while (distance < distanceA) {
            let rayPos = this.DUService.pos.getRayPos(lineA[0], radianA, distance);
            let lineEnd = this.DUService.pos.getRayPos(rayPos, radianA - (radianNum), 1000);
            let lineStart = this.DUService.pos.getRayPos(rayPos, radianA + (radianNum), 1000);
            let intersectPos = this.DUService.pos.getIntersect(lineB[0], lineB[1], lineStart, lineEnd, false);
            if (intersectPos) {
                path += this.DUService.svg.getPath(false, rayPos, intersectPos) + ' ';
            }
            distance += step;
        }
        return path;
    }
    /** 获取墙类型src */
    getTypeSrc() {
        switch (this.wall.wallType) {
            case 0:
                return '';
            case 2:
                return this.dataService.cmd.wall.lightSteelWallSrc;
            case 3:
                return this.dataService.cmd.wall.lightBrickWallSrc;
            case 4:
                return this.dataService.cmd.wall.fixtureWallSrc;
            case 1:
                return this.dataService.cmd.wall.bearingwallSrc;
        }
    }
    /** 获取坐标 */
    getPosArr() {
        return this.wall.getPosArr();
    }
    /** 是否显示 */
    isShow() {
        let posArr = this.getPosArr();
        let judge = !this.DUService.pos.isSamePos(posArr[0], posArr[1]);
        return judge;
    }
    /** 获取轮廓线 */
    getLines(pointArr, outLine, mainRadian) {
        let linePaths = [];
        /** 调试用的 */
        // linePaths.push(this.DUService.svg.getPath(false, outLine[0][0], outLine[0][1]))
        // linePaths.push(this.DUService.svg.getPath(false, outLine[1][0], outLine[1][1]))
        /** =================== */
        // linePaths.push(this.DUService.svg.getPath(false, outLine[0][1], outLine[1][0]))
        // linePaths.push(this.DUService.svg.getPath(false, outLine[1][1], outLine[0][0]))
        let line = [];
        for (let i = 0; i < pointArr.length; i++) {
            for (let j = 0; j < outLine[i].length; j++) {
                line = [pointArr[i].pos, outLine[i][j]];
                let radian = this.DUService.pos.getRadian(line[0], line[1]);
                radian += Math.PI / 2;
                if (this.DUService.pos.isParallelRadian(radian, mainRadian)) {
                    let path = this.checkLineIntersectsPath(pointArr[i], line);
                    if (path)
                        linePaths.push(path);
                }
            }
        }
        return linePaths;
    }
    /* 判断是否何以生成相交轮廓 */
    checkLineIntersectsPath(point, line) {
        let otherWall = point.getWallArr();
        this.DUService.cal.removeByAttr(otherWall, 'id', this.wall.id);
        for (let i = 0; i < otherWall.length; i++) {
            let radian = otherWall[i].getRadian();
            if (this.DUService.pos.isParallelRadian(radian, this.wall.getRadian())) {
                if (otherWall[i].thickness >= this.wall.thickness) {
                    return undefined;
                }
                else {
                    radian = this.DUService.pos.getRadian(line[0], line[1]);
                    let distance = (this.wall.thickness - otherWall[i].thickness) / 2;
                    let rayPos = this.DUService.pos.getRayPos(line[0], radian, distance);
                    let path = this.DUService.svg.getPath(false, rayPos, line[1]);
                    return path;
                }
            }
        }
        let path = this.DUService.svg.getPath(false, line[0], line[1]);
        return path;
    }
    /** 获取附近平行的墙 */
    getNearParallelWalls() {
        let pointArr = this.wall.getPointArr();
        let parallelWalls = [];
        for (let i = 0; i < pointArr.length; i++) {
            let parallelWall = undefined;
            let wallArr = this.calService.point.getWallArr(pointArr[i]);
            this.DUService.cal.removeByAttr(wallArr, 'id', this.wall.id);
            for (let j = 0; j < wallArr.length; j++) {
                let radian = wallArr[j].getRadian(true);
                if (this.DUService.pos.isParallelRadian(radian, this.wall.getRadian())) {
                    parallelWall = wallArr[j];
                    break;
                }
            }
            parallelWalls.push(parallelWall);
        }
        return parallelWalls;
    }
    /**
     * 获取平行墙相邻的信息
     * @param parallelWalls
     * @returns 返回的顺序依次为[左上,左下,右下,右上]
     */
    getParallelWallNearestWalls(parallelWalls) {
        let nearestWallMsgs = [];
        let pointArr = this.wall.getPointArr();
        let wallL = parallelWalls[0];
        /** 左边设置===================== */
        /** 为空则左边不用设置 */
        if (!wallL) {
            nearestWallMsgs.push(undefined, undefined);
        }
        else {
            let LPointArr = wallL.getPointArr();
            let isReveser = LPointArr[1].id != pointArr[0].id;
            let msg = this.calService.wall.getNearestWalls(wallL);
            let distance = wallL.getDistance(true);
            let msgCompass = isReveser ? msg.RD : msg.LU;
            if (msgCompass && distance < msgCompass.wall.thickness) {
                // if (isReveser) {
                //   msgCompass.line = [msgCompass.line[1], msgCompass.line[0]]
                // }
                nearestWallMsgs.push(msgCompass);
            }
            else {
                nearestWallMsgs.push(undefined);
            }
            msgCompass = isReveser ? msg.RU : msg.LD;
            if (msgCompass && distance < msgCompass.wall.thickness) {
                // if (isReveser) {
                //   msgCompass.line = [msgCompass.line[1], msgCompass.line[0]]
                // }
                nearestWallMsgs.push(msgCompass);
            }
            else {
                nearestWallMsgs.push(undefined);
            }
        }
        /** 右边设置======================== */
        let wallR = parallelWalls[1];
        /** 为空则不用设置 */
        if (!wallR) {
            nearestWallMsgs.push(undefined, undefined);
        }
        else {
            let RPointArr = wallR.getPointArr();
            let isReveser = RPointArr[0].id != pointArr[1].id;
            let msg = this.calService.wall.getNearestWalls(wallR);
            let msgCompass = isReveser ? msg.LU : msg.RD;
            let distance = wallR.getDistance(true);
            if (msgCompass && distance < msgCompass.wall.thickness) {
                // if (isReveser) {
                //   msgCompass.line = [msgCompass.line[1], msgCompass.line[0]]
                // }
                nearestWallMsgs.push(msgCompass);
            }
            else {
                nearestWallMsgs.push(undefined);
            }
            msgCompass = isReveser ? msg.LD : msg.RU;
            if (msgCompass && distance < msgCompass.wall.thickness) {
                // if (isReveser) {
                //   msgCompass.line = [msgCompass.line[1], msgCompass.line[0]]
                // }
                nearestWallMsgs.push(msgCompass);
            }
            else {
                nearestWallMsgs.push(undefined);
            }
        }
        return nearestWallMsgs;
    }
    /** 获取显示用的轮廓 */
    getDisplayOutLine(nearestWallMsgs) {
        let outLine = [[], []];
        let posArr = this.wall.getPosArr();
        let upLine = this.DUService.pos.getPosTrans(posArr[0], posArr[1], this.wall.thickness / 2);
        let downLine = this.DUService.pos.getPosTrans(posArr[0], posArr[1], -this.wall.thickness / 2);
        /*左上 */
        if (nearestWallMsgs[0]) {
            let line = [nearestWallMsgs[0].line[0], nearestWallMsgs[0].line[1]];
            line = this.DUService.pos.getPosTrans(line[0], line[1], -nearestWallMsgs[0].wall.thickness / 2);
            let intersectPos = line ? this.DUService.pos.getIntersect(line[0], line[1], upLine[0], upLine[1]) : undefined;
            if (intersectPos) {
                outLine[0].push(intersectPos);
            }
            else {
                outLine[0].push(this.wall.outLine[0][0]);
            }
        }
        else {
            outLine[0].push(this.wall.outLine[0][0]);
        }
        /** 左下 */
        if (nearestWallMsgs[1]) {
            let line = [nearestWallMsgs[1].line[0], nearestWallMsgs[1].line[1]];
            line = this.DUService.pos.getPosTrans(line[0], line[1], nearestWallMsgs[1].wall.thickness / 2);
            let intersectPos = line ? this.DUService.pos.getIntersect(line[0], line[1], downLine[0], downLine[1]) : undefined;
            if (intersectPos) {
                outLine[0].push(intersectPos);
            }
            else {
                outLine[0].push(this.wall.outLine[0][1]);
            }
        }
        else {
            outLine[0].push(this.wall.outLine[0][1]);
        }
        /** 右下 */
        if (nearestWallMsgs[2]) {
            let line = [nearestWallMsgs[2].line[0], nearestWallMsgs[2].line[1]];
            line = this.DUService.pos.getPosTrans(line[0], line[1], -nearestWallMsgs[2].wall.thickness / 2);
            let intersectPos = line ? this.DUService.pos.getIntersect(line[0], line[1], downLine[0], downLine[1]) : undefined;
            if (intersectPos) {
                outLine[1].push(intersectPos);
            }
            else {
                outLine[1].push(this.wall.outLine[1][0]);
            }
        }
        else {
            outLine[1].push(this.wall.outLine[1][0]);
        }
        /** 右上 */
        if (nearestWallMsgs[3]) {
            let line = [nearestWallMsgs[3].line[0], nearestWallMsgs[3].line[1]];
            line = this.DUService.pos.getPosTrans(line[0], line[1], nearestWallMsgs[3].wall.thickness / 2);
            let intersectPos = line ? this.DUService.pos.getIntersect(line[0], line[1], upLine[0], upLine[1]) : undefined;
            if (intersectPos) {
                outLine[1].push(intersectPos);
            }
            else {
                outLine[1].push(this.wall.outLine[1][1]);
            }
        }
        else {
            outLine[1].push(this.wall.outLine[1][1]);
        }
        return outLine;
    }
    /** 设置显示用的轮廓 */
    setDisplayOutLine() {
        let parallelWalls = this.getNearParallelWalls();
        let msg = this.getParallelWallNearestWalls(parallelWalls);
        for (let i = 0; i < parallelWalls.length; i++) {
            if (parallelWalls[i]) {
                if (msg[2 * i] || msg[2 * i + 1]) {
                    parallelWalls[i].isVeryShort = true;
                }
            }
        }
        let outLine = this.getDisplayOutLine(msg);
        this.wall.drawOutLine = outLine;
        // console.log(this.wall.id)
        // console.log(this.wall.drawOutLine)
        // console.log(this.wall.outLine)
        // console.log('=================')
    }
    /* 承重墙轮廓 */
    getBearingWallPath() {
        if (this.wall.arcDistance != 0 || this.wall.wallType != 1)
            return undefined;
        let line = this.wall.getPosArr();
        let lineA = this.DUService.pos.getPosTrans(line[0], line[1], this.wall.thickness / 2);
        let lineB = this.DUService.pos.getPosTrans(line[0], line[1], -this.wall.thickness / 2);
        let path = this.DUService.svg.getPath(true, lineA[0], lineA[1], lineB[1], lineB[0]);
        return path;
    }
};
WallComponent.ctorParameters = () => [
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__["CalculatorsService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_3__["JdesignUtil2dService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_4__["JdesignDataService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_5__["DomUpdateService"] },
    { type: _services_right_menu_service__WEBPACK_IMPORTED_MODULE_6__["RightMenuService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_7__["PopDivService"] }
];
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [Object])
], WallComponent.prototype, "wall", null);
WallComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[wall]',
        template: __webpack_require__(/*! raw-loader!./wall.component.html */ "./node_modules/raw-loader/index.js!./src/app/svg/dom/walls/wall/wall.component.html"),
        styles: [__webpack_require__(/*! ./wall.component.scss */ "./src/app/svg/dom/walls/wall/wall.component.scss")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_services_calculators_service__WEBPACK_IMPORTED_MODULE_2__["CalculatorsService"],
        _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_3__["JdesignUtil2dService"],
        _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_4__["JdesignDataService"],
        _services_dom_update_service__WEBPACK_IMPORTED_MODULE_5__["DomUpdateService"],
        _services_right_menu_service__WEBPACK_IMPORTED_MODULE_6__["RightMenuService"],
        _services_pop_div_service__WEBPACK_IMPORTED_MODULE_7__["PopDivService"]])
], WallComponent);



/***/ }),

/***/ "./src/app/svg/dom/walls/walls.component.scss":
/*!****************************************************!*\
  !*** ./src/app/svg/dom/walls/walls.component.scss ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3N2Zy9kb20vd2FsbHMvd2FsbHMuY29tcG9uZW50LnNjc3MifQ== */"

/***/ }),

/***/ "./src/app/svg/dom/walls/walls.component.ts":
/*!**************************************************!*\
  !*** ./src/app/svg/dom/walls/walls.component.ts ***!
  \**************************************************/
/*! exports provided: WallsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WallsComponent", function() { return WallsComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");





let WallsComponent = class WallsComponent {
    constructor(DUService, dataService, domUpdateService, ref) {
        this.DUService = DUService;
        this.dataService = dataService;
        this.domUpdateService = domUpdateService;
        this.ref = ref;
        this.domUpdateService.svgWall.subscribe(() => {
            this.displayTest();
            this.ref.detectChanges();
        });
    }
    ngOnInit() {
        if (this.dataService.cmd.common.initLog) {
            this.DUService.out.redLog('walls is ok!!');
        }
    }
    getWallArr() {
        let walls = this.DUService.cal.getStringArrByNum(this.dataService.walls);
        // let newWalls: JWall[] = []
        // for (let i = 0; i < walls.length; i++) {
        //   if (walls[i].wallType != 1)
        //     newWalls.push(walls[i])
        // }
        // for (let i = 0; i < walls.length; i++) {
        //   if (walls[i].wallType == 1)
        //     newWalls.push(walls[i])
        // }
        return walls;
    }
    displayTest() {
        for (let key in this.dataService.walls) {
            let wall = this.dataService.walls[key];
            wall.isVeryShort = false;
        }
    }
};
WallsComponent.ctorParameters = () => [
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_3__["JdesignDataService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_4__["DomUpdateService"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"] }
];
WallsComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[walls]',
        template: __webpack_require__(/*! raw-loader!./walls.component.html */ "./node_modules/raw-loader/index.js!./src/app/svg/dom/walls/walls.component.html"),
        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
        styles: [__webpack_require__(/*! ./walls.component.scss */ "./src/app/svg/dom/walls/walls.component.scss")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"],
        _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_3__["JdesignDataService"],
        _services_dom_update_service__WEBPACK_IMPORTED_MODULE_4__["DomUpdateService"],
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]])
], WallsComponent);



/***/ }),

/***/ "./src/app/svg/dom/walls/walls.module.ts":
/*!***********************************************!*\
  !*** ./src/app/svg/dom/walls/walls.module.ts ***!
  \***********************************************/
/*! exports provided: WallsModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WallsModule", function() { return WallsModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _walls_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./walls.component */ "./src/app/svg/dom/walls/walls.component.ts");
/* harmony import */ var _wall_wall_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./wall/wall.component */ "./src/app/svg/dom/walls/wall/wall.component.ts");
/* harmony import */ var _wall_shadow_wall_shadow_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./wall-shadow/wall-shadow.component */ "./src/app/svg/dom/walls/wall-shadow/wall-shadow.component.ts");
/* harmony import */ var _common_label_lines_label_lines_module__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../common/label-lines/label-lines.module */ "./src/app/svg/dom/common/label-lines/label-lines.module.ts");







let WallsModule = class WallsModule {
};
WallsModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
            _common_label_lines_label_lines_module__WEBPACK_IMPORTED_MODULE_6__["LabelLinesModule"]
        ],
        declarations: [_walls_component__WEBPACK_IMPORTED_MODULE_3__["WallsComponent"], _wall_wall_component__WEBPACK_IMPORTED_MODULE_4__["WallComponent"], _wall_shadow_wall_shadow_component__WEBPACK_IMPORTED_MODULE_5__["WallShadowComponent"]],
        exports: [_walls_component__WEBPACK_IMPORTED_MODULE_3__["WallsComponent"], _wall_shadow_wall_shadow_component__WEBPACK_IMPORTED_MODULE_5__["WallShadowComponent"]]
    })
], WallsModule);



/***/ }),

/***/ "./src/app/svg/dom/wins/win/win.component.scss":
/*!*****************************************************!*\
  !*** ./src/app/svg/dom/wins/win/win.component.scss ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".win_path {\n  fill: white;\n  stroke: black;\n}\n\n.bayWin_path {\n  fill: #24409c;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc3ZnL2RvbS93aW5zL3dpbi9EOlxca25vd2xlZGdlXFxoZ1xcb2xkXFxvbGRSb29tL3NyY1xcYXBwXFxzdmdcXGRvbVxcd2luc1xcd2luXFx3aW4uY29tcG9uZW50LnNjc3MiLCJzcmMvYXBwL3N2Zy9kb20vd2lucy93aW4vd2luLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksV0FBQTtFQUNBLGFBQUE7QUNDSjs7QURFQTtFQUNJLGFBQUE7QUNDSiIsImZpbGUiOiJzcmMvYXBwL3N2Zy9kb20vd2lucy93aW4vd2luLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLndpbl9wYXRoIHtcclxuICAgIGZpbGw6IHJnYmEoJGNvbG9yOiAjZmZmZmZmLCAkYWxwaGE6IDEpO1xyXG4gICAgc3Ryb2tlOiBibGFjaztcclxufVxyXG5cclxuLmJheVdpbl9wYXRoIHtcclxuICAgIGZpbGw6IHJnYmEoJGNvbG9yOiAjMjQ0MDljLCAkYWxwaGE6IDEpO1xyXG59IiwiLndpbl9wYXRoIHtcbiAgZmlsbDogd2hpdGU7XG4gIHN0cm9rZTogYmxhY2s7XG59XG5cbi5iYXlXaW5fcGF0aCB7XG4gIGZpbGw6ICMyNDQwOWM7XG59Il19 */"

/***/ }),

/***/ "./src/app/svg/dom/wins/win/win.component.ts":
/*!***************************************************!*\
  !*** ./src/app/svg/dom/wins/win/win.component.ts ***!
  \***************************************************/
/*! exports provided: WinComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WinComponent", function() { return WinComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_right_menu_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../services/right-menu.service */ "./src/app/services/right-menu.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");








let WinComponent = class WinComponent {
    constructor(calService, DUService, dataService, domService, rightService, popService) {
        this.calService = calService;
        this.DUService = DUService;
        this.dataService = dataService;
        this.domService = domService;
        this.rightService = rightService;
        this.popService = popService;
        this._leftPos = undefined;
        this._rightPos = undefined;
        this.originPos = null;
        this.pixSize = null;
        this.transformString = null;
    }
    set win(data) {
        this._win = data;
    }
    get win() { return this._win; }
    mouseDown(e) {
        this.dataService.cache.common.choose = this.win;
        this.dataService.cache.common.firstPos = { x: e.offsetX, y: e.offsetY };
        this.dataService.cache.common.blockON = true;
        this.dataService.cmd.cowall.hide = true;
        this.dataService.cache.doorWin.displayLabel = true;
        this.win.mode = 'move';
        this.domService.allSvg.emit();
        this.dataService.cache.common.initUpdate();
        if (e.which == 3) {
            this.rightService.win.emit({ e: e, win: this.win });
        }
    }
    mouseOver(e) {
        if (this.dataService.cmd.floorplan.debugPos != null && this.dataService.cmd.floorplan.debugPos != undefined) {
            let data = {
                text: `${this.win.id}:{
        wall:${this.win.wallID};
        rotate:${this.win.getRotate()};
        per:${this.win.distancePer};
        out:${this.win.out};
        mirror:${this.win.mirror};
      }`,
                position: this.dataService.cmd.floorplan.debugPos
            };
            this.popService.message.emit(data);
        }
    }
    ngDoCheck() {
        this.transformString = this.getTransform();
        this._leftPos = { x: -this.win.size.width / 2, y: 0 };
        this._rightPos = { x: this.win.size.width / 2, y: 0 };
    }
    /** 获取黑框边框 (从左下往上循环)) */
    getBayBlockPath() {
        let pos = { x: 0, y: 0 };
        let thickness = this.win.outBoxThickness;
        let realSize = this.win.getPixSize();
        let rayPos = this.DUService.pos.getRayPos(pos, -(Math.PI / 2), realSize.height / 2);
        let posA = this.DUService.pos.getRayPos(rayPos, -Math.PI, (realSize.width / 2) + thickness);
        let posB = this.DUService.pos.getRayPos(posA, -(Math.PI / 2), this.win.outThickness + thickness);
        let posC = this.DUService.pos.getRayPos(posB, 0, realSize.width + (thickness * 2));
        let posD = this.DUService.pos.getRayPos(posC, 0 + (Math.PI / 2), this.win.outThickness + thickness);
        let path = this.DUService.svg.getPath(true, rayPos, posA, posB, posC, posD);
        return path;
    }
    /** 获取path */
    getPath() {
        let pathString = this.calService.win.getNormalPathString(this.win, { x: 0, y: 0 });
        return pathString;
    }
    ngOnInit() {
        this.win.lateChooseFuncArr.push(() => {
            this.popService.panelRight.emit(this.win);
        });
    }
    /** 获取transform */
    getTransform() {
        let realRadian = this.win.getRealRadian();
        let cosA = Math.cos(realRadian);
        let sinA = Math.sin(realRadian);
        let transformString = this.DUService.pos.getTransfromString(cosA, sinA, -sinA, cosA, this.win.pos.x, this.win.pos.y);
        return transformString;
    }
    /** 获取标签data集合 */
    getLabelDatas() {
        let datas = {
            img: this.dataService.cmd.win.ico.url,
            imgWidth: this.dataService.cmd.win.ico.width,
            imgHeight: this.dataService.cmd.win.ico.height,
            data: []
        };
        let cacheData = [];
        let ceterLine = this.getCenterLine();
        let line = this.getLabelLine(ceterLine[0], ceterLine[1]);
        if (!line)
            return undefined;
        let data = {
            line: line,
            text: ''
        };
        datas.data.push(data);
        cacheData.push({ pos: { x: (line[0].x + line[1].x) / 2, y: (line[0].y + line[1].y) / 2 }, text: this.win.size.width });
        let msg = this.calService.win.getNearPosArr(this.win);
        let text = this.dataService.cmd.getPixelTransLength(this.DUService.pos.getDistance(ceterLine[1], msg.endPos), 'mm');
        text = parseInt(text.toString());
        line = this.getLabelLine(ceterLine[1], msg.endPos);
        if (!line)
            return undefined;
        data = {
            line: line,
            text: ''
        };
        datas.data.push(data);
        cacheData.push({ pos: { x: (line[0].x + line[1].x) / 2, y: (line[0].y + line[1].y) / 2 }, text: text });
        text = this.dataService.cmd.getPixelTransLength(this.DUService.pos.getDistance(msg.StartPos, ceterLine[0]), 'mm');
        text = parseInt(text.toString());
        line = this.getLabelLine(msg.StartPos, ceterLine[0]);
        data = {
            line: line,
            text: ''
        };
        datas.data.push(data);
        cacheData.push({ pos: { x: (line[0].x + line[1].x) / 2, y: (line[0].y + line[1].y) / 2 }, text: text });
        this.dataService.cache.doorWin.labelData = cacheData;
        return datas;
    }
    /** 获取黑边 */
    /** 获取标签坐标组 */
    getLabelLine(lineStart, lineEnd) {
        let halfHeight = this.dataService.cmd.getLengthTransPixel(this.win.size.height / 2, 'mm');
        let newPosArr = this.DUService.pos.getPosTrans(lineStart, lineEnd, (halfHeight + this.dataService.cmd.win.labelHeight));
        return newPosArr;
    }
    /** 获取线坐标 */
    getCenterLine() {
        let halfWidth = this.dataService.cmd.getLengthTransPixel(this.win.size.width / 2, 'mm');
        let posA = this.DUService.pos.getRayPos(this.win.pos, this.win.radian, -halfWidth);
        let posB = this.DUService.pos.getRayPos(this.win.pos, this.win.radian, halfWidth);
        let posArr = [posA, posB];
        return posArr;
    }
    showLabel() {
        let a = (this.dataService.cache.common.choose != null &&
            this.dataService.cache.common.choose.type == "win" &&
            this.dataService.cache.common.mode == "normal" &&
            this.dataService.cache.common.choose.id == this.win.id &&
            this.win.wallID != null &&
            this.dataService.cache.thumbnail.three.zIndex > this.dataService.cache.thumbnail.svg.zIndex &&
            this.dataService.cache.doorWin.displayLabel);
        return a;
    }
    /* 获取所有点 */
    getALLPointData(transform) {
        if (!transform || !this._leftPos || !this._rightPos)
            return null;
        let data = {
            r: 96,
            overR: 128,
            data: [
                /** 左 */
                {
                    pos: this._leftPos, func: (e) => {
                        this.mouseDown(e);
                        this.win.mode = 'leftMove';
                        console.log("left");
                    }
                },
                /** 右 */
                {
                    pos: this._rightPos, func: (e) => {
                        this.mouseDown(e);
                        this.win.mode = 'rightMove';
                        console.log("right");
                    }
                }
            ],
            transform: transform
        };
        return data;
    }
};
WinComponent.ctorParameters = () => [
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_2__["CalculatorsService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_3__["JdesignUtil2dService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_4__["JdesignDataService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_6__["DomUpdateService"] },
    { type: _services_right_menu_service__WEBPACK_IMPORTED_MODULE_5__["RightMenuService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_7__["PopDivService"] }
];
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [Object])
], WinComponent.prototype, "win", null);
WinComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[win]',
        template: __webpack_require__(/*! raw-loader!./win.component.html */ "./node_modules/raw-loader/index.js!./src/app/svg/dom/wins/win/win.component.html"),
        styles: [__webpack_require__(/*! ./win.component.scss */ "./src/app/svg/dom/wins/win/win.component.scss")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_services_calculators_service__WEBPACK_IMPORTED_MODULE_2__["CalculatorsService"],
        _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_3__["JdesignUtil2dService"],
        _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_4__["JdesignDataService"],
        _services_dom_update_service__WEBPACK_IMPORTED_MODULE_6__["DomUpdateService"],
        _services_right_menu_service__WEBPACK_IMPORTED_MODULE_5__["RightMenuService"],
        _services_pop_div_service__WEBPACK_IMPORTED_MODULE_7__["PopDivService"]])
], WinComponent);



/***/ }),

/***/ "./src/app/svg/dom/wins/wins.component.scss":
/*!**************************************************!*\
  !*** ./src/app/svg/dom/wins/wins.component.scss ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3N2Zy9kb20vd2lucy93aW5zLmNvbXBvbmVudC5zY3NzIn0= */"

/***/ }),

/***/ "./src/app/svg/dom/wins/wins.component.ts":
/*!************************************************!*\
  !*** ./src/app/svg/dom/wins/wins.component.ts ***!
  \************************************************/
/*! exports provided: WinsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WinsComponent", function() { return WinsComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../services/dom-update.service */ "./src/app/services/dom-update.service.ts");





let WinsComponent = class WinsComponent {
    constructor(DUService, dataService, domService, ref) {
        this.DUService = DUService;
        this.dataService = dataService;
        this.domService = domService;
        this.ref = ref;
        this.domService.svgWin.subscribe(() => {
            this.ref.detectChanges();
        });
    }
    ngOnInit() {
        if (this.dataService.cmd.common.initLog) {
            this.DUService.out.redLog('wins is ok!!');
        }
    }
};
WinsComponent.ctorParameters = () => [
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_3__["JdesignDataService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_4__["DomUpdateService"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"] }
];
WinsComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[wins]',
        template: __webpack_require__(/*! raw-loader!./wins.component.html */ "./node_modules/raw-loader/index.js!./src/app/svg/dom/wins/wins.component.html"),
        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
        styles: [__webpack_require__(/*! ./wins.component.scss */ "./src/app/svg/dom/wins/wins.component.scss")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"],
        _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_3__["JdesignDataService"],
        _services_dom_update_service__WEBPACK_IMPORTED_MODULE_4__["DomUpdateService"],
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]])
], WinsComponent);



/***/ }),

/***/ "./src/app/svg/dom/wins/wins.module.ts":
/*!*********************************************!*\
  !*** ./src/app/svg/dom/wins/wins.module.ts ***!
  \*********************************************/
/*! exports provided: WinsModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WinsModule", function() { return WinsModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _wins_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./wins.component */ "./src/app/svg/dom/wins/wins.component.ts");
/* harmony import */ var _win_win_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./win/win.component */ "./src/app/svg/dom/wins/win/win.component.ts");
/* harmony import */ var _common_label_lines_label_lines_module__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common/label-lines/label-lines.module */ "./src/app/svg/dom/common/label-lines/label-lines.module.ts");
/* harmony import */ var _common_label_circle_label_circle_module__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../common/label-circle/label-circle.module */ "./src/app/svg/dom/common/label-circle/label-circle.module.ts");







let WinsModule = class WinsModule {
};
WinsModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
            _common_label_lines_label_lines_module__WEBPACK_IMPORTED_MODULE_5__["LabelLinesModule"],
            _common_label_circle_label_circle_module__WEBPACK_IMPORTED_MODULE_6__["LabelCircleModule"],
        ],
        declarations: [_wins_component__WEBPACK_IMPORTED_MODULE_3__["WinsComponent"], _win_win_component__WEBPACK_IMPORTED_MODULE_4__["WinComponent"]],
        exports: [_wins_component__WEBPACK_IMPORTED_MODULE_3__["WinsComponent"]]
    })
], WinsModule);



/***/ }),

/***/ "./src/app/svg/svg.component.scss":
/*!****************************************!*\
  !*** ./src/app/svg/svg.component.scss ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".main_svg {\n  position: relative;\n  cursor: move;\n}\n\n.svg_div {\n  width: 100%;\n  height: 100%;\n}\n\n.svg_test {\n  display: none;\n}\n\n.block_svg {\n  position: relative;\n  width: 0px;\n  height: 0px;\n  top: 0;\n  left: 0;\n}\n\n.block_div {\n  position: absolute;\n  width: 0px;\n  height: 0px;\n  top: 0;\n}\n\n.viewContainer {\n  display: block;\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  right: 0;\n  overflow: hidden;\n}\n\n.threeView {\n  position: absolute;\n  top: 0;\n  right: 0;\n  width: 100%;\n  height: 100%;\n}\n\n.testDiv {\n  width: 100%;\n  height: 100%;\n  background-color: #ff0000;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc3ZnL0Q6XFxrbm93bGVkZ2VcXGhnXFxvbGRcXG9sZFJvb20vc3JjXFxhcHBcXHN2Z1xcc3ZnLmNvbXBvbmVudC5zY3NzIiwic3JjL2FwcC9zdmcvc3ZnLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksa0JBQUE7RUFDQSxZQUFBO0FDQ0o7O0FERUE7RUFDSSxXQUFBO0VBQ0EsWUFBQTtBQ0NKOztBREVBO0VBQ0ksYUFBQTtBQ0NKOztBREVBO0VBQ0ksa0JBQUE7RUFDQSxVQUFBO0VBQ0EsV0FBQTtFQUNBLE1BQUE7RUFDQSxPQUFBO0FDQ0o7O0FERUE7RUFDSSxrQkFBQTtFQUNBLFVBQUE7RUFDQSxXQUFBO0VBQ0EsTUFBQTtBQ0NKOztBREVBO0VBQ0ksY0FBQTtFQUNBLFdBQUE7RUFDQSxZQUFBO0VBRUEsa0JBQUE7RUFDQSxNQUFBO0VBQ0EsUUFBQTtFQUNBLGdCQUFBO0FDQUo7O0FESUE7RUFDSSxrQkFBQTtFQUNBLE1BQUE7RUFDQSxRQUFBO0VBQ0EsV0FBQTtFQUNBLFlBQUE7QUNESjs7QURJQTtFQUNJLFdBQUE7RUFDQSxZQUFBO0VBQ0EseUJBQUE7QUNESiIsImZpbGUiOiJzcmMvYXBwL3N2Zy9zdmcuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIubWFpbl9zdmcge1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgY3Vyc29yOiBtb3ZlO1xyXG59XHJcblxyXG4uc3ZnX2RpdiB7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIGhlaWdodDogMTAwJTtcclxufVxyXG5cclxuLnN2Z190ZXN0IHtcclxuICAgIGRpc3BsYXk6IG5vbmVcclxufVxyXG5cclxuLmJsb2NrX3N2ZyB7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICB3aWR0aDogMHB4O1xyXG4gICAgaGVpZ2h0OiAwcHg7XHJcbiAgICB0b3A6IDA7XHJcbiAgICBsZWZ0OiAwO1xyXG59XHJcblxyXG4uYmxvY2tfZGl2IHtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHdpZHRoOiAwcHg7XHJcbiAgICBoZWlnaHQ6IDBweDtcclxuICAgIHRvcDogMDtcclxufVxyXG5cclxuLnZpZXdDb250YWluZXIge1xyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIGhlaWdodDogMTAwJTsgLy8gd2lkdGg6IDEwMDBweDtcclxuICAgIC8vIGhlaWdodDogMTAwMHB4O1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgdG9wOiAwO1xyXG4gICAgcmlnaHQ6IDA7XHJcbiAgICBvdmVyZmxvdzogaGlkZGVuOyAvLyB0cmFuc2Zvcm06IHNjYWxlKDAuMiwgMC4yKTtcclxuICAgIC8vIHRyYW5zZm9ybS1vcmlnaW46IGxlZnQgdG9wO1xyXG59XHJcblxyXG4udGhyZWVWaWV3IHtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHRvcDogMDtcclxuICAgIHJpZ2h0OiAwO1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBoZWlnaHQ6IDEwMCU7XHJcbn1cclxuXHJcbi50ZXN0RGl2IHtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmMDAwMDtcclxufSIsIi5tYWluX3N2ZyB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgY3Vyc29yOiBtb3ZlO1xufVxuXG4uc3ZnX2RpdiB7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG59XG5cbi5zdmdfdGVzdCB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG5cbi5ibG9ja19zdmcge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHdpZHRoOiAwcHg7XG4gIGhlaWdodDogMHB4O1xuICB0b3A6IDA7XG4gIGxlZnQ6IDA7XG59XG5cbi5ibG9ja19kaXYge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHdpZHRoOiAwcHg7XG4gIGhlaWdodDogMHB4O1xuICB0b3A6IDA7XG59XG5cbi52aWV3Q29udGFpbmVyIHtcbiAgZGlzcGxheTogYmxvY2s7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAwO1xuICByaWdodDogMDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cblxuLnRocmVlVmlldyB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAwO1xuICByaWdodDogMDtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcbn1cblxuLnRlc3REaXYge1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmYwMDAwO1xufSJdfQ== */"

/***/ }),

/***/ "./src/app/svg/svg.component.ts":
/*!**************************************!*\
  !*** ./src/app/svg/svg.component.ts ***!
  \**************************************/
/*! exports provided: SvgComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SvgComponent", function() { return SvgComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../services/dom-update.service */ "./src/app/services/dom-update.service.ts");
/* harmony import */ var _three_jDesign3D_JFloorplan3D__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../three/jDesign3D/JFloorplan3D */ "./src/app/three/jDesign3D/JFloorplan3D.ts");
/* harmony import */ var _common_services_mouse_event_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./common/services/mouse-event.service */ "./src/app/svg/common/services/mouse-event.service.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../services/pop-div.service */ "./src/app/services/pop-div.service.ts");
/* harmony import */ var _services_calculators_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../services/calculators.service */ "./src/app/services/calculators.service.ts");
/* harmony import */ var _services_right_menu_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../services/right-menu.service */ "./src/app/services/right-menu.service.ts");
/* harmony import */ var _three_jDesign3D_JCamera3D__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../three/jDesign3D/JCamera3D */ "./src/app/three/jDesign3D/JCamera3D.ts");
/* harmony import */ var _services_http_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../services/http.service */ "./src/app/services/http.service.ts");
/* harmony import */ var async__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! async */ "./node_modules/async/dist/async.js");
/* harmony import */ var async__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(async__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var _common_event_readJson_event__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./common/event/readJson.event */ "./src/app/svg/common/event/readJson.event.ts");














let SvgComponent = class SvgComponent {
    constructor(dataService, rightService, DUService, domService, ref, el, mouseEventService, popService, calService, httpService) {
        this.dataService = dataService;
        this.rightService = rightService;
        this.DUService = DUService;
        this.domService = domService;
        this.ref = ref;
        this.el = el;
        this.mouseEventService = mouseEventService;
        this.popService = popService;
        this.calService = calService;
        this.httpService = httpService;
        this.backData = null;
        this.cmd = null;
        this.blockData = false;
        this.floorplan = null;
        this._svg_div = null;
        this._three_div = null;
        this._main_svg = null;
        this.threeOn = 0;
        this.cameraOn = false;
        /** 强制更新 */
        this.domService.mainSvg.subscribe(() => {
            this.ref.detectChanges();
        });
        // this.domService.threeInit.subscribe(() => {
        //   this.dataService.camera.strongUpdate3D()
        // })
    }
    ngOnInit() {
        /** 3d初始化 */
        this.domService.threeInit.subscribe(() => {
            this.popService.loadingPage.emit({ loadingOn: false });
            this.dataService.cache.common.initUpdate();
        });
        let readJson = new _common_event_readJson_event__WEBPACK_IMPORTED_MODULE_13__["ReadJsonEvent"](this.dataService, this.httpService, this.DUService);
        Object(async__WEBPACK_IMPORTED_MODULE_12__["series"])([
            (cb) => { readJson.readData(cb); },
            (cb) => { this.setUrlOption(cb); },
            (cb) => { this.setMainEvent(cb); },
            (cb) => { this.readFloorplan(cb); }
        ], (err, result) => {
            let a = this.DUService.obj.getQueryStringSuper('isSimplify');
            if (a != 1) {
                this.cameraOn = true;
                this.dataService.cache.common.allInit.emit();
                this.setInitUpdateFuncs();
            }
            else {
                this.cameraOn = false;
                this.dataService.cache.floorplan.display.roomImg = false;
            }
            this.domService.allSvg.emit();
            this.dataService.cache.cowall.update3D.emit();
            this.ref.detectChanges();
        });
    }
    ngAfterViewInit() {
    }
    /** 设置链接参数 */
    setUrlOption(cb) {
        /** 调试显示隐藏three */
        let a = this.DUService.obj.getQueryStringSuper('isThree');
        this.threeOn = a == undefined ? 1 : parseInt(a);
        this.dataService.cache.common.threeOn = this.threeOn;
        /** 调试用  */
        // this.DUService.obj.getQueryString('is')
        // if (this.threeOn == 0 || !this.dataService.cmd.common.isThree) {
        //   this.domService.threeInit.emit()
        //   this.dataService.cache.common.initUpdate()
        // }
        /** 调试显示信息 */
        if (this.DUService.obj.getQueryStringSuper('debugPos') != "1")
            this.dataService.cmd.floorplan.debugPos = null;
        /** 调试输入框 */
        if (this.DUService.obj.getQueryStringSuper('testInput') != "1")
            this.dataService.cmd.floorplan.testInputPos = null;
        cb();
    }
    /** 设置主要事件 */
    setMainEvent(cb) {
        this.setDom();
        this.cmd = this.dataService.cmd;
        this.dataService.cache.floorplan.minZoom = this.cmd.floorplan.zoom * 0.5;
        this.dataService.cache.floorplan.maxZoom = this.cmd.floorplan.zoom * 5;
        this.dataService.cache.floorplan.multiple = 1 / this.cmd.floorplan.zoom;
        this.dataService.floorplan = new _three_jDesign3D_JFloorplan3D__WEBPACK_IMPORTED_MODULE_5__["JFloorplan3D"]({ mode: 'back' }, this.dataService);
        this.floorplan = this.dataService.floorplan;
        this.backData = this.dataService.cmd.back;
        this.blockData = true;
        /** 设置居中 */
        let centerPos = this.getCenterPos();
        this.dataService.cmd.floorplan.left = -centerPos.x;
        this.dataService.cmd.floorplan.top = -centerPos.y;
        this.dataService.cache.floorplan.centerData = {
            zoom: this.dataService.cmd.floorplan.zoom,
            top: this.dataService.cmd.floorplan.top,
            left: this.dataService.cmd.floorplan.left
        };
        this.dataService.camera = new _three_jDesign3D_JCamera3D__WEBPACK_IMPORTED_MODULE_10__["JCamera3D"]({ pos: { x: centerPos.x, y: centerPos.y }, radian: Math.PI / 4 }, this.dataService, this.DUService);
        this.dataService.camera.strongUpdate3D();
        /** 设置缩放 */
        this.dataService.cache.thumbnail.svg = {
            zoomSize: {
                width: 210, height: 210
            },
            divSize: {
                width: window.innerWidth,
                height: window.innerHeight
            },
            isZoom: false,
            zIndex: 10,
            isStretch: true
        };
        /** 方法更新 */
        this.popService.transPos = (pos) => {
            return this.dataService.cmd.getWindowPos(pos);
        };
        /** 设置缩放 */
        this.dataService.cache.thumbnail.three = {
            zoomSize: {
                width: 210, height: 210
            },
            divSize: {
                width: window.innerWidth,
                height: window.innerHeight
            },
            isZoom: true,
            zIndex: 40,
            isStretch: false
        };
        /** 更新 */
        this.domService.three.emit();
        this.domService.mainSvg.emit();
        this.domService.svgInit.emit();
        this.dataService.camera.strongUpdate3D();
        /** 事件 */
        this.setDom();
        this.setWheel();
        this.setResize();
        console.log('加载完成');
        cb();
    }
    /** 设置吸附线事件 */
    setAbsorbLineEvent(event) {
        this.domService.absorbLine.subscribe(() => {
            event.data = this.dataService.cache.absorbLines;
            event.ref.detectChanges();
        });
    }
    /** 设置测试svg事件 */
    setTestSvgEvent(event) {
        this.domService.testSvg.subscribe(() => {
            event.data = this.dataService.cache.testSvg;
            event.ref.detectChanges();
        });
    }
    /** 设置dom元素 */
    setDom() {
        this._svg_div = this.el.nativeElement.getElementsByClassName('svg_div')[0];
        this._three_div = this.el.nativeElement.getElementsByClassName('threeView')[0];
        this._main_svg = this.el.nativeElement.getElementsByClassName('main_svg')[0];
    }
    /** 获取居中坐标 */
    getCenterPos() {
        let centerPos = { x: 0, y: 0 };
        if (this.dataService.cmd.floorplan.left == null) {
            let divW = this._svg_div.offsetWidth;
            centerPos.x = (this.dataService.cmd.back.size.width - divW) / 2;
        }
        if (this.dataService.cmd.floorplan.top == null) {
            let divH = this._svg_div.offsetHeight;
            centerPos.y = (this.dataService.cmd.back.size.height - divH) / 2;
        }
        return centerPos;
    }
    /** 放大 */
    setWheel() {
        this._svg_div.addEventListener('wheel', (e) => {
            let max = this.dataService.cache.floorplan.maxZoom;
            let min = this.dataService.cache.floorplan.minZoom;
            let oldZoom = this.dataService.cmd.floorplan.zoom;
            if (e.deltaY < 0) {
                this.dataService.cmd.floorplan.zoom = Math.max(min, Math.min(max, this.dataService.cmd.floorplan.zoom + 0.01));
            }
            else {
                this.dataService.cmd.floorplan.zoom = Math.max(min, Math.min(max, this.dataService.cmd.floorplan.zoom - 0.01));
            }
            let newZoom = this.dataService.cmd.floorplan.zoom;
            let scale = newZoom / oldZoom;
            let mousePos = { x: e.offsetX * oldZoom, y: e.offsetY * oldZoom };
            let oldRealLeft = this.dataService.cmd.floorplan.left - ((this.dataService.cmd.back.size.width / 2) * (oldZoom - 1));
            let oldRealTop = this.dataService.cmd.floorplan.top - ((this.dataService.cmd.back.size.height / 2) * (oldZoom - 1));
            let newRealLeft = (1 - scale) * mousePos.x + oldRealLeft;
            let newRealTop = (1 - scale) * mousePos.y + oldRealTop;
            this.dataService.cmd.floorplan.left = newRealLeft + ((this.dataService.cmd.back.size.width / 2) * (newZoom - 1));
            this.dataService.cmd.floorplan.top = newRealTop + ((this.dataService.cmd.back.size.height / 2) * (newZoom - 1));
            this.popService.setInputBoxs();
            this.popService.setButtons();
            this.domService.mainSvg.emit();
        });
        let distance = 200;
        if (this.threeOn == 1 && this.dataService.cmd.common.isThree) {
            this._three_div.addEventListener('wheel', (e) => {
                if (e.deltaY > 0) {
                    this.dataService.cache.shortFuncs['cameraUp'](distance);
                }
                else {
                    this.dataService.cache.shortFuncs['cameraDown'](distance);
                }
            });
        }
    }
    /** 调整尺寸 */
    setResize() {
        window.addEventListener('resize', (e) => {
            if (this.dataService.cache != null) {
                this.dataService.cache.thumbnail.svg.divSize = {
                    width: window.innerWidth,
                    height: window.innerHeight
                };
                this.dataService.cache.thumbnail.svg = this.DUService.obj.clone(this.dataService.cache.thumbnail.svg);
                this.dataService.cache.thumbnail.three.divSize = {
                    width: window.innerWidth,
                    height: window.innerHeight
                };
                this.dataService.cache.thumbnail.three = this.DUService.obj.clone(this.dataService.cache.thumbnail.three);
                this.ref.detectChanges();
                this.domService.three.emit();
            }
        });
    }
    /** 修改div尺寸 */
    setDivSize() {
    }
    /* 读取房型图 */
    readFloorplan(cb) {
        let url = this.DUService.obj.gethash();
        if (url) {
            this.httpService.getRes(url, 3, true).subscribe((data) => {
                this.calService.undoRedo.open(data, () => {
                    // this.dataService.cache.cowall.update3D.emit()
                }, () => {
                    this.calService.wall.arcInit();
                    this.domService.svgWall.emit();
                }, (maxNum) => {
                    if (this.dataService.cmd.floorplan.nextID < (maxNum + 100)) {
                        this.dataService.cmd.floorplan.nextID = maxNum + 100;
                    }
                    this.calService.room.resetCowalls();
                    this.dataService.cache.floorplan.dataEmit.emit();
                    this.dataService.floorplan.setCenter();
                    cb();
                });
            });
        }
        else {
            cb();
        }
    }
    /**
     * 设置一些初始化的方法
     */
    setInitUpdateFuncs() {
        /* 按钮初始画 */
        this.dataService.cache.common.initFuncs['buttons'] = () => {
            this.popService.buttons.emit(null);
        };
        /* 输入框初始化 */
        this.dataService.cache.common.initFuncs['inputBoxs'] = () => {
            this.popService.inputBoxs.emit([]);
        };
        /* 右键初始化 */
        this.dataService.cache.common.initFuncs['rightMenu'] = () => {
            this.popService.rightClick.emit(null);
        };
        /* 标签初始化 */
        this.dataService.cache.common.initFuncs['cowallLabel'] = () => {
            for (let key in this.dataService.cowalls) {
                let cowall = this.dataService.cowalls[key];
                if (cowall)
                    cowall.labelDisplay = true;
            }
        };
        /* 测试 */
        this.dataService.cache.common.initFuncs['test'] = () => {
            // console.log('ssss')
        };
    }
};
SvgComponent.ctorParameters = () => [
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__["JdesignDataService"] },
    { type: _services_right_menu_service__WEBPACK_IMPORTED_MODULE_9__["RightMenuService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_3__["JdesignUtil2dService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_4__["DomUpdateService"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] },
    { type: _common_services_mouse_event_service__WEBPACK_IMPORTED_MODULE_6__["MouseEventService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_7__["PopDivService"] },
    { type: _services_calculators_service__WEBPACK_IMPORTED_MODULE_8__["CalculatorsService"] },
    { type: _services_http_service__WEBPACK_IMPORTED_MODULE_11__["HttpService"] }
];
SvgComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-svg',
        template: __webpack_require__(/*! raw-loader!./svg.component.html */ "./node_modules/raw-loader/index.js!./src/app/svg/svg.component.html"),
        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
        styles: [__webpack_require__(/*! ./svg.component.scss */ "./src/app/svg/svg.component.scss")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_2__["JdesignDataService"],
        _services_right_menu_service__WEBPACK_IMPORTED_MODULE_9__["RightMenuService"],
        _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_3__["JdesignUtil2dService"],
        _services_dom_update_service__WEBPACK_IMPORTED_MODULE_4__["DomUpdateService"],
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"],
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"],
        _common_services_mouse_event_service__WEBPACK_IMPORTED_MODULE_6__["MouseEventService"],
        _services_pop_div_service__WEBPACK_IMPORTED_MODULE_7__["PopDivService"],
        _services_calculators_service__WEBPACK_IMPORTED_MODULE_8__["CalculatorsService"],
        _services_http_service__WEBPACK_IMPORTED_MODULE_11__["HttpService"]])
], SvgComponent);



/***/ }),

/***/ "./src/app/svg/svg.module.ts":
/*!***********************************!*\
  !*** ./src/app/svg/svg.module.ts ***!
  \***********************************/
/*! exports provided: SvgModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SvgModule", function() { return SvgModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _svg_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./svg.component */ "./src/app/svg/svg.component.ts");
/* harmony import */ var _dom_points_points_module__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./dom/points/points.module */ "./src/app/svg/dom/points/points.module.ts");
/* harmony import */ var _dom_walls_walls_module__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./dom/walls/walls.module */ "./src/app/svg/dom/walls/walls.module.ts");
/* harmony import */ var _dom_cowalls_cowalls_module__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./dom/cowalls/cowalls.module */ "./src/app/svg/dom/cowalls/cowalls.module.ts");
/* harmony import */ var _dom_rooms_rooms_module__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./dom/rooms/rooms.module */ "./src/app/svg/dom/rooms/rooms.module.ts");
/* harmony import */ var _dom_back_back_module__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./dom/back/back.module */ "./src/app/svg/dom/back/back.module.ts");
/* harmony import */ var _common_services_mouse_event_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./common/services/mouse-event.service */ "./src/app/svg/common/services/mouse-event.service.ts");
/* harmony import */ var _dom_block_block_module__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./dom/block/block.module */ "./src/app/svg/dom/block/block.module.ts");
/* harmony import */ var _dom_common_absorb_lines_absorb_lines_module__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./dom/common/absorb-lines/absorb-lines.module */ "./src/app/svg/dom/common/absorb-lines/absorb-lines.module.ts");
/* harmony import */ var _common_services_console_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./common/services/console.service */ "./src/app/svg/common/services/console.service.ts");
/* harmony import */ var _dom_doors_doors_module__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./dom/doors/doors.module */ "./src/app/svg/dom/doors/doors.module.ts");
/* harmony import */ var _dom_wins_wins_module__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./dom/wins/wins.module */ "./src/app/svg/dom/wins/wins.module.ts");
/* harmony import */ var _dom_corner_wins_corner_wins_module__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./dom/corner-wins/corner-wins.module */ "./src/app/svg/dom/corner-wins/corner-wins.module.ts");
/* harmony import */ var _dom_common_test_svg_test_svg_module__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./dom/common/test-svg/test-svg.module */ "./src/app/svg/dom/common/test-svg/test-svg.module.ts");
/* harmony import */ var _dom_camera_camera_module__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./dom/camera/camera.module */ "./src/app/svg/dom/camera/camera.module.ts");
/* harmony import */ var _design_pop_toggle_window_toggle_window_module__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../design-pop/toggle-window/toggle-window.module */ "./src/app/design-pop/toggle-window/toggle-window.module.ts");
/* harmony import */ var _three_three_module__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../three/three.module */ "./src/app/three/three.module.ts");
/* harmony import */ var _dom_geometrys_geometrys_module__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./dom/geometrys/geometrys.module */ "./src/app/svg/dom/geometrys/geometrys.module.ts");
/* harmony import */ var _dom_lu_wins_lu_wins_module__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./dom/lu-wins/lu-wins.module */ "./src/app/svg/dom/lu-wins/lu-wins.module.ts");
/* harmony import */ var _dom_params_models_params_models_module__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./dom/params-models/params-models.module */ "./src/app/svg/dom/params-models/params-models.module.ts");























let SvgModule = class SvgModule {
};
SvgModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
            _dom_points_points_module__WEBPACK_IMPORTED_MODULE_4__["PointsModule"],
            _dom_walls_walls_module__WEBPACK_IMPORTED_MODULE_5__["WallsModule"],
            _dom_cowalls_cowalls_module__WEBPACK_IMPORTED_MODULE_6__["CowallsModule"],
            _dom_rooms_rooms_module__WEBPACK_IMPORTED_MODULE_7__["RoomsModule"],
            _dom_back_back_module__WEBPACK_IMPORTED_MODULE_8__["BackModule"],
            _dom_block_block_module__WEBPACK_IMPORTED_MODULE_10__["BlockModule"],
            _dom_common_absorb_lines_absorb_lines_module__WEBPACK_IMPORTED_MODULE_11__["AbsorbLinesModule"],
            _dom_doors_doors_module__WEBPACK_IMPORTED_MODULE_13__["DoorsModule"],
            _dom_wins_wins_module__WEBPACK_IMPORTED_MODULE_14__["WinsModule"],
            _dom_corner_wins_corner_wins_module__WEBPACK_IMPORTED_MODULE_15__["CornerWinsModule"],
            _dom_common_test_svg_test_svg_module__WEBPACK_IMPORTED_MODULE_16__["TestSvgModule"],
            _dom_camera_camera_module__WEBPACK_IMPORTED_MODULE_17__["CameraModule"],
            _design_pop_toggle_window_toggle_window_module__WEBPACK_IMPORTED_MODULE_18__["ToggleWindowModule"],
            _three_three_module__WEBPACK_IMPORTED_MODULE_19__["ThreeModule"],
            _dom_geometrys_geometrys_module__WEBPACK_IMPORTED_MODULE_20__["GeometrysModule"],
            _dom_lu_wins_lu_wins_module__WEBPACK_IMPORTED_MODULE_21__["LuWinsModule"],
            _dom_params_models_params_models_module__WEBPACK_IMPORTED_MODULE_22__["ParamsModelsModule"]
        ],
        declarations: [_svg_component__WEBPACK_IMPORTED_MODULE_3__["SvgComponent"]],
        exports: [_svg_component__WEBPACK_IMPORTED_MODULE_3__["SvgComponent"]],
        providers: [_common_services_mouse_event_service__WEBPACK_IMPORTED_MODULE_9__["MouseEventService"], _common_services_console_service__WEBPACK_IMPORTED_MODULE_12__["ConsoleService"]]
    })
], SvgModule);



/***/ }),

/***/ "./src/app/three/classes/BaywinModel.ts":
/*!**********************************************!*\
  !*** ./src/app/three/classes/BaywinModel.ts ***!
  \**********************************************/
/*! exports provided: BaywinModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BaywinModel", function() { return BaywinModel; });
/* harmony import */ var _THREEDataServer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./THREEDataServer */ "./src/app/three/classes/THREEDataServer.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");


class BaywinModel {
    constructor(_dataServer, _jDataServer, _width, _deep, _height, _outThickness, _outBoxThickness) {
        this.windowsillTileHeight = 40; //窗台瓷砖对象的高度。
        this.windowsConcreteHeight = 100; //窗台上下混凝土的高度。
        this.concreteColor = new THREE.Color(0xe8e8e8); //混凝土的颜色。
        this.railings = []; //所有的栏杆都放这里。
        this.railingColor = new THREE.Color(0x461701);
        this.paramsValues = {
            windowsillMaterialIndex: [],
        };
        this.dataServer = _dataServer;
        this.jDataServer = _jDataServer;
        this.width = _width;
        this.deep = _deep;
        this.height = _height;
        this.outBoxThickness = _outBoxThickness;
        this.outThickness = _outThickness;
    }
    MakeBayWin() {
        //创建飘窗上所有模型的父对象。----------------------------------
        this.bayWinModelFather = new THREE.Object3D();
        this.dataServer.sceneCommonObj.scene.add(this.bayWinModelFather);
        //创建放置在窗台上的瓷砖。--------------------------------------
        let _bayWinDeep = this.deep + this.outThickness + 60;
        this.windowsillTile = this.dataServer.classesObj.boxMaker.MakeBox(this.width, this.windowsillTileHeight, _bayWinDeep, true, true);
        this.windowsillTile.material = new THREE.MeshPhongMaterial({ color: 0xcccccc });
        this.LoadWindowsillInitTexture("windowsill");
        this.windowsillTile.material.map = this.windowsillTileTexture;
        this.bayWinModelFather.add(this.windowsillTile);
        //更新好窗台瓷砖的位置。------------------------------------
        this.windowsillTile.position.z = this.deep / 2 - (this.deep + this.outThickness) / 2 + 30;
        //创建放置在窗台下的混凝土。------------------------------------
        this.windowsDownConcrete = this.dataServer.classesObj.boxMaker.MakeBox(this.width + 2 * this.outBoxThickness, this.windowsConcreteHeight, this.outThickness + this.outBoxThickness, true, true);
        this.windowsDownConcrete.material = new THREE.MeshPhongMaterial({ color: this.concreteColor });
        this.bayWinModelFather.add(this.windowsDownConcrete);
        //创建放置在上面的混凝度。--------------------------------------
        this.windowsUpConcrete = this.dataServer.classesObj.boxMaker.MakeBox(this.width + 2 * this.outBoxThickness, this.windowsConcreteHeight, this.outThickness + this.outBoxThickness, true, true);
        this.windowsUpConcrete.material = new THREE.MeshPhongMaterial({ color: this.concreteColor });
        this.bayWinModelFather.add(this.windowsUpConcrete);
        //更新好窗台下的混凝土的位置。------------------------------
        this.windowsDownConcrete.position.z = -this.outThickness / 2 - this.deep / 2 - this.outBoxThickness / 2;
        this.windowsDownConcrete.position.y = -this.windowsConcreteHeight;
        this.windowsUpConcrete.position.z = -this.outThickness / 2 - this.deep / 2 - this.outBoxThickness / 2;
        this.windowsUpConcrete.position.y = this.height;
        //开始构建飘窗上的围栏。------------------------------------
        this.MakeRailing();
    }
    SetBaywindowStillTexture(_path) {
        this.windowsillTileTexture.image.src = _path;
        this.windowsillTileTexture.image.onload = () => {
            this.windowsillTileTexture.needsUpdate = true;
        };
    }
    MakeRailing() {
        //第一条竖的栏杆。-----------------------------------------------------------------
        let _verticalRailing1 = this.dataServer.classesObj.boxMaker.MakeBox(this.outBoxThickness, this.height, this.outBoxThickness, true, true);
        _verticalRailing1.material = new THREE.MeshPhongMaterial({ color: this.railingColor });
        this.bayWinModelFather.add(_verticalRailing1);
        _verticalRailing1.position.x = -this.width / 2 - this.outBoxThickness / 2;
        _verticalRailing1.position.z = -this.deep / 2 - this.outBoxThickness / 2;
        this.railings.push(_verticalRailing1);
        //第二条竖的栏杆。------------------------------------------------------------------
        let _verticalRailing2 = this.dataServer.classesObj.boxMaker.MakeBox(this.outBoxThickness, this.height, this.outBoxThickness, true, true);
        _verticalRailing2.material = new THREE.MeshPhongMaterial({ color: this.railingColor });
        this.bayWinModelFather.add(_verticalRailing2);
        _verticalRailing2.position.x = -this.width / 2 - this.outBoxThickness / 2;
        _verticalRailing2.position.z = -this.deep / 2 - this.outBoxThickness / 2 - this.outThickness;
        this.railings.push(_verticalRailing2);
        //第三条竖的栏杆。-------------------------------------------------------------------
        let _verticalRailing3 = this.dataServer.classesObj.boxMaker.MakeBox(this.outBoxThickness, this.height, this.outBoxThickness, true, true);
        _verticalRailing3.material = new THREE.MeshPhongMaterial({ color: this.railingColor });
        this.bayWinModelFather.add(_verticalRailing3);
        _verticalRailing3.position.x = +this.width / 2 + this.outBoxThickness / 2;
        _verticalRailing3.position.z = -this.deep / 2 - this.outBoxThickness / 2;
        this.railings.push(_verticalRailing3);
        //第四条竖的栏杆。------------------------------------------------------------------
        let _verticalRailing4 = this.dataServer.classesObj.boxMaker.MakeBox(this.outBoxThickness, this.height, this.outBoxThickness, true, true);
        _verticalRailing4.material = new THREE.MeshPhongMaterial({ color: this.railingColor });
        this.bayWinModelFather.add(_verticalRailing4);
        _verticalRailing4.position.x = +this.width / 2 + this.outBoxThickness / 2;
        _verticalRailing4.position.z = -this.deep / 2 - this.outBoxThickness / 2 - this.outThickness;
        this.railings.push(_verticalRailing4);
        //第一条Z轴方向横放的栏杆。----------------------------------------------------------
        let _zHorizontalRailing1 = this.dataServer.classesObj.boxMaker.MakeBox(this.outBoxThickness, this.outBoxThickness, this.outThickness, true, true);
        _zHorizontalRailing1.material = new THREE.MeshPhongMaterial({ color: this.railingColor });
        this.bayWinModelFather.add(_zHorizontalRailing1);
        _zHorizontalRailing1.position.x = +this.width / 2 + this.outBoxThickness / 2;
        _zHorizontalRailing1.position.z = -this.outThickness / 2 - this.deep / 2;
        this.railings.push(_zHorizontalRailing1);
        //第二条Z轴方向横放的栏杆。----------------------------------------------------------
        let _zHorizontalRailing2 = this.dataServer.classesObj.boxMaker.MakeBox(this.outBoxThickness, this.outBoxThickness, this.outThickness, true, true);
        _zHorizontalRailing2.material = new THREE.MeshPhongMaterial({ color: this.railingColor });
        this.bayWinModelFather.add(_zHorizontalRailing2);
        _zHorizontalRailing2.position.x = -this.width / 2 - this.outBoxThickness / 2;
        _zHorizontalRailing2.position.z = -this.outThickness / 2 - this.deep / 2;
        this.railings.push(_zHorizontalRailing2);
        //第三条Z轴方向横放的栏杆。----------------------------------------------------------
        let _zHorizontalRailing3 = this.dataServer.classesObj.boxMaker.MakeBox(this.outBoxThickness, this.outBoxThickness, this.outThickness, true, true);
        _zHorizontalRailing3.material = new THREE.MeshPhongMaterial({ color: this.railingColor });
        this.bayWinModelFather.add(_zHorizontalRailing3);
        _zHorizontalRailing3.position.x = +this.width / 2 + this.outBoxThickness / 2;
        _zHorizontalRailing3.position.z = -this.outThickness / 2 - this.deep / 2;
        _zHorizontalRailing3.position.y = this.height - this.outBoxThickness;
        this.railings.push(_zHorizontalRailing3);
        //第四条Z轴方向横放的栏杆。----------------------------------------------------------
        let _zHorizontalRailing4 = this.dataServer.classesObj.boxMaker.MakeBox(this.outBoxThickness, this.outBoxThickness, this.outThickness, true, true);
        _zHorizontalRailing4.material = new THREE.MeshPhongMaterial({ color: this.railingColor });
        this.bayWinModelFather.add(_zHorizontalRailing4);
        _zHorizontalRailing4.position.x = -this.width / 2 - this.outBoxThickness / 2;
        _zHorizontalRailing4.position.z = -this.outThickness / 2 - this.deep / 2;
        _zHorizontalRailing4.position.y = this.height - this.outBoxThickness;
        this.railings.push(_zHorizontalRailing4);
        //第一条X轴方向横放的栏杆。-----------------------------------------------------------
        let _xHorizontalRailing1 = this.dataServer.classesObj.boxMaker.MakeBox(this.width, this.outBoxThickness, this.outBoxThickness, true, true);
        _xHorizontalRailing1.material = new THREE.MeshPhongMaterial({ color: this.railingColor });
        this.bayWinModelFather.add(_xHorizontalRailing1);
        _xHorizontalRailing1.position.z = -this.outThickness - this.deep / 2 - this.outBoxThickness / 2;
        this.railings.push(_xHorizontalRailing1);
        //第二条X轴方向横放的栏杆。-----------------------------------------------------------
        let _xHorizontalRailing2 = this.dataServer.classesObj.boxMaker.MakeBox(this.width, this.outBoxThickness, this.outBoxThickness, true, true);
        _xHorizontalRailing2.material = new THREE.MeshPhongMaterial({ color: this.railingColor });
        this.bayWinModelFather.add(_xHorizontalRailing2);
        _xHorizontalRailing2.position.z = -this.outThickness - this.deep / 2 - this.outBoxThickness / 2;
        _xHorizontalRailing2.position.y = this.height - this.outBoxThickness;
        this.railings.push(_xHorizontalRailing2);
    }
    /**
     * 用来设置飘窗模型的位置。==============================================================
     * @param _pos
     */
    SetPosition(_pos) {
        this.bayWinModelFather.position.copy(_pos);
    }
    /**
     * 用来设置飘窗模型的旋转角度。===========================================================
     * @param _radian
     */
    SetRotation(_radian) {
        this.bayWinModelFather.rotation.y = _radian;
    }
    /**
     * 销毁普通飘窗的方法。===================================================================
     */
    DestroyBaywinModel() {
        //销毁窗台上的瓷砖。------------------------------------------------
        this.bayWinModelFather.remove(this.windowsillTile);
        this.windowsillTile.material.dispose();
        this.windowsillTile.geometry.dispose();
        //销毁窗台下的混凝土。-----------------------------------------------
        this.bayWinModelFather.remove(this.windowsDownConcrete);
        this.windowsDownConcrete.material.dispose();
        this.windowsDownConcrete.geometry.dispose();
        //销毁飘窗顶上的混凝土。-----------------------------------------------
        this.bayWinModelFather.remove(this.windowsUpConcrete);
        this.windowsUpConcrete.material.dispose();
        this.windowsUpConcrete.geometry.dispose();
        //把所有窗户上的栏杆都销毁掉。------------------------------------------
        for (let i = 0; i < this.railings.length; i++) {
            this.bayWinModelFather.remove(this.railings[i]);
            this.railings[i].material.dispose();
            this.railings[i].geometry.dispose();
        }
        //最后销毁飘窗模型的父对象。-----------------------------------------
        this.dataServer.sceneCommonObj.scene.remove(this.bayWinModelFather);
        this.bayWinModelFather = null;
    }
    /**
   * 为普通飘窗窗台加载初始化的贴图。==========================================================================
   */
    LoadWindowsillInitTexture(_name) {
        let initTextureUrl = this.jDataServer.json.marblePics[0];
        this.windowsillTileTexture = this.dataServer.loaders.textureLoader.load(initTextureUrl);
        this.windowsillTileTexture.wrapS = THREE.RepeatWrapping;
        this.windowsillTileTexture.wrapT = THREE.RepeatWrapping;
    }
}
BaywinModel.ctorParameters = () => [
    { type: _THREEDataServer__WEBPACK_IMPORTED_MODULE_0__["THREEDataServer"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__["JdesignDataService"] },
    { type: Number },
    { type: Number },
    { type: Number },
    { type: Number },
    { type: Number }
];


/***/ }),

/***/ "./src/app/three/classes/BoxMaker.ts":
/*!*******************************************!*\
  !*** ./src/app/three/classes/BoxMaker.ts ***!
  \*******************************************/
/*! exports provided: BoxMaker */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BoxMaker", function() { return BoxMaker; });
/* harmony import */ var _MyUtil__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MyUtil */ "./src/app/three/classes/MyUtil.ts");

class BoxMaker {
    /**
     * 创建一个box模型的自定义函数。================================================
     * @param _width
     * @param _height
     * @param _deep
     * @param _hasCap 这个box两端是否封口？用来做布尔的是不用封口的。true则封口，false不封口。
     * @param _hasBottom 这个box下面是否有面？做门的时候估计下面也不用封面的，true代表有下面的面，false代表没有。
     */
    MakeBox(_width, _height, _deep, _hasCap, _hasBottom) {
        let _vertexes = [
            new THREE.Vector3(_width / 2, 0.0, _deep / 2.0),
            new THREE.Vector3(_width / 2, 0.0, -_deep / 2.0),
            new THREE.Vector3(-_width / 2, 0.0, -_deep / 2.0),
            new THREE.Vector3(-_width / 2, 0.0, _deep / 2.0),
            new THREE.Vector3(_width / 2, _height, _deep / 2.0),
            new THREE.Vector3(_width / 2, _height, -_deep / 2.0),
            new THREE.Vector3(-_width / 2, _height, -_deep / 2.0),
            new THREE.Vector3(-_width / 2, _height, _deep / 2.0)
        ];
        let _uvs = [[]];
        let _faces = [
            new THREE.Face3(4, 5, 6),
            new THREE.Face3(4, 6, 7),
            new THREE.Face3(2, 3, 6),
            new THREE.Face3(3, 7, 6),
            new THREE.Face3(0, 1, 4),
            new THREE.Face3(1, 5, 4) //另一侧面。
        ];
        this.AddUVs(_uvs, _vertexes, _faces[0], "y");
        this.AddUVs(_uvs, _vertexes, _faces[1], "y");
        this.AddUVs(_uvs, _vertexes, _faces[2], "x");
        this.AddUVs(_uvs, _vertexes, _faces[3], "x");
        this.AddUVs(_uvs, _vertexes, _faces[4], "x");
        this.AddUVs(_uvs, _vertexes, _faces[5], "x");
        if (_hasCap == true) {
            let _capFrontFace1 = new THREE.Face3(1, 2, 5);
            let _capFrontFace2 = new THREE.Face3(2, 6, 5);
            let _capBackFace1 = new THREE.Face3(3, 0, 7);
            let _capBackFace2 = new THREE.Face3(0, 4, 7);
            _faces.push(_capFrontFace1); //前面。
            _faces.push(_capFrontFace2); //前面。
            _faces.push(_capBackFace1); //后面。
            _faces.push(_capBackFace2); //后面。
            this.AddUVs(_uvs, _vertexes, _capFrontFace1, "z");
            this.AddUVs(_uvs, _vertexes, _capFrontFace2, "z");
            this.AddUVs(_uvs, _vertexes, _capBackFace1, "z");
            this.AddUVs(_uvs, _vertexes, _capBackFace2, "z");
        }
        if (_hasBottom == true) {
            let _bottomFace1 = new THREE.Face3(0, 2, 1);
            let _bottomFace2 = new THREE.Face3(0, 3, 2);
            _faces.push(_bottomFace1); //底面。
            _faces.push(_bottomFace2); //底面。
            this.AddUVs(_uvs, _vertexes, _bottomFace1, "y");
            this.AddUVs(_uvs, _vertexes, _bottomFace2, "y");
        }
        let _geom = new THREE.Geometry();
        _geom.vertices = _vertexes;
        _geom.faces = _faces;
        _geom.faceVertexUvs = _uvs;
        _geom.computeFaceNormals();
        _geom.mergeVertices();
        let _returnMesh = new THREE.Mesh(_geom, new THREE.MeshPhongMaterial());
        return _returnMesh;
    }
    AddUVs(_uvs, _allVertexes, _theFace, _ignoreDir) {
        let _xyz = ["x", "y", "z"];
        _MyUtil__WEBPACK_IMPORTED_MODULE_0__["MyUtil"].RemoveItem(_xyz, _ignoreDir);
        let _oneFaceUvs = [];
        let _thePointA = _allVertexes[_theFace.a];
        let _thePointB = _allVertexes[_theFace.b];
        let _thePointC = _allVertexes[_theFace.c];
        _oneFaceUvs.push(new THREE.Vector2(_thePointA[_xyz[0]] / 1000, _thePointA[_xyz[1]] / 1000));
        _oneFaceUvs.push(new THREE.Vector2(_thePointB[_xyz[0]] / 1000, _thePointB[_xyz[1]] / 1000));
        _oneFaceUvs.push(new THREE.Vector2(_thePointC[_xyz[0]] / 1000, _thePointC[_xyz[1]] / 1000));
        _uvs[0].push(_oneFaceUvs);
    }
}


/***/ }),

/***/ "./src/app/three/classes/CornerBaywinModel.ts":
/*!****************************************************!*\
  !*** ./src/app/three/classes/CornerBaywinModel.ts ***!
  \****************************************************/
/*! exports provided: CornerBaywinModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CornerBaywinModel", function() { return CornerBaywinModel; });
/* harmony import */ var _THREEDataServer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./THREEDataServer */ "./src/app/three/classes/THREEDataServer.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _MyUtil__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./MyUtil */ "./src/app/three/classes/MyUtil.ts");



class CornerBaywinModel {
    constructor(_dataServer, _jDataServer, _outThickness) {
        this.windowsillTileHeight = 40; //窗台瓷砖对象的高度。
        this.windowsConcreteHeight = 100; //窗台上下混凝土的高度。
        this.concreteColor = new THREE.Color(0xe8e8e8); //混凝土的颜色。 
        this.railingColor = new THREE.Color(0x461701);
        this.railFatherList = []; //所有窗户的栏杆的父对象都放在这里。
        this.paramsValues = {
            windowsillMaterialIndex: [],
        };
        this.dataServer = _dataServer;
        this.jDataServer = _jDataServer;
        this.outThickness = _outThickness;
    }
    /**
     * 用来设置转角飘窗模型的位置。=============================================
     * @param _pos
     */
    SetPosition(_pos) {
        this.bayWinModelFather.position.copy(_pos);
    }
    SetRotation(_radian) {
    }
    /**
     * 用来设置转角飘窗窗台瓷砖的函数。=============================================
     * @param _path
     */
    SetBaywindowStillTexture(_path) {
        this.windowsillTileTexture.image.src = _path;
        this.windowsillTileTexture.image.onload = () => {
            this.windowsillTileTexture.needsUpdate = true;
        };
    }
    /**
     * 为转角飘窗创建围栏的函数。===========================================================
     */
    MakeRailing() {
        //制作其中一个面上的所有围栏。---------------------------------------------------
        let _oneRailing = this.MakeOneRailing(this.shapePoint3DList[2], this.shapePoint3DList[3]);
        this.bayWinModelFather.add(_oneRailing);
        //这一面的栏杆要稍微往后退一点点才合适。------------------------------------------
        let _fallBackDir = this.shapePoint3DList[3].clone().sub(this.shapePoint3DList[4]).normalize();
        let _newPoint3 = this.shapePoint3DList[3].clone().addScaledVector(_fallBackDir, this.outThickness);
        let _newPoint4 = this.shapePoint3DList[4].clone().addScaledVector(_fallBackDir, this.outThickness);
        let _anotherRailing = this.MakeOneRailing(_newPoint3, _newPoint4);
        this.bayWinModelFather.add(_anotherRailing);
        //把两面围栏的父对象推到一个数组里。---------------------------------------------
        this.railFatherList.push(_oneRailing);
        this.railFatherList.push(_anotherRailing);
    }
    /**
     * 为一面转角飘窗创建围栏的函数。========================================================
     * @param _startPoint 围栏的开始点。
     * @param _endPoint 围栏的结束点。
     * @param _railingWith 一根围栏的宽度。
     */
    MakeOneRailing(_startPoint, _endPoint) {
        let _railDir = _endPoint.clone().sub(_startPoint);
        let _railLength = _railDir.length();
        let _oneRailingFather = new THREE.Object3D();
        //制作下面的那一条横杆。-------------------------------------------------
        let _xHorizontalDownBar = this.dataServer.classesObj.boxMaker.MakeBox(_railLength + this.outThickness, this.outThickness, this.outThickness, true, true);
        _xHorizontalDownBar.position.x = (_railLength + this.outThickness) / 2;
        _xHorizontalDownBar.position.z = -this.outThickness / 2;
        _xHorizontalDownBar.material = new THREE.MeshPhongMaterial({ color: this.railingColor });
        _oneRailingFather.add(_xHorizontalDownBar);
        //制作上面那一条横杆。---------------------------------------------------
        let _xHorizontalUpBar = this.dataServer.classesObj.boxMaker.MakeBox(_railLength + this.outThickness, this.outThickness, this.outThickness, true, true);
        _xHorizontalUpBar.position.x = (_railLength + this.outThickness) / 2;
        _xHorizontalUpBar.position.z = -this.outThickness / 2;
        _xHorizontalUpBar.position.y = this.height - this.outThickness;
        _xHorizontalUpBar.material = new THREE.MeshPhongMaterial({ color: this.railingColor });
        _oneRailingFather.add(_xHorizontalUpBar);
        //制作左边那条竖杆。-----------------------------------------------------
        let _leftVerticalBar = this.dataServer.classesObj.boxMaker.MakeBox(this.outThickness, this.height, this.outThickness, true, true);
        _leftVerticalBar.position.x = this.outThickness / 2;
        _leftVerticalBar.position.z = -this.outThickness / 2;
        _leftVerticalBar.material = new THREE.MeshPhongMaterial({ color: this.railingColor });
        _oneRailingFather.add(_leftVerticalBar);
        //制作中间那条竖杆。----------------------------------------------------
        let _middleVerticalBar = this.dataServer.classesObj.boxMaker.MakeBox(this.outThickness, this.height, this.outThickness, true, true);
        _middleVerticalBar.position.x = (_railLength + this.outThickness) / 2;
        _middleVerticalBar.position.z = -this.outThickness / 2;
        _middleVerticalBar.material = new THREE.MeshPhongMaterial({ color: this.railingColor });
        _oneRailingFather.add(_middleVerticalBar);
        //制作右边那条竖杆。----------------------------------------------------
        let _rightVerticalBar = this.dataServer.classesObj.boxMaker.MakeBox(this.outThickness, this.height, this.outThickness, true, true);
        _rightVerticalBar.position.x = _railLength + this.outThickness / 2;
        _rightVerticalBar.position.z = -this.outThickness / 2;
        _rightVerticalBar.material = new THREE.MeshPhongMaterial({ color: this.railingColor });
        _oneRailingFather.add(_rightVerticalBar);
        //调节一面窗的所谓围栏的位置和旋转。----------------------------------
        _oneRailingFather.position.copy(_startPoint);
        let _winDirV2 = new THREE.Vector2(_railDir.x, _railDir.z);
        _oneRailingFather.rotation.y = -_winDirV2.angle();
        return _oneRailingFather;
    }
    /**
   * 为转角飘窗窗台加载初始化的贴图。==========================================================================
   */
    LoadWindowsillInitTexture(_name) {
        let initTextureUrl = this.jDataServer.json.marblePics[0];
        this.windowsillTileTexture = this.dataServer.loaders.textureLoader.load(initTextureUrl);
        this.windowsillTileTexture.wrapS = THREE.RepeatWrapping;
        this.windowsillTileTexture.wrapT = THREE.RepeatWrapping;
    }
    MakeCornerbayWinModel(_shapePoints3D, _height) {
        this.height = _height;
        console.log(this.height);
        this.shapePoint3DList = _shapePoints3D;
        //创建转角飘窗上所有模型的父对象。----------------------------------
        this.bayWinModelFather = new THREE.Object3D();
        this.dataServer.sceneCommonObj.scene.add(this.bayWinModelFather);
        //创建放置在窗台上的瓷砖。------------------------------------------------------------------------
        //窗台的瓷砖要往里面收一点点哦。-----------------------------
        let _shapePoints3DWithInThinkness = this.ShapePointAddInThinkness(this.shapePoint3DList, 60);
        this.windowsillTile = this.dataServer.classesObj.extrudeModelMaker.MakeExtrueModel(_shapePoints3DWithInThinkness, new THREE.Vector3(0.0, 1.0, 0.0), this.windowsillTileHeight, 1000);
        this.windowsillTile.material = new THREE.MeshPhongMaterial({ color: 0xcccccc });
        this.bayWinModelFather.add(this.windowsillTile);
        //给窗台瓷砖赋予贴图。-----------------------------------------------------
        this.LoadWindowsillInitTexture("windowsill");
        this.windowsillTile.material.map = this.windowsillTileTexture;
        //创建放置在上面的混凝度。--------------------------------------------------
        let _shapePoints3DWithOutThinkness = this.ShapePointsAddOutThinkness(this.shapePoint3DList, this.outThickness);
        this.windowsUpConcrete = this.dataServer.classesObj.extrudeModelMaker.MakeExtrueModel(_shapePoints3DWithOutThinkness, new THREE.Vector3(0.0, 1.0, 0.0), this.windowsConcreteHeight, 1000, [0, 5]);
        this.windowsUpConcrete.material = new THREE.MeshPhongMaterial({ color: this.concreteColor });
        this.bayWinModelFather.add(this.windowsUpConcrete);
        this.windowsUpConcrete.position.y = this.height;
        //创建放置在窗台下的混凝土。------------------------------------------------
        this.windowsDownConcrete = this.dataServer.classesObj.extrudeModelMaker.MakeExtrueModel(_shapePoints3DWithOutThinkness, new THREE.Vector3(0.0, 1.0, 0.0), this.windowsConcreteHeight, 1000, [0, 5]);
        this.windowsDownConcrete.material = new THREE.MeshPhongMaterial({ color: this.concreteColor });
        this.windowsDownConcrete.position.y = -this.windowsConcreteHeight;
        this.bayWinModelFather.add(this.windowsDownConcrete);
        //做窗台左侧的混凝土。------------------------------------------
        let _leftConcreteShapePoints = this.MakeSideConcretePoints(_shapePoints3DWithOutThinkness[1], _shapePoints3DWithOutThinkness[2]);
        this.leftConcrete = this.dataServer.classesObj.extrudeModelMaker.MakeExtrueModel(_leftConcreteShapePoints, new THREE.Vector3(0.0, 1.0, 0.0), this.height + this.windowsConcreteHeight * 2, 1000, [3]);
        this.leftConcrete.material = new THREE.MeshPhongMaterial({ color: this.concreteColor });
        this.leftConcrete.position.y = -this.windowsConcreteHeight;
        this.bayWinModelFather.add(this.leftConcrete);
        //做窗台右侧的混凝土。-----------------------------------------
        let _rightConcreteShapePoints = this.MakeSideConcretePoints(_shapePoints3DWithOutThinkness[5], _shapePoints3DWithOutThinkness[4]);
        this.rightConcrete = this.dataServer.classesObj.extrudeModelMaker.MakeExtrueModel(_rightConcreteShapePoints.reverse(), new THREE.Vector3(0.0, 1.0, 0.0), this.height + this.windowsConcreteHeight * 2, 1000, [3]);
        this.rightConcrete.material = new THREE.MeshPhongMaterial({ color: this.concreteColor });
        this.rightConcrete.position.y = -this.windowsConcreteHeight;
        this.bayWinModelFather.add(this.rightConcrete);
        //为转角飘窗创建窗户围栏。---------------------------------------
        this.MakeRailing();
    }
    /**
     * 给原来的飘窗的外一圈点再则增加一层厚度，返回一圈新的点。========================================
     */
    ShapePointsAddOutThinkness(_shapePoints3D, _thickness) {
        let _dir1 = _shapePoints3D[2].clone().sub(_shapePoints3D[1]).normalize();
        let _newPoint2 = _shapePoints3D[2].clone().addScaledVector(_dir1, _thickness);
        let _temPoint3_1 = _shapePoints3D[3].clone().addScaledVector(_dir1, _thickness);
        let _dir2 = _shapePoints3D[4].clone().sub(_shapePoints3D[5]).normalize();
        let _newPoint4 = _shapePoints3D[4].clone().addScaledVector(_dir2, _thickness);
        let _temPoint3_2 = _shapePoints3D[3].clone().addScaledVector(_dir2, _thickness);
        //求两条直线的交点。--------------------------------------------------------------------
        let insectPoint = _MyUtil__WEBPACK_IMPORTED_MODULE_2__["MyUtil"].GetInsectPoint(new THREE.Vector2(_newPoint2.x, _newPoint2.z), new THREE.Vector2(_temPoint3_1.x, _temPoint3_1.z), new THREE.Vector2(_temPoint3_2.x, _temPoint3_2.z), new THREE.Vector2(_newPoint4.x, _newPoint4.z));
        let _newPoint3 = new THREE.Vector3(insectPoint.x, 0.0, insectPoint.y);
        return [
            _shapePoints3D[0],
            _shapePoints3D[1],
            _newPoint2,
            _newPoint3,
            _newPoint4,
            _shapePoints3D[5]
        ];
    }
    ShapePointAddInThinkness(_shapePoints3D, _thickness) {
        let _dir1 = _shapePoints3D[1].clone().sub(_shapePoints3D[2]).normalize();
        let _newPoint1 = _shapePoints3D[1].clone().addScaledVector(_dir1, _thickness);
        let _temPoint0_1 = _shapePoints3D[0].clone().addScaledVector(_dir1, _thickness);
        let _dir2 = _shapePoints3D[5].clone().sub(_shapePoints3D[4]).normalize();
        let _newPoint5 = _shapePoints3D[5].clone().addScaledVector(_dir2, _thickness);
        let _temPoint0_2 = _shapePoints3D[0].clone().addScaledVector(_dir2, _thickness);
        //求两条直线的交点。--------------------------------------------------------------------
        let insectPoint = _MyUtil__WEBPACK_IMPORTED_MODULE_2__["MyUtil"].GetInsectPoint(new THREE.Vector2(_newPoint1.x, _newPoint1.z), new THREE.Vector2(_temPoint0_1.x, _temPoint0_1.z), new THREE.Vector2(_temPoint0_2.x, _temPoint0_2.z), new THREE.Vector2(_newPoint5.x, _newPoint5.z));
        let _newPoint0 = new THREE.Vector3(insectPoint.x, 0.0, insectPoint.y);
        return [
            _newPoint0,
            _newPoint1,
            _shapePoints3D[2],
            _shapePoints3D[3],
            _shapePoints3D[4],
            _newPoint5
        ];
    }
    /**
     * 为拐角飘窗左右两边的水泥墙计算顶点。=========================
     */
    MakeSideConcretePoints(_startPoint, _endPoint) {
        let _offsetDir = _startPoint.clone().normalize();
        let _startPointOffset = _startPoint.clone().addScaledVector(_offsetDir, 240);
        let _endPointOffset = _endPoint.clone().addScaledVector(_offsetDir, 240);
        return [
            _startPointOffset,
            _endPointOffset,
            _endPoint,
            _startPoint
        ];
    }
    /**
     * 销毁转角飘窗模型的方法。===================================================================
     */
    DestroyBaywinModel() {
        //销毁转角飘窗的瓷砖。-------------------------------------------------
        this.bayWinModelFather.remove(this.windowsillTile);
        this.windowsillTile.material.dispose();
        this.windowsillTile.geometry.dispose();
        this.windowsillTile = null;
        //销毁转角飘窗的上面那一块混凝土。---------------------------------------
        this.bayWinModelFather.remove(this.windowsUpConcrete);
        this.windowsUpConcrete.material.dispose();
        this.windowsUpConcrete.geometry.dispose();
        this.windowsUpConcrete = null;
        //销毁转角飘窗的下面那一块混凝土。-----------------------------------------
        this.bayWinModelFather.remove(this.windowsDownConcrete);
        this.windowsDownConcrete.material.dispose();
        this.windowsDownConcrete.geometry.dispose();
        this.windowsDownConcrete = null;
        //销毁转角飘窗左边的混凝土块。--------------------------------------------
        this.bayWinModelFather.remove(this.leftConcrete);
        this.leftConcrete.material.dispose();
        this.leftConcrete.geometry.dispose();
        this.leftConcrete = null;
        //销毁转角飘窗右边的混凝土块。--------------------------------------------
        this.bayWinModelFather.remove(this.rightConcrete);
        this.rightConcrete.material.dispose();
        this.rightConcrete.geometry.dispose();
        this.rightConcrete = null;
        //把围栏上的所有模型也销毁掉。-------------------------------------------=
        for (let i = 0; i < this.railFatherList.length; i++) {
            for (let j = 0; j < this.railFatherList[i].children.length; j++) {
                this.railFatherList[i].children[j].geometry.dispose();
                this.railFatherList[i].children[j].material.dispose();
                this.railFatherList[i].remove(this.railFatherList[i].children[j]);
            }
            this.bayWinModelFather.remove(this.railFatherList[i]);
        }
        //最后把转角飘窗所有模型的父对象都删除掉。---------------------------
        this.dataServer.sceneCommonObj.scene.remove(this.bayWinModelFather);
        this.bayWinModelFather = null;
    }
}
CornerBaywinModel.ctorParameters = () => [
    { type: _THREEDataServer__WEBPACK_IMPORTED_MODULE_0__["THREEDataServer"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__["JdesignDataService"] },
    { type: Number }
];


/***/ }),

/***/ "./src/app/three/classes/CurrentSelectModel.ts":
/*!*****************************************************!*\
  !*** ./src/app/three/classes/CurrentSelectModel.ts ***!
  \*****************************************************/
/*! exports provided: CurrentSelectModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CurrentSelectModel", function() { return CurrentSelectModel; });
/*
 作者：张建。
 类说明：这个类用来管理当前选中模型用的。
*/
class CurrentSelectModel {
    constructor() {
        this.currentSelectedModel = null;
    }
    /**
     * 选中某个模型。=====================================================
     * @param _model 设置这个模型是被选中模型。
     */
    Select(_model) {
        if (_model == undefined) {
            console.error("没有模型被进行选择。");
            return;
        }
        if (_model.userData.customUserData != undefined) {
            this.currentSelectedModel = _model;
        }
        else {
            console.error("这个模型少了基本资料不能进行选择。");
        }
    }
    /**
     * 取消选择所有的模型。==================================================
     */
    DeselectAll() {
        this.currentSelectedModel = null;
    }
    /**
     * 检测当前是否有被选中的模型。=========================================
     */
    HasModelSelected() {
        // console.log(this.currentSelectedModel);
        if (this.currentSelectedModel == null) {
            return false;
        }
        else {
            return true;
        }
    }
    /**
     * 返回被选择的模型的对应的杨振龙创建的那个对象。======================================
     */
    GetSelectedLongObj() {
        return this.currentSelectedModel.userData.customUserData.longObj;
    }
    /**
     * 获取当前所选的模型的类型。========================================================
     */
    GetSelectedModelType() {
        if (this.HasModelSelected()) {
            return this.currentSelectedModel.userData.customUserData.modelType;
        }
        else {
            return null;
        }
    }
    GetSelectModelID() {
        if (this.HasModelSelected()) {
            return this.currentSelectedModel.userData.customUserData.longObj.id;
        }
        else {
            return null;
        }
    }
    /**
     * 获取当前选择模型的右边属性面板的所有属性。==========================================
     */
    GetSelectedModelParamsValues() {
        return this.currentSelectedModel.userData.customUserData.longObj.paramsValues;
    }
}


/***/ }),

/***/ "./src/app/three/classes/DoorWindowFrame.ts":
/*!**************************************************!*\
  !*** ./src/app/three/classes/DoorWindowFrame.ts ***!
  \**************************************************/
/*! exports provided: DoorWindowFrame */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DoorWindowFrame", function() { return DoorWindowFrame; });
/* harmony import */ var _MyUtil__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MyUtil */ "./src/app/three/classes/MyUtil.ts");
/* harmony import */ var _dataStruct__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dataStruct */ "./src/app/three/classes/dataStruct.ts");
/* harmony import */ var _THREEDataServer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./THREEDataServer */ "./src/app/three/classes/THREEDataServer.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");




/*
 作者：张建。
 类说明：这个类专门是用来做门框用的。
*/
class DoorWindowFrame {
    constructor(_dataServer, _jDataServer) {
        //private deep: number = 250;                                                //门框的厚度。
        this.frameWidth = 80; //门框的宽度，不是整体宽度哦。
        this.paramsValues = {
            //门框或窗框的贴图和剖面样式。-----------------------------------------------
            profileMaterialIndex: [],
            profileShapeIndex: [] //当前选择的是哪个门框。
        };
        this.frameMeshes = {};
        this.frameGeometry = {};
        this.frameFather = new THREE.Object3D();
        this.dataServer = _dataServer;
        this.jDataServer = _jDataServer;
    }
    DestroyDoorWinFrame() {
        for (let key in this.frameMeshes) {
            this.frameFather.remove(this.frameMeshes[key]);
            this.dataServer.sceneCommonObj.scene.remove(this.frameFather);
            this.frameMeshes[key].geometry.dispose();
        }
        for (let key in this.frameGeometry) {
            this.frameGeometry[key].dispose();
            this.frameGeometry[key] = undefined;
        }
    }
    MakeFrame(_modelType, _width, _height, _deep, _profileDatas, _bottomFrame) {
        //为窗框加载初始的贴图。-------------------------------------------------------------
        if (this.frameTexture == null) {
            this.LoadInitTexture(_modelType);
        }
        this.MakeDoorFrame(this.frameTexture, _width, _height, _deep, new _dataStruct__WEBPACK_IMPORTED_MODULE_1__["ZVector2"](_deep + 10, this.frameWidth), _profileDatas, _bottomFrame);
    }
    /**
    * 修改门框或者窗框的贴图。===========================================================
    * @param _path
    */
    SetFrameModelTexture(_path) {
        this.frameTexture.image.src = _path;
        this.frameTexture.image.onload = () => {
            this.frameTexture.needsUpdate = true;
        };
    }
    /**
    * 为门框或窗框加载初始化的贴图。==========================================================================
    */
    LoadInitTexture(_modelType) {
        let initTextureUrl = this.jDataServer.json.doorFramePics[0];
        this.frameTexture = this.dataServer.loaders.textureLoader.load(initTextureUrl);
        this.frameTexture.wrapS = THREE.RepeatWrapping;
        this.frameTexture.wrapT = THREE.RepeatWrapping;
    }
    /**
     * 用来创建门框的自定义函数。============================================
     * @param _width        门洞的总的宽度。
     * @param _height       门洞的总的高度。
     * @param _deep         门洞的总的厚度。
     * @param _frameWidth   门框的宽。
     * @param _frameDeep    门框的厚度。
     * @param _profileDatas 门框的一圈的顶点数据。
     * @param _bottomFrame  是否有下面的边框？true代表有。门框是没有的窗框有的。
     */
    MakeDoorFrame(_frameTexture, _width, _height, _deep, _frameSize, _profileDatas, _bottomFrame) {
        //创建新门框前，先把老的门框销毁掉。--------------------------------------
        this.DestroyDoorWinFrame();
        //先做左边垂直的其中一条门框。--------------------------------------------
        let _leftFrameDir = [new THREE.Vector3(0, 0, 0), new THREE.Vector3(0, _height, 0)];
        //做左边的框做一个下切割平面。-------------------------------------------------------
        let _leftFrameCutPlaneA = null;
        if (_bottomFrame == true) {
            _leftFrameCutPlaneA = new THREE.Plane();
            let _leftFramePlaneDirA = new THREE.Vector3(1, -1, 0).normalize();
            _leftFrameCutPlaneA.setFromNormalAndCoplanarPoint(_leftFramePlaneDirA, new THREE.Vector3(0, 0, 0));
        }
        //做左边的框做一个上切割平面。-------------------------------------------------------
        let _leftFrameCutPlaneB = new THREE.Plane();
        let _leftFramePlaneDirB = new THREE.Vector3(-1, -1, 0).normalize();
        _leftFrameCutPlaneB.setFromNormalAndCoplanarPoint(_leftFramePlaneDirB, new THREE.Vector3(0, _height, 0));
        let _leftFrameMesh = this.MakeOneFrameModel(_frameTexture, _leftFrameDir, _dataStruct__WEBPACK_IMPORTED_MODULE_1__["FrameType"].leftFrame, _frameSize, _profileDatas, _leftFrameCutPlaneA, _leftFrameCutPlaneB);
        this.frameFather.add(_leftFrameMesh);
        _leftFrameMesh.position.x = -_width / 2;
        _leftFrameMesh.position.z = -_deep / 2;
        //再做右边垂直的其中一条门框。--------------------------------------------
        let _rightFrameDir = [new THREE.Vector3(0, 0, 0), new THREE.Vector3(0, _height, 0)];
        //做右边的框做一个下切割平面。-------------------------------------------------------
        let _rightFrameCutPlaneA = null;
        if (_bottomFrame == true) {
            _rightFrameCutPlaneA = new THREE.Plane();
            let _rightFramePlaneDirA = new THREE.Vector3(-1, -1, 0).normalize();
            _rightFrameCutPlaneA.setFromNormalAndCoplanarPoint(_rightFramePlaneDirA, new THREE.Vector3(_frameSize.y, 0, 0));
        }
        //做右边门框的一个切割平面。--------------------------------------------------------
        let _rightFrameCutPlaneB = new THREE.Plane();
        let _rightFramePlaneDirB = new THREE.Vector3(1, -1, 0).normalize();
        _rightFrameCutPlaneB.setFromNormalAndCoplanarPoint(_rightFramePlaneDirB, new THREE.Vector3(_frameSize.y, _height, 0));
        let _rightFrameMesh = this.MakeOneFrameModel(_frameTexture, _rightFrameDir, _dataStruct__WEBPACK_IMPORTED_MODULE_1__["FrameType"].rightFrame, _frameSize, _MyUtil__WEBPACK_IMPORTED_MODULE_0__["MyUtil"].FlipArray(_profileDatas, true), _rightFrameCutPlaneA, _rightFrameCutPlaneB);
        this.frameFather.add(_rightFrameMesh);
        _rightFrameMesh.position.x = _width / 2 - _frameSize.y;
        _rightFrameMesh.position.z = -_deep / 2;
        //再绘制上面一条水平的门框。--------------------------------------------------------------
        let _topFrameDir = [new THREE.Vector3(0, 0, 0), new THREE.Vector3(_width, 0, 0)];
        //做上边门框的一个切割平面。--------------------------------------------------------------
        let _topFrameCutPlaneA = new THREE.Plane();
        let _topFramePlaneDirA = new THREE.Vector3(-1, -1, 0).normalize();
        _topFrameCutPlaneA.setFromNormalAndCoplanarPoint(_topFramePlaneDirA, new THREE.Vector3(0, 0, 0));
        //做上边门框的另一个切割平面。------------------------------------------------------------
        let _topFrameCutPlaneB = new THREE.Plane();
        let _topFramePlaneDirB = new THREE.Vector3(1, -1, 0).normalize();
        _topFrameCutPlaneB.setFromNormalAndCoplanarPoint(_topFramePlaneDirB, new THREE.Vector3(_width, 0, 0));
        let _topFrameMesh = this.MakeOneFrameModel(_frameTexture, _topFrameDir, _dataStruct__WEBPACK_IMPORTED_MODULE_1__["FrameType"].topFrame, _frameSize, _profileDatas, _topFrameCutPlaneA, _topFrameCutPlaneB);
        this.frameFather.add(_topFrameMesh);
        _topFrameMesh.position.y = _height;
        _topFrameMesh.position.z = -_deep / 2;
        _topFrameMesh.position.x = -_width / 2;
        //如果有需要，再绘制下面一条水平的门框。-------------------------------------------
        if (_bottomFrame == true) {
            let _bottomFrameDir = [new THREE.Vector3(0, 0, 0), new THREE.Vector3(_width, 0, 0)];
            //做上边门框的一个切割平面。--------------------------------------------------------
            let _bottomFrameCutPlaneA = new THREE.Plane();
            let _bottomFramePlaneDirA = new THREE.Vector3(-1, 1, 0).normalize();
            _bottomFrameCutPlaneA.setFromNormalAndCoplanarPoint(_bottomFramePlaneDirA, new THREE.Vector3(0, -_frameSize.y, 0));
            //做上边门框的另一个切割平面。--------------------------------------------------------
            let _bottomFrameCutPlaneB = new THREE.Plane();
            let _bottomFramePlaneDirB = new THREE.Vector3(1, 1, 0).normalize();
            _bottomFrameCutPlaneB.setFromNormalAndCoplanarPoint(_bottomFramePlaneDirB, new THREE.Vector3(_width, -_frameSize.y, 0));
            let _bottomFrameMesh = this.MakeOneFrameModel(_frameTexture, _bottomFrameDir, _dataStruct__WEBPACK_IMPORTED_MODULE_1__["FrameType"].bottomFrame, _frameSize, _MyUtil__WEBPACK_IMPORTED_MODULE_0__["MyUtil"].FlipArray(_profileDatas, true), _bottomFrameCutPlaneA, _bottomFrameCutPlaneB);
            this.frameFather.add(_bottomFrameMesh);
            _bottomFrameMesh.position.y = _frameSize.y;
            _bottomFrameMesh.position.z = -_deep / 2;
            _bottomFrameMesh.position.x = -_width / 2;
        }
        this.dataServer.sceneCommonObj.scene.add(this.frameFather);
    }
    MakeOneFrameModel(_frameTexture, _dir, _frameType, _frameSize, _profileDatas, _planeA, _planeB) {
        let _frameData = this.MakeModelVertexesAndFaces(_frameType, _frameSize, _dir, new THREE.Vector3(0, 0, 1), _planeA, _planeB, _profileDatas);
        this.frameGeometry[_frameType] = new THREE.Geometry();
        this.frameGeometry[_frameType].vertices = _frameData.vertices;
        this.frameGeometry[_frameType].faces = _frameData.faces;
        this.frameGeometry[_frameType].faceVertexUvs = _frameData.uvs;
        this.frameGeometry[_frameType].computeFaceNormals();
        this.frameGeometry[_frameType].mergeVertices();
        //创建一个门框的mesh出来了。-------------------------------------
        this.frameMeshes[_frameType] = new THREE.Mesh(this.frameGeometry[_frameType], new THREE.MeshPhongMaterial({ map: _frameTexture }));
        //   this.profileMesh.position.y = _profileHeight;
        return this.frameMeshes[_frameType];
    }
    /**
     *
     * @param _frameType
     * @param _frameSize
     * @param _dir 放样的两个端点。结构是[{x:1,y:2,y:3},{x:4,y:5,y:6}]
     * @param _normalDir
     * @param _cutPlaneA
     * @param _cutPlaneB
     * @param _profileDatas
     */
    MakeModelVertexesAndFaces(_frameType, _frameSize, _dir, _normalDir, _cutPlaneA, _cutPlaneB, _profileDatas) {
        //求出一圈点的数据，结构为[[1,2],[3,4],[5,6]]
        let _newProfileDatas = _MyUtil__WEBPACK_IMPORTED_MODULE_0__["MyUtil"].ClampArray(_frameSize, _profileDatas);
        let _profileLength = _dir[1].clone().distanceTo(_dir[0]);
        //计算一圈点的每一个点距离起点的距离，主要用来计算uv的。----------------------------------------------
        //-----------------------------------------------------------------------------------------------
        let _distanceFromPrePointArray = [];
        for (let i = 0; i < _newProfileDatas.length; i++) {
            if (i == 0) {
                _distanceFromPrePointArray.push(0);
            }
            else {
                let _preIndex = i - 1;
                let _prePoint = _newProfileDatas[_preIndex];
                let _currentPoint = _newProfileDatas[i];
                let _distanceFromPrePoint = Math.sqrt(Math.pow(_currentPoint[1] - _prePoint[1], 2) + Math.pow(_currentPoint[0] - _prePoint[0], 2));
                _distanceFromPrePointArray.push(_distanceFromPrePoint);
            }
        }
        let _distanceFromStartPointArray = [];
        for (let i = 0; i < _distanceFromPrePointArray.length; i++) {
            if (i == 0) {
                _distanceFromStartPointArray.push(0);
            }
            else {
                let _preIndex = i - 1;
                _distanceFromStartPointArray.push(_distanceFromStartPointArray[_preIndex] + _distanceFromPrePointArray[i]);
            }
        }
        //开始构建uv的初始数据。-------------------------------------------------------------------------------
        //---------------------------------------------------------------------------------------------------
        let _UVRawDatas = [];
        for (let i = 0; i < _distanceFromStartPointArray.length; i++) {
            let _uv = new THREE.Vector2(_distanceFromStartPointArray[i] / 300.0, 0.0);
            _UVRawDatas.push(_uv);
        }
        let _scaleProfileLength = _profileLength / 800.0;
        for (let i = 0; i < _distanceFromStartPointArray.length; i++) {
            let _uv = new THREE.Vector2(_distanceFromStartPointArray[i] / 300.0, _scaleProfileLength);
            _UVRawDatas.push(_uv);
        }
        //求_normalDir和_dir的叉乘。------------------------------------------------
        let _wallDir = _dir[1].clone().sub(_dir[0]);
        let _crossDir = _wallDir.clone().cross(_normalDir);
        //创建放样开始处的一圈点和放样结束处的一圈点。---------------------------------
        let _startRing = this.GetRingPoints(_dir[0], _normalDir.normalize(), _crossDir.normalize(), _newProfileDatas);
        let _endRing = this.GetRingPoints(_dir[1], _normalDir.normalize(), _crossDir.normalize(), _newProfileDatas);
        _endRing = _MyUtil__WEBPACK_IMPORTED_MODULE_0__["MyUtil"].MakeNewRingPoints(_endRing, _startRing, _cutPlaneB);
        _startRing = _MyUtil__WEBPACK_IMPORTED_MODULE_0__["MyUtil"].MakeNewRingPoints(_startRing, _endRing, _cutPlaneA);
        let _ringLength = _startRing.length;
        //开始搜集顶点数据。---------------------------------------------------------
        let vertices = [];
        for (let i = 0; i < _startRing.length; i++) {
            vertices.push(_startRing[i]);
        }
        for (let i = 0; i < _endRing.length; i++) {
            vertices.push(_endRing[i]);
        }
        //检查是否已经有了face3的数据？有了就不用再算了，浪费时间呢。--------------------
        let _hasFace3Data = false;
        if (this.frameGeometry[_frameType] != undefined) {
            if (this.frameGeometry[_frameType].faces != undefined) {
                _hasFace3Data = true;
            }
        }
        // //开始产生face3数组的数据。----------------------------------------------------
        let faces = [];
        if (_hasFace3Data == false) {
            for (let i = 0; i < _ringLength; i++) {
                let nextI = i + 1;
                if (nextI == _ringLength) {
                    nextI = 0;
                }
                let oppositeI = i + _ringLength;
                let oppositeNextI = nextI + _ringLength;
                faces.push(new THREE.Face3(i, nextI, oppositeI));
                faces.push(new THREE.Face3(nextI, oppositeNextI, oppositeI));
            }
        }
        else {
            faces = this.frameGeometry[_frameType].faces;
        }
        //开始计算UV的数据。-----------------------------------------------------------
        let _uvs = [[]];
        for (let i = 0; i < faces.length; i++) {
            let _oneLineUv = [];
            _oneLineUv.push(_UVRawDatas[faces[i].a]);
            _oneLineUv.push(_UVRawDatas[faces[i].b]);
            _oneLineUv.push(_UVRawDatas[faces[i].c]);
            _uvs[0].push(_oneLineUv);
        }
        return {
            vertices: vertices,
            faces: faces,
            uvs: _uvs
        };
    }
    /**
    * 获取放样的一圈点的坐标。返回的就是Vector3了。=========================================================
    * @param _startPoint 以这个点为基点。
    * @param _normalDir 法线方向。
    * @param _crossDir 门框的法线朝向。
    */
    GetRingPoints(_startPoint, _normalDir, _crossDir, _profileDatas) {
        let returnPoints = [];
        for (let i = 0; i < _profileDatas.length; i++) {
            let onePoint = _startPoint.clone()
                .addScaledVector(_normalDir, _profileDatas[i][0])
                .addScaledVector(_crossDir, _profileDatas[i][1]);
            returnPoints.push(onePoint);
        }
        return returnPoints;
    }
    //设置门框的位置。===============================================================================
    SetPosition(_pos) {
        this.frameFather.position.copy(_pos);
    }
    /**
     * 用来设置门框的旋转角度的自定义函数。============================================================
     * @param _radian
     */
    SetRotation(_radian) {
        this.frameFather.rotation.y = _radian;
    }
}
DoorWindowFrame.ctorParameters = () => [
    { type: _THREEDataServer__WEBPACK_IMPORTED_MODULE_2__["THREEDataServer"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_3__["JdesignDataService"] }
];


/***/ }),

/***/ "./src/app/three/classes/ExtrueModelMaker.ts":
/*!***************************************************!*\
  !*** ./src/app/three/classes/ExtrueModelMaker.ts ***!
  \***************************************************/
/*! exports provided: ExtrueModelMaker */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExtrueModelMaker", function() { return ExtrueModelMaker; });
class ExtrueModelMaker {
    /**
     * 利用挤出创建一个模型。====================================================
     * @param _shapePointList 用来挤出的平面上的所有的点，结构是[vector3,vector3]。
     * @param _dir 挤出的方向。值类型为vector3。
     * @param _height 挤出的高度。
     */
    MakeExtrueModel(_shapePointList, _dir, _height, _uvScale, _ignoreSideFaces) {
        //获取另外一圈点。-----------------------------------------------
        let _otherRingPoints = [];
        for (let i = 0; i < _shapePointList.length; i++) {
            _otherRingPoints.push(_shapePointList[i].clone().addScaledVector(_dir, _height));
        }
        //一圈总共有多少个顶点。----------------------------------------
        let _ringLength = _shapePointList.length;
        //把所有的点都推到顶点集合里。------------------------------------
        let _vertexes = [];
        for (let i = 0; i < _shapePointList.length; i++) {
            _vertexes.push(_shapePointList[i]);
        }
        for (let i = 0; i < _otherRingPoints.length; i++) {
            _vertexes.push(_otherRingPoints[i]);
        }
        //计算一圈点的UV值。---------------------------------------------
        //--------------------------------------------------------------
        //首先计算一个点和上一个点之间的距离。-------------------
        let _uvDistanceToPrePoint = [];
        for (let i = 0; i < _shapePointList.length + 1; i++) {
            if (i == 0) {
                _uvDistanceToPrePoint.push(0);
            }
            else {
                let _preIndex = i - 1;
                let _currentI = i;
                if (i == _shapePointList.length) {
                    _currentI = 0;
                }
                let _prePointV2 = new THREE.Vector2(_shapePointList[_preIndex].x, _shapePointList[_preIndex].z);
                let _currentPointV2 = new THREE.Vector2(_shapePointList[_currentI].x, _shapePointList[_currentI].z);
                let _distanceV2 = _prePointV2.distanceTo(_currentPointV2);
                _uvDistanceToPrePoint.push(_distanceV2);
            }
        }
        //计算一个点和开始点之间的距离。-------------------------
        let _uvDistanceToStartPoint = [];
        let _amount = 0;
        for (let i = 0; i < _uvDistanceToPrePoint.length; i++) {
            _amount += _uvDistanceToPrePoint[i];
            _uvDistanceToStartPoint.push(_amount);
        }
        //把一圈的UV值都计算好吧。------------------------------
        let _ringUvs = [];
        for (let i = 0; i < _uvDistanceToStartPoint.length; i++) {
            _ringUvs.push(new THREE.Vector2(_uvDistanceToStartPoint[i] / _uvScale, 0.0));
        }
        for (let i = 0; i < _uvDistanceToStartPoint.length; i++) {
            _ringUvs.push(new THREE.Vector2(_uvDistanceToStartPoint[i] / _uvScale, _height / _uvScale));
        }
        let _faces = [];
        let _uvs = [[]];
        //开始做耳切运算。------------------------------------------
        let _earCutDatas = []; //用来做耳切运算的顶点数据。
        for (let i = 0; i < _shapePointList.length; i++) {
            _earCutDatas.push(_shapePointList[i].x);
            _earCutDatas.push(_shapePointList[i].z);
        }
        let _triangles = earcut(_earCutDatas);
        //做模型下面的face3。------------------------------------------
        for (let i = 0; i < _triangles.length / 3; i++) {
            let _theFaceDown = new THREE.Face3(_triangles[i * 3], _triangles[i * 3 + 1], _triangles[i * 3 + 2]);
            _faces.push(_theFaceDown);
            //顺便计算UV的数据。------------------------------------
            let _pointADown = _vertexes[_theFaceDown.a];
            let _pointBDown = _vertexes[_theFaceDown.b];
            let _pointCDown = _vertexes[_theFaceDown.c];
            _uvs[0].push([
                new THREE.Vector2(_pointADown.x / _uvScale, _pointADown.z / _uvScale),
                new THREE.Vector2(_pointBDown.x / _uvScale, _pointBDown.z / _uvScale),
                new THREE.Vector2(_pointCDown.x / _uvScale, _pointCDown.z / _uvScale)
            ]);
        }
        //做模型上面的face。-------------------------------------------
        for (let i = 0; i < _triangles.length / 3; i++) {
            let _theFaceUp = new THREE.Face3(_triangles[i * 3] + _ringLength, _triangles[i * 3 + 2] + _ringLength, _triangles[i * 3 + 1] + _ringLength);
            _faces.push(_theFaceUp);
            //顺便计算UV的数据。-----------------------------------
            let _pointAUp = _vertexes[_theFaceUp.a];
            let _pointBUp = _vertexes[_theFaceUp.b];
            let _pointCUp = _vertexes[_theFaceUp.c];
            _uvs[0].push([
                new THREE.Vector2(_pointAUp.x / _uvScale, _pointAUp.z / _uvScale),
                new THREE.Vector2(_pointBUp.x / _uvScale, _pointBUp.z / _uvScale),
                new THREE.Vector2(_pointCUp.x / _uvScale, _pointCUp.z / _uvScale)
            ]);
        }
        //做模型侧面的一圈面。------------------------------------------------------------
        //------------------------------------------------------------------------------
        for (let i = 0; i < _ringLength; i++) {
            //把挤出模型的某些侧面都忽略掉。---------------------
            if (_ignoreSideFaces != null) {
                if (_ignoreSideFaces.indexOf(i) != -1) {
                    continue;
                }
            }
            //开始为挤出模型的侧面添加Face3。--------------------
            let _nextI = i + 1;
            if (_nextI == _ringLength) {
                _nextI = 0;
            }
            let oppsiteI = i + _ringLength;
            let oppsiteNextI = _nextI + _ringLength;
            let _firstTraigle = new THREE.Face3(i, oppsiteI, _nextI);
            let _secondTraigle = new THREE.Face3(_nextI, oppsiteI, oppsiteNextI);
            _faces.push(_firstTraigle);
            _faces.push(_secondTraigle);
            //顺便计算UV的数据。-----------------------------------
            _uvs[0].push([
                _ringUvs[i],
                _ringUvs[i + _ringLength + 1],
                _ringUvs[i + 1]
            ]);
            _uvs[0].push([
                _ringUvs[i + 1],
                _ringUvs[i + _ringLength + 1],
                _ringUvs[i + 1 + _ringLength + 1]
            ]);
        }
        let geom = new THREE.Geometry();
        geom.vertices = _vertexes;
        geom.faces = _faces;
        geom.faceVertexUvs = _uvs;
        geom.computeFaceNormals();
        let _returnMesh = new THREE.Mesh(geom);
        return _returnMesh;
    }
}


/***/ }),

/***/ "./src/app/three/classes/HGModel/HGDataServer.ts":
/*!*******************************************************!*\
  !*** ./src/app/three/classes/HGModel/HGDataServer.ts ***!
  \*******************************************************/
/*! exports provided: HGDataServer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HGDataServer", function() { return HGDataServer; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _HGWardrobeLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./HGWardrobeLoader */ "./src/app/three/classes/HGModel/HGWardrobeLoader.ts");
/* harmony import */ var _HGX3dLoader__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./HGX3dLoader */ "./src/app/three/classes/HGModel/HGX3dLoader.ts");
/* harmony import */ var _HGMapResourcesPreloader__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./HGMapResourcesPreloader */ "./src/app/three/classes/HGModel/HGMapResourcesPreloader.ts");
/* harmony import */ var _HGShaderPreloader__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./HGShaderPreloader */ "./src/app/three/classes/HGModel/HGShaderPreloader.ts");

/*
 作者：张建。
 类说明：其中一个服务。
*/





let HGDataServer = class HGDataServer {
    constructor() {
        //three.js场景里的所有东西。
        this.sceneObj = {
            lightObjs: [],
            cubeMap: null //用来做反射的cubeMap.
        };
        //这个项目里常常用到的路径。都从Json读取的=================
        this.commonPath = {
            basePath: "https://www.3dhome360.com/ZJ/QuanYouData/",
            x2dPath: "https://www.3dhome360.com/ZJ/QuanYouData/BaseGraph/",
            mt2Path: "https://www.3dhome360.com/ZJ/QuanYouData/Material/",
            texturePath: "https://www.3dhome360.com/ZJ/QuanYouData/Textures/",
            startModelPath: "https://www.3dhome360.com/ZJ/QuanYouData/models/",
            startModelName: "" //一开始用的模型的名字。
        };
        //名字叫这些的板件还是型材五金还是五金都不处理。
        this.ignorNameList = ["标记"];
        //用来做预加载shader并且存放大量shader的对象。
        this.shaderPreloader = new _HGShaderPreloader__WEBPACK_IMPORTED_MODULE_5__["HGShaderPreloader"](this);
        //用来加载x3d模型的实例。
        this.x3dLoader = new _HGX3dLoader__WEBPACK_IMPORTED_MODULE_3__["HGX3dLoader"]();
        // public clickModelDiandID=null;  //被单击的模型的DI值和ID值，就是显示在测试面板里给我自己看的。
        this.x2js = new X2JS(); //用来把xml转换成json的对象。
        //用来加载衣柜模型的对象。
        this.wardrobeLoader = new _HGWardrobeLoader__WEBPACK_IMPORTED_MODULE_2__["HGWardrobeLoader"](this);
        //用来做衣柜模型预加载用的对象。
        this.mapResourcesPreloader = new _HGMapResourcesPreloader__WEBPACK_IMPORTED_MODULE_4__["HGMapResourcesPreloader"](this);
        //各种加载器。
        this.loader = {
            fileLoader_GBK: new THREE.FileLoader(),
            fileLoader: new THREE.FileLoader(),
            textureLoader: new THREE.TextureLoader(),
            cubeTextureLoader: new THREE.CubeTextureLoader() //专门用来加载cubemap的对象。
        };
        this.loader.fileLoader_GBK.setMimeType("text/html;charset=gb2312");
    }
};
HGDataServer = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
], HGDataServer);



/***/ }),

/***/ "./src/app/three/classes/HGModel/HGHardware.ts":
/*!*****************************************************!*\
  !*** ./src/app/three/classes/HGModel/HGHardware.ts ***!
  \*****************************************************/
/*! exports provided: HGHardware */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HGHardware", function() { return HGHardware; });
/* harmony import */ var _HGmodelUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./HGmodelUtils */ "./src/app/three/classes/HGModel/HGmodelUtils.ts");
/*
 作者：张建。
 类说明：这个用来加载五金件的，目前是临时使用一个长方体替代。
*/

class HGHardware {
    constructor(_width, _height, _deep, _textureVertical) {
        this.modelRawDatas = {
            vertices: [],
            faces: [],
            uvs: [[]] //模型的所有uv集合。
        };
        //创建上面的面。
        let topFaceVertices = [
            [0, _height, 0],
            [0, _height, _deep],
            [_width, _height, _deep],
            [_width, _height, 0],
        ];
        _HGmodelUtils__WEBPACK_IMPORTED_MODULE_0__["HGmodelUtils"].MakeFaceFrom4Points(this.modelRawDatas, topFaceVertices, _textureVertical);
        //创建竖的前面。
        let verticalFaceFrontVertices = [
            [0, 0, 0],
            [0, _height, 0],
            [_width, _height, 0],
            [_width, 0, 0],
        ];
        _HGmodelUtils__WEBPACK_IMPORTED_MODULE_0__["HGmodelUtils"].MakeFaceFrom4Points(this.modelRawDatas, verticalFaceFrontVertices, _textureVertical);
        //创建竖的右面。
        let verticalFaceRightVertices = [
            [0, 0, _deep],
            [0, _height, _deep],
            [0, _height, 0],
            [0, 0, 0]
        ];
        _HGmodelUtils__WEBPACK_IMPORTED_MODULE_0__["HGmodelUtils"].MakeFaceFrom4Points(this.modelRawDatas, verticalFaceRightVertices, _textureVertical);
        //创建竖的左面。
        let verticalFaceLeftVertices = [
            [_width, 0, 0],
            [_width, _height, 0],
            [_width, _height, _deep],
            [_width, 0, _deep]
        ];
        _HGmodelUtils__WEBPACK_IMPORTED_MODULE_0__["HGmodelUtils"].MakeFaceFrom4Points(this.modelRawDatas, verticalFaceLeftVertices, _textureVertical);
        //创建竖的后面。
        let verticalFaceBackVertices = [
            [_width, 0, _deep],
            [_width, _height, _deep],
            [0, _height, _deep],
            [0, 0, _deep]
        ];
        _HGmodelUtils__WEBPACK_IMPORTED_MODULE_0__["HGmodelUtils"].MakeFaceFrom4Points(this.modelRawDatas, verticalFaceBackVertices, _textureVertical);
        //创建竖的底面。
        let verticalFaceBottomertices = [
            [_width, 0, 0],
            [_width, 0, _deep],
            [0, 0, _deep],
            [0, 0, 0]
        ];
        _HGmodelUtils__WEBPACK_IMPORTED_MODULE_0__["HGmodelUtils"].MakeFaceFrom4Points(this.modelRawDatas, verticalFaceBottomertices, _textureVertical);
        let theGeometry = _HGmodelUtils__WEBPACK_IMPORTED_MODULE_0__["HGmodelUtils"].MakeGeometryFromRawData(this.modelRawDatas);
        this.mesh = new THREE.Mesh(theGeometry, new THREE.MeshPhongMaterial({
            visible: false,
            wireframe: true
        }));
        //把模型的原来颜色存起来。
        this.mesh.material.formerColor = new THREE.Color();
        this.mesh.material.formerColor.copy(this.mesh.material.color);
    }
}
HGHardware.ctorParameters = () => [
    { type: Number },
    { type: Number },
    { type: Number },
    { type: Boolean }
];


/***/ }),

/***/ "./src/app/three/classes/HGModel/HGLOFT.ts":
/*!*************************************************!*\
  !*** ./src/app/three/classes/HGModel/HGLOFT.ts ***!
  \*************************************************/
/*! exports provided: HGLOFT */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HGLOFT", function() { return HGLOFT; });
/* harmony import */ var _HGDataServer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./HGDataServer */ "./src/app/three/classes/HGModel/HGDataServer.ts");
/* harmony import */ var _HGMyUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./HGMyUtils */ "./src/app/three/classes/HGModel/HGMyUtils.ts");
/* harmony import */ var _HGStruct__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./HGStruct */ "./src/app/three/classes/HGModel/HGStruct.ts");
/* harmony import */ var _HGmodelUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./HGmodelUtils */ "./src/app/three/classes/HGModel/HGmodelUtils.ts");
/*
 作者：张建。
 类说明：用来做loft放样的类。
*/




class HGLOFT {
    //_sectionFormular就是x2d里每个点的坐标，里面带有变量参数的。
    //_graphParams是控制模型的挤出方向，镜像，两边倒角的。
    //_x2dName就是这个模型使用的x2d文件的名字。
    //_x2dInputParams就是用来往x2d里代入的参数。
    constructor(_dataServer, _width, _height, _deep, _DI, _sectionFormular, _graphParams, _x2dName, _x2dInputParams) {
        this.JXState = {
            verticalMirror: false,
            horizontalMirror: false,
            rotateByXAxis: false,
            rotateByYAxis: false
        };
        // private : boolean = false;      //这个截面是否垂直镜像？
        // private : boolean = false;    //这个截面是否水平镜像？
        this.cutA = 0; //这个模型在一边切多少度？
        this.cutB = 0; //这个模型在另外一边切多少度？
        this.x2dfile = ""; //对应的x2d的文件名。
        this.x2dInputParamsValueKeyValues = []; //这个是整理好的要代入到x2d里的所有参数。
        this.Alphabet = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"];
        this.dataServer = _dataServer;
        this.sectionPointsFormular = _sectionFormular;
        this.plate_height = _height;
        // console.log(_x2dInputParams);
        for (let key in _x2dInputParams) {
            let indexString = key.slice(2);
            let _oneParamsValue = {};
            _oneParamsValue.index = parseInt(indexString);
            _oneParamsValue.value = _x2dInputParams[key];
            this.x2dInputParamsValueKeyValues.push(_oneParamsValue);
        }
        this.DI = _DI;
        this.x2dfile = _x2dName;
        this.graphParams = _graphParams;
        if (this.graphParams != undefined) {
            //处理剖面镜像的问题。---------------------------
            if (this.graphParams.JX != undefined) {
                if (this.graphParams.JX == 2) {
                    this.JXState.verticalMirror = true;
                    // console.log("垂直翻转")
                }
                if (this.graphParams.JX == 1) {
                    this.JXState.horizontalMirror = true;
                    // console.log("水平翻转")
                }
                if (this.graphParams.JX == 3) {
                    this.JXState.rotateByYAxis = true;
                }
                if (this.graphParams.JX == 4) {
                    this.JXState.rotateByXAxis = true;
                }
            }
            if (this.graphParams.CutA != undefined) {
                this.cutA = this.graphParams.CutA;
            }
            if (this.graphParams.CutB != undefined) {
                this.cutB = this.graphParams.CutB;
            }
            if (this.graphParams.Cut != undefined) {
                this.cut = parseInt(this.graphParams.Cut);
                if (this.cut == 0) {
                    this.cutA = 0;
                    this.cutB = 0;
                }
            }
            if (this.graphParams.PL != undefined) {
                this.PL = parseInt(this.graphParams.PL);
            }
        }
        this.MakeModelFromWidthHeightDeep(_width, _height, _deep, false);
    }
    //先根据根据模型的长宽高把模型构建出来------------------------
    MakeModelFromWidthHeightDeep(_width, _height, _deep, _isUpdate) {
        //横向挤出的模型---------------------------------------------------------------
        switch (this.PL) {
            case 1:
                this.sectionPointsFormular.shapeDir = "XY";
                break;
            case 2:
                this.sectionPointsFormular.shapeDir = "XZ";
                break;
            case 3:
                this.sectionPointsFormular.shapeDir = "YZ";
                break;
        }
        let planeA = new _HGStruct__WEBPACK_IMPORTED_MODULE_2__["Plane"]();
        let planeB = new _HGStruct__WEBPACK_IMPORTED_MODULE_2__["Plane"]();
        if (this.sectionPointsFormular.shapeDir == "YZ") {
            let sectionPoints = this.CountPointsVariable(_deep, _height);
            let sectionPointsV3s = [];
            // console.log(sectionPoints);
            for (let i = 0; i < sectionPoints.length; i++) {
                let oneSectionPointsV3s = [];
                for (let j = 0; j < sectionPoints[i].length; j++) {
                    oneSectionPointsV3s.push(new THREE.Vector3(sectionPoints[i][j][0], sectionPoints[i][j][2], sectionPoints[i][j][1]));
                }
                sectionPointsV3s.push(oneSectionPointsV3s);
            }
            if (this.cut == 1) {
                if (this.cutA < 0) {
                    planeA.centerPoint = new THREE.Vector3(0, 0, 0);
                    planeA.dir = new THREE.Vector3(Math.cos(-this.cutA * Math.PI / 180), Math.sin(this.cutA * Math.PI / 180), 0).normalize();
                }
                else if (this.cutA == 0) {
                    planeA = null;
                }
                else {
                    planeA.centerPoint = new THREE.Vector3(0, _height, 0);
                    planeA.dir = new THREE.Vector3(Math.cos(-this.cutA * Math.PI / 180), Math.sin(this.cutA * Math.PI / 180), 0).normalize();
                }
                if (this.cutB < 0) {
                    planeB.centerPoint = new THREE.Vector3(_width, 0, 0);
                    planeB.dir = new THREE.Vector3(Math.cos(-this.cutB * Math.PI / 180), Math.sin(-this.cutB * Math.PI / 180), 0).normalize();
                }
                else if (this.cutB == 0) {
                    planeB = null;
                }
                else {
                    planeB.centerPoint = new THREE.Vector3(_width, _height, 0);
                    planeB.dir = new THREE.Vector3(Math.cos(-this.cutB * Math.PI / 180), Math.sin(-this.cutB * Math.PI / 180), 0).normalize();
                }
            }
            else if (this.cut == 2) {
                if (this.cutA > 0) {
                    planeA.centerPoint = new THREE.Vector3(0, 0, _deep);
                    planeA.dir = new THREE.Vector3(Math.cos(-this.cutA * Math.PI / 180), 0, Math.sin(this.cutA * Math.PI / 180)).normalize();
                }
                else if (this.cutA == 0) {
                    planeA = null;
                }
                else {
                    planeA.centerPoint = new THREE.Vector3(0, 0, 0);
                    planeA.dir = new THREE.Vector3(Math.cos(-this.cutA * Math.PI / 180), 0, Math.sin(this.cutA * Math.PI / 180)).normalize();
                }
                if (this.cutB > 0) {
                    planeB.centerPoint = new THREE.Vector3(_width, 0, _deep);
                    planeB.dir = new THREE.Vector3(Math.cos(-this.cutB * Math.PI / 180), 0, Math.sin(-this.cutB * Math.PI / 180)).normalize();
                }
                else if (this.cutB == 0) {
                    planeB = null;
                }
                else {
                    planeB.centerPoint = new THREE.Vector3(_width, 0, 0);
                    planeB.dir = new THREE.Vector3(Math.cos(-this.cutB * Math.PI / 180), 0, Math.sin(-this.cutB * Math.PI / 180)).normalize();
                }
            }
            else {
                planeA = null;
                planeB = null;
            }
            this.MakeModelFromProfilesAndDir(sectionPointsV3s, new THREE.Vector3(_width, 0, 0), planeA, planeB, _isUpdate);
        }
        else if (this.sectionPointsFormular.shapeDir == "XY") {
            let sectionPoints = this.CountPointsVariable(_width, _deep);
            if (sectionPoints != null) {
                let sectionPointsV3s = [];
                for (let i = 0; i < sectionPoints.length; i++) {
                    let oneSectionPointsV3s = [];
                    for (let j = 0; j < sectionPoints[i].length; j++) {
                        oneSectionPointsV3s.push(new THREE.Vector3(sectionPoints[i][j][0], sectionPoints[i][j][2], sectionPoints[i][j][1]));
                    }
                    sectionPointsV3s.push(oneSectionPointsV3s);
                }
                if (this.cut == 2) {
                    if (this.cutA < 0) {
                        planeA.centerPoint = new THREE.Vector3(0, 0, 0);
                        planeA.dir = new THREE.Vector3(Math.cos(-this.cutA * Math.PI / 180), Math.sin(this.cutA * Math.PI / 180), 0).normalize();
                    }
                    else if (this.cutA == 0) {
                        planeA = null;
                    }
                    else {
                        planeA.centerPoint = new THREE.Vector3(_width, 0, 0);
                        planeA.dir = new THREE.Vector3(Math.cos(-this.cutA * Math.PI / 180), Math.sin(this.cutA * Math.PI / 180), 0).normalize();
                    }
                    if (this.cutB < 0) {
                        planeB.centerPoint = new THREE.Vector3(0, _height, 0);
                        planeB.dir = new THREE.Vector3(Math.cos(-this.cutB * Math.PI / 180), Math.sin(-this.cutB * Math.PI / 180), 0).normalize();
                    }
                    else if (this.cutB == 0) {
                        planeB = null;
                    }
                    else {
                        planeB.centerPoint = new THREE.Vector3(_width, _height, 0);
                        planeB.dir = new THREE.Vector3(Math.cos(-this.cutB * Math.PI / 180), Math.sin(-this.cutB * Math.PI / 180), 0).normalize();
                    }
                }
                else {
                    planeA = null;
                    planeB = null;
                }
                this.MakeModelFromProfilesAndDir(sectionPointsV3s, new THREE.Vector3(0, _height, 0), planeA, planeB, _isUpdate);
            }
        }
        else if (this.sectionPointsFormular.shapeDir == "XZ") {
            let sectionPoints = this.CountPointsVariable(_width, _height);
            let sectionPointsV3s = [];
            for (let i = 0; i < sectionPoints.length; i++) {
                let oneSectionPointsV3s = [];
                for (let j = sectionPoints[i].length - 1; j >= 0; j--) {
                    oneSectionPointsV3s.push(new THREE.Vector3(sectionPoints[i][j][0], sectionPoints[i][j][2], sectionPoints[i][j][1]));
                }
                sectionPointsV3s.push(oneSectionPointsV3s);
            }
            this.MakeModelFromProfilesAndDir(sectionPointsV3s, new THREE.Vector3(0, 0, _deep), null, null, _isUpdate);
        }
    }
    //根据剖面的坐标和方向把模型做出来。
    MakeModelFromProfilesAndDir(_sectionPoints, _dir, _PlaneA, _PlaneB, _isUpdate) {
        //另一端的剖面的所有顶点。-----------------------------
        let _anotherSectionPoints = [];
        for (let i = 0; i < _sectionPoints.length; i++) {
            let _oneAnotherSectionPoints = [];
            for (let j = 0; j < _sectionPoints[i].length; j++) {
                let oneAnotherSectionPoint = new THREE.Vector3();
                oneAnotherSectionPoint.addVectors(_sectionPoints[i][j], _dir);
                _oneAnotherSectionPoints.push(oneAnotherSectionPoint);
            }
            _anotherSectionPoints.push(_oneAnotherSectionPoints);
        }
        //是否要在A面进行裁切模型,是的话就切了并重新计算顶点-------------------------------------------------------
        let _sectionPointsWithCut_pre = null;
        if (_PlaneA != null) {
            _sectionPointsWithCut_pre = _HGmodelUtils__WEBPACK_IMPORTED_MODULE_3__["HGmodelUtils"].CutLoftModel(_PlaneA, _sectionPoints, _anotherSectionPoints);
        }
        else {
            _sectionPointsWithCut_pre = _sectionPoints;
        }
        //是否要在B面进行裁切模型，是的话就切了并重新计算顶点-------------------------------------------------------
        let _anotherSectionPointsWithCut_pre = null;
        if (_PlaneB != null) {
            _anotherSectionPointsWithCut_pre = _HGmodelUtils__WEBPACK_IMPORTED_MODULE_3__["HGmodelUtils"].CutLoftModel(_PlaneB, _sectionPoints, _anotherSectionPoints);
        }
        else {
            _anotherSectionPointsWithCut_pre = _anotherSectionPoints;
        }
        let vertices = [];
        let faces;
        let uvs = [[]];
        if (_isUpdate == false) {
            faces = [];
        }
        else {
            faces = this.mesh.geometry.faces;
        }
        // let sectionPointArray;
        // let anotherSectionPointArray;
        // if (this.sectionPointsFormular.dj != 0) {
        //     //百叶窗总共弄多少页？
        //     let _howMangPage = this.plate_height / this.sectionPointsFormular.barH;
        //     sectionPointArray = this.SplitSectionPoints(_sectionPointsWithCut_pre, this.sectionPointsFormular.dj, _howMangPage);
        //     anotherSectionPointArray = this.SplitSectionPoints(_anotherSectionPointsWithCut_pre, this.sectionPointsFormular.dj, _howMangPage);
        //     console.log()
        // } else {
        //     sectionPointArray = [_sectionPointsWithCut_pre];
        //     anotherSectionPointArray = [_anotherSectionPointsWithCut_pre];
        // }
        let verticesLength = 0;
        for (let tttt = 0; tttt < _sectionPointsWithCut_pre.length; tttt++) {
            let _sectionPointsWithCut = _sectionPointsWithCut_pre[tttt];
            let _anotherSectionPointsWithCut = _anotherSectionPointsWithCut_pre[tttt];
            //添加顶点数据。-------------------------------------------------
            for (let i = 0; i < _sectionPointsWithCut.length; i++) {
                let nextI = i + 1;
                if (nextI == _sectionPointsWithCut.length) {
                    nextI = 0;
                }
                vertices.push(_sectionPointsWithCut[i]);
                vertices.push(_sectionPointsWithCut[nextI]);
                vertices.push(_anotherSectionPointsWithCut[i]);
                vertices.push(_anotherSectionPointsWithCut[nextI]);
            }
            //添加face数据。---------------------------------------------------------
            if (_isUpdate == false) {
                for (let i = 0; i < _sectionPointsWithCut.length; i++) {
                    if (this.JXState.verticalMirror == true || this.JXState.horizontalMirror == true) {
                        faces.push(new THREE.Face3(0 + i * 4 + verticesLength, 2 + i * 4 + verticesLength, 1 + i * 4 + verticesLength));
                        faces.push(new THREE.Face3(1 + i * 4 + verticesLength, 2 + i * 4 + verticesLength, 3 + i * 4 + verticesLength));
                    }
                    else {
                        faces.push(new THREE.Face3(0 + i * 4 + verticesLength, 1 + i * 4 + verticesLength, 2 + i * 4 + verticesLength));
                        faces.push(new THREE.Face3(1 + i * 4 + verticesLength, 3 + i * 4 + verticesLength, 2 + i * 4 + verticesLength));
                    }
                }
            }
            //统计好目前已有的顶点数和面数。------------------------------------------------
            verticesLength = vertices.length;
            //搞清楚如果要将三维截面投影成二维的，到底是在哪个方向上投影啊--------------------
            let projectDir = "x";
            let biggestValue = Math.abs(_dir.x);
            if (biggestValue < Math.abs(_dir.y)) {
                biggestValue = Math.abs(_dir.y);
                projectDir = "y";
            }
            if (biggestValue < Math.abs(_dir.z)) {
                biggestValue = Math.abs(_dir.z);
                projectDir = "z";
            }
            //对截面的两端进行封口。--------------------------------------------------------
            let _sectionPointArrayStart = _HGMyUtils__WEBPACK_IMPORTED_MODULE_1__["HGMyUtils"].SplitVector3Array(_sectionPointsWithCut, projectDir);
            let triangles = earcut(_sectionPointArrayStart);
            //开始补起一一端的截面。-------------------------------------------------
            //---------------------------------------------------------------------
            //开始添加顶点数据。
            for (let i = 0; i < _sectionPointsWithCut.length; i++) {
                vertices.push(_sectionPointsWithCut[i]);
            }
            //开始添加face数据。
            if (_isUpdate == false) {
                for (let i = 0; i < triangles.length; i += 3) {
                    if (projectDir == "y") {
                        faces.push(new THREE.Face3(verticesLength + triangles[i], verticesLength + triangles[i + 1], verticesLength + triangles[i + 2]));
                    }
                    else {
                        faces.push(new THREE.Face3(verticesLength + triangles[i], verticesLength + triangles[i + 2], verticesLength + triangles[i + 1]));
                    }
                }
            }
            //再补另外一个端的截面。------------------------------------------------
            //--------------------------------------------------------------------
            verticesLength = vertices.length;
            //开始添加顶点数据。-----------------------------------
            for (let i = 0; i < _anotherSectionPointsWithCut.length; i++) {
                vertices.push(_anotherSectionPointsWithCut[i]);
            }
            //开始添加face数据。---------------------------------------
            if (_isUpdate == false) {
                for (let i = 0; i < triangles.length; i += 3) {
                    if (projectDir == "y") {
                        faces.push(new THREE.Face3(verticesLength + triangles[i], verticesLength + triangles[i + 2], verticesLength + triangles[i + 1]));
                    }
                    else {
                        faces.push(new THREE.Face3(verticesLength + triangles[i], verticesLength + triangles[i + 1], verticesLength + triangles[i + 2]));
                    }
                }
            }
            verticesLength = vertices.length;
        }
        //开始根据DI计算UV===========================================================================
        let uvScale = 650;
        //为了让贴图更多变化，产生两个随机值。-----------------------
        let randomX = Math.round(Math.random() * 1000);
        let randomY = Math.round(Math.random() * 1000);
        for (let i = 0; i < faces.length; i++) {
            let _1Vertex = vertices[faces[i].a];
            let _2Vertex = vertices[faces[i].b];
            let _3Vertex = vertices[faces[i].c];
            //横纹层板--------------------------------------------
            if (this.DI == 1) {
                uvs[0].push([
                    new THREE.Vector2((_1Vertex.z + _1Vertex.y + randomX) / uvScale * 2, (_1Vertex.x + randomY) / uvScale),
                    new THREE.Vector2((_2Vertex.z + _2Vertex.y + randomX) / uvScale * 2, (_2Vertex.x + randomY) / uvScale),
                    new THREE.Vector2((_3Vertex.z + _3Vertex.y + randomX) / uvScale * 2, (_3Vertex.x + randomY) / uvScale)
                ]);
            }
            //横纹背板---------------------------------------------
            else if (this.DI == 2) {
                uvs[0].push([
                    new THREE.Vector2((_1Vertex.y + randomX) / uvScale * 2, (_1Vertex.x + randomY) / uvScale),
                    new THREE.Vector2((_2Vertex.y + randomX) / uvScale * 2, (_2Vertex.x + randomY) / uvScale),
                    new THREE.Vector2((_3Vertex.y + randomX) / uvScale * 2, (_3Vertex.x + randomY) / uvScale)
                ]);
            }
            //竖纹背板---------------------------------------------
            else if (this.DI == 3) {
                uvs[0].push([
                    new THREE.Vector2((_1Vertex.x + randomX) / uvScale * 2, (_1Vertex.y + randomY) / uvScale),
                    new THREE.Vector2((_2Vertex.x + randomX) / uvScale * 2, (_2Vertex.y + randomY) / uvScale),
                    new THREE.Vector2((_3Vertex.x + randomX) / uvScale * 2, (_3Vertex.y + randomY) / uvScale)
                ]);
            }
            //竖纹侧板----------------------------------------------
            else if (this.DI == 4) {
                uvs[0].push([
                    new THREE.Vector2((_1Vertex.z + randomX) / uvScale * 2, (_1Vertex.y + randomY) / uvScale),
                    new THREE.Vector2((_2Vertex.z + randomX) / uvScale * 2, (_2Vertex.y + randomY) / uvScale),
                    new THREE.Vector2((_3Vertex.z + randomX) / uvScale * 2, (_3Vertex.y + randomY) / uvScale)
                ]);
            }
            //竖纹层板----------------------------------------------
            else if (this.DI == 5) {
                uvs[0].push([
                    new THREE.Vector2((_1Vertex.x + randomX) / uvScale * 2, (_1Vertex.z + randomY) / uvScale),
                    new THREE.Vector2((_2Vertex.x + randomX) / uvScale * 2, (_2Vertex.z + randomY) / uvScale),
                    new THREE.Vector2((_3Vertex.x + randomX) / uvScale * 2, (_3Vertex.z + randomY) / uvScale)
                ]);
            }
            //横纹侧板-----------------------------------------------
            else if (this.DI == 6) {
                uvs[0].push([
                    new THREE.Vector2((_1Vertex.y + randomX) / uvScale * 2, (_1Vertex.z + randomY) / uvScale),
                    new THREE.Vector2((_2Vertex.y + randomX) / uvScale * 2, (_2Vertex.z + randomY) / uvScale),
                    new THREE.Vector2((_3Vertex.y + randomX) / uvScale * 2, (_3Vertex.z + randomY) / uvScale)
                ]);
            }
        }
        if (_isUpdate == false) {
            let geom = new THREE.Geometry();
            geom.vertices = vertices;
            geom.faces = faces;
            geom.faceVertexUvs = uvs;
            geom.computeFaceNormals();
            //geom.mergeVertices();
            this.mesh = new THREE.Mesh(geom);
            //假如JX等于3，要对模型进行旋转处理。----------------------------
            if (this.JXState.rotateByYAxis == true) {
                let _modelRotation = this.x2dInputParamsValueKeyValues[0].value;
                if (this.sectionPointsFormular.shapeDir == "YZ") {
                    this.mesh.rotation.z = _modelRotation * Math.PI / 180;
                }
                if (this.sectionPointsFormular.shapeDir == "XY") {
                    this.mesh.rotation.x = _modelRotation * Math.PI / 180;
                }
                if (this.sectionPointsFormular.shapeDir == "XZ") {
                    this.mesh.rotation.x = _modelRotation * Math.PI / 180;
                }
            }
            //假如JX等于4，要对模型进行旋转处理。----------------------------
            if (this.JXState.rotateByXAxis == true) {
                let _modelRotation = this.x2dInputParamsValueKeyValues[0].value;
                if (this.sectionPointsFormular.shapeDir == "XY") {
                    this.mesh.rotation.z = _modelRotation * Math.PI / 180;
                }
            }
        }
        else {
            //更新模型的顶点。----------------------------------------------------------------
            for (var i = 0; i < this.mesh.geometry.vertices.length; i++) {
                this.mesh.geometry.vertices[i].copy(vertices[i]);
            }
            this.mesh.geometry.verticesNeedUpdate = true;
            //更新模型的UV。------------------------------------------------------------------
            for (var i = 0; i < uvs.length; i++) {
                for (var j = 0; j < uvs[i].length; j++) {
                    for (var k = 0; k < this.mesh.geometry.faceVertexUvs[i][j].length; k++) {
                        this.mesh.geometry.faceVertexUvs[i][j][k].copy(uvs[i][j][k]);
                    }
                }
            }
            this.mesh.geometry.uvsNeedUpdate = true;
        }
    }
    //把x2d的L和W都求出来。-----------------------------------------------------------------------
    //这里面还做了把圆弧转成点。
    //做百叶床的平铺。
    CountPointsVariable(_L, _W) {
        let sectionPoints = [];
        for (let i = 0; i < this.sectionPointsFormular.points.length; i++) {
            let thePoint = {};
            thePoint.type = this.sectionPointsFormular.points[i].type;
            thePoint.radiusString = this.sectionPointsFormular.points[i].radius;
            thePoint.angle = parseInt(this.sectionPointsFormular.points[i].angle);
            thePoint.startAngle = parseInt(this.sectionPointsFormular.points[i].startAngle);
            thePoint.xyString = []; //所有的坐标，但是里面都是字符串的
            thePoint.xy = []; //所有的坐标，里面都是数字的。
            thePoint.xyString.push(this.sectionPointsFormular.points[i].xy[0]);
            thePoint.xyString.push(this.sectionPointsFormular.points[i].xy[1]);
            //把里面的L和W参数都替换掉。-----------------------------------------------------------
            for (let j = 0; j < thePoint.xyString.length; j++) {
                thePoint.xyString[j] = _HGMyUtils__WEBPACK_IMPORTED_MODULE_1__["HGMyUtils"].ReplaceAll(thePoint.xyString[j], "L", _L);
                thePoint.xyString[j] = _HGMyUtils__WEBPACK_IMPORTED_MODULE_1__["HGMyUtils"].ReplaceAll(thePoint.xyString[j], "W", _W);
            }
            //把半径也替换一下。-------------------------------------------------------------------
            if (thePoint.type == "Arc") {
                thePoint.radiusString = _HGMyUtils__WEBPACK_IMPORTED_MODULE_1__["HGMyUtils"].ReplaceAll(thePoint.radiusString, "L", _L);
                thePoint.radiusString = _HGMyUtils__WEBPACK_IMPORTED_MODULE_1__["HGMyUtils"].ReplaceAll(thePoint.radiusString, "W", _W);
            }
            //使用板件的参数0，参数1，参数2，参数3等把CA CB CC CD替换掉。----------------------------
            for (let j = 0; j < thePoint.xyString.length; j++) {
                for (let k = 0; k < this.x2dInputParamsValueKeyValues.length; k++) {
                    let index = this.x2dInputParamsValueKeyValues[k].index;
                    let value = this.x2dInputParamsValueKeyValues[k].value;
                    thePoint.xyString[j] = _HGMyUtils__WEBPACK_IMPORTED_MODULE_1__["HGMyUtils"].ReplaceAll(thePoint.xyString[j], "C" + this.Alphabet[index], value);
                }
            }
            if (thePoint.type == "Arc") {
                for (let k = 0; k < this.x2dInputParamsValueKeyValues.length; k++) {
                    let index = this.x2dInputParamsValueKeyValues[k].index;
                    let value = this.x2dInputParamsValueKeyValues[k].value;
                    thePoint.radiusString = _HGMyUtils__WEBPACK_IMPORTED_MODULE_1__["HGMyUtils"].ReplaceAll(thePoint.radiusString, "C" + this.Alphabet[index], value);
                }
            }
            //有一些不规范的情况，就是还有残余的CA CB CC CD CE，最后一步使用0来替换掉。----------------
            for (let j = 0; j < thePoint.xyString.length; j++) {
                for (let k = 0; k < this.Alphabet.length; k++) {
                    thePoint.xyString[j] = _HGMyUtils__WEBPACK_IMPORTED_MODULE_1__["HGMyUtils"].ReplaceAll(thePoint.xyString[j], "C" + this.Alphabet[k], "0");
                }
            }
            if (thePoint.type == "Arc") {
                for (let k = 0; k < this.Alphabet.length; k++) {
                    thePoint.radiusString = _HGMyUtils__WEBPACK_IMPORTED_MODULE_1__["HGMyUtils"].ReplaceAll(thePoint.radiusString, "C" + this.Alphabet[k], "0");
                }
            }
            for (let j = 0; j < thePoint.xyString.length; j++) {
                thePoint.xy.push(eval(thePoint.xyString[j]));
            }
            if (thePoint.type == "Arc") {
                thePoint.radius = eval(thePoint.radiusString);
            }
            sectionPoints.push(thePoint);
        }
        //先把半径是0的圆弧去掉，因为没有任何意义。=====================================
        let zeroRadiusIndex = [];
        for (let i = 0; i < sectionPoints.length; i++) {
            if (sectionPoints[i].type == "Arc") {
                if (sectionPoints[i].radius == 0) {
                    zeroRadiusIndex.push(i);
                }
            }
        }
        var sectionPointsWithoutZeroRadius = [];
        for (let i = 0; i < sectionPoints.length; i++) {
            if (zeroRadiusIndex.indexOf(i) == -1) {
                sectionPointsWithoutZeroRadius.push(sectionPoints[i]);
            }
        }
        //把重复的顶点先删除掉。======================================================
        let deleteIndex = [];
        for (let i = 0; i < sectionPointsWithoutZeroRadius.length; i++) {
            let nextI = i + 1;
            if (nextI == sectionPointsWithoutZeroRadius.length) {
                nextI = 0;
            }
            if ((sectionPointsWithoutZeroRadius[i].xy[0] == sectionPointsWithoutZeroRadius[nextI].xy[0]) && (sectionPointsWithoutZeroRadius[i].xy[1] == sectionPointsWithoutZeroRadius[nextI].xy[1])) {
                if ((sectionPointsWithoutZeroRadius[i].type == "Point") && (sectionPointsWithoutZeroRadius[nextI].type == "Point")) {
                    deleteIndex.push(nextI);
                }
            }
        }
        let newSectionPoints = [];
        for (let i = 0; i < sectionPointsWithoutZeroRadius.length; i++) {
            if (deleteIndex.indexOf(i) == -1) {
                newSectionPoints.push(sectionPointsWithoutZeroRadius[i]);
            }
        }
        //如果所有的点都是重叠在一起的，那么程序没必要再往下跑了，直接返回null。----------------------
        if (newSectionPoints.length == 0) {
            return [];
        }
        //开始把Arc转换成Points----------------------------------------------------
        let xyPoints = [];
        for (let i = 0; i < newSectionPoints.length; i++) {
            if (newSectionPoints[i].type == "Point") {
                xyPoints.push(newSectionPoints[i].xy);
            }
            else if (newSectionPoints[i].type == "Arc") {
                let startAngle = (540 - parseInt(newSectionPoints[i].startAngle)) % 360;
                let startX = Math.cos(THREE.Math.degToRad(startAngle));
                let startY = Math.sin(THREE.Math.degToRad(startAngle));
                let rotateCenterDir = [startX, startY];
                let xPos = newSectionPoints[i].xy[0];
                let yPos = newSectionPoints[i].xy[1];
                let radius = newSectionPoints[i].radius;
                let angle = newSectionPoints[i].angle;
                let rotateCenterPoint = [xPos + rotateCenterDir[0] * radius, yPos + rotateCenterDir[1] * radius];
                let slice = -angle / 10;
                let rotateDir = [-rotateCenterDir[0] * radius, -rotateCenterDir[1] * radius];
                for (let i = 0; i <= 9; i++) {
                    let oneDir = _HGMyUtils__WEBPACK_IMPORTED_MODULE_1__["HGMyUtils"].TurnDeg(rotateDir, THREE.Math.degToRad(slice * (i + 1)));
                    xyPoints.push([rotateCenterPoint[0] + oneDir[0], rotateCenterPoint[1] + oneDir[1]]);
                }
            }
        }
        //顺逆时针判断方法2=============================================================================
        let area = 0;
        for (var i = 0; i < xyPoints.length; i++) {
            let j = (i + 1) % xyPoints.length;
            area += xyPoints[i][0] * xyPoints[j][1];
            area -= xyPoints[j][0] * xyPoints[i][1];
            // console.log(area);
        }
        if (area > 0) {
            xyPoints.reverse();
        }
        //处理镜像======================================================================
        if (this.JXState.verticalMirror == true) {
            for (let i = 0; i < xyPoints.length; i++) {
                xyPoints[i][1] = _W - xyPoints[i][1];
            }
        }
        if (this.JXState.horizontalMirror == true) {
            for (let i = 0; i < xyPoints.length; i++) {
                xyPoints[i][0] = _L - xyPoints[i][0];
            }
        }
        let newXyPoints;
        //是否要做百叶窗那样的平铺效果？？
        if (this.sectionPointsFormular.dj != 0) {
            //百叶窗总共弄多少页？
            let _howMangPage = this.plate_height / this.sectionPointsFormular.barH;
            newXyPoints = this.SplitSectionPoints(xyPoints, this.sectionPointsFormular.dj, _howMangPage);
        }
        else {
            newXyPoints = [xyPoints];
        }
        //把二维的顶点转换成三维的顶点。==============================================
        let returnPoints = [];
        for (let i = 0; i < newXyPoints.length; i++) {
            let oneReturnPoints = [];
            for (let j = 0; j < newXyPoints[i].length; j++) {
                if (this.sectionPointsFormular.shapeDir == "YZ") {
                    oneReturnPoints.push([0, newXyPoints[i][j][0], newXyPoints[i][j][1]]);
                }
                else if (this.sectionPointsFormular.shapeDir == "XY") {
                    oneReturnPoints.push([newXyPoints[i][j][0], newXyPoints[i][j][1], 0]);
                }
                else if (this.sectionPointsFormular.shapeDir == "XZ") {
                    oneReturnPoints.push([newXyPoints[i][j][0], 0, newXyPoints[i][j][1]]);
                }
            }
            returnPoints.push(oneReturnPoints);
        }
        return returnPoints;
    }
    //把截面的点分割出多几份，用来做百叶窗之类的。--------------------------------------------------
    //_dir代表在哪个方向上分割？
    //_howMany代表分几份？
    SplitSectionPoints(_sectionPoint, _dir, _howMany) {
        let sectionPointList = [];
        if (_dir == 2) {
            let _numFloorHeight = this.plate_height / _howMany;
            for (let i = 0; i < _howMany; i++) {
                let _newScectionPointList = [];
                for (let j = 0; j < _sectionPoint.length; j++) {
                    let _oneSectionPointY = _sectionPoint[j][1] / _howMany;
                    let _newOneSectionPoint = [
                        _sectionPoint[j][0],
                        _numFloorHeight * i + _oneSectionPointY
                    ];
                    _newScectionPointList.push(_newOneSectionPoint);
                }
                sectionPointList.push(_newScectionPointList);
            }
        }
        // console.log(sectionPointList);
        return sectionPointList;
    }
}
HGLOFT.ctorParameters = () => [
    { type: _HGDataServer__WEBPACK_IMPORTED_MODULE_0__["HGDataServer"] },
    { type: Number },
    { type: Number },
    { type: Number },
    { type: Number },
    { type: _HGStruct__WEBPACK_IMPORTED_MODULE_2__["x2dRawDatas"] },
    { type: undefined },
    { type: String },
    null
];


/***/ }),

/***/ "./src/app/three/classes/HGModel/HGMapResourcesPreloader.ts":
/*!******************************************************************!*\
  !*** ./src/app/three/classes/HGModel/HGMapResourcesPreloader.ts ***!
  \******************************************************************/
/*! exports provided: HGMapResourcesPreloader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HGMapResourcesPreloader", function() { return HGMapResourcesPreloader; });
/* harmony import */ var _HGMyUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./HGMyUtils */ "./src/app/three/classes/HGModel/HGMyUtils.ts");
/* harmony import */ var _MyUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../MyUtil */ "./src/app/three/classes/MyUtil.ts");
/* harmony import */ var _HGDataServer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./HGDataServer */ "./src/app/three/classes/HGModel/HGDataServer.ts");
/* harmony import */ var _HGStruct__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./HGStruct */ "./src/app/three/classes/HGModel/HGStruct.ts");




class HGMapResourcesPreloader {
    constructor(_dataServer) {
        this.modelWantedX2d = [];
        this.modelWantedMt2 = [];
        this.modelWanted3dlst = []; //需要用到的模型数组文件。
        this.x2dDatas = [];
        this._3dlstDatas = [];
        //从mt2文件读取出来的所有的材质数据，加载多次map文件的材质都会在这里累加。
        this.materialDatas = [];
        this.dataServer = _dataServer;
    }
    ClearData() {
        //先把数组清空一下吧。------------------------------------------------------------
        this.modelWantedX2d = [];
        this.modelWantedMt2 = [];
        this.modelWanted3dlst = [];
    }
    /**
        * 查找这个map文件用到的所有的x2d文件和mt2文件，能够剔除重复项=============================================
        * @param _product
        * @param _x2dFiles
        */
    FindX2dAndMt2Files(_product) {
        //我的模块。-----------------------------------------------------------------------
        let myModule = _product["我的模块"];
        //如果产品下没有我的模块，就拉倒算了。------------------------------------------------
        if (myModule == undefined) {
            return;
        }
        //我的模块下的产品。----------------------------------------------------------
        let _myModule_Product = myModule["产品"];
        if (_myModule_Product != undefined) {
            this.FindX2dAndMt2Files(_myModule_Product);
        }
        //我的模块下的模块。----------------------------------------------------------
        let _myModule_Modules = myModule["模块"];
        if (_myModule_Modules != undefined) {
            if (Array.isArray(_myModule_Modules) == false) {
                _myModule_Modules = [_myModule_Modules];
            }
            for (let i = 0; i < _myModule_Modules.length; i++) {
                //模块也有些需要被隐藏的。----------------------------------------------------
                let _myModule_Modules_ShowWay = _myModule_Modules[i]["_显示方式"];
                if (_myModule_Modules_ShowWay == 3) {
                    continue;
                }
                //模块下的产品。
                let myModule_Modules_Product = _myModule_Modules[i]["产品"];
                if (myModule_Modules_Product != undefined) {
                    this.FindX2dAndMt2Files(myModule_Modules_Product);
                }
            }
        }
        //我的模块下的板件。------------------------------------------------------------
        let _myModule_Plate = myModule["板件"];
        if (_myModule_Plate != undefined) {
            this.FindNeedFiles(_myModule_Plate);
        }
        //我的模块下的型材五金。-----------------------------------------------------------
        let _myModule_ProfileHardware = myModule["型材五金"];
        if (_myModule_ProfileHardware != undefined) {
            this.FindNeedFiles(_myModule_ProfileHardware);
        }
        //我的模块下的五金。----------------------------------------------------------------
        let _myModule_Hardwares = myModule["五金"];
        if (_myModule_Hardwares != undefined) {
            this.FindNeedFiles(_myModule_Hardwares);
        }
        //我的模块下的模块，有些板件标签被错误标记为了模块。----------------------------------------------------------------
        let _myModule_Error_Module = myModule["模块"];
        if (_myModule_Error_Module != undefined) {
            this.FindNeedFiles(_myModule_Error_Module);
        }
    }
    FindNeedFiles(_modelNodes) {
        //如果读取的不是数组，则转换成数组。------------------------------------------------
        if (Array.isArray(_modelNodes) == false) {
            _modelNodes = [_modelNodes];
        }
        //遍历每个板件或型材五金或五金-------------------------------------------------------------
        for (let i = 0; i < _modelNodes.length; i++) {
            let _ShowWay = _modelNodes[i]["_显示方式"];
            //如果这个模型都不用显示，那么根本不用预加载它的x2d文件和材质文件，直接跳过去好了啦。--------------------
            if (_ShowWay == 3) {
                continue;
            }
            let _Name = _modelNodes[i]["_名称"];
            if (this.dataServer.ignorNameList.indexOf(_Name) != -1) {
                continue;
            }
            //提取板件用到的x2d文件。-----------------------------------------------
            let _baseGraph = _modelNodes[i]["_基础图形"];
            if (_baseGraph != undefined) {
                let x2dFileName = _HGMyUtils__WEBPACK_IMPORTED_MODULE_0__["HGMyUtils"].ReplaceAll(_baseGraph, "::", "_");
                //保证需要的x2d文件不能重复。----------------------------------------
                if (this.modelWantedX2d.indexOf(x2dFileName) == -1) {
                    if (x2dFileName.trim().length != 0) {
                        this.modelWantedX2d.push(x2dFileName);
                    }
                }
            }
            //提取板件的材质。-------------------------------------------------------
            let _material = _modelNodes[i]["_颜色"];
            let _decorateType = _modelNodes[i]["_装饰类别"];
            let _x3dPath = _modelNodes[i]["_图片路径"];
            //如果材质就填个空字符串，我就当你是undefined。
            if (_material != undefined) {
                if (_material.trim().length == 0) {
                    _material = undefined;
                }
            }
            //如果x3d路径不填，就是个空字符串，我也认为它是undefined
            if (_x3dPath != undefined) {
                if (_x3dPath.trim().length == 0) {
                    _x3dPath = undefined;
                }
            }
            //下面这几个基础图形你可以不用提取他的材质。--------------------------------------
            let excludeBaseGraphp = ["BG::NULL", undefined];
            if (excludeBaseGraphp.indexOf(_baseGraph) == -1) {
                //有x3d的板件的材质后面再加载。----------------------------------------------
                if (_x3dPath == undefined) {
                    if (_material != undefined && _decorateType != undefined) {
                        let _long_plate_Material = _decorateType + "@#$" + _material;
                        if (this.modelWantedMt2.indexOf(_long_plate_Material) == -1) {
                            this.modelWantedMt2.push(_long_plate_Material);
                        }
                    }
                }
            }
            //开始提取3dlst文件。---------------------------------------------------
            let _3dlstPath = _modelNodes[i]["_图片路径"];
            if (_3dlstPath != undefined) {
                let _extensionName = _MyUtil__WEBPACK_IMPORTED_MODULE_1__["MyUtil"].getExtensionName(_3dlstPath);
                if (_extensionName == "3dlst") {
                    if (this.modelWanted3dlst.indexOf(_3dlstPath) == -1) {
                        this.modelWanted3dlst.push(_3dlstPath);
                    }
                }
            }
        }
    }
    /**
    * 这个函数是用来加载x2d文件的。==============================================================
    * @param _modelWantedX2d 这个map文件里用到的所有x2d文件，已经剔除重复的了。
    * @param _onX2dsAllLoaded 所有x2d文件加载好后的回调函数。
    */
    LoadX2dFiles(_onX2dsAllLoaded) {
        //剔除掉不需要的x2d文件。---------------------------------------------
        let unwantedX2dFiles = ["BG_NULL", "BG_SPACE", "BG_FRAMERECT", "0"];
        for (let i = 0; i < unwantedX2dFiles.length; i++) {
            _HGMyUtils__WEBPACK_IMPORTED_MODULE_0__["HGMyUtils"].RemoveItemInArray(this.modelWantedX2d, unwantedX2dFiles[i]);
        }
        //假如不需要加载任何的x2d文件，则直接调用回调函数。----------------------
        if (this.modelWantedX2d.length == 0) {
            _onX2dsAllLoaded();
        }
        //总共加载了几个x2d文件啊？--------------------------------------------
        let loadedX2dCount = 0;
        for (let i = 0; i < this.modelWantedX2d.length; i++) {
            if (this.x2dDatas[this.modelWantedX2d[i]] == undefined) {
                let _x3dFilePath = this.dataServer.commonPath.x2dPath + this.modelWantedX2d[i] + ".x2d";
                this.dataServer.loader.fileLoader_GBK.load(_x3dFilePath, (txt) => {
                    let _x2djsonData = _HGMyUtils__WEBPACK_IMPORTED_MODULE_0__["HGMyUtils"].X2dParse(txt);
                    let _Graph = _x2djsonData.Graph;
                    let x2dData = new _HGStruct__WEBPACK_IMPORTED_MODULE_3__["x2dRawDatas"]();
                    //先看看这个x2d有没有Param属性。
                    if (_Graph._Param != undefined) {
                        let _x2d_Param = _HGMyUtils__WEBPACK_IMPORTED_MODULE_0__["HGMyUtils"].ReplaceAll(_Graph._Param, "[\\^]", "\"");
                        let _x2d_Param_json = JSON.parse(_x2d_Param);
                        //平铺模型单个的高度。模型的总高除以这个数就是模型平铺的个数。
                        let _barH = parseFloat(_x2d_Param_json.BarH);
                        //模型的平铺方式。
                        let _DJ = parseInt(_x2d_Param_json.DJ);
                        x2dData.barH = _barH;
                        x2dData.dj = _DJ;
                    }
                    let _PlaneXY = _Graph.PlaneXY;
                    let _PointXY = _PlaneXY.Point;
                    if (_PointXY != undefined) {
                        for (let j = 0; j < _PointXY.length; j++) {
                            let _xyX2dPoint = new _HGStruct__WEBPACK_IMPORTED_MODULE_3__["x2dPoint"]();
                            //_xyX2dPoint.xyz = [_PointXY[j]._X, _PointXY[j]._Y, "0"];
                            _xyX2dPoint.xy = [_PointXY[j]._X, _PointXY[j]._Y];
                            _xyX2dPoint.type = _PointXY[j].shape;
                            _xyX2dPoint.radius = _PointXY[j]._R;
                            _xyX2dPoint.angle = _PointXY[j]._Angle;
                            _xyX2dPoint.startAngle = _PointXY[j]._StartAngle;
                            x2dData.points.push(_xyX2dPoint);
                        }
                        x2dData.shapeDir = "XY";
                    }
                    let _PlaneYZ = _Graph.PlaneYZ;
                    let _PointYZ = _PlaneYZ.Point;
                    if (_PointYZ != undefined) {
                        for (let j = 0; j < _PointYZ.length; j++) {
                            let _yzX2dPoint = new _HGStruct__WEBPACK_IMPORTED_MODULE_3__["x2dPoint"]();
                            //_yzX2dPoint.xyz = ["0", _PointYZ[j]._X, _PointYZ[j]._Y];
                            _yzX2dPoint.xy = [_PointYZ[j]._X, _PointYZ[j]._Y];
                            _yzX2dPoint.type = _PointYZ[j].shape;
                            _yzX2dPoint.radius = _PointYZ[j]._R;
                            _yzX2dPoint.angle = _PointYZ[j]._Angle;
                            _yzX2dPoint.startAngle = _PointYZ[j]._StartAngle;
                            x2dData.points.push(_yzX2dPoint);
                        }
                        x2dData.shapeDir = "YZ";
                    }
                    let _PlaneXZ = _Graph.PlaneXZ;
                    let _PointXZ = _PlaneXZ.Point;
                    if (_PointXZ != undefined) {
                        for (let j = 0; j < _PointXZ.length; j++) {
                            let _xzX2dPoint = new _HGStruct__WEBPACK_IMPORTED_MODULE_3__["x2dPoint"]();
                            //_xzX2dPoint.xyz = [_PointXZ[j]._X, "0", _PointXZ[j]._Y];
                            _xzX2dPoint.xy = [_PointXZ[j]._X, _PointXZ[j]._Y];
                            _xzX2dPoint.type = _PointXZ[j].shape;
                            _xzX2dPoint.radius = _PointXZ[j]._R;
                            _xzX2dPoint.angle = _PointXZ[j]._Angle;
                            _xzX2dPoint.startAngle = _PointXZ[j]._StartAngle;
                            x2dData.points.push(_xzX2dPoint);
                        }
                        x2dData.shapeDir = "XZ";
                    }
                    this.x2dDatas[this.modelWantedX2d[i]] = x2dData;
                    // if(_modelWantedX2d[i]=="BG_DOORRECT"){
                    //     console.log(x2dData);
                    // }
                    loadedX2dCount++;
                    if (loadedX2dCount == this.modelWantedX2d.length) {
                        _onX2dsAllLoaded();
                    }
                }, null, 
                //当x2d文件压根就找不到的时候。----------------------------------------------
                () => {
                    console.log("以下x2d文件找不到:" + _x3dFilePath);
                    loadedX2dCount++;
                    if (loadedX2dCount == this.modelWantedX2d.length) {
                        _onX2dsAllLoaded();
                    }
                });
            }
            //如果该x2d文件前面早已经加载好了，就往下面这里执行。========================================
            else {
                loadedX2dCount++;
                if (loadedX2dCount == this.modelWantedX2d.length) {
                    _onX2dsAllLoaded();
                }
            }
        }
    }
    /**
     * 用来加载mt2文件的自定义函数。==============================================================
     * @param _modelWantedMt2 当前map文件用到的所有mtl文件。--------------------------------
     * @param _onMt2sAllLoaded 当所有的mt2文件加载好后的回调函数。----------------------------
     */
    LoadMt2Files(_onMt2sAllLoaded) {
        //如果需要加载的材质列表为空，那么就直接调用回调好了。
        if (this.modelWantedMt2.length == 0) {
            _onMt2sAllLoaded();
        }
        //总共加载了几个材质文件？-----------
        let _loadedMaterialCount = 0;
        for (let i = 0; i < this.modelWantedMt2.length; i++) {
            let allDatas = this.modelWantedMt2[i].split("@#$");
            //装饰类型。-------------------
            let _decorateType = allDatas[0];
            //材质。------------------------
            let _materialName = allDatas[1];
            this.LoadMt2DataAndAddToList(_materialName, false, null, () => {
                _loadedMaterialCount++;
                if (_loadedMaterialCount == this.modelWantedMt2.length) {
                    _onMt2sAllLoaded();
                }
            }, (_lostPath) => {
                console.log("找不到下面这个mt2文件啊！！" + _lostPath);
                _loadedMaterialCount++;
                if (_loadedMaterialCount == this.modelWantedMt2.length) {
                    _onMt2sAllLoaded();
                }
            });
        }
    }
    /**
     * 把当前模型所有需要用到的3dlst文件都先加载进来。================================
     * @param _modelWanted3dlst
     * @param _on3DlstAllLoaded
     */
    Load3dlstFiles(_on3DlstAllLoaded) {
        //假如这个文件压根不会用到3dlst文件，则直接调用回调。-------------------
        if (this.modelWanted3dlst.length == 0) {
            _on3DlstAllLoaded();
        }
        //总共加载了几个3dlst文件啊？--------------------------------------------
        let loaded3dlstCount = 0;
        for (let i = 0; i < this.modelWanted3dlst.length; i++) {
            if (this._3dlstDatas[this.modelWanted3dlst[i]] == undefined) {
                let _3dlstFilePath = this.dataServer.commonPath.basePath + this.modelWanted3dlst[i];
                this.dataServer.loader.fileLoader_GBK.load(_3dlstFilePath, (txt) => {
                    txt = txt.substr(0, txt.lastIndexOf("},") + 1) + "]";
                    this._3dlstDatas[this.modelWanted3dlst[i]] = JSON.parse(txt);
                    loaded3dlstCount++;
                    if (loaded3dlstCount == this.modelWanted3dlst.length) {
                        _on3DlstAllLoaded();
                    }
                }, null, 
                //当x2d文件压根就找不到的时候。----------------------------------------------
                () => {
                    console.log("以下3dlst文件找不到:" + _3dlstFilePath);
                    loaded3dlstCount++;
                    if (loaded3dlstCount == this.modelWanted3dlst.length) {
                        _on3DlstAllLoaded();
                    }
                });
            }
            //如果该x2d文件前面早已经加载好了，就往下面这里执行。========================================
            else {
                loaded3dlstCount++;
                if (loaded3dlstCount == this.modelWanted3dlst.length) {
                    _on3DlstAllLoaded();
                }
            }
        }
    }
    /**
    * 用来加载mt2文件用的自定义函数。============================================================
    */
    LoadMt2DataAndAddToList(_materialName, _isX3d, _inModel, _OnOneMatLoaded, _OnOneMatCatFind) {
        // console.log(_materialName);
        //如果材质库没有这个材质的话则新鲜读取。-----------------------------------
        if (this.materialDatas[_materialName] == undefined) {
            //因为它材质名居然有#号，这个出现在url里就是非法的，要将其替换成%23。
            let _materialPathName = _HGMyUtils__WEBPACK_IMPORTED_MODULE_0__["HGMyUtils"].ReplaceAll(_materialName, "#", "%23");
            let _fullPath = this.dataServer.commonPath.mt2Path + _materialPathName + ".mt2";
            //这个是用来告诉别人丢失的路径的。
            let _lostPath = this.dataServer.commonPath.mt2Path + _materialName + ".mt2";
            // console.log(_materialName);
            this.dataServer.loader.fileLoader_GBK.load(_fullPath, (txt) => {
                let _matJson = this.dataServer.x2js.xml_str2json(txt);
                let _diffuseString = _matJson.Material.Item._Diffuse;
                let _SpecularString = _matJson.Material.Item._Specular;
                let _EmissionString = _matJson.Material.Item._Emission;
                let _ShinessString = _matJson.Material.Item._Shiness;
                let _DiffuseMapURL = _matJson.Material.Item._Image;
                let _materialIni = _matJson.Material.Item._XYTexture;
                let _fullDiffuseMapURL = this.dataServer.commonPath.texturePath + _HGMyUtils__WEBPACK_IMPORTED_MODULE_0__["HGMyUtils"].ReplaceAll(_DiffuseMapURL, "[\\\\]", "/");
                let _diffuseMap;
                if (_fullDiffuseMapURL != undefined) {
                    _diffuseMap = this.dataServer.loader.textureLoader.load(_fullDiffuseMapURL);
                    _diffuseMap.wrapS = THREE.RepeatWrapping;
                    _diffuseMap.wrapT = THREE.RepeatWrapping;
                }
                let _theMat = {
                    color: _HGMyUtils__WEBPACK_IMPORTED_MODULE_0__["HGMyUtils"].string2Color(_diffuseString),
                    specular: _HGMyUtils__WEBPACK_IMPORTED_MODULE_0__["HGMyUtils"].string2Color(_SpecularString),
                    emissive: _HGMyUtils__WEBPACK_IMPORTED_MODULE_0__["HGMyUtils"].string2Color(_EmissionString),
                    shininess: parseFloat(_ShinessString),
                    map: _diffuseMap,
                    mapSrc: _fullDiffuseMapURL,
                    isX3d: _isX3d,
                    iniName: _materialIni
                };
                this.materialDatas[_materialName] = _theMat;
                _OnOneMatLoaded(_theMat, _inModel);
            }, null, 
            //当某个材质文件找不到的时候触发的函数。--------------------
            () => {
                _OnOneMatCatFind(_lostPath, _inModel);
            });
        }
        //如果是从材质库读取文件的话。----------------------------------------
        else {
            let _matData = this.materialDatas[_materialName];
            _matData.isX3d = _isX3d;
            _OnOneMatLoaded(_matData, _inModel);
        }
    }
}
HGMapResourcesPreloader.ctorParameters = () => [
    { type: _HGDataServer__WEBPACK_IMPORTED_MODULE_2__["HGDataServer"] }
];


/***/ }),

/***/ "./src/app/three/classes/HGModel/HGMyUtils.ts":
/*!****************************************************!*\
  !*** ./src/app/three/classes/HGModel/HGMyUtils.ts ***!
  \****************************************************/
/*! exports provided: HGMyUtils */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HGMyUtils", function() { return HGMyUtils; });
class HGMyUtils {
    //把字符串里的所有指定字符替换成另外一个字符。=====================================
    //_formerString要被替换的字符串。
    //_beReplaceString字符串里要被替换的字符。
    //_replaceString要被替换成的字符。
    static ReplaceAll(_formerString, _beReplaceString, _replaceString) {
        if (typeof _formerString != "string") {
            _formerString = _formerString + "";
        }
        return _formerString.replace(new RegExp(_beReplaceString, "gm"), _replaceString);
    }
    static ClampValue(_value, _min, _max) {
        let returnValue = Math.max(_value, _min);
        returnValue = Math.min(returnValue, _max);
        return returnValue;
    }
    //在一个数组里删除特定元素的方法。
    static RemoveItemInArray(array, item) {
        let index = array.indexOf(item);
        if (index > -1) {
            array.splice(index, 1);
        }
    }
    //获取get请求里的参数。=========================================
    static GetQueryString(name) {
        var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)");
        var r = window.location.search.substr(1).match(reg);
        if (r != null) {
            return encodeURI(r[2]);
        }
        return null;
    }
    //把Vector3的数组都拆开，让它成为一个个数的一个大数组，方便做而且运算。
    static SplitVector3Array(_Vector3Array, _projectDir) {
        let returnArray = [];
        let _wantDir = ["x", "y", "z"];
        this.RemoveItemInArray(_wantDir, _projectDir);
        for (let i = 0; i < _Vector3Array.length; i++) {
            for (let j = 0; j < _wantDir.length; j++) {
                returnArray.push(_Vector3Array[i][_wantDir[j]]);
            }
        }
        return returnArray;
    }
    static X2dParse(_xmlTxt) {
        //最终返回的对象。----------------
        let returnObj = {};
        let xmlDoc;
        //正常浏览器。-------------------
        if (DOMParser) {
            let parser = new DOMParser();
            xmlDoc = parser.parseFromString(_xmlTxt, "text/xml");
        }
        //IE垃圾浏览器。-----------------
        else {
            xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
            xmlDoc.async = false;
            xmlDoc.loadXML(_xmlTxt);
        }
        let GraphNode = xmlDoc.getElementsByTagName("Graph")[0];
        returnObj.Graph = {};
        for (let i = 0; i < GraphNode.attributes.length; i++) {
            returnObj.Graph["_" + GraphNode.attributes[i].name] = GraphNode.attributes[i].value;
        }
        //获取PlaneXY的数据。-------------------------------------------
        returnObj.Graph.PlaneXY = {};
        let PlaneXY = GraphNode.getElementsByTagName("PlaneXY")[0];
        for (let i = 0; i < PlaneXY.attributes.length; i++) {
            returnObj.Graph.PlaneXY["_" + PlaneXY.attributes[i].name] = PlaneXY.attributes[i].value;
        }
        if (PlaneXY.children.length > 0) {
            returnObj.Graph.PlaneXY.Point = [];
            for (let i = 0; i < PlaneXY.children.length; i++) {
                let onePoint = {};
                for (let j = 0; j < PlaneXY.children[i].attributes.length; j++) {
                    onePoint["_" + PlaneXY.children[i].attributes[j].name] = PlaneXY.children[i].attributes[j].value;
                }
                onePoint.shape = PlaneXY.children[i].localName;
                returnObj.Graph.PlaneXY.Point.push(onePoint);
            }
        }
        //获取PlaneXZ的数据。-------------------------------------------
        returnObj.Graph.PlaneXZ = {};
        let PlaneXZ = GraphNode.getElementsByTagName("PlaneXZ")[0];
        for (let i = 0; i < PlaneXZ.attributes.length; i++) {
            returnObj.Graph.PlaneXZ["_" + PlaneXZ.attributes[i].name] = PlaneXZ.attributes[i].value;
        }
        if (PlaneXZ.children.length > 0) {
            returnObj.Graph.PlaneXZ.Point = [];
            for (let i = 0; i < PlaneXZ.children.length; i++) {
                let onePoint = {};
                for (let j = 0; j < PlaneXZ.children[i].attributes.length; j++) {
                    onePoint["_" + PlaneXZ.children[i].attributes[j].name] = PlaneXZ.children[i].attributes[j].value;
                }
                onePoint.shape = PlaneXZ.children[i].localName;
                returnObj.Graph.PlaneXZ.Point.push(onePoint);
            }
        }
        //获取PlaneYZ的数据。-------------------------------------------
        returnObj.Graph.PlaneYZ = {};
        let PlaneYZ = GraphNode.getElementsByTagName("PlaneYZ")[0];
        for (let i = 0; i < PlaneYZ.attributes.length; i++) {
            returnObj.Graph.PlaneYZ["_" + PlaneYZ.attributes[i].name] = PlaneYZ.attributes[i].value;
        }
        if (PlaneYZ.children.length > 0) {
            returnObj.Graph.PlaneYZ.Point = [];
            for (let i = 0; i < PlaneYZ.children.length; i++) {
                let onePoint = {};
                for (let j = 0; j < PlaneYZ.children[i].attributes.length; j++) {
                    onePoint["_" + PlaneYZ.children[i].attributes[j].name] = PlaneYZ.children[i].attributes[j].value;
                }
                onePoint.shape = PlaneYZ.children[i].localName;
                returnObj.Graph.PlaneYZ.Point.push(onePoint);
            }
        }
        return returnObj;
    }
    //二维向量旋转一定角度后的新朝向=========================================================
    static TurnDeg(_vec3, _angle) {
        let _x = _vec3[0] * Math.cos(_angle) - _vec3[1] * Math.sin(_angle);
        let _y = _vec3[0] * Math.sin(_angle) + _vec3[1] * Math.cos(_angle);
        return [_x, _y];
    }
    //把颜色字符串转换成Color对象
    static string2Color(_colorString) {
        let _colorArray = _colorString.split(",");
        let _r = parseInt(_colorArray[0]) / 255;
        let _g = parseInt(_colorArray[1]) / 255;
        let _b = parseInt(_colorArray[2]) / 255;
        let _a = parseInt(_colorArray[3]) / 255;
        return new THREE.Color(_r, _g, _b);
    }
    /**
     * 返回_min(包含)和max(不包含)之间的一个整数。
     * @param _min 区间的最小值。
     * @param _max 区间的最大值。
    */
    static randomRange(_min, _max) {
        let cha = _max - _min;
        return Math.floor(_min + cha * Math.random());
    }
    /**
         * 从一个路径中获取到文件的路径。
         * @param _path
         */
    static getPath(_path) {
        let _pos = _path.lastIndexOf("\\");
        let _extename = _path.substring(0, _pos + 1);
        return _extename;
    }
    static getFileName(_path) {
        let _pos = _path.lastIndexOf("/");
        let _dotPos = _path.lastIndexOf(".");
        let _fileName = _path.substring(_pos + 1, _dotPos);
        return _fileName;
    }
    //带入LPH和自定义变量进行运算。==============================================
    static CountLPHAndVariable(formular, _LPH, _params) {
        if (formular == undefined) {
            return 0;
        }
        let newKey = [];
        for (let key in _params) {
            newKey.push(key);
        }
        //保证名字长的key排在前面。---------------------------------------
        newKey.sort();
        newKey.reverse();
        for (let i = 0; i < newKey.length; i++) {
            let _beReplaceString = newKey[i].replace("$", "[\\$]");
            formular = HGMyUtils.ReplaceAll(formular, _beReplaceString, parseInt(_params[newKey[i]]) + "");
        }
        for (let key in _LPH) {
            formular = HGMyUtils.ReplaceAll(formular, key, _LPH[key]);
        }
        //居然会出现-0-18的公式 。这个就是针对这些低级错误来设计的-----------------------
        if (formular.substr(formular.length - 1) == "-") {
            formular = formular.substr(0, formular.length - 1);
        }
        //居然还会出现++两个加号？我服了日！
        formular = HGMyUtils.ReplaceAll(formular, "\\+\\+", "\+");
        //有些连公式都不写的，我就认为它要的值是0。
        if (formular.trim().length == 0) {
            return 0;
        }
        else {
            return eval(formular);
        }
    }
}


/***/ }),

/***/ "./src/app/three/classes/HGModel/HGShaderPreloader.ts":
/*!************************************************************!*\
  !*** ./src/app/three/classes/HGModel/HGShaderPreloader.ts ***!
  \************************************************************/
/*! exports provided: HGShaderPreloader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HGShaderPreloader", function() { return HGShaderPreloader; });
/* harmony import */ var _HGDataServer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./HGDataServer */ "./src/app/three/classes/HGModel/HGDataServer.ts");
/*
 作者：张建。
 类说明：这个是用来做shader预加载用的，并且里面存放了大量的材质。
*/

class HGShaderPreloader {
    constructor(_dataServer) {
        this.loadCount = 0; //总共加载了几个glsl脚本？
        this.needLoadedCount = 0; //总共需要加载几个glsl脚本？
        this.allShaderMatDatas = []; //所有构成shaderMaterial的素材都在这里。
        this.dataServer = _dataServer;
    }
    //开始加载shader的自定义函数。
    StartLoadShader(_onAllShaderLoaded) {
        this.dataServer.loader.fileLoader.load("./assets/CustomShader/materialList.json", (txt) => {
            let _materialListJson = JSON.parse(txt);
            this.needLoadedCount = _materialListJson.length * 2;
            for (let i = 0; i < _materialListJson.length; i++) {
                let _shaderName = _materialListJson[i].materialName;
                if (this.allShaderMatDatas[_shaderName] == undefined) {
                    this.allShaderMatDatas[_shaderName] = {};
                }
                this.allShaderMatDatas[_shaderName].includeIni = _materialListJson[i].includeIni;
                this.allShaderMatDatas[_shaderName].detailProperties = _materialListJson[i].detailProperties;
                if (this.allShaderMatDatas[_shaderName].detailProperties != undefined) {
                    for (let j = 0; j < this.allShaderMatDatas[_shaderName].detailProperties.length; j++) {
                        for (let k = 0; k < this.allShaderMatDatas[_shaderName].detailProperties[j].nameList.length; k++) {
                            let _detailMatName = this.allShaderMatDatas[_shaderName].detailProperties[j].nameList[k];
                            if (this.allShaderMatDatas[_shaderName].includeIni.indexOf(_detailMatName) == -1) {
                                this.allShaderMatDatas[_shaderName].includeIni.push(_detailMatName);
                            }
                        }
                    }
                }
                let _shaderPath = _materialListJson[i].shaderPath;
                let _vertexShader = _shaderPath + "/vertex.glsl";
                let _fragmentShader = _shaderPath + "/fragment.glsl";
                this.dataServer.loader.fileLoader.load(_vertexShader, (txt) => {
                    this.OnGLSLTxtLoad(_shaderName, "vertex", txt, _onAllShaderLoaded);
                });
                this.dataServer.loader.fileLoader.load(_fragmentShader, (txt) => {
                    this.OnGLSLTxtLoad(_shaderName, "fragment", txt, _onAllShaderLoaded);
                });
            }
        });
    }
    //当顶点着色器代码或片元着色器的代码加载好了调用的函数。
    OnGLSLTxtLoad(_shaderName, _type, _glslTxt, _onAllShaderLoaded) {
        this.loadCount++;
        if (_type == "fragment") {
            this.allShaderMatDatas[_shaderName].fragment = _glslTxt;
        }
        if (_type == "vertex") {
            this.allShaderMatDatas[_shaderName].vertex = _glslTxt;
        }
        //如果加载的脚本达到了需要加载的总数，则调用回调函数代表所有的txt都加载好了。
        if (this.loadCount == this.needLoadedCount) {
            _onAllShaderLoaded();
            // console.log(this.allShaderMatDatas);
        }
    }
}
HGShaderPreloader.ctorParameters = () => [
    { type: _HGDataServer__WEBPACK_IMPORTED_MODULE_0__["HGDataServer"] }
];


/***/ }),

/***/ "./src/app/three/classes/HGModel/HGSingleModelHandler.ts":
/*!***************************************************************!*\
  !*** ./src/app/three/classes/HGModel/HGSingleModelHandler.ts ***!
  \***************************************************************/
/*! exports provided: HGSingleModelHandler */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HGSingleModelHandler", function() { return HGSingleModelHandler; });
/* harmony import */ var _HGMyUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./HGMyUtils */ "./src/app/three/classes/HGModel/HGMyUtils.ts");
/* harmony import */ var _HGLOFT__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./HGLOFT */ "./src/app/three/classes/HGModel/HGLOFT.ts");
/* harmony import */ var _HGDataServer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./HGDataServer */ "./src/app/three/classes/HGModel/HGDataServer.ts");
/* harmony import */ var _HGHardware__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./HGHardware */ "./src/app/three/classes/HGModel/HGHardware.ts");
/* harmony import */ var _HGmodelUtils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./HGmodelUtils */ "./src/app/three/classes/HGModel/HGmodelUtils.ts");
/* harmony import */ var _MyUtil__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../MyUtil */ "./src/app/three/classes/MyUtil.ts");






class HGSingleModelHandler {
    constructor(_dataServer) {
        this.dataServer = _dataServer;
    }
    HandleSingleModel(_modelNode, _myModule_Model, _LPH, _3dObj) {
        if (Array.isArray(_modelNode) == false) {
            _modelNode = [_modelNode];
        }
        //遍历每个板件--------------------------------------------------------
        for (let i = 0; i < _modelNode.length; i++) {
            let _ShowWay = _modelNode[i]["_显示方式"];
            //显示方式为3的时候，直接跳到下一次循环。--------------------
            if (_ShowWay == 3) {
                continue;
            }
            //获取这个板件的名称。-----------------------------------------------
            let _theName = _modelNode[i]["_名称"];
            if (this.dataServer.ignorNameList.indexOf(_theName) != -1) {
                continue;
            }
            //获取板件的ID号。
            let _GUID = _modelNode[i]["_GUID"];
            //这个板件是否已经存在了？------------------------------------------------------------
            let _hasAreadyHave = false;
            //如果板件已经有了，把那个板件获取到放到这个变量里。
            let _theAreadyHaveModel;
            //遍历_myModule_Model的所有子物体，看看是否已经存在了这个板件。--------------------------
            for (let j = 0; j < _myModule_Model.children.length; j++) {
                if (_myModule_Model.children[j].userData.Frequently_used_Properties != undefined) {
                    let _theID = _myModule_Model.children[j].userData.Frequently_used_Properties["ID号"];
                    if (_theID == _GUID) {
                        _hasAreadyHave = true;
                        _theAreadyHaveModel = _myModule_Model.children[j];
                        break;
                    }
                }
            }
            //获取参数0，参数1，参数2，参数3等。----------------------------
            let x2dInputParams = [];
            for (let key in _modelNode[i]) {
                if (key.indexOf("_参数") != -1) {
                    let inputParamsValue = _modelNode[i][key];
                    inputParamsValue = inputParamsValue.split(':')[1];
                    let newKey = key.replace("_", "");
                    x2dInputParams[newKey] = inputParamsValue;
                }
            }
            for (let key in x2dInputParams) {
                x2dInputParams[key] = _HGMyUtils__WEBPACK_IMPORTED_MODULE_0__["HGMyUtils"].CountLPHAndVariable(x2dInputParams[key], _LPH, _3dObj.userData.params);
            }
            let _width = _HGMyUtils__WEBPACK_IMPORTED_MODULE_0__["HGMyUtils"].CountLPHAndVariable(_modelNode[i]["_宽"], _LPH, _3dObj.userData.params);
            let _deep = _HGMyUtils__WEBPACK_IMPORTED_MODULE_0__["HGMyUtils"].CountLPHAndVariable(_modelNode[i]["_深"], _LPH, _3dObj.userData.params);
            let _height = _HGMyUtils__WEBPACK_IMPORTED_MODULE_0__["HGMyUtils"].CountLPHAndVariable(_modelNode[i]["_高"], _LPH, _3dObj.userData.params);
            //如果长宽高有一个是负数或者等于0，则这个模型不显示。------------------------------
            if (_width <= 0 || _deep <= 0 || _height <= 0) {
                continue;
            }
            // if (_GUID.indexOf("D04154D6") != -1) {
            //     console.log(_width);
            //     console.log(_deep);
            //     console.log(_height);
            // }
            let _the_Pos = new THREE.Vector3();
            _the_Pos.x = _HGMyUtils__WEBPACK_IMPORTED_MODULE_0__["HGMyUtils"].CountLPHAndVariable(_modelNode[i]["_X"], _LPH, _3dObj.userData.params);
            _the_Pos.y = _HGMyUtils__WEBPACK_IMPORTED_MODULE_0__["HGMyUtils"].CountLPHAndVariable(_modelNode[i]["_Z"], _LPH, _3dObj.userData.params);
            _the_Pos.z = _HGMyUtils__WEBPACK_IMPORTED_MODULE_0__["HGMyUtils"].CountLPHAndVariable(_modelNode[i]["_Y"], _LPH, _3dObj.userData.params);
            //假如是第一次创建这个板。------------------------------------------------------------------
            //----------------------------------------------------------------------------------------
            if (_hasAreadyHave == false) {
                let _graph = _modelNode[i]["_基础图形"];
                //  console.log(_graph);
                let _DI = _modelNode[i]["_DI"];
                let _the_Material = _modelNode[i]["_颜色"];
                //_parmas就是控制模型的挤出方向，控制模型的切角。
                let _parmas = _modelNode[i]["_图形参数"];
                // console.log(_the_Material);
                //把_parmas转换成json------------------------------------------
                let _parmas_Obj;
                if (_parmas != undefined) {
                    if (_parmas.trim().length > 0) {
                        _parmas = _HGMyUtils__WEBPACK_IMPORTED_MODULE_0__["HGMyUtils"].ReplaceAll(_parmas, "[\\^]", "\"");
                        _parmas = _HGMyUtils__WEBPACK_IMPORTED_MODULE_0__["HGMyUtils"].ReplaceAll(_parmas, '"Inherit":"1"', '"Inherit":"1",');
                        _parmas_Obj = JSON.parse(_parmas);
                    }
                }
                //这个板件是否有x3d的模型。-------------------------------------------
                let _theX3dPath = _modelNode[i]["_图片路径"];
                if (_theX3dPath != undefined) {
                    _theX3dPath = _theX3dPath.trim();
                }
                //板件的所有属性值构成的对象。-------------------------------------
                let _modelProperties = {
                    ID号: _GUID,
                    名称: _theName,
                    尺寸: _width + "*" + _deep + "*" + _height + "(mm)",
                    颜色: _the_Material,
                    plate_DI: _DI
                };
                let theModel;
                //如果这个板件是没有x3d模型的话。===================================================
                if (_theX3dPath == undefined || _theX3dPath.length == 0) {
                    if (_graph != undefined && _graph.trim().length != 0) {
                        let theModel_LOFT;
                        switch (_graph) {
                            case "BG::NULL":
                            case "BG::SPACE":
                            case "0":
                                break;
                            case "BG::RECT":
                                theModel_LOFT = new _HGLOFT__WEBPACK_IMPORTED_MODULE_1__["HGLOFT"](this.dataServer, _width, _height, _deep, _DI, this.dataServer.mapResourcesPreloader.x2dDatas["BG_RECT"], _parmas_Obj, "BG_RECT", x2dInputParams);
                                break;
                            case "BG::FRAMERECT":
                            case "BG_FRAMERECT":
                                theModel_LOFT = new _HGLOFT__WEBPACK_IMPORTED_MODULE_1__["HGLOFT"](this.dataServer, _width, _height, _deep, _DI, this.dataServer.mapResourcesPreloader.x2dDatas["BG_RECT"], _parmas_Obj, "BG_RECT", x2dInputParams);
                                break;
                            default:
                                let _theModel_x2dFileName = _HGMyUtils__WEBPACK_IMPORTED_MODULE_0__["HGMyUtils"].ReplaceAll(_graph, "::", "_");
                                if (this.dataServer.mapResourcesPreloader.x2dDatas[_theModel_x2dFileName] != undefined) {
                                    theModel_LOFT = new _HGLOFT__WEBPACK_IMPORTED_MODULE_1__["HGLOFT"](this.dataServer, _width, _height, _deep, _DI, this.dataServer.mapResourcesPreloader.x2dDatas[_theModel_x2dFileName], _parmas_Obj, _graph, x2dInputParams);
                                }
                        }
                        if (theModel_LOFT != undefined) {
                            theModel = theModel_LOFT.mesh;
                            if (theModel != undefined) {
                                //设置板件的材质。---------------------------------------------------
                                if (_the_Material != undefined) { //有一些板件是没有 颜色 属性的，这些就不设置材质了。
                                    let _the_the_Material_data = this.dataServer.mapResourcesPreloader.materialDatas[_the_Material];
                                    theModel.userData.materialListName = [_the_Material];
                                    theModel.userData.matrialNameList = [_the_Material];
                                    this.SetModelMatByMaterialDatas(theModel, [_the_the_Material_data]);
                                    // if (_the_the_Material_data != undefined) {
                                    //     _modelProperties.ini = _the_the_Material_data.iniName;
                                    // } else {
                                    //     _modelProperties.ini = "null";
                                    // }
                                }
                                //把模型的原来颜色存起来。----------------------------------------
                                theModel.material.formerColor = new THREE.Color();
                                theModel.material.formerColor.copy(_HGmodelUtils__WEBPACK_IMPORTED_MODULE_4__["HGmodelUtils"].GetMatProperty("color", theModel.material));
                                //保存模型的DI值。---------------------------------------------
                                if (_DI != undefined) {
                                    theModel.userData.DI = parseInt(_DI);
                                }
                            }
                        }
                    }
                }
                //如果这个有x3d模型的话，则读取x3d模型来替换当前的模型。----------------------------
                else {
                    let theWireBox = new _HGHardware__WEBPACK_IMPORTED_MODULE_3__["HGHardware"](_width, _height, _deep, true);
                    //如果是3dlst文件，则加载根据尺寸加载一个合适的模型x3d。---------------------------------------
                    let _x3dPath = _theX3dPath;
                    if (_MyUtil__WEBPACK_IMPORTED_MODULE_5__["MyUtil"].getExtensionName(_theX3dPath) == "3dlst") {
                        let _x3dPaths = this.dataServer.mapResourcesPreloader._3dlstDatas[_theX3dPath];
                        if (_x3dPaths != undefined) {
                            //实在什么都不能满足，那就读第一个模型吧。
                            _x3dPath = _HGMyUtils__WEBPACK_IMPORTED_MODULE_0__["HGMyUtils"].getPath(_theX3dPath) + _x3dPaths[0].FILENAME;
                            for (let j = 0; j < _x3dPaths.length; j++) {
                                if (_width < _x3dPaths[j].LMAX &&
                                    _width >= _x3dPaths[j].LMIN &&
                                    _height < _x3dPaths[j].HMAX &&
                                    _height >= _x3dPaths[j].HMIN &&
                                    _deep < _x3dPaths[j].DMAX &&
                                    _deep >= _x3dPaths[j].DMIN) {
                                    _x3dPath = _HGMyUtils__WEBPACK_IMPORTED_MODULE_0__["HGMyUtils"].getPath(_theX3dPath) + _x3dPaths[j].FILENAME;
                                    break;
                                }
                            }
                        }
                        //如果找不到3dlst文件，则x3d的路径也作废了。------------------------------
                        else {
                            _x3dPath = "";
                        }
                    }
                    //有时它的路径会写一些很变态的内容，比如0，这些我都当你没有写！----------------------
                    if (_x3dPath.length <= 4) {
                        _x3dPath = undefined;
                    }
                    //如果不是存在找不到3dlst文件的这种情况下，那么开始读取x3d模型吧。------------------
                    if (_x3dPath != undefined) {
                        theModel = theWireBox.mesh;
                        theModel.userData.isX3dFather = true;
                        let modelPath = this.dataServer.commonPath.basePath + _HGMyUtils__WEBPACK_IMPORTED_MODULE_0__["HGMyUtils"].ReplaceAll(_x3dPath, "[\\\\]", "/");
                        //开始读取x3d模型咯。----------------------------------------------------------
                        this.dataServer.x3dLoader.Load(modelPath, theWireBox.mesh, (_parentObj, _model) => {
                            //计算好模型的长宽高和最小点。-------------------
                            _parentObj.add(_model);
                            //标记这个模型是x3d模型。--------------------------------------------------
                            _model.userData.isX3d = true;
                            for (let deepI = 0; deepI < _model.children.length; deepI++) {
                                _model.children[deepI].userData.isX3d = true;
                            }
                            //设置x3d模型的材质。---------------------------------------------------
                            this.HandleX3dMaterials(_model, _the_Material);
                            //设置这个模型在面板里显示的材质。
                            _parentObj.userData.Frequently_used_Properties["颜色"] = "[";
                            for (let j = 0; j < _parentObj.userData.matrialNameList.length; j++) {
                                let _lastWord = ",";
                                if (j == _parentObj.userData.matrialNameList.length - 1) {
                                    _lastWord = "]";
                                }
                                _parentObj.userData.Frequently_used_Properties["颜色"] += (_parentObj.userData.matrialNameList[j] + _lastWord);
                            }
                            //标记这个x3d模型的父物体是x3d的父对象。------------------------------------
                            _parentObj.userData.isX3dFather = true;
                            //把x3d文件缩放到跟外框一样大。---------------------------------------------
                            _HGmodelUtils__WEBPACK_IMPORTED_MODULE_4__["HGmodelUtils"].ResizeHarwareModel(_model, _width, _height, _deep);
                        });
                    }
                }
                //不论板件是一个长方体，还是读取x3d模型，这里都进行一些公共的设置。----------------------
                if (theModel != undefined) {
                    theModel.position.copy(_the_Pos);
                    this.SetMeshProperties(theModel, _modelProperties);
                    //为模型在树状菜单的显示提供数据。--------------------------------
                    theModel.userData.menuInfo = {};
                    // theModel.userData.menuInfo.tapName = "板件";
                    if (_theName != undefined) {
                        theModel.userData.menuInfo.name = _theName;
                    }
                    _myModule_Model.add(theModel);
                    //建立好mesh和theModel的关系。就是用来参数化改变模型尺寸的时候用到-------------------------------
                    theModel.userData.LoftObj = theModel;
                }
            }
            else {
                //在原来的基础上对模型进行更新。----------------------------------------------------------------
                let _theLoftObj = _theAreadyHaveModel.userData.LoftObj;
                _theLoftObj.MakeModelFromWidthHeightDeep(_width, _height, _deep, true);
                _theAreadyHaveModel.position.copy(_the_Pos);
            }
        }
    }
    /**
      * 根据_materialDatas设置模型材质。
      * @param _mesh 要被设置材质的模型。
      * @param _materialDatas 用来设置材质的从mt2文件读取出来的原始数据
      */
    SetModelMatByMaterialDatas(_mesh, _materialDatas) {
        let allMaterials = [];
        for (let i = 0; i < _materialDatas.length; i++) {
            let oneMaterial;
            if (_materialDatas[i] != undefined) {
                let _iniName = _materialDatas[i].iniName;
                //开始一个个检测，看看这个材质是哪一类的。
                let _theMaterial = "custom";
                let _iniNameWithoutExtension = "null";
                if (_iniName != undefined) {
                    _iniNameWithoutExtension = _HGMyUtils__WEBPACK_IMPORTED_MODULE_0__["HGMyUtils"].getFileName(_iniName).trim();
                    for (let key in this.dataServer.shaderPreloader.allShaderMatDatas) {
                        let _iniList = this.dataServer.shaderPreloader.allShaderMatDatas[key].includeIni;
                        if (_iniList.indexOf(_iniNameWithoutExtension) != -1) {
                            _theMaterial = key;
                            break;
                        }
                    }
                }
                //根据模型的材质归类，给它赋予各种不同的材质。------------------
                let _typeObj = {
                    "position": { type: "v3" },
                    "color": { type: "c" },
                    "intensity": { type: "f" },
                };
                switch (_theMaterial) {
                    case "板材":
                        //默认值。---------------------------------------------
                        let _banJianColor = _materialDatas[i].color.clone();
                        let _banJianCenterReflecty = 0.0;
                        let _banJianEdgeReflecty = 0.2;
                        let allBanJianDetailPropeities = this.dataServer.shaderPreloader.allShaderMatDatas["板材"].detailProperties;
                        for (let j = 0; j < allBanJianDetailPropeities.length; j++) {
                            if (allBanJianDetailPropeities[j].nameList.indexOf(_iniNameWithoutExtension) != -1) {
                                _banJianCenterReflecty = allBanJianDetailPropeities[j].centerReflecty;
                                _banJianEdgeReflecty = allBanJianDetailPropeities[j].edgeReflecty;
                                _banJianColor = new THREE.Color(allBanJianDetailPropeities[j].color);
                                break;
                            }
                        }
                        let _uniforms_banJian = {
                            color: { value: _banJianColor },
                            map: { value: _materialDatas[i].map },
                            cubeMap: { type: 't', value: this.dataServer.sceneObj.cubeMap },
                            directionalLights: {
                                type: "sa",
                                value: this.dataServer.sceneObj.lightObjs,
                                properties: _typeObj
                            },
                            opacity: { value: 1.0 },
                            centerReflecty: { value: _banJianCenterReflecty },
                            edgeReflecty: { value: _banJianEdgeReflecty }
                        };
                        oneMaterial = new THREE.ShaderMaterial({
                            uniforms: _uniforms_banJian,
                            vertexShader: this.dataServer.shaderPreloader.allShaderMatDatas["板材"].vertex,
                            fragmentShader: this.dataServer.shaderPreloader.allShaderMatDatas["板材"].fragment
                        });
                        if (_materialDatas[i].map != undefined) {
                            oneMaterial.defines.USE_MAP = true;
                        }
                        break;
                    case "玻璃":
                        //默认值。---------------------------------------------
                        let _boliColor = _materialDatas[i].color.clone();
                        let _boliOpacity = 0.3;
                        let _boLiCenterReflecty = 0.7;
                        let _boliEdgeReflecty = 1.0;
                        let allBoLiDetailPropeities = this.dataServer.shaderPreloader.allShaderMatDatas["玻璃"].detailProperties;
                        for (let j = 0; j < allBoLiDetailPropeities.length; j++) {
                            if (allBoLiDetailPropeities[j].nameList.indexOf(_iniNameWithoutExtension) != -1) {
                                _boliOpacity = allBoLiDetailPropeities[j].opacity;
                                _boLiCenterReflecty = allBoLiDetailPropeities[j].centerReflecty;
                                _boliEdgeReflecty = allBoLiDetailPropeities[j].edgeReflecty;
                                _boliColor = new THREE.Color(allBoLiDetailPropeities[j].color);
                                break;
                            }
                        }
                        let _uniforms_boLi = {
                            color: { value: _boliColor },
                            cubeMap: { type: 't', value: this.dataServer.sceneObj.cubeMap },
                            directionalLights: {
                                type: "sa",
                                value: this.dataServer.sceneObj.lightObjs,
                                properties: _typeObj
                            },
                            opacity: { value: _boliOpacity },
                            centerReflecty: { value: _boLiCenterReflecty },
                            edgeReflecty: { value: _boliEdgeReflecty }
                        };
                        oneMaterial = new THREE.ShaderMaterial({
                            uniforms: _uniforms_boLi,
                            vertexShader: this.dataServer.shaderPreloader.allShaderMatDatas["玻璃"].vertex,
                            fragmentShader: this.dataServer.shaderPreloader.allShaderMatDatas["玻璃"].fragment,
                            transparent: true,
                        });
                        oneMaterial.formerOpacity = 0.3;
                        break;
                    case "金属":
                        //默认值。---------------------------------------------
                        let _jinShuColor = _materialDatas[i].color.clone();
                        let _jinShuReflectPower = 1.5;
                        let allJinShuDetailPropeities = this.dataServer.shaderPreloader.allShaderMatDatas["金属"].detailProperties;
                        for (let j = 0; j < allJinShuDetailPropeities.length; j++) {
                            if (allJinShuDetailPropeities[j].nameList.indexOf(_iniNameWithoutExtension) != -1) {
                                _jinShuColor = new THREE.Color(allJinShuDetailPropeities[j].color);
                                _jinShuReflectPower = allJinShuDetailPropeities[j].reflectPower;
                                break;
                            }
                        }
                        let _uniforms_jinShu = {
                            color: { value: _jinShuColor },
                            cubeMap: { type: 't', value: this.dataServer.sceneObj.cubeMap },
                            directionalLights: {
                                type: "sa",
                                value: this.dataServer.sceneObj.lightObjs,
                                properties: _typeObj
                            },
                            reflectPower: { value: _jinShuReflectPower },
                            opacity: { value: 1.0 }
                        };
                        oneMaterial = new THREE.ShaderMaterial({
                            uniforms: _uniforms_jinShu,
                            vertexShader: this.dataServer.shaderPreloader.allShaderMatDatas["金属"].vertex,
                            fragmentShader: this.dataServer.shaderPreloader.allShaderMatDatas["金属"].fragment
                        });
                        break;
                    default:
                        oneMaterial = new THREE.MeshPhongMaterial({
                            // color: _materialDatas[i].color,
                            // specular: _materialDatas[i].specular,
                            // emissive: _materialDatas[i].emissive,
                            // shininess: _materialDatas[i].shininess,
                            map: _materialDatas[i].map
                        });
                }
            }
            else {
                oneMaterial = new THREE.MeshBasicMaterial({ color: 0xff00ff });
            }
            oneMaterial.formerColor = new THREE.Color();
            oneMaterial.formerColor.copy(_HGmodelUtils__WEBPACK_IMPORTED_MODULE_4__["HGmodelUtils"].GetMatProperty("color", oneMaterial));
            oneMaterial.materialName = _mesh.userData.materialListName[i];
            allMaterials.push(oneMaterial);
        }
        if (allMaterials.length == 1) {
            _mesh.material = allMaterials[0];
        }
        else {
            _mesh.material = allMaterials;
        }
    }
    HandleX3dMaterials(_x3dModel, _parentMatName) {
        let _theParentObj = _x3dModel.parent;
        _theParentObj.userData.matrialNameList = [];
        for (let k = 0; k < _x3dModel.children.length; k++) {
            _x3dModel.children[k].userData.materialListData = [];
            _x3dModel.children[k].userData.loadedMats = 0;
            // console.log(_parentMatName);
            for (let m = 0; m < _x3dModel.children[k].userData.materialListName.length; m++) {
                if (_x3dModel.children[k].userData.materialListName[m] == undefined) {
                    _x3dModel.children[k].userData.materialListName[m] = _parentMatName;
                    continue;
                }
                if (_x3dModel.children[k].userData.materialListName[m].trim().length == 0) {
                    _x3dModel.children[k].userData.materialListName[m] = _parentMatName;
                }
            }
            //x3d属性面板显示的颜色。----------------------------------------------------------------
            // console.log(_x3dModel.children[k].userData.materialListName.length);
            // let _matNames = "["
            for (let m = 0; m < _x3dModel.children[k].userData.materialListName.length; m++) {
                if (_theParentObj.userData.matrialNameList.indexOf(_x3dModel.children[k].userData.materialListName[m]) == -1) {
                    _theParentObj.userData.matrialNameList.push(_x3dModel.children[k].userData.materialListName[m]);
                }
            }
            // _x3dModel.parent.userData.Frequently_used_Properties["颜色"] = _matNames;
            for (let m = 0; m < _x3dModel.children[k].userData.materialListName.length; m++) {
                if (_x3dModel.children[k].userData.materialListName[m] != undefined) {
                    this.dataServer.mapResourcesPreloader.LoadMt2DataAndAddToList(_x3dModel.children[k].userData.materialListName[m], true, _x3dModel.children[k], (_materialData, _theModel) => {
                        _theModel.userData.loadedMats++;
                        _theModel.userData.materialListData[m] = _materialData;
                        if (_theModel.userData.loadedMats == _theModel.userData.materialListName.length) {
                            this.SetModelMatByMaterialDatas(_theModel, _theModel.userData.materialListData);
                            // console.log(_theParentObj.userData.materialListName);
                        }
                    }, (_lostMatPath, _theModel) => {
                        _theModel.userData.loadedMats++;
                        _theModel.userData.materialListData[m] = undefined;
                        if (_theModel.userData.loadedMats == _theModel.userData.materialListName.length) {
                            this.SetModelMatByMaterialDatas(_theModel, _theModel.userData.materialListData);
                            // console.log(_theParentObj.userData.materialListName);
                        }
                        console.log("下面这个x3d材质找不到!" + _lostMatPath);
                    });
                }
            }
        }
    }
    //把一些属性附加到模型上的自定义函数==========================================
    SetMeshProperties(_theMesh, _allProperties) {
        _theMesh.userData.Frequently_used_Properties = {};
        //遍历_allProperties；
        for (let key in _allProperties) {
            _theMesh.userData.Frequently_used_Properties[key] = _allProperties[key];
        }
    }
}
HGSingleModelHandler.ctorParameters = () => [
    { type: _HGDataServer__WEBPACK_IMPORTED_MODULE_2__["HGDataServer"] }
];


/***/ }),

/***/ "./src/app/three/classes/HGModel/HGStruct.ts":
/*!***************************************************!*\
  !*** ./src/app/three/classes/HGModel/HGStruct.ts ***!
  \***************************************************/
/*! exports provided: StructModelRawDatas, Plane, x2dRawDatas, x2dPoint, MaterialDatas */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StructModelRawDatas", function() { return StructModelRawDatas; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Plane", function() { return Plane; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "x2dRawDatas", function() { return x2dRawDatas; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "x2dPoint", function() { return x2dPoint; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MaterialDatas", function() { return MaterialDatas; });
/*
 作者：张建。
 类说明：这里面创建多种数据，用来做数据约束用的。你可以理解为结构体。
*/
class StructModelRawDatas {
}
//构造一个平面所需要的数据。
class Plane {
}
//解析好的x2d的数据。
class x2dRawDatas {
    constructor() {
        this.points = []; //x2d上的所有节点。
        // tolerantValues:any[]=[];         //这个放置x2d里的默认参数。
        this.dj = 0; //这个模型的叠加方式，0表示不叠加，1表示宽度方向叠加，2表示高度方向叠加。
        this.barH = 0;
    }
}
class x2dPoint {
    constructor() {
        this.type = "";
        this.xy = [];
        this.radius = "";
        this.angle = "";
        this.startAngle = "";
    }
}
//从徐总的mt2文件读取出来的关于材质的数据。
class MaterialDatas {
}


/***/ }),

/***/ "./src/app/three/classes/HGModel/HGWardrobeLoader.ts":
/*!***********************************************************!*\
  !*** ./src/app/three/classes/HGModel/HGWardrobeLoader.ts ***!
  \***********************************************************/
/*! exports provided: HGWardrobeLoader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HGWardrobeLoader", function() { return HGWardrobeLoader; });
/* harmony import */ var _HGDataServer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./HGDataServer */ "./src/app/three/classes/HGModel/HGDataServer.ts");
/* harmony import */ var _HGSingleModelHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./HGSingleModelHandler */ "./src/app/three/classes/HGModel/HGSingleModelHandler.ts");
/* harmony import */ var _HGMyUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./HGMyUtils */ "./src/app/three/classes/HGModel/HGMyUtils.ts");
/*
 作者：张建。
 类说明：用来读取衣柜模型的类。
*/



class HGWardrobeLoader {
    constructor(_dataServer) {
        this.checkUpdateMistake = false; //是否要检查更新的时候没有任何多余的模型产生？
        this.dataServer = _dataServer;
    }
    //开始加载衣柜模型咯。
    Load(_url, callBack, progressCallBack) {
        let _rootName = _HGMyUtils__WEBPACK_IMPORTED_MODULE_2__["HGMyUtils"].getFileName(_url);
        this.dataServer.loader.fileLoader_GBK.load(_url, 
        //模型加载好之后触发的函数。-----------------------------------------
        (txt) => {
            this.Parse(txt, callBack, _rootName);
        }, 
        //模型loading的时候触发的函数。--------------------------------------
        (xhr) => {
            let _percentage = xhr.loaded / xhr.total;
            console.log(xhr);
            progressCallBack(_percentage);
        });
    }
    ;
    //从xml的字符串里得出模型。============================================
    Parse(_xmlString, callBack, _rootTagName) {
        //把json文本进行解析。 
        this.dataServer.jsonData = this.dataServer.x2js.xml_str2json(_xmlString);
        let _theSceneNode = this.dataServer.jsonData["场景"]; //场景，相当于一个大的产品;
        //衣柜模型的根模型。------------------------------------
        let _rootModel = new THREE.Object3D();
        _rootModel.userData.menuInfo = {};
        // _rootModel.userData.menuInfo.tapName = _rootTagName;
        // _rootModel.userData.menuInfo.isRootModel = true;
        let LPH = [];
        //找到这个文档里所有用到的x2d和mt2文件。-----------------------------
        this.dataServer.mapResourcesPreloader.ClearData();
        this.dataServer.mapResourcesPreloader.FindX2dAndMt2Files(_theSceneNode);
        //开始加载x2d文件。-----------------------------------------------------------
        this.dataServer.mapResourcesPreloader.LoadX2dFiles(() => {
            //x2d文件加载好后，开始加载mt2文件。----------------------------------------
            this.dataServer.mapResourcesPreloader.LoadMt2Files(() => {
                //mt2文件加载好了之后，开始加载3dlst文件。------------------------------
                this.dataServer.mapResourcesPreloader.Load3dlstFiles(() => {
                    //开始正式加载模型啦。--------------------------------------------------
                    this.ProduceIterator(_theSceneNode, _rootModel, LPH);
                    this.DeleteNoSonFather(_rootModel);
                    //把得到的模型通过回调送出去。--------------------------------------------
                    callBack(_rootModel);
                });
            });
        });
    }
    DeleteNoSonFather(_rootModel) {
        let _shouldDeleteModels = [];
        _rootModel.traverse((obj) => {
            if (obj.isMesh != true) {
                if (obj.children.length == 0) {
                    _shouldDeleteModels.push(obj);
                }
            }
        });
        for (let i = 0; i < _shouldDeleteModels.length; i++) {
            _shouldDeleteModels[i].parent.remove(_shouldDeleteModels[i]);
        }
    }
    //递归法用到的迭代器。====================================================================
    //======================================================================================
    //第一个参数是某个json节点。
    //第二个参数是这个json节点对应的3d模型。
    //第三个参数是LPH值。
    ProduceIterator(_product, _3dObj, _LPH) {
        //产品下的变量列表。=========================================================================
        //给产品添加一个params，用来存放所有的变量。---------------------------
        _3dObj.userData.params = [];
        let variateList = _product["变量列表"];
        if (variateList.length != 0) {
            //变量。--------------------------------------------------------
            var variate = variateList["变量"];
            if (Array.isArray(variate) == false) {
                variate = [variate];
            }
            //遍历每个变量。------------------------------------------------
            for (let i = 0; i < variate.length; i++) {
                let variateName = variate[i]["_名称"];
                let variateValue = variate[i]["_值"];
                _3dObj.userData.params[variateName] = variateValue;
            }
        }
        //产品下的我的规格。=========================================================================
        if (_LPH["L"] == undefined) {
            let mySpecifications = _product["我的规格"];
            if (mySpecifications != undefined) {
                //我的规格下的 规格----------------------
                let Specifications = mySpecifications["规格"];
                if (Array.isArray(Specifications) == false) {
                    Specifications = [Specifications];
                }
                _LPH["L"] = Specifications[0]["_宽"];
                _LPH["P"] = Specifications[0]["_深"];
                _LPH["H"] = Specifications[0]["_高"];
            }
        }
        //我的模块。=========================================================================
        let myModule = _product["我的模块"];
        //如果产品下没有我的模块，就拉倒算了。-------------------------
        if (myModule == undefined) {
            return;
        }
        //代表我的模块的3D模型。--------------------------------------
        let _myModule_Model;
        if (_3dObj.children.length == 0) {
            _myModule_Model = new THREE.Object3D();
            _myModule_Model.userData.menuInfo = {};
            // _myModule_Model.userData.menuInfo.tapName = "我的模块";
            _3dObj.add(_myModule_Model);
            if (this.checkUpdateMistake == true) {
                console.log("新建");
            }
        }
        else {
            _myModule_Model = _3dObj.children[0];
            if (this.checkUpdateMistake == true) {
                console.log("获取");
            }
        }
        //我的模块下的产品。-------------------------------------------------------------------
        //------------------------------------------------------------------------------------
        let _myModule_Product = myModule["产品"];
        if (_myModule_Product != undefined) {
            //代表产品节点的那个模型。----------------------------------------
            let _myModule_Product_Model;
            if (_myModule_Model.children.length == 0) {
                _myModule_Product_Model = new THREE.Object3D();
                _myModule_Model.add(_myModule_Product_Model);
                _myModule_Product_Model.userData.menuInfo = {};
                _myModule_Product_Model.userData.menuInfo.name = _myModule_Product["_名称"];
                // _myModule_Product_Model.userData.menuInfo.tapName = "产品";
                if (this.checkUpdateMistake == true) {
                    console.log("新建");
                }
            }
            else {
                _myModule_Product_Model = _myModule_Model.children[0];
                if (this.checkUpdateMistake == true) {
                    console.log("获取");
                }
            }
            let _product_width = _myModule_Product["_宽"];
            let _product_deep = _myModule_Product["_深"];
            let _product_height = _myModule_Product["_高"];
            //计算产品的LPH值。--------------------------------------------------
            let _product_LPH = [];
            _product_LPH["L"] = _HGMyUtils__WEBPACK_IMPORTED_MODULE_2__["HGMyUtils"].CountLPHAndVariable(_product_width, _LPH, _3dObj.userData.params);
            _product_LPH["P"] = _HGMyUtils__WEBPACK_IMPORTED_MODULE_2__["HGMyUtils"].CountLPHAndVariable(_product_deep, _LPH, _3dObj.userData.params);
            _product_LPH["H"] = _HGMyUtils__WEBPACK_IMPORTED_MODULE_2__["HGMyUtils"].CountLPHAndVariable(_product_height, _LPH, _3dObj.userData.params);
            //再进行一次递归。---------------------------------------------------
            this.ProduceIterator(_myModule_Product, _myModule_Product_Model, _product_LPH);
        }
        //我的模块下的模块。----------------------------------------------------------
        let _myModule_Modules = myModule["模块"];
        if (_myModule_Modules != undefined) {
            if (Array.isArray(_myModule_Modules) == false) {
                _myModule_Modules = [_myModule_Modules];
            }
            // console.log(_myModule_Modules)
            for (let i = 0; i < _myModule_Modules.length; i++) {
                let _myModule_Modules_GUID = _myModule_Modules[i]["_GUID"];
                let _myModule_Modules_ShowWay = _myModule_Modules[i]["_显示方式"];
                //模块也有些需要被隐藏的。----------------------------------------------------
                if (_myModule_Modules_ShowWay == 3) {
                    continue;
                }
                //对应我的模块下的模块的那个模型。-------------------------------------------
                let myModule_Modules_Model;
                //上面这个模型是否已经存在了？----------------------------------------------
                let _myModule_Modules_Model_hasAreadyHave = false;
                for (let jjj = 0; jjj < _myModule_Model.children.length; jjj++) {
                    //_myModule_Model的已有的子物体的GUI号。
                    let childGUID = _myModule_Model.children[jjj].Frequently_used_Properties["ID号"];
                    if (childGUID == _myModule_Modules_GUID) {
                        _myModule_Modules_Model_hasAreadyHave = true;
                        myModule_Modules_Model = _myModule_Model.children[jjj];
                        if (this.checkUpdateMistake == true) {
                            console.log("获取");
                        }
                        break;
                    }
                }
                //let _myModule_Modules_name = _myModule_Modules[i]["_名称"];
                let _myModule_Modules_width = _myModule_Modules[i]["_宽"];
                let _myModule_Modules_deep = _myModule_Modules[i]["_深"];
                let _myModule_Modules_height = _myModule_Modules[i]["_高"];
                let _myModule_Modules_X = _myModule_Modules[i]["_X"];
                let _myModule_Modules_Y = _myModule_Modules[i]["_Z"];
                let _myModule_Modules_Z = _myModule_Modules[i]["_Y"];
                if (_myModule_Modules_Model_hasAreadyHave == false) {
                    if (this.checkUpdateMistake == true) {
                        console.log("新建");
                    }
                    myModule_Modules_Model = new THREE.Object3D();
                    _myModule_Model.add(myModule_Modules_Model);
                    myModule_Modules_Model.userData.menuInfo = {};
                    // myModule_Modules_Model.userData.menuInfo.tapName = "模块";
                    myModule_Modules_Model.Frequently_used_Properties = {};
                    myModule_Modules_Model.Frequently_used_Properties["ID号"] = _myModule_Modules_GUID;
                }
                let _myModule_Modules_OZ = _myModule_Modules[i]["_OZ"];
                if (_myModule_Modules_OZ != undefined) {
                    myModule_Modules_Model.rotation.y = _myModule_Modules_OZ * Math.PI / 180;
                }
                let _myModule_Modules_Pos = new THREE.Vector3();
                _myModule_Modules_Pos.x = _HGMyUtils__WEBPACK_IMPORTED_MODULE_2__["HGMyUtils"].CountLPHAndVariable(_myModule_Modules_X, _LPH, _3dObj.userData.params);
                _myModule_Modules_Pos.y = _HGMyUtils__WEBPACK_IMPORTED_MODULE_2__["HGMyUtils"].CountLPHAndVariable(_myModule_Modules_Y, _LPH, _3dObj.userData.params);
                _myModule_Modules_Pos.z = _HGMyUtils__WEBPACK_IMPORTED_MODULE_2__["HGMyUtils"].CountLPHAndVariable(_myModule_Modules_Z, _LPH, _3dObj.userData.params);
                let _myModule_Modules_LPH = [];
                _myModule_Modules_LPH["L"] = _HGMyUtils__WEBPACK_IMPORTED_MODULE_2__["HGMyUtils"].CountLPHAndVariable(_myModule_Modules_width, _LPH, _3dObj.userData.params);
                _myModule_Modules_LPH["P"] = _HGMyUtils__WEBPACK_IMPORTED_MODULE_2__["HGMyUtils"].CountLPHAndVariable(_myModule_Modules_deep, _LPH, _3dObj.userData.params);
                _myModule_Modules_LPH["H"] = _HGMyUtils__WEBPACK_IMPORTED_MODULE_2__["HGMyUtils"].CountLPHAndVariable(_myModule_Modules_height, _LPH, _3dObj.userData.params);
                myModule_Modules_Model.position.copy(_myModule_Modules_Pos);
                if (_myModule_Modules[i]["_名称"] != undefined) {
                    myModule_Modules_Model.userData.menuInfo.name = _myModule_Modules[i]["_名称"];
                    if (_myModule_Modules[i]["_子空间"] != undefined) {
                        if (_myModule_Modules[i]["_子空间"].trim().length != 0) {
                            // console.log(_myModule_Modules[i]["_VP"]);
                            switch (_myModule_Modules[i]["_VP"]) {
                                case "1":
                                    myModule_Modules_Model.rotation.x = -Math.PI / 2;
                                    myModule_Modules_Model.position.z += _myModule_Modules_LPH["H"];
                                    break;
                                case "2":
                                    myModule_Modules_Model.rotation.y = Math.PI / 2;
                                    myModule_Modules_Model.position.z += _myModule_Modules_LPH["L"];
                                    break;
                                case "3":
                                    myModule_Modules_Model.rotation.y = -Math.PI / 2;
                                    myModule_Modules_Model.position.x += _myModule_Modules_LPH["L"];
                                    break;
                            }
                        }
                    }
                }
                //主要用来做大模块的长宽高标注。--------------------------------------------------
                let moduleSize = {};
                moduleSize.name = _myModule_Modules[i]["_名称"];
                moduleSize.width = _myModule_Modules_LPH["L"];
                moduleSize.height = _myModule_Modules_LPH["H"];
                moduleSize.deep = _myModule_Modules_LPH["P"];
                moduleSize.position = myModule_Modules_Model.position;
                _myModule_Modules[i].myModuleSize = moduleSize;
                //模块下的产品。----------------------------------------------------------------
                let myModule_Modules_Product = _myModule_Modules[i]["产品"];
                if (myModule_Modules_Product != undefined) {
                    let _myModule_Modules_ProductModel;
                    if (myModule_Modules_Model.children.length == 0) {
                        if (this.checkUpdateMistake == true) {
                            console.log("新建");
                        }
                        _myModule_Modules_ProductModel = new THREE.Object3D();
                        _myModule_Modules_ProductModel.userData.menuInfo = {};
                        // _myModule_Modules_ProductModel.userData.menuInfo.tapName = "产品";
                        if (myModule_Modules_Product["_名称"] != undefined) {
                            _myModule_Modules_ProductModel.userData.menuInfo.name = myModule_Modules_Product["_名称"];
                        }
                        myModule_Modules_Model.add(_myModule_Modules_ProductModel);
                    }
                    else {
                        if (this.checkUpdateMistake == true) {
                            console.log("获取");
                        }
                        _myModule_Modules_ProductModel = myModule_Modules_Model.children[0];
                    }
                    this.ProduceIterator(myModule_Modules_Product, _myModule_Modules_ProductModel, _myModule_Modules_LPH);
                }
            }
        }
        //我的模块下的板件。------------------------------------------------------------
        let _myModule_Plate = myModule["板件"];
        if (_myModule_Plate != undefined) {
            let _planeModel = new _HGSingleModelHandler__WEBPACK_IMPORTED_MODULE_1__["HGSingleModelHandler"](this.dataServer);
            _planeModel.HandleSingleModel(_myModule_Plate, _myModule_Model, _LPH, _3dObj);
        }
        //我的模块下的型材五金。-----------------------------------------------------------
        let _myModule_ProfileHardware = myModule["型材五金"];
        if (_myModule_ProfileHardware != undefined) {
            let _ProfileHardware_Model = new _HGSingleModelHandler__WEBPACK_IMPORTED_MODULE_1__["HGSingleModelHandler"](this.dataServer);
            _ProfileHardware_Model.HandleSingleModel(_myModule_ProfileHardware, _myModule_Model, _LPH, _3dObj);
        }
        //我的模块下的五金。-------------------------------------------------------------------
        let _myModule_Hardwares = myModule["五金"];
        if (_myModule_Hardwares != undefined) {
            let _hardwares_Model = new _HGSingleModelHandler__WEBPACK_IMPORTED_MODULE_1__["HGSingleModelHandler"](this.dataServer);
            _hardwares_Model.HandleSingleModel(_myModule_Hardwares, _myModule_Model, _LPH, _3dObj);
        }
        //我的模块下的模块，有些板件被错误标记为模块了。-------------------------------------------------------------------
        let _myModule_error_module = myModule["模块"];
        if (_myModule_error_module != undefined) {
            let _myModule_error_Model = new _HGSingleModelHandler__WEBPACK_IMPORTED_MODULE_1__["HGSingleModelHandler"](this.dataServer);
            _myModule_error_Model.HandleSingleModel(_myModule_error_module, _myModule_Model, _LPH, _3dObj);
        }
    }
}
HGWardrobeLoader.ctorParameters = () => [
    { type: _HGDataServer__WEBPACK_IMPORTED_MODULE_0__["HGDataServer"] }
];


/***/ }),

/***/ "./src/app/three/classes/HGModel/HGX3dLoader.ts":
/*!******************************************************!*\
  !*** ./src/app/three/classes/HGModel/HGX3dLoader.ts ***!
  \******************************************************/
/*! exports provided: HGX3dLoader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HGX3dLoader", function() { return HGX3dLoader; });
class HGX3dLoader {
    //第一个参数是x3d文件的路径。-------------------------------
    //第二个参数是x3d模型要挂载的父对象。------------------------
    //第三个参数是模型解析好的回调函数。第一个参数是前面传入的父对象，第二个参数是解析好的模型--------------------------
    Load(_url, _parentObj, _onModelLoaded) {
        let request = new XMLHttpRequest();
        request.open('GET', _url, true);
        request.responseType = 'blob';
        request.onreadystatechange = () => {
            if (request.readyState == 4) {
                if (request.status == 200) {
                    let reader = new FileReader();
                    reader.onload = () => {
                        this.OnLoadModel(reader, _parentObj, _onModelLoaded);
                    };
                    reader.readAsArrayBuffer(request.response);
                }
                else if (request.status == 404) {
                    //如果x3d文件找不到，那放一个线框在那里代替吧。-------------
                    _parentObj.material.visible = true;
                    console.log("以下x3d文件找不到：" + _url);
                }
            }
        };
        request.send();
    }
    OnLoadModel(_this, _parentObj, _onModelLoaded) {
        let fs = new Object();
        let obj = new Object();
        fs.buffer = _this.result;
        fs.offset = 0;
        let head = this.ReadString(fs);
        if (head == 'x3d_00001' || head == 'x3d_00002') {
            this.LoadFromX3D_001(fs, obj);
        }
        if (head == 'x3d_00003') {
            this.LoadFromX3D_003(fs, obj);
        }
        let returnModel = this.HandleModel(obj);
        _onModelLoaded(_parentObj, returnModel);
    }
    HandleModel(_modelJson) {
        let meshlist = _modelJson.meshlist;
        let returnModel = new THREE.Object3D();
        for (let i = 0; i < meshlist.length; i++) {
            let vertexlist = meshlist[i].vertexlist;
            let facegrouplist = meshlist[i].facegrouplist;
            if (facegrouplist.length == 0) {
                continue;
            }
            let vertexOfficialList = [];
            let vertexNormalPoolList = [];
            let vertexUVPoolList = [];
            for (let j = 0; j < vertexlist.length; j++) {
                vertexOfficialList.push(new THREE.Vector3(vertexlist[j].v_0, vertexlist[j].v_1, vertexlist[j].v_2));
                vertexNormalPoolList.push(new THREE.Vector3(vertexlist[j].n_0, vertexlist[j].n_1, vertexlist[j].n_2));
                vertexUVPoolList.push(new THREE.Vector2(vertexlist[j].t_0, vertexlist[j].t_1));
            }
            let facesOfficiaList = [];
            let uvOfficalList = [[]];
            let _materialListName = []; //这个模型多维子对象材质的材质名字列表。
            for (let j = 0; j < facegrouplist.length; j++) {
                let indexlist = facegrouplist[j].indexlist;
                let _materialName = facegrouplist[j].mMatName;
                _materialListName.push(_materialName);
                for (let k = 0; k < indexlist.length; k += 3) {
                    let theFace3 = new THREE.Face3(indexlist[k].vi, indexlist[k + 1].vi, indexlist[k + 2].vi);
                    theFace3.vertexNormals.push(vertexNormalPoolList[indexlist[k].ni]);
                    theFace3.vertexNormals.push(vertexNormalPoolList[indexlist[k + 1].ni]);
                    theFace3.vertexNormals.push(vertexNormalPoolList[indexlist[k + 2].ni]);
                    theFace3.materialIndex = j;
                    uvOfficalList[0].push([
                        vertexUVPoolList[indexlist[k].ti],
                        vertexUVPoolList[indexlist[k + 1].ti],
                        vertexUVPoolList[indexlist[k + 2].ti]
                    ]);
                    facesOfficiaList.push(theFace3);
                }
            }
            if (facesOfficiaList.length == 0) {
                continue;
            }
            let geom = new THREE.Geometry();
            geom.vertices = vertexOfficialList;
            geom.faces = facesOfficiaList;
            geom.faceVertexUvs = uvOfficalList;
            geom.mergeVertices();
            geom.computeBoundingBox();
            let sceneMesh = new THREE.Mesh(geom, new THREE.MeshPhongMaterial({ color: new THREE.Color(0.5, 0.5, 0.5) }));
            sceneMesh.userData.materialListName = _materialListName;
            returnModel.add(sceneMesh);
        }
        let box3_1 = new THREE.Box3();
        box3_1.expandByObject(returnModel);
        let _modelSize = new THREE.Vector3();
        box3_1.getSize(_modelSize);
        //把模型的长宽高信息先存进去。-----------------------------------
        returnModel.userData.x3dsize = {};
        returnModel.userData.x3dsize.width = _modelSize.x;
        returnModel.userData.x3dsize.deep = _modelSize.z;
        returnModel.userData.x3dsize.height = _modelSize.y;
        returnModel.userData.x3dsize.min = box3_1.min;
        //把模型放置成对齐box的min值。-----------------------------------
        for (let i = 0; i < returnModel.children.length; i++) {
            returnModel.children[i].position.x -= box3_1.min.x;
            returnModel.children[i].position.y -= box3_1.min.y;
            returnModel.children[i].position.z -= box3_1.min.z;
        }
        return returnModel;
    }
    ReadString(fs) {
        let dv = new DataView(fs.buffer);
        let slen = 0;
        let valuetype = dv.getInt8(fs.offset);
        fs.offset = fs.offset + 1;
        if (valuetype == 18) //带中文的宽字符
         {
            slen = dv.getInt32(fs.offset, true);
            slen = slen * 2;
            fs.offset = fs.offset + 4;
        }
        else if (valuetype == 20) //UTF8中文
         {
            slen = dv.getInt32(fs.offset, true);
            fs.offset = fs.offset + 4;
        }
        else if (valuetype == 6) //短文本
         {
            slen = dv.getInt8(fs.offset);
            fs.offset = fs.offset + 1;
        }
        else if (valuetype == 12) //长文本
         {
            slen = dv.getInt32(fs.offset, true);
            fs.offset = fs.offset + 4;
        }
        else {
            return "";
        }
        let charArray = new Uint8Array(fs.buffer, fs.offset, slen);
        let text = "";
        if (valuetype == 20) //UTF解码
         {
            let encoded = "";
            for (let i = 0; i < slen; i++) {
                encoded += '%' + charArray[i].toString(16);
            }
            text = decodeURIComponent(encoded);
        }
        else {
            for (let i = 0; i < slen; i++) {
                text += String.fromCharCode(charArray[0 + i]);
            }
        }
        fs.offset = fs.offset + slen;
        return text;
    }
    LoadFromX3D_001(fs, obj) {
        obj.l = this.ReadInteger(fs);
        obj.d = this.ReadInteger(fs);
        obj.h = this.ReadInteger(fs);
        obj.min_0 = this.ReadSingle(fs);
        obj.min_1 = this.ReadSingle(fs);
        obj.min_2 = this.ReadSingle(fs);
        obj.max_0 = this.ReadSingle(fs);
        obj.max_1 = this.ReadSingle(fs);
        obj.max_2 = this.ReadSingle(fs);
        let ci = this.ReadInteger(fs);
        obj.ci = ci;
        obj.meshlist = new Array(ci);
        for (let i = 0; i < ci; i++) //mesh
         {
            let mesh = new Object();
            obj.meshlist[i] = mesh;
            mesh.t = this.ReadInteger(fs); //三角形模式：momTriangles, momTriangleStrip, momFaceGroups
            let j = 0;
            //顶点坐标
            let cj = this.ReadInteger(fs);
            mesh.vertexcount = cj;
            mesh.vertexlist = new Array(cj);
            for (j = 0; j < cj; j++) {
                let vertex = new Object();
                mesh.vertexlist[j] = vertex;
                //法线方向
                vertex.n_0 = this.ReadSingle(fs);
                vertex.n_1 = this.ReadSingle(fs);
                vertex.n_2 = this.ReadSingle(fs);
                //坐标点
                vertex.v_0 = this.ReadSingle(fs);
                vertex.v_1 = this.ReadSingle(fs);
                vertex.v_2 = this.ReadSingle(fs);
                //UV坐标
                vertex.t_0 = this.ReadSingle(fs);
                vertex.t_1 = this.ReadSingle(fs);
                vertex.t_2 = this.ReadSingle(fs);
            }
            //三角形面组
            cj = this.ReadInteger(fs);
            mesh.facegroupcount = cj;
            mesh.facegrouplist = new Array(cj);
            for (j = 0; j < cj; j++) {
                let facegroup = new Object();
                mesh.facegrouplist[j] = facegroup;
                facegroup.mode = this.ReadInteger(fs); //fgmmTriangles, fgmmTriangleStrip, fgmmFlatTriangles, fgmmTriangleFan, fgmmQuads
                facegroup.mTextureDialog = this.ReadString(fs);
                facegroup.mMatMat = this.ReadString(fs);
                facegroup.mMatName = this.ReadString(fs);
                let ck = this.ReadInteger(fs);
                facegroup.indexcount = ck;
                facegroup.indexlist = new Array(ck); //三角形索引
                for (let k = 0; k < ck; k++) {
                    let index = new Object();
                    facegroup.indexlist[k] = index;
                    index.vi = this.ReadInteger(fs);
                    index.ni = this.ReadInteger(fs);
                    index.ti = this.ReadInteger(fs);
                }
            }
        }
    }
    ReadSingle(fs) {
        let dv = new DataView(fs.buffer);
        let valuetype = dv.getInt8(fs.offset);
        fs.offset = fs.offset + 1;
        let value = 0;
        if (valuetype == 15) //单精度浮点类型
         {
            value = dv.getFloat32(fs.offset, true);
            fs.offset = fs.offset + 4;
        }
        else {
            return 0;
        }
        return value;
    }
    ReadInteger(fs) {
        let dv = new DataView(fs.buffer);
        let valuetype = dv.getInt8(fs.offset);
        fs.offset = fs.offset + 1;
        let value = 0;
        if (valuetype == 2) //byte类型
         {
            value = dv.getInt8(fs.offset);
            fs.offset = fs.offset + 1;
        }
        else if (valuetype == 3) //short类型
         {
            value = dv.getInt16(fs.offset, true);
            fs.offset = fs.offset + 2;
        }
        else if (valuetype == 4) //int类型
         {
            value = dv.getInt32(fs.offset, true);
            fs.offset = fs.offset + 4;
        }
        else {
            return 0;
        }
        return value;
    }
    LoadFromX3D_003(fs, obj) {
        obj.l = this.ReadInteger(fs);
        obj.d = this.ReadInteger(fs);
        obj.h = this.ReadInteger(fs);
        obj.min_0 = this.ReadSingle(fs);
        obj.min_1 = this.ReadSingle(fs);
        obj.min_2 = this.ReadSingle(fs);
        obj.max_0 = this.ReadSingle(fs);
        obj.max_1 = this.ReadSingle(fs);
        obj.max_2 = this.ReadSingle(fs);
        let ci = this.ReadInteger(fs);
        obj.ci = ci;
        obj.meshlist = new Array(ci);
        for (let i = 0; i < ci; i++) //mesh
         {
            let mesh = new Object();
            obj.meshlist[i] = mesh;
            mesh.t = this.ReadInteger(fs); //三角形模式：momTriangles, momTriangleStrip, momFaceGroups
            let j = 0;
            //顶点坐标
            let cj = this.ReadInteger(fs);
            mesh.vertexcount = cj;
            mesh.vertexlist = new Array(cj);
            for (j = 0; j < cj; j++) {
                let vertex = new Object();
                mesh.vertexlist[j] = vertex;
                //法线方向
                vertex.n_0 = this.ReadSingle(fs);
                vertex.n_1 = this.ReadSingle(fs);
                vertex.n_2 = this.ReadSingle(fs);
                //坐标点
                vertex.v_0 = this.ReadSingle(fs);
                vertex.v_1 = this.ReadSingle(fs);
                vertex.v_2 = this.ReadSingle(fs);
                //UV坐标
                vertex.t_0 = this.ReadSingle(fs);
                vertex.t_1 = this.ReadSingle(fs);
                vertex.t_2 = this.ReadSingle(fs);
            }
            //三角形面组
            cj = this.ReadInteger(fs);
            mesh.facegroupcount = cj;
            mesh.facegrouplist = new Array(cj);
            for (j = 0; j < cj; j++) {
                let facegroup = new Object();
                mesh.facegrouplist[j] = facegroup;
                facegroup.mode = this.ReadInteger(fs); //fgmmTriangles, fgmmTriangleStrip, fgmmFlatTriangles, fgmmTriangleFan, fgmmQuads
                facegroup.mTextureDialog = this.ReadString(fs);
                facegroup.mMatMat = this.ReadString(fs);
                facegroup.mMatName = this.ReadString(fs);
                facegroup.sx = this.ReadString(fs);
                facegroup.sy = this.ReadString(fs);
                facegroup.sz = this.ReadString(fs);
                facegroup.sl = this.ReadString(fs);
                facegroup.sd = this.ReadString(fs);
                facegroup.sh = this.ReadString(fs);
                let ck = this.ReadInteger(fs);
                facegroup.indexcount = ck;
                facegroup.indexlist = new Array(ck); //三角形索引
                for (let k = 0; k < ck; k++) {
                    let index = new Object();
                    facegroup.indexlist[k] = index;
                    index.vi = this.ReadInteger(fs);
                    index.ni = this.ReadInteger(fs);
                    index.ti = this.ReadInteger(fs);
                }
            }
        }
    }
}


/***/ }),

/***/ "./src/app/three/classes/HGModel/HGmodelUtils.ts":
/*!*******************************************************!*\
  !*** ./src/app/three/classes/HGModel/HGmodelUtils.ts ***!
  \*******************************************************/
/*! exports provided: HGmodelUtils */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HGmodelUtils", function() { return HGmodelUtils; });
/*
 作者：张建。
 类说明：建模用到的静态类
*/
class HGmodelUtils {
    //从四个顶点构建一个面。===========================================
    //_textureVertical代表贴图是否垂直放置？
    static MakeFaceFrom4Points(_modelRawDatas, _fourPointsArray, _textureVertical) {
        //根据三个点的坐标，计算出法线方向。-------------------------------
        let dir01 = new THREE.Vector3(_fourPointsArray[1][0] - _fourPointsArray[0][0], _fourPointsArray[1][1] - _fourPointsArray[0][1], _fourPointsArray[1][2] - _fourPointsArray[0][2]);
        let dir02 = new THREE.Vector3(_fourPointsArray[2][0] - _fourPointsArray[0][0], _fourPointsArray[2][1] - _fourPointsArray[0][1], _fourPointsArray[2][2] - _fourPointsArray[0][2]);
        var normalDir = new THREE.Vector3();
        normalDir.crossVectors(dir01, dir02).normalize();
        //原来的数组里已经有了几个点啊？----------------------------------
        let formerPointLength = _modelRawDatas.vertices.length;
        //先把四个点转换成three.js里的对象。再放在modelRawDatas里。
        for (let i = 0; i < _fourPointsArray.length; i++) {
            let onePoint = new THREE.Vector3(_fourPointsArray[i][0], _fourPointsArray[i][1], _fourPointsArray[i][2]);
            _modelRawDatas.vertices.push(onePoint);
        }
        //开始把face信息放进去。===================================
        //第一个face--------------
        let face101 = new THREE.Face3(formerPointLength, formerPointLength + 1, formerPointLength + 2);
        //第二个face--------------
        let face102 = new THREE.Face3(formerPointLength, formerPointLength + 2, formerPointLength + 3);
        _modelRawDatas.faces.push(face101);
        _modelRawDatas.faces.push(face102);
        let u = 2;
        let v = 0;
        if (Math.abs(normalDir.x) > 0.8) {
            u = 1;
            v = 2;
        }
        if (Math.abs(normalDir.z) > 0.8) {
            u = 1;
            v = 0;
        }
        if (_textureVertical == true) {
            let tempValue = u;
            u = v;
            v = tempValue;
        }
        _modelRawDatas.uvs[0].push([
            new THREE.Vector2(_fourPointsArray[0][u] / 400, _fourPointsArray[0][v] / 800),
            new THREE.Vector2(_fourPointsArray[1][u] / 400, _fourPointsArray[1][v] / 800),
            new THREE.Vector2(_fourPointsArray[2][u] / 400, _fourPointsArray[2][v] / 800),
        ]);
        _modelRawDatas.uvs[0].push([
            new THREE.Vector2(_fourPointsArray[0][u] / 400, _fourPointsArray[0][v] / 800),
            new THREE.Vector2(_fourPointsArray[2][u] / 400, _fourPointsArray[2][v] / 800),
            new THREE.Vector2(_fourPointsArray[3][u] / 400, _fourPointsArray[3][v] / 800),
        ]);
    }
    //从StructModelRawDatas构建一个Geometry出来。============================
    static MakeGeometryFromRawData(_rawData) {
        let returnGeometry = new THREE.Geometry();
        returnGeometry.vertices = _rawData.vertices;
        returnGeometry.faces = _rawData.faces;
        returnGeometry.faceVertexUvs = _rawData.uvs;
        returnGeometry.computeFaceNormals();
        returnGeometry.mergeVertices();
        return returnGeometry;
    }
    //获取模型中心点的自定义函数=================================================
    //_properties是一个数组，代表要获取的数据。可以写 center max min
    static GetModelCenter(_model, _properties) {
        var box = new THREE.Box3();
        box.expandByObject(_model);
        //let _centerPoint = new THREE.Vector3((box.max.x + box.min.x) / 2, (box.max.y + box.min.y) / 2, (box.max.z + box.min.z) / 2);
        let _centerPoint = new THREE.Vector3();
        box.getCenter(_centerPoint);
        let returnObj = {};
        if (_properties.indexOf("center") != -1) {
            returnObj.center = _centerPoint;
        }
        if (_properties.indexOf("max") != -1) {
            returnObj.max = box.max;
        }
        if (_properties.indexOf("min") != -1) {
            returnObj.min = box.min;
        }
        if (_properties.indexOf("size") != -1) {
            let _modelSize = new THREE.Vector3();
            box.getSize(_modelSize);
            returnObj.size = _modelSize;
        }
        return returnObj;
    }
    //计算一个放样模型被一个大平面截面后的模型========================================
    //第一个参数代表一个平面。
    //第二个参数代表放样模型的一圈点。
    //第三个参数代表放样模型的另外一圈点。
    static CutLoftModel(_bigPlane, _profilePosArray, _profilePosArray2) {
        //this.ExtenseLine(_profilePosArray[0],_profilePosArray2[0],2) ;
        let cutPlane = new THREE.Plane();
        cutPlane.setFromNormalAndCoplanarPoint(_bigPlane.dir, _bigPlane.centerPoint);
        let intersectPoints = [];
        for (let i = 0; i < _profilePosArray.length; i++) {
            let oneIntersectPoints = [];
            for (let j = 0; j < _profilePosArray[i].length; j++) {
                let line3 = new THREE.Line3(this.ExtenseLine(_profilePosArray[i][j], _profilePosArray2[i][j], 2), this.ExtenseLine(_profilePosArray2[i][j], _profilePosArray[i][j], 2));
                let intersectPoint = new THREE.Vector3();
                cutPlane.intersectLine(line3, intersectPoint);
                oneIntersectPoints.push(intersectPoint);
            }
            intersectPoints.push(oneIntersectPoints);
        }
        //返回的是一个二维的数组。
        return intersectPoints;
    }
    //让模型充满一个正方体框。本函数在本项目里是为了让五金件充满整个正方体框的。
    static ResizeHarwareModel(_model, _boxWidth, _boxHeight, _boxDepth) {
        _model.scale.x = _boxWidth / _model.userData.x3dsize.width;
        _model.scale.y = _boxHeight / _model.userData.x3dsize.height;
        _model.scale.z = _boxDepth / _model.userData.x3dsize.deep;
    }
    //把一个线段延长的自定义函数========================================================
    //第一个参数是被延长的点。
    //第二的参数是基于这个点来延长第一个参数。
    //第三个参数是延长的倍数。
    static ExtenseLine(_beExtensePoint, _extenseBaePoint, _extenseTimes) {
        let dir = _beExtensePoint.clone().sub(_extenseBaePoint);
        dir.multiplyScalar(_extenseTimes);
        return _extenseBaePoint.clone().add(dir);
    }
    //做兼容，获取材质的color某个属性值的。
    static GetMatProperty(_propertyName, _mat) {
        if (_mat.uniforms == undefined) {
            return _mat[_propertyName];
        }
        else {
            return _mat.uniforms[_propertyName].value;
        }
    }
    //做兼容，用来设置材质的某个属性值的。
    static SetMatProperty(_propertyName, _mat, _value) {
        if (_mat.uniforms == undefined) {
            _mat[_propertyName] = _value;
        }
        else {
            if (_mat.uniforms[_propertyName] != undefined) {
                _mat.uniforms[_propertyName].value = _value;
            }
        }
    }
}


/***/ }),

/***/ "./src/app/three/classes/ModelTransformer.ts":
/*!***************************************************!*\
  !*** ./src/app/three/classes/ModelTransformer.ts ***!
  \***************************************************/
/*! exports provided: ModelTransformer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModelTransformer", function() { return ModelTransformer; });
/* harmony import */ var _THREEDataServer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./THREEDataServer */ "./src/app/three/classes/THREEDataServer.ts");
/* harmony import */ var _dataStruct__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dataStruct */ "./src/app/three/classes/dataStruct.ts");
/* harmony import */ var _MyUtil__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./MyUtil */ "./src/app/three/classes/MyUtil.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/*
 作者：张建。
 类说明：这个用来做移动旋转模型工具用的。
*/




class ModelTransformer {
    constructor(_dataServer, _jDataServer) {
        this._jDataServer = _jDataServer;
        this.modelFather = null;
        this.rotateLineVisible = null; //用来做旋转的显示出来的那个圈，仅仅用来做显示。
        this.rotateLineCollider = null; //用来做旋转工具的碰撞线，仅仅用来做碰撞，不可见的。
        //垂直水平移动的那三条杆子。----------------------------------
        this.moveAixs = [];
        this.colliderAxis = []; //所有跟射线碰撞的操纵轴。
        this.mouseDownHitModel = null; //鼠标按下的时候被击中的模型。
        this.transformMode = _dataStruct__WEBPACK_IMPORTED_MODULE_1__["TransformMode"].none; //当前移动旋转工具所处的状态。
        this.horzontalPlane = null; //做旋转碰撞的时候使用到的超级大平面。
        this.any = null; //做垂直移动的时候用到的大平面。
        // private leftMouseIsDown: boolean = false;
        this.beControlObj = null; //当前被控制的模型。                      
        this.enabled = false; //这个移动旋转工具是否启用。
        this.ability = {
            rotatable: false,
            axisMovable: [],
        };
        this.allPos = {
            rotateMouseDownVector3: null,
            rotateMouseDownRadian: 0.0,
            rotateMouseDownScreenPos: null,
        };
        this.allColors = {
            normalColor: new THREE.Color(0x0000ff),
            activeColor: new THREE.Color(0xffffff),
            disabledColor: new THREE.Color(0x999999) //取消激活的移动旋转工具的颜色。
        };
        this.dataServer = _dataServer;
        this.jDataServer = _jDataServer;
        //为在屏幕操作摄像机开始绑定事件。------------------------------------------------------
        //-----------------------------------------------------------------------------------
        let mousedownEvent = _MyUtil__WEBPACK_IMPORTED_MODULE_2__["MyUtil"].MakeMouseEvent(this.OnMouseDown, this);
        this.dataServer.classesObj.canvasEventMaster.mouseDownEvents.push(mousedownEvent);
        let mousemoveEvent = _MyUtil__WEBPACK_IMPORTED_MODULE_2__["MyUtil"].MakeMouseEvent(this.OnMouseMove, this);
        this.dataServer.classesObj.canvasEventMaster.mouseMoveEvents.push(mousemoveEvent);
        let mouseupEvent = _MyUtil__WEBPACK_IMPORTED_MODULE_2__["MyUtil"].MakeMouseEvent(this.OnMouseUp, this);
        this.dataServer.classesObj.canvasEventMaster.globelMouseUpEvents.push(mouseupEvent);
        // let mouseOutEvent: EventData = MyUtil.MakeMouseEvent(this.OnMouseUp, this);
        // this.dataServer.classesObj.canvasEventMaster.mouseOutEvents.push(mouseOutEvent);
        //开始构建模型。-----------------------------------------------------------------------
        this.modelFather = new THREE.Object3D();
        this.dataServer.sceneCommonObj.scene.add(this.modelFather);
        this.modelFather.visible = false;
        this.moveAixs[_dataStruct__WEBPACK_IMPORTED_MODULE_1__["AxisType"].xAixs] = this.MakeAxisModel(_dataStruct__WEBPACK_IMPORTED_MODULE_1__["AxisType"].xAixs, 2000);
        this.moveAixs[_dataStruct__WEBPACK_IMPORTED_MODULE_1__["AxisType"].yAixs] = this.MakeAxisModel(_dataStruct__WEBPACK_IMPORTED_MODULE_1__["AxisType"].yAixs, 1200);
        this.moveAixs[_dataStruct__WEBPACK_IMPORTED_MODULE_1__["AxisType"].zAixs] = this.MakeAxisModel(_dataStruct__WEBPACK_IMPORTED_MODULE_1__["AxisType"].zAixs, 2000);
        this.ability.axisMovable[_dataStruct__WEBPACK_IMPORTED_MODULE_1__["AxisType"].xAixs] = true;
        this.ability.axisMovable[_dataStruct__WEBPACK_IMPORTED_MODULE_1__["AxisType"].yAixs] = true;
        this.ability.axisMovable[_dataStruct__WEBPACK_IMPORTED_MODULE_1__["AxisType"].zAixs] = true;
        for (let key in this.moveAixs) {
            this.colliderAxis.push(this.moveAixs[key].lineCollider);
            this.colliderAxis.push(this.moveAixs[key].backwardConeMesh);
            this.colliderAxis.push(this.moveAixs[key].forwardConeMesh);
        }
        //做旋转工具的显示线。-----------------------------------------------------
        let _circleLineMaterial = new THREE.LineDashedMaterial({ color: this.allColors.normalColor, dashSize: 50, gapSize: 25, linewidth: 10, depthTest: false, depthWrite: false });
        let _circleRadian = 500;
        let _circleGeom = new THREE.Geometry();
        let _step = 50;
        for (let i = 0; i < _step + 1; i++) {
            let _angle = 2 * Math.PI * i / _step;
            let _x = Math.cos(_angle) * _circleRadian;
            let _z = Math.sin(_angle) * _circleRadian;
            _circleGeom.vertices.push(new THREE.Vector3(_x, 0, _z));
        }
        this.rotateLineVisible = new THREE.Line(_circleGeom, _circleLineMaterial);
        this.rotateLineVisible.computeLineDistances();
        this.rotateLineVisible.renderOrder = 100000000;
        this.modelFather.add(this.rotateLineVisible);
        //做旋转工具的碰撞线。------------------------------------------------------
        this.rotateLineCollider = new THREE.Mesh(new THREE.TorusGeometry(_circleRadian, 40, 3, _step));
        this.rotateLineCollider.rotation.x = Math.PI / 2;
        this.rotateLineCollider.material = new THREE.MeshBasicMaterial({ visible: false });
        this.rotateLineCollider.name = "rotation";
        this.modelFather.add(this.rotateLineCollider);
        this.colliderAxis.push(this.rotateLineCollider);
        //制作放置在水平面上的大平面。-----------------------------------------------
        this.horzontalPlane = new THREE.Plane();
        //制作垂直放置的大平面。----------------------------------------------------
        this.verticalPlane = new THREE.Plane();
    }
    MakeAxisModel(_type, _lineHeight) {
        let _axisFarther = new THREE.Object3D();
        let _returnMoveAixs = new _dataStruct__WEBPACK_IMPORTED_MODULE_1__["MoveAxis"]();
        this.modelFather.add(_axisFarther);
        switch (_type) {
            case _dataStruct__WEBPACK_IMPORTED_MODULE_1__["AxisType"].xAixs:
                _axisFarther.rotation.z = Math.PI / 2;
                break;
            case _dataStruct__WEBPACK_IMPORTED_MODULE_1__["AxisType"].yAixs:
                _axisFarther.position.y = 600.0;
                break;
            case _dataStruct__WEBPACK_IMPORTED_MODULE_1__["AxisType"].zAixs:
                _axisFarther.rotation.x = Math.PI / 2;
                break;
        }
        //开始构建一个垂直移动的可视线。--------------------------------------------------------
        let _moveLineVisibleMaterial = new THREE.LineDashedMaterial({ color: this.allColors.normalColor, dashSize: 50, gapSize: 25, linewidth: 10, depthTest: false, depthWrite: false });
        let _moveLineVisibleGeom = new THREE.Geometry();
        _moveLineVisibleGeom.vertices.push(new THREE.Vector3(0, -_lineHeight / 2, 0), new THREE.Vector3(0, _lineHeight / 2, 0));
        _returnMoveAixs.lineVisible = new THREE.Line(_moveLineVisibleGeom, _moveLineVisibleMaterial);
        _returnMoveAixs.lineVisible.computeLineDistances();
        _returnMoveAixs.lineVisible.renderOrder = 100000000;
        _axisFarther.add(_returnMoveAixs.lineVisible);
        //做垂直移动的碰撞线。-----------------------------------------------------
        _returnMoveAixs.lineCollider = new THREE.Mesh(new THREE.BoxGeometry(25, _lineHeight, 25));
        _returnMoveAixs.lineCollider.material = new THREE.MeshBasicMaterial({ visible: false });
        _returnMoveAixs.lineCollider.name = _type;
        _axisFarther.add(_returnMoveAixs.lineCollider);
        //做垂直移动顶上的圆锥体。--------------------------------------------------
        _returnMoveAixs.forwardConeMesh = new THREE.Mesh(new THREE.ConeGeometry(30, 80, 8), new THREE.MeshBasicMaterial({ color: this.allColors.normalColor, depthTest: false, depthWrite: false }));
        _axisFarther.add(_returnMoveAixs.forwardConeMesh);
        _returnMoveAixs.forwardConeMesh.position.y = _lineHeight / 2;
        _returnMoveAixs.forwardConeMesh.name = _type;
        _returnMoveAixs.forwardConeMesh.renderOrder = 100000000;
        _returnMoveAixs.backwardConeMesh = new THREE.Mesh(new THREE.ConeGeometry(30, 80, 8), new THREE.MeshBasicMaterial({ color: this.allColors.normalColor, depthTest: false, depthWrite: false }));
        _axisFarther.add(_returnMoveAixs.backwardConeMesh);
        _returnMoveAixs.backwardConeMesh.rotation.x = Math.PI;
        _returnMoveAixs.backwardConeMesh.position.y = -_lineHeight / 2;
        _returnMoveAixs.backwardConeMesh.name = _type;
        _returnMoveAixs.backwardConeMesh.renderOrder = 100000000;
        return _returnMoveAixs;
    }
    /**
     * 设置这个移动旋转工具是否可以旋转模型。
     * @param _rotable
     */
    SetRotatable(_rotable) {
        this.ability.rotatable = _rotable;
        if (_rotable == true) {
            this.rotateLineCollider.position.y = 0;
            this.rotateLineVisible.material.color = this.allColors.normalColor;
        }
        else {
            this.rotateLineCollider.position.y = 999999999;
            this.rotateLineVisible.material.color = this.allColors.disabledColor;
        }
    }
    /**
     *
     */
    SetVerticalMovable(_verticalMovable) {
        this.ability.axisMovable[_dataStruct__WEBPACK_IMPORTED_MODULE_1__["AxisType"].yAixs] = _verticalMovable;
        if (_verticalMovable == true) {
            this.moveAixs[_dataStruct__WEBPACK_IMPORTED_MODULE_1__["AxisType"].yAixs].lineCollider.position.y = 0;
            this.moveAixs[_dataStruct__WEBPACK_IMPORTED_MODULE_1__["AxisType"].yAixs].lineVisible.material.color = this.allColors.normalColor;
            this.moveAixs[_dataStruct__WEBPACK_IMPORTED_MODULE_1__["AxisType"].yAixs].forwardConeMesh.material.color = this.allColors.normalColor;
            this.moveAixs[_dataStruct__WEBPACK_IMPORTED_MODULE_1__["AxisType"].yAixs].backwardConeMesh.material.color = this.allColors.normalColor;
            //把两端的两个圆锥体放大到正常的大小。---------------------------------
            this.moveAixs[_dataStruct__WEBPACK_IMPORTED_MODULE_1__["AxisType"].yAixs].forwardConeMesh.scale.x = 1.0;
            this.moveAixs[_dataStruct__WEBPACK_IMPORTED_MODULE_1__["AxisType"].yAixs].forwardConeMesh.scale.y = 1.0;
            this.moveAixs[_dataStruct__WEBPACK_IMPORTED_MODULE_1__["AxisType"].yAixs].forwardConeMesh.scale.z = 1.0;
            this.moveAixs[_dataStruct__WEBPACK_IMPORTED_MODULE_1__["AxisType"].yAixs].backwardConeMesh.scale.x = 1.0;
            this.moveAixs[_dataStruct__WEBPACK_IMPORTED_MODULE_1__["AxisType"].yAixs].backwardConeMesh.scale.y = 1.0;
            this.moveAixs[_dataStruct__WEBPACK_IMPORTED_MODULE_1__["AxisType"].yAixs].backwardConeMesh.scale.z = 1.0;
        }
        else {
            this.moveAixs[_dataStruct__WEBPACK_IMPORTED_MODULE_1__["AxisType"].yAixs].lineCollider.position.y = 999999999;
            this.moveAixs[_dataStruct__WEBPACK_IMPORTED_MODULE_1__["AxisType"].yAixs].lineVisible.material.color = this.allColors.disabledColor;
            this.moveAixs[_dataStruct__WEBPACK_IMPORTED_MODULE_1__["AxisType"].yAixs].forwardConeMesh.material.color = this.allColors.disabledColor;
            this.moveAixs[_dataStruct__WEBPACK_IMPORTED_MODULE_1__["AxisType"].yAixs].backwardConeMesh.material.color = this.allColors.disabledColor;
            //把两端的两个圆锥体缩小得非常非常小。---------------------------------
            this.moveAixs[_dataStruct__WEBPACK_IMPORTED_MODULE_1__["AxisType"].yAixs].forwardConeMesh.scale.x = 0.0001;
            this.moveAixs[_dataStruct__WEBPACK_IMPORTED_MODULE_1__["AxisType"].yAixs].forwardConeMesh.scale.y = 0.0001;
            this.moveAixs[_dataStruct__WEBPACK_IMPORTED_MODULE_1__["AxisType"].yAixs].forwardConeMesh.scale.z = 0.0001;
            this.moveAixs[_dataStruct__WEBPACK_IMPORTED_MODULE_1__["AxisType"].yAixs].backwardConeMesh.scale.x = 0.0001;
            this.moveAixs[_dataStruct__WEBPACK_IMPORTED_MODULE_1__["AxisType"].yAixs].backwardConeMesh.scale.y = 0.0001;
            this.moveAixs[_dataStruct__WEBPACK_IMPORTED_MODULE_1__["AxisType"].yAixs].backwardConeMesh.scale.z = 0.0001;
        }
    }
    //设置移动旋转工具在世界坐标中的位置。========================================================
    SetTransformerPos(_pos) {
        this.modelFather.position.copy(_pos);
        //设置巨大水平面的位置和朝向。------------------------------------------
        this.horzontalPlane.setFromNormalAndCoplanarPoint(new THREE.Vector3(0, 1, 0), _pos);
        //摄像机的2d位置，里面有x y分量。---------------------------------------
        let _camera2dPos = this.jDataServer.camera.pos;
        //移动旋转工具指向摄像机的向量。-----------------------------------------
        let _toolToCamVector = new THREE.Vector3(_camera2dPos.x - this.modelFather.position.x, 0, _camera2dPos.y - this.modelFather.position.z).normalize();
        //设置巨大垂直平面的位置和朝向。-----------------------------------------
        this.verticalPlane.setFromNormalAndCoplanarPoint(_toolToCamVector, _pos);
    }
    /**
     * 设置当前被控制的模型。=====================================================================
     * @param _beControlModel
     */
    SetControlModel(_beControlModel) {
        this.beControlObj = _beControlModel;
    }
    /**
     * 清空当前被控制的模型的这个参数。============================================================
     */
    ClearControlModel() {
        this.beControlObj = null;
    }
    //当鼠标单击下去的时候触发的函数。==========================================================
    OnMouseDown(_ev, _scope) {
        if (_scope.enabled == false) {
            return;
        }
        if (_ev.button == 0) {
            _scope.dataServer.params.leftMouseIsDown = true;
        }
        let _3dCamera = _scope.jDataServer.camera._3Dcamera;
        _MyUtil__WEBPACK_IMPORTED_MODULE_2__["MyUtil"].ShootRayToModel(_scope.dataServer, new THREE.Vector2(_ev.offsetX, _ev.offsetY), _3dCamera, _scope.colliderAxis, false, (_beHitLine, _hitPoint) => {
            _scope.mouseDownHitModel = _beHitLine;
            //如果单击中了移动工具的那条线，则再发出一条射线来跟垂直大平面面产生碰撞。----------------
            //----------------------------------------------------------------------------------
            //----------------------------------------------------------------------------------
            let _mouseDownHitPlane;
            switch (_beHitLine.name) {
                case _dataStruct__WEBPACK_IMPORTED_MODULE_1__["AxisType"].xAixs:
                    _mouseDownHitPlane = _scope.horzontalPlane;
                    _scope.transformMode = _dataStruct__WEBPACK_IMPORTED_MODULE_1__["TransformMode"].moveX;
                    break;
                case _dataStruct__WEBPACK_IMPORTED_MODULE_1__["AxisType"].yAixs:
                    _mouseDownHitPlane = _scope.verticalPlane;
                    _scope.transformMode = _dataStruct__WEBPACK_IMPORTED_MODULE_1__["TransformMode"].moveY;
                    break;
                case _dataStruct__WEBPACK_IMPORTED_MODULE_1__["AxisType"].zAixs:
                    _mouseDownHitPlane = _scope.horzontalPlane;
                    _scope.transformMode = _dataStruct__WEBPACK_IMPORTED_MODULE_1__["TransformMode"].moveZ;
                    break;
                case "rotation":
                    _mouseDownHitPlane = _scope.horzontalPlane;
                    _scope.transformMode = _dataStruct__WEBPACK_IMPORTED_MODULE_1__["TransformMode"].rotate;
                    break;
            }
            _MyUtil__WEBPACK_IMPORTED_MODULE_2__["MyUtil"].ShootRayToModel(_scope.dataServer, new THREE.Vector2(_ev.offsetX, _ev.offsetY), _3dCamera, [], true, (_beHitLine, _hitPoint) => {
                switch (_scope.transformMode) {
                    case _dataStruct__WEBPACK_IMPORTED_MODULE_1__["TransformMode"].moveX:
                        _scope.moveAixs[_dataStruct__WEBPACK_IMPORTED_MODULE_1__["AxisType"].xAixs].moveMouseDownHitPos = _hitPoint.x;
                        _scope.moveAixs[_dataStruct__WEBPACK_IMPORTED_MODULE_1__["AxisType"].xAixs].moveMouseDownModelAxisPos = _MyUtil__WEBPACK_IMPORTED_MODULE_2__["MyUtil"].GetMeshLongObj(_scope.beControlObj).pos.x;
                        break;
                    case _dataStruct__WEBPACK_IMPORTED_MODULE_1__["TransformMode"].moveY:
                        _scope.moveAixs[_dataStruct__WEBPACK_IMPORTED_MODULE_1__["AxisType"].yAixs].moveMouseDownHitPos = _hitPoint.y;
                        //记录当前模型的离地高度。------------------------------------------------------------------
                        _scope.moveAixs[_dataStruct__WEBPACK_IMPORTED_MODULE_1__["AxisType"].yAixs].moveMouseDownModelAxisPos = _MyUtil__WEBPACK_IMPORTED_MODULE_2__["MyUtil"].GetMeshLongObj(_scope.beControlObj).floorHeight;
                        break;
                    case _dataStruct__WEBPACK_IMPORTED_MODULE_1__["TransformMode"].moveZ:
                        _scope.moveAixs[_dataStruct__WEBPACK_IMPORTED_MODULE_1__["AxisType"].zAixs].moveMouseDownHitPos = _hitPoint.z;
                        _scope.moveAixs[_dataStruct__WEBPACK_IMPORTED_MODULE_1__["AxisType"].zAixs].moveMouseDownModelAxisPos = _MyUtil__WEBPACK_IMPORTED_MODULE_2__["MyUtil"].GetMeshLongObj(_scope.beControlObj).pos.y;
                        break;
                    case _dataStruct__WEBPACK_IMPORTED_MODULE_1__["TransformMode"].rotate:
                        _scope.allPos.rotateMouseDownVector3 = _hitPoint.clone().sub(_scope.modelFather.position);
                        _scope.allPos.rotateMouseDownScreenPos = new THREE.Vector3(_ev.clientX, _ev.clientY);
                        //记录当前模型的旋转值。------------------------------------------------------------------
                        _scope.allPos.rotateMouseDownRadian = _MyUtil__WEBPACK_IMPORTED_MODULE_2__["MyUtil"].GetMeshLongObj(_scope.beControlObj).radian;
                        break;
                }
            }, () => {
            }, _mouseDownHitPlane);
        }, () => {
            _scope.mouseDownHitModel = null;
            _scope.transformMode = _dataStruct__WEBPACK_IMPORTED_MODULE_1__["TransformMode"].none;
        });
    }
    //当鼠标移动的时候触发的函数。==============================================================
    OnMouseMove(_ev, _scope) {
        if (_scope.enabled == false) {
            return;
        }
        let _3dCamera = _scope.jDataServer.camera._3Dcamera;
        //当1、不是移动也不是旋转的状态的时候。2、鼠标没有按下左键拖动的时候。3、不是正在创建模型的时候   才开始通过碰撞检测来控制移动旋转工具的颜色。
        if (_scope.transformMode == _dataStruct__WEBPACK_IMPORTED_MODULE_1__["TransformMode"].none && _scope.dataServer.params.leftMouseIsDown == false && _scope.dataServer.creatingLongObj == null) {
            _MyUtil__WEBPACK_IMPORTED_MODULE_2__["MyUtil"].ShootRayToModel(_scope.dataServer, new THREE.Vector2(_ev.offsetX, _ev.offsetY), _3dCamera, _scope.colliderAxis, false, (_beHitLine, _hitPoint) => {
                if (_beHitLine.name == "rotation") {
                    _scope.rotateLineVisible.material.color = _scope.allColors.activeColor;
                    for (let key in _scope.moveAixs) {
                        _scope.moveAixs[key].lineVisible.material.color = _scope.allColors.normalColor;
                        _scope.moveAixs[key].forwardConeMesh.material.color = _scope.allColors.normalColor;
                        _scope.moveAixs[key].backwardConeMesh.material.color = _scope.allColors.normalColor;
                    }
                }
                else {
                    for (let key in _scope.moveAixs) {
                        if (key == _beHitLine.name) {
                            _scope.moveAixs[key].lineVisible.material.color = _scope.allColors.activeColor;
                            _scope.moveAixs[key].forwardConeMesh.material.color = _scope.allColors.activeColor;
                            _scope.moveAixs[key].backwardConeMesh.material.color = _scope.allColors.activeColor;
                        }
                        else {
                            _scope.moveAixs[key].lineVisible.material.color = _scope.ability.axisMovable[key] ? _scope.allColors.normalColor : _scope.allColors.disabledColor;
                            _scope.moveAixs[key].forwardConeMesh.material.color = _scope.ability.axisMovable[key] ? _scope.allColors.normalColor : _scope.allColors.disabledColor;
                            _scope.moveAixs[key].backwardConeMesh.material.color = _scope.ability.axisMovable[key] ? _scope.allColors.normalColor : _scope.allColors.disabledColor;
                        }
                    }
                    _scope.rotateLineVisible.material.color = _scope.ability.rotatable ? _scope.allColors.normalColor : _scope.allColors.disabledColor;
                }
            }, () => {
                for (let key in _scope.moveAixs) {
                    _scope.moveAixs[key].lineVisible.material.color = _scope.ability.axisMovable[key] ? _scope.allColors.normalColor : _scope.allColors.disabledColor;
                    _scope.moveAixs[key].forwardConeMesh.material.color = _scope.ability.axisMovable[key] ? _scope.allColors.normalColor : _scope.allColors.disabledColor;
                    _scope.moveAixs[key].backwardConeMesh.material.color = _scope.ability.axisMovable[key] ? _scope.allColors.normalColor : _scope.allColors.disabledColor;
                }
                _scope.rotateLineVisible.material.color = _scope.ability.rotatable ? _scope.allColors.normalColor : _scope.allColors.disabledColor;
            });
        }
        //当移动旋转工具激活的情况下在视图中拖拽的话。=========================================
        if (_scope.dataServer.params.leftMouseIsDown == true) {
            let _mouseDownHitPlane;
            switch (_scope.transformMode) {
                case _dataStruct__WEBPACK_IMPORTED_MODULE_1__["TransformMode"].moveX:
                    _mouseDownHitPlane = _scope.horzontalPlane;
                    break;
                case _dataStruct__WEBPACK_IMPORTED_MODULE_1__["TransformMode"].moveY:
                    _mouseDownHitPlane = _scope.verticalPlane;
                    break;
                case _dataStruct__WEBPACK_IMPORTED_MODULE_1__["TransformMode"].moveZ:
                    _mouseDownHitPlane = _scope.horzontalPlane;
                    break;
                case _dataStruct__WEBPACK_IMPORTED_MODULE_1__["TransformMode"].rotate:
                    _mouseDownHitPlane = _scope.horzontalPlane;
                    break;
            }
            _MyUtil__WEBPACK_IMPORTED_MODULE_2__["MyUtil"].ShootRayToModel(_scope.dataServer, new THREE.Vector2(_ev.offsetX, _ev.offsetY), _3dCamera, [], true, (_beHitLine, _hitPoint) => {
                let _currentLongObj = _MyUtil__WEBPACK_IMPORTED_MODULE_2__["MyUtil"].GetMeshLongObj(_scope.beControlObj);
                //当前所选的模型的模型类型。---------------------------------------------------------
                let _currentModelType = _scope.beControlObj.userData.customUserData.modelType;
                switch (_scope.transformMode) {
                    case _dataStruct__WEBPACK_IMPORTED_MODULE_1__["TransformMode"].moveX:
                        let _modelXpos = _scope.moveAixs[_dataStruct__WEBPACK_IMPORTED_MODULE_1__["AxisType"].xAixs].moveMouseDownModelAxisPos + _hitPoint.x - _scope.moveAixs[_dataStruct__WEBPACK_IMPORTED_MODULE_1__["AxisType"].xAixs].moveMouseDownHitPos;
                        //在X轴上移动家具模型。--------------------------
                        if (_currentModelType == _dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].furniture) {
                            _scope.jDataServer.cache.furniture.move(_currentLongObj, { x: _modelXpos, y: _currentLongObj.pos.y });
                        }
                        //在x轴上移动烟道模型。--------------------------
                        if (_currentModelType == _dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].build) {
                            _scope.jDataServer.cache.build.move(_currentLongObj, { x: _modelXpos, y: _currentLongObj.pos.y });
                        }
                        //在X轴上移动门窗或者飘窗的模型。--------------------------
                        else if (_currentModelType == _dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].window || _currentModelType == _dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].door || _currentModelType == _dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].normalBayWindow) {
                            _scope.jDataServer.cache.doorWin.move(_currentLongObj, { x: _modelXpos, y: _currentLongObj.pos.y });
                        }
                        break;
                    case _dataStruct__WEBPACK_IMPORTED_MODULE_1__["TransformMode"].moveY:
                        // //记录当前模型的离地高度。------------------------------------------------------------------
                        _currentLongObj.UpdatePos(_scope.moveAixs[_dataStruct__WEBPACK_IMPORTED_MODULE_1__["AxisType"].yAixs].moveMouseDownModelAxisPos + (_hitPoint.y - _scope.moveAixs[_dataStruct__WEBPACK_IMPORTED_MODULE_1__["AxisType"].yAixs].moveMouseDownHitPos));
                        break;
                    case _dataStruct__WEBPACK_IMPORTED_MODULE_1__["TransformMode"].moveZ:
                        let _modelZpos = _scope.moveAixs[_dataStruct__WEBPACK_IMPORTED_MODULE_1__["AxisType"].zAixs].moveMouseDownModelAxisPos + _hitPoint.z - _scope.moveAixs[_dataStruct__WEBPACK_IMPORTED_MODULE_1__["AxisType"].zAixs].moveMouseDownHitPos;
                        //在Z轴上移动家具模型。---------------------------------
                        if (_currentModelType == _dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].furniture) {
                            _scope.jDataServer.cache.furniture.move(_currentLongObj, { x: _currentLongObj.pos.x, y: _modelZpos });
                        }
                        //在Z轴上移动烟道模型。---------------------------------
                        if (_currentModelType == _dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].build) {
                            _scope.jDataServer.cache.build.move(_currentLongObj, { x: _currentLongObj.pos.x, y: _modelZpos });
                        }
                        //在Z轴上移动门窗或者飘窗的模型。----------------------------------
                        else if (_currentModelType == _dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].window || _currentModelType == _dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].door || _currentModelType == _dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].normalBayWindow) {
                            _scope.jDataServer.cache.doorWin.move(_currentLongObj, { x: _currentLongObj.pos.x, y: _modelZpos });
                        }
                        break;
                    case _dataStruct__WEBPACK_IMPORTED_MODULE_1__["TransformMode"].rotate:
                        let _currentHitPlanePos = _hitPoint;
                        //当前移动旋转工具中心
                        let _currentVector = _currentHitPlanePos.clone().sub(_scope.modelFather.position);
                        let _crossVec = _currentVector.clone().cross(_scope.allPos.rotateMouseDownVector3);
                        let _xiShu = 1; //系数，用来决定正负。
                        if (_crossVec.y < 0) {
                            _xiShu = -1;
                        }
                        let _horizotalMouseDistance = Math.abs(_ev.clientX - _scope.allPos.rotateMouseDownScreenPos.x);
                        let _verticalMouseDistance = Math.abs(_ev.clientY - _scope.allPos.rotateMouseDownScreenPos.y);
                        _scope.jDataServer.cache.furniture.rotate(_MyUtil__WEBPACK_IMPORTED_MODULE_2__["MyUtil"].GetMeshLongObj(_scope.beControlObj), _scope.allPos.rotateMouseDownRadian + _xiShu * Math.max(_horizotalMouseDistance, _verticalMouseDistance) / 150);
                        break;
                }
            }, () => {
            }, _mouseDownHitPlane);
            // }
        }
    }
    //当鼠标弹起的时候触发的函数。==============================================================
    OnMouseUp(_ev, _scope) {
        _scope.dataServer.params.leftMouseIsDown = false;
        _scope.transformMode = _dataStruct__WEBPACK_IMPORTED_MODULE_1__["TransformMode"].none;
    }
    //设置这个移动旋转工具可用或者不可用。=======================================================
    SetEnable(_enabled) {
        this.modelFather.visible = _enabled;
        this.enabled = _enabled;
    }
}
ModelTransformer.ctorParameters = () => [
    { type: _THREEDataServer__WEBPACK_IMPORTED_MODULE_0__["THREEDataServer"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_3__["JdesignDataService"] }
];


/***/ }),

/***/ "./src/app/three/classes/MyUtil.ts":
/*!*****************************************!*\
  !*** ./src/app/three/classes/MyUtil.ts ***!
  \*****************************************/
/*! exports provided: MyUtil */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MyUtil", function() { return MyUtil; });
/* harmony import */ var _dataStruct__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dataStruct */ "./src/app/three/classes/dataStruct.ts");
/*
 作者：张建。
 类说明：这个类存放一些做工具的方法。
*/

class MyUtil {
    /**
     * 钳制一个值在一个范围之内。=============================
     * @param _value 要被钳制的值。
     * @param _min 被钳制的最小值。
     * @param _max 被钳制的最大值。
     */
    static Clamp(_value, _min, _max) {
        let _returnValue = Math.max(_min, _value);
        _returnValue = Math.min(_max, _returnValue);
        return _returnValue;
    }
    /**
     * 用来判断阿隆自定义vector2或vector3的数组是否一样。
     * @param _array1 阿隆定义的vector2或vector3构成的数组1
     * @param _array2 阿隆定义的vector2或vector3构成的数组2
     * @param properties 这个vector2里要检查的属性值比如["x","y"]，或者["width","height"]
     */
    static IfArrayTheSame(_array1, _array2, properties) {
        if (_array1.length != _array2.length) {
            return false;
        }
        else {
            let returnValue = true;
            for (let i = 0; i < _array1.length; i++) {
                for (let j = 0; j < properties.length; j++) {
                    if (_array1[i][properties[j]] != _array2[i][properties[j]]) {
                        returnValue = false;
                        break;
                    }
                }
            }
            return returnValue;
        }
    }
    /**
     * 工厂模式生产一个事件对象。=============================================================================
     * @param _fuc
     */
    static MakeMouseEvent(_fuc, _scope) {
        let mouseEvent = new _dataStruct__WEBPACK_IMPORTED_MODULE_0__["EventData"]();
        mouseEvent.scope = _scope;
        mouseEvent.fuc = _fuc;
        return mouseEvent;
    }
    /**
     * 把array的值缩小到一定的范围内。=================================================
     * @param _size
     * @param _profileArray  数据是这样的结构[[x,y],[x,y],[x,y],[x,y]]
     * @returns              数据是这样的结构[[x,y],[x,y],[x,y],[x,y]]
     */
    static ClampArray(_size, _profileArray) {
        let _maxValue = {
            x: _profileArray[0][0],
            y: _profileArray[0][1]
        };
        let _minValue = {
            x: _profileArray[0][0],
            y: _profileArray[0][1]
        };
        for (let i = 1; i < _profileArray.length; i++) {
            if (_maxValue.x < _profileArray[i][0]) {
                _maxValue.x = _profileArray[i][0];
            }
            if (_minValue.x > _profileArray[i][0]) {
                _minValue.x = _profileArray[i][0];
            }
            if (_maxValue.y < _profileArray[i][1]) {
                _maxValue.y = _profileArray[i][1];
            }
            if (_minValue.y > _profileArray[i][1]) {
                _minValue.y = _profileArray[i][1];
            }
        }
        //让图形在水平垂直方向上移动一下，移动到指定的范围内。---------------------------------------------
        for (let i = 0; i < _profileArray.length; i++) {
            _profileArray[i][0] -= _minValue.x;
            _profileArray[i][1] -= _minValue.y;
        }
        let _actualWidth = _maxValue.x - _minValue.x;
        let _actualHeight = _maxValue.y - _minValue.y;
        let _widthScale = _size.x / _actualWidth;
        let _heightScale = _size.y / _actualHeight;
        let _returnArray = [];
        for (let i = 0; i < _profileArray.length; i++) {
            _returnArray.push([_profileArray[i][0] * _widthScale, _profileArray[i][1] * _heightScale]);
        }
        return _returnArray;
    }
    /**
     * 把array数据水平或垂直翻转一下。==================================================
     * @param _profileArray  数据是这样的结构[[x,y],[x,y],[x,y],[x,y]]
     * @param _isHorizontal  是否水平翻转？true就是水平翻转，false则为垂直翻转。
     * @returns              数据是这样的结构[[x,y],[x,y],[x,y],[x,y]]
     */
    static FlipArray(_profileArray, _isHorizontal) {
        let _returnArray = [];
        for (let i = 0; i < _profileArray.length; i++) {
            let _index = _profileArray.length - 1 - i;
            if (_isHorizontal) {
                _returnArray.push([_profileArray[_index][0], -_profileArray[_index][1]]);
            }
            else {
                _returnArray.push([-_profileArray[_index][0], _profileArray[_index][1]]);
            }
        }
        return _returnArray;
    }
    /**
     * 根据平面重新生成一圈模型。======================================================
     * @param _formerRing    原来剖面的一圈点。-------------------
     * @param _oppositeRing  对面剖面的一圈点。-------------------
     * @param _plane         用来做裁切的平面。-------------------
     */
    static MakeNewRingPoints(_formerRing, _oppositeRing, _plane) {
        //如果没有裁切平面，直接把原来那一圈点返回。
        if (_plane == null) {
            return _formerRing;
        }
        else {
            //先把原来一圈点延长一下。
            let longerPointRing = [];
            for (let i = 0; i < _formerRing.length; i++) {
                let _newPoint = _formerRing[i].clone().add(_formerRing[i].clone().sub(_oppositeRing[i]));
                longerPointRing.push(_newPoint);
            }
            let _returnRing = [];
            for (let i = 0; i < longerPointRing.length; i++) {
                let _oneLine3 = new THREE.Line3(longerPointRing[i], _oppositeRing[i]);
                let _intersectPoint = new THREE.Vector3();
                _plane.intersectLine(_oneLine3, _intersectPoint);
                _returnRing.push(_intersectPoint);
            }
            return _returnRing;
        }
    }
    static GetModelSizeAndMinAndCenter(_model) {
        let _box = new THREE.Box3();
        _box.expandByObject(_model);
        let _size = new THREE.Vector3();
        _box.getSize(_size);
        let _center = new THREE.Vector3();
        _box.getCenter(_center);
        return {
            min: _box.min,
            size: _size,
            center: _center
        };
    }
    /**
     * 从鼠标点击的地方发出一条射线，和指定的模型发生射线碰撞。=========================================
     * @param _dataServer
     * @param _mousePos
     * @param _3dCamera
     * @param _modelList
     * @param _includeBigPlane   当前面的模型都没有检测到碰撞的话，是否要跟大地面进行一下碰撞检测？
     * @param _OnModelHit        当有模型被单击中的时候触发的函数。
     * @param _OnNothingHit      当没有任何模型被单击的时候触发的函数。
     *  @param _replacePlane      如果不想使用_dataServer.classesObj.rayHitModelList.bigPlane这个平面做碰撞，那么你这里传一个新的平面进来吧。
     */
    static ShootRayToModel(_dataServer, _mousePos, _3dCamera, _modelList, _includeBigPlane, _OnModelHit, _OnNothingHit, _replacePlane) {
        let _raycaster = _dataServer.rayhitObjs.raycaster;
        let _rayHitMousePos = _dataServer.rayhitObjs.rayHitMousePos;
        let _hitXPos = _mousePos.x;
        let _hitYPos = _mousePos.y;
        let _canvas = _dataServer.sceneCommonObj.mainCanvas;
        let _canvasRect = _canvas.getBoundingClientRect();
        //低分辨率下的模型点击要进行特殊的处理。------------------------------------
        let _chengshu = 1.0;
        if (_dataServer.params.lowQuality == true) {
            _chengshu = 3.0;
        }
        // _rayHitMousePos.x = ((_hitXPos - _canvasRect.left) - _canvas.width * _chengshu / 2) / (_canvas.width * _chengshu / 2);
        // _rayHitMousePos.y = (_canvas.height * _chengshu / 2 - (_hitYPos - _canvasRect.top)) / (_canvas.height * _chengshu / 2);
        _rayHitMousePos.x = ((_hitXPos) - _canvas.width * _chengshu / 2) / (_canvas.width * _chengshu / 2);
        _rayHitMousePos.y = (_canvas.height * _chengshu / 2 - _hitYPos) / (_canvas.height * _chengshu / 2);
        if (_3dCamera != undefined) {
            _raycaster.setFromCamera(_rayHitMousePos, _3dCamera);
            let _intersetObj = null;
            let _intersetPos = null;
            let intersets = _raycaster.intersectObjects(_modelList);
            if (intersets.length > 0) {
                //第一个返回参数是被单击的模型，第二个返回的参数返回的是击中的点。
                _intersetObj = intersets[0].object;
                _intersetPos = intersets[0].point;
            }
            //如果还要检测和超大的平面碰撞。
            if (_includeBigPlane == true) {
                if (_intersetPos == null) {
                    _raycaster.setFromCamera(_rayHitMousePos, _3dCamera);
                    let _planeHitPos = new THREE.Vector3();
                    let _theIntersetPlane;
                    if (_replacePlane == undefined) {
                        _theIntersetPlane = _dataServer.classesObj.rayHitModelList.bigPlane;
                    }
                    else {
                        _theIntersetPlane = _replacePlane;
                    }
                    let _intersetPoint = _raycaster.ray.intersectPlane(_theIntersetPlane, _planeHitPos);
                    _intersetPos = _intersetPoint;
                }
            }
            if (_intersetPos == null) {
                _OnNothingHit();
            }
            else {
                _OnModelHit(_intersetObj, _intersetPos);
            }
        }
    }
    // public static ShootRayToBigPlane(_dataServer: THREEDataServer, _mousePos, _3dCamera, _bigPlane, _OnModelHit) {
    //     let _raycaster = _dataServer.rayhitObjs.raycaster;
    //     let _rayHitMousePos = _dataServer.rayhitObjs.rayHitMousePos;
    //     let _hitXPos = _mousePos.x;
    //     let _hitYPos = _mousePos.y;
    //     let _canvas = _dataServer.sceneCommonObj.mainCanvas;
    //     let _canvasRect = _canvas.getBoundingClientRect();
    //     //低分辨率下的模型点击要进行特殊的处理。------------------------------------
    //     let _chengshu = 1.0;
    //     if (_dataServer.params.lowQuality == true) {
    //         _chengshu = 3.0;
    //     }
    //     _rayHitMousePos.x = ((_hitXPos - _canvasRect.left) - _canvas.width * _chengshu / 2) / (_canvas.width * _chengshu / 2);
    //     _rayHitMousePos.y = (_canvas.height * _chengshu / 2 - (_hitYPos - _canvasRect.top)) / (_canvas.height * _chengshu / 2);
    //     if (_3dCamera != undefined) {
    //         _raycaster.setFromCamera(_rayHitMousePos, _3dCamera);
    //         let _planeHitPos = new THREE.Vector3();
    //         let _intersetPoint = _raycaster.ray.intersectPlane(_bigPlane, _planeHitPos);
    //         _OnModelHit(_intersetPoint);
    //     }
    // }
    static GetMeshLongObj(_mesh) {
        return _mesh.userData.customUserData.longObj;
    }
    /**
     * 求两个向量的夹角======================================================
     * @param _vec1
     * @param _vec2
     * @param _camera 当前使用的摄像机对象。
     */
    static GetAngle(_vec1, _vec2, _camera) {
        let a_b = _vec1.x * _vec2.x + _vec1.y * _vec2.y + _vec1.z * _vec2.z;
        let aMod = Math.sqrt(Math.pow(_vec1.x, 2) + Math.pow(_vec1.y, 2) + Math.pow(_vec1.z, 2));
        let bMod = Math.sqrt(Math.pow(_vec2.x, 2) + Math.pow(_vec2.y, 2) + Math.pow(_vec2.z, 2));
        //摄像机的朝前方向。----------------------------------------
        let cameraForward = new THREE.Vector3(0.0, 0.0, 1.0).applyQuaternion(_camera.quaternion);
        //求两个向量的叉乘。得出叉乘结果A----------------------------------------
        let _crossVec = _vec1.clone().cross(_vec2);
        //叉乘结果A和摄像机的朝前方向进行点乘，根据点乘值来决定角度的正负。-------------
        let _dotValue = cameraForward.dot(_crossVec);
        if (_dotValue < 0) {
            return -Math.acos(a_b / (aMod * bMod));
        }
        else {
            return Math.acos(a_b / (aMod * bMod));
        }
    }
    /**
     * 检查一个点是否在一个多边形的内容，这个多边形不能有自相交哦，目前只考虑凸多边形============
     * @param _point 是一个vector2
     * @param _polyPoints 是一个vector2数组。
     * @returns 如果点在多边形里面，则返回true，否则返回false。
     */
    static IsInPoly(_point, _polyPoints) {
        let dirs = [];
        for (let i = 0; i < _polyPoints.length; i++) {
            dirs.push(_polyPoints[i].clone().sub(_point));
        }
        let dirV3s = [];
        for (let i = 0; i < dirs.length; i++) {
            let _dirV3 = new THREE.Vector3(dirs[i].x, 0.0, dirs[i].y);
            dirV3s.push(_dirV3);
        }
        let _angleSum = 0.0;
        for (let i = 0; i < dirV3s.length; i++) {
            let _nextI = i + 1;
            if (_nextI == dirV3s.length) {
                _nextI = 0;
            }
            let _angle = dirV3s[i].angleTo(dirV3s[_nextI]);
            _angleSum += _angle;
        }
        return (Math.abs(_angleSum - Math.PI * 2) < 0.01);
    }
    //求两根直线的交点的自定义函数。===================================================
    //四个参数都是vector2。
    //第一个参数是第一根线段的一个端点。
    //第二个参数是第一根线段的另一个端点。
    //第三个参数是第二根线段的一个端点。
    //第四个参数是第二根线段的另一个端点。
    static GetInsectPoint(a, b, c, d) {
        let p = new THREE.Vector2();
        let r, u;
        let delta = (b.x - a.x) * (c.y - d.y) - (c.x - d.x) * (b.y - a.y);
        if (delta == 0) {
            p.x = 100000;
            p.y = 100000;
        }
        else {
            r = ((c.x - a.x) * (c.y - d.y) - (c.x - d.x) * (c.y - a.y)) / delta;
            u = ((b.x - a.x) * (c.y - a.y) - (c.x - a.x) * (b.y - a.y)) / delta;
            p.x = a.x + r * (b.x - a.x);
            p.y = a.y + r * (b.y - a.y);
        }
        return p;
    }
    /**
     * 在一个数组里删除某一个特定的元素。======================================================
     * @param array
     * @param item
     */
    static RemoveItem(array, item) {
        var index = array.indexOf(item);
        if (index > -1) {
            array.splice(index, 1);
        }
    }
    /**
     * 计算一个二维向量顺时针方向和另外一个向量的夹角。==================================================
     *  @param _vector1
     * @param _vector2
    */
    static GetAngleFrom2Vector(_vector1, _vector2) {
        let up = _vector1.x * _vector2.x + _vector1.y * _vector2.y;
        let down = Math.sqrt(Math.pow(_vector1.x, 2) + Math.pow(_vector1.y, 2)) * Math.sqrt(Math.pow(_vector2.x, 2) + Math.pow(_vector2.y, 2));
        let angle = Math.acos(up / down);
        //求两个向量的叉乘。-----------------------
        let _crossValue = _vector1.x * _vector2.y - _vector2.x * _vector1.y;
        if (_crossValue < 0) {
            return Math.PI * 2 - angle;
        }
        else {
            return angle;
        }
    }
    /**
     * 求一个二维向量旋转一定角度后的向量。==============================================================
     * @param _vec2
     * @param _angle
     */
    static RotateVector2(_vec2, _angle) {
        let _x = _vec2.x * Math.cos(_angle) - _vec2.y * Math.sin(_angle);
        let _y = _vec2.x * Math.sin(_angle) + _vec2.y * Math.cos(_angle);
        return new THREE.Vector2(_x, _y);
    }
    /**
     * 加载一个模型，并把模型钳制在一个盒子的范围内。=====================================================
     * @param _dataServer
     * @param _url3D 要被加载的模型的url。
     * @param _clampSize 模型被钳制的范围，数据为{width:1,height:2,deep:3}。
     * @param _onModelLoad 当模型被加载的时候调用的函数。
     * @param _onLoadProgress 模型加载用来做进度的回调函数。
     */
    static LoadDaeClampInSize(_dataServer, _url3D, _clampSize, _onModelLoad, _onLoadProgress) {
        _dataServer.loaders.daeLoader.load(_url3D, 
        //当DAE模型完全加载好了之后。--------------------------------------------------
        (_result) => {
            for (var i = 0; i < _result.scene.children.length; i++) {
                //因为dae文件还存在着一个环境光，所以要通过下面的方法把环境光剔除掉。
                if (_result.scene.children[i].name != "EnvironmentAmbientLight") {
                    var theModel = _result.scene.children[i];
                    theModel.rotation.x = -Math.PI / 2;
                    let _modelSizeAndMinAndCenter1 = MyUtil.GetModelSizeAndMinAndCenter(theModel);
                    let _modelSize = _modelSizeAndMinAndCenter1.size;
                    theModel.userData.modelSize = {
                        x: _modelSize.x,
                        y: _modelSize.y,
                        z: _modelSize.z
                    };
                    theModel.scale.x = _clampSize.width / _modelSize.x;
                    theModel.scale.y = _clampSize.deep / _modelSize.z;
                    //高度。-------------------------------------------  
                    theModel.scale.z = _clampSize.height / _modelSize.y;
                    let _modelSizeAndMinAndCenter2 = MyUtil.GetModelSizeAndMinAndCenter(theModel);
                    let _modelMin2 = _modelSizeAndMinAndCenter2.min;
                    let _modelCenter2 = _modelSizeAndMinAndCenter2.center;
                    // console.log( _modelCenter);
                    // console.log(theModel.scale);
                    theModel.position.z -= _modelCenter2.z;
                    theModel.position.x -= _modelCenter2.x;
                    // //垂直方向上移动。----------------------------------
                    theModel.position.y -= _modelMin2.y;
                    // this.furnitureFarther.add(theModel);
                    _onModelLoad(theModel);
                }
            }
        }, 
        //用来显示DAE的加载进度的。--------------------------------------------------
        (_xhr) => {
            // this.preloadBox.SetProgress(_xhr.loaded / _xhr.total);
            _onLoadProgress(_xhr.loaded / _xhr.total);
        });
    }
    static ClampModelInSize(_model, _clampSize) {
        let _modelSize = _model.userData.modelSize;
        // // console.log(theModel.scale);
        _model.scale.x = _clampSize.width / _modelSize.x;
        _model.scale.y = _clampSize.deep / _modelSize.z;
        //高度。-------------------------------------------  
        _model.scale.z = _clampSize.height / _modelSize.y;
    }
    static LoadMapClampInSize(_dataServer, _url, _clampSize, _onModelLoad, _onLoadProgress) {
        _dataServer.loaders.wardrobeLoader.Load(_url, (theModel) => {
            let _modelSizeAndMinAndCenter1 = MyUtil.GetModelSizeAndMinAndCenter(theModel);
            let _modelSize = _modelSizeAndMinAndCenter1.size;
            let _modelCenter = _modelSizeAndMinAndCenter1.center;
            theModel.scale.x = _clampSize.width / _modelSize.x;
            theModel.scale.y = _clampSize.height / _modelSize.y;
            theModel.scale.z = _clampSize.deep / _modelSize.z;
            let _modelSizeAndMinAndCenter2 = MyUtil.GetModelSizeAndMinAndCenter(theModel);
            let _modelCenter2 = _modelSizeAndMinAndCenter2.center;
            theModel.position.z -= _modelCenter2.z;
            theModel.position.x -= _modelCenter2.x;
            _onModelLoad(theModel);
        }, (_progress) => {
            _onLoadProgress(_progress);
        });
    }
    /**
     * 用来彻底销毁DAE模型的方法。======================================================================
     * @param _beDestroyModel 被销毁的DAE模型。
     */
    static DestroyDAEModel(_fatherObj, _beDestroyModel) {
        _fatherObj.remove(_beDestroyModel);
        //把所有的Mesh都找寻到。------------------------------------
        _beDestroyModel.traverse((_obj) => {
            if (_obj.isMesh == true) {
                _obj.geometry.dispose();
                if (Array.isArray(_obj.material) == true) {
                    for (let i = 0; i < _obj.material.length; i++) {
                        MyUtil.DestroyMaterial(_obj.material[i]);
                    }
                }
                else {
                    MyUtil.DestroyMaterial(_obj.material);
                }
            }
        });
        // let _modelMesh = this.serchMesh(_beDestroyModel);
        // for (let i = 0; i < _modelMesh.material.length; i++) {
        //     _modelMesh.material[i].dispose();
        //     if (_modelMesh.material[i].map != null) {
        //         _modelMesh.material[i].map.dispose();
        //     }
        // }
        // _modelMesh.geometry.dispose();
    }
    //把某个材质销毁掉。====================================================
    static DestroyMaterial(_mat) {
        //销毁材质。----------------------------
        _mat.dispose();
        //销毁漫反射贴图。-----------------------
        if (_mat.map != null) {
            _mat.map.dispose();
        }
    }
    /**
    * 从一个路径中获取到文件的扩展名。
    * @param _path
    */
    static getExtensionName(_path) {
        let _pos = _path.lastIndexOf(".");
        let _extename = _path.substring(_pos + 1);
        return _extename;
    }
    /**
     * 往下一路寻找，直到找到mesh。=====================================================================
     * @param __object3D
     */
    static serchMesh(__object3D) {
        while (__object3D instanceof THREE.Mesh == false) {
            __object3D = __object3D.children[0];
        }
        return __object3D;
    }
}
MyUtil.faceABC = ['a', 'b', 'c']; //方便用来遍历face3用的。


/***/ }),

/***/ "./src/app/three/classes/PreloadBox.ts":
/*!*********************************************!*\
  !*** ./src/app/three/classes/PreloadBox.ts ***!
  \*********************************************/
/*! exports provided: PreloadBox */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PreloadBox", function() { return PreloadBox; });
/* harmony import */ var _THREEDataServer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./THREEDataServer */ "./src/app/three/classes/THREEDataServer.ts");
/*
 作者：张建。
 类说明：这个类是用来用预加载的盒子，可以显示dae模型的加载进度的。
*/

class PreloadBox {
    constructor(_dataServer) {
        this.yOffset = 0; //这个加载框在y轴上的偏移值。
        this.dataServer = _dataServer;
    }
    //开始创建预加载盒子。================================================================================
    MakeBox(_width, _height, _deep) {
        //做外盒子。
        this.outBox = this.dataServer.classesObj.boxMaker.MakeBox(_width, _height, _deep, true, true);
        this.outBox.material = new THREE.MeshPhongMaterial({ color: 0xffffff, transparent: true, opacity: 0.5 });
        this.outBox.renderOrder = 2;
        //做内盒子。
        this.inBox = this.dataServer.classesObj.boxMaker.MakeBox(_width * 0.98, _height, _deep * 0.98, true, true);
        this.inBox.material = new THREE.MeshPhongMaterial({ color: 0x0000ff, transparent: true, opacity: 0.5 });
        this.inBox.renderOrder = 1;
        this.inBox.scale.y = 0.01;
        //把两个盒子都加载到场景里。
        this.dataServer.sceneCommonObj.scene.add(this.outBox);
        this.dataServer.sceneCommonObj.scene.add(this.inBox);
    }
    SetYOffset(_yOffset) {
        this.yOffset = _yOffset;
    }
    UpdatePos(_pos) {
        this.inBox.position.copy(_pos);
        this.inBox.position.y += this.yOffset;
        this.outBox.position.copy(_pos);
        this.outBox.position.y += this.yOffset;
    }
    UpdateYRadian(_radian) {
        this.inBox.rotation.y = _radian;
        this.outBox.rotation.y = _radian;
    }
    //设置模型的加载进度。====================================================
    SetProgress(_progress) {
        this.inBox.scale.y = _progress;
        // if (_progress > 0.99) {
        //     this.DisposePreloadBox();
        // }
    }
    //把加载进度显示盒销毁掉。==============================================
    DisposePreloadBox() {
        this.dataServer.sceneCommonObj.scene.remove(this.outBox);
        this.dataServer.sceneCommonObj.scene.remove(this.inBox);
        this.outBox.material.dispose();
        this.inBox.material.dispose();
        this.outBox.geometry.dispose();
        this.inBox.geometry.dispose();
    }
}
PreloadBox.ctorParameters = () => [
    { type: _THREEDataServer__WEBPACK_IMPORTED_MODULE_0__["THREEDataServer"] }
];


/***/ }),

/***/ "./src/app/three/classes/ProfileModel.ts":
/*!***********************************************!*\
  !*** ./src/app/three/classes/ProfileModel.ts ***!
  \***********************************************/
/*! exports provided: ProfileModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProfileModel", function() { return ProfileModel; });
/* harmony import */ var _dataStruct__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dataStruct */ "./src/app/three/classes/dataStruct.ts");
/* harmony import */ var _MyUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MyUtil */ "./src/app/three/classes/MyUtil.ts");
/* harmony import */ var _THREEDataServer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./THREEDataServer */ "./src/app/three/classes/THREEDataServer.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");




/*
 作者：张建。
 类说明：这个类主要是用来做地脚线和石灰线。
*/
class ProfileModel {
    constructor(_dataServer, _profileType, _jDataServer) {
        this.profileMesh = null;
        this.afterBooleanMesh = null; //布尔之后的mesh。
        this.profileGeometry = null;
        this.profileTexture = null; //赋予给剖面的那张贴图。
        this.dataServer = _dataServer;
        this.profileType = _profileType;
        this.jDataServer = _jDataServer;
    }
    /**
     * 从没有到有创建一个直的地脚线。=====================================================================
     * @param _profileHeight    这个地脚线放置的离地高度。------------------------------
     * @param _kickLineSize     剖面线的厚度和高度，结构为{x:1,y:2}
     * @param _dir              地脚线和天花线的两个端点，结构为[{x:1,y:2,z:3},{x:4,y:5,z:6}]
     * @param _cutPlaneDir      裁切平面的方向，结构为[{x:1,y:2,z:3},{x:4,y:5,z:6}]
     * @param _profileDatas     剖面的一圈点的数据，结构为[[1,2],[3,4],[5,6],[7,8]]
    
     * @param _booleanModels    用来做布尔切割的模型的数组。----------------------------
     */
    MakeStraightProfile(_textureIndex, _profileHeight, _kickLineSize, _dir, _cutPlaneDir, _profileDatas, _booleanModels) {
        //创建新的地脚线或石灰线前，先把前面的地脚线和石灰线清除掉。--------------------------------
        this.DisposeProfileModel();
        let _modelData = this.MakeStraightWallModelVertexesAndFaces(_kickLineSize, _dir, _cutPlaneDir, _profileDatas, true);
        this.MakeFinalMeshFromModelData(_textureIndex, _modelData, _profileHeight, _booleanModels);
    }
    /**
     * 为弧形墙创建地脚线或者天花线。==============================================================
     * @param _profileHeight
     * @param _kickLineSize
     * @param _wallLinePoints
     * @param _cutPlaneDir
     * @param _profileDatas
     * @param _booleanModels
     */
    MakeArcProfile(_textureIndex, _profileHeight, _kickLineSize, _wallLinePoints, _cutPlaneDir, _profileDatas, _booleanModels, _filpNormalDir) {
        //创建新的地脚线或石灰线前，先把前面的地脚线和石灰线清除掉。--------------------------------
        this.DisposeProfileModel();
        let _modelData = this.MakeArcWallModelVertexesAndFaces(_kickLineSize, _wallLinePoints, _cutPlaneDir, _profileDatas, _filpNormalDir, true);
        this.MakeFinalMeshFromModelData(_textureIndex, _modelData, _profileHeight, _booleanModels);
    }
    /**
     * 在不删除原来的模型的情况下，更新一下该模型的顶点数据。====================================================
     * @param _kickLineSize
     * @param _dir
     * @param _cutPlaneDir
     * @param _profileDatas
     * @param _booleanModels  用来做布尔用的模型数组。--------------------------
     */
    UpdateStraightProfile(_profileHeight, _kickLineSize, _dir, _cutPlaneDir, _profileDatas, _booleanModels) {
        let _modelData = this.MakeStraightWallModelVertexesAndFaces(_kickLineSize, _dir, _cutPlaneDir, _profileDatas, false);
        this.UpdateFinalMeshFromModelData(_modelData, _profileHeight, _booleanModels);
    }
    UpdateArcProfile(_profileHeight, _kickLineSize, _wallLinePoints, _cutPlaneDir, _profileDatas, _booleanModels, _filpNormalDir) {
        let _modelData = this.MakeArcWallModelVertexesAndFaces(_kickLineSize, _wallLinePoints, _cutPlaneDir, _profileDatas, _filpNormalDir, false);
        this.UpdateFinalMeshFromModelData(_modelData, _profileHeight, _booleanModels);
    }
    /**
     * 从一堆模型的顶点坐标，UV坐标数据中创建出一个地脚线或者石灰线的Mesh出来。=========================
     * @param _modelData
     * @param _profileHeight
     * @param _booleanModels
     */
    MakeFinalMeshFromModelData(_textureIndex, _modelData, _profileHeight, _booleanModels) {
        this.profileGeometry = new THREE.Geometry();
        this.profileGeometry.vertices = _modelData.vertices;
        this.profileGeometry.faces = _modelData.faces;
        this.profileGeometry.faceVertexUvs = _modelData.uvs;
        this.profileGeometry.computeFaceNormals();
        this.profileGeometry.mergeVertices();
        if (this.profileTexture == null) {
            this.LoadTextureByIndex(_textureIndex);
        }
        let _profileMat = new THREE.MeshPhongMaterial({
            map: this.profileTexture
        });
        this.profileMesh = new THREE.Mesh(this.profileGeometry);
        this.profileMesh.position.y = _profileHeight;
        this.dataServer.sceneCommonObj.scene.add(this.profileMesh);
        //要计算布尔的话。----------------------------------------
        if (_booleanModels.length > 0) {
            let _booleanMain = new ThreeBSP(this.profileMesh);
            for (let i = 0; i < _booleanModels.length; i++) {
                let _subtractModel = new ThreeBSP(_booleanModels[i].booleanModel);
                _booleanMain = _booleanMain.subtract(_subtractModel);
            }
            this.afterBooleanMesh = _booleanMain.toMesh();
            this.afterBooleanMesh.geometry.computeFaceNormals();
            this.afterBooleanMesh.geometry.computeVertexNormals();
            this.dataServer.sceneCommonObj.scene.add(this.afterBooleanMesh);
        }
        //布尔后的话
        if (this.afterBooleanMesh != undefined) {
            this.profileMesh.visible = false;
            this.afterBooleanMesh.material = _profileMat;
        }
        //没有执行布尔的话。
        else {
            this.profileMesh.material = _profileMat;
        }
    }
    UpdateFinalMeshFromModelData(_modelData, _profileHeight, _booleanModels) {
        for (let i = 0; i < this.profileGeometry.vertices.length; i++) {
            this.profileGeometry.vertices[i].copy(_modelData.vertices[i]);
        }
        for (let i = 0; i < _modelData.uvs[0].length; i++) {
            for (let j = 0; j < _modelData.uvs[0][i].length; j++) {
                this.profileGeometry.faceVertexUvs[0][i][j].copy(_modelData.uvs[0][i][j]);
            }
        }
        //模型的顶点坐标要更新一下。--------------------------------------
        this.profileGeometry.verticesNeedUpdate = true;
        //模型的UV坐标也要更新一下。--------------------------------------
        this.profileGeometry.uvsNeedUpdate = true;
        this.profileMesh.position.y = _profileHeight;
        //把布尔后的模型销毁掉。---------------------------------------
        this.DisposeAfterBooleanMesh();
        let _profileMat = new THREE.MeshPhongMaterial({
            map: this.profileTexture
        });
        //要计算布尔的话。----------------------------------------
        if (_booleanModels.length > 0) {
            let _booleanMain = new ThreeBSP(this.profileMesh);
            for (let i = 0; i < _booleanModels.length; i++) {
                let _subtractModel = new ThreeBSP(_booleanModels[i].booleanModel);
                _booleanMain = _booleanMain.subtract(_subtractModel);
            }
            this.afterBooleanMesh = _booleanMain.toMesh();
            this.afterBooleanMesh.geometry.computeFaceNormals();
            this.afterBooleanMesh.geometry.computeVertexNormals();
            this.dataServer.sceneCommonObj.scene.add(this.afterBooleanMesh);
        }
        //布尔后的话。---------------------------------------------------------
        if (this.afterBooleanMesh != undefined) {
            this.profileMesh.visible = false;
            this.afterBooleanMesh.material = _profileMat;
        }
        //如果没有进行布尔的话。------------------------------------------------
        else {
            this.profileMesh.visible = true;
            this.profileMesh.material = _profileMat;
        }
    }
    /**
     * 根据数据，创建地脚线两端的两圈点。==========================================================
     * @param _kickLineSize
     * @param _dir         里面有两个数据，代表的是地脚线的两个端点的坐标。
     * @param _cutPlaneDir
     * @param _profileDatas
    * @param _recountFace3 是否重新计算Face3？
     */
    MakeStraightWallModelVertexesAndFaces(_kickLineSize, _dir, _cutPlaneDir, _profileDatas, _recountFace3) {
        //获取地脚线或石灰线的长度。计算uv要用。---------------------------------------------------
        let _profileLength = _dir[1].clone().distanceTo(_dir[0]);
        //把剖面的数值进行一次缩放。-------------------------------------------------------
        let _newProfileDatas = _MyUtil__WEBPACK_IMPORTED_MODULE_1__["MyUtil"].ClampArray(_kickLineSize, _profileDatas);
        //计算一圈点的每一个点距离起点的距离，主要用来计算uv的。-----------------------------
        let _distanceFromPrePointArray = [];
        for (let i = 0; i < _newProfileDatas.length; i++) {
            if (i == 0) {
                _distanceFromPrePointArray.push(0);
            }
            else {
                let _preIndex = i - 1;
                let _prePoint = _newProfileDatas[_preIndex];
                let _currentPoint = _newProfileDatas[i];
                let _distanceFromPrePoint = Math.sqrt(Math.pow(_currentPoint[1] - _prePoint[1], 2) + Math.pow(_currentPoint[0] - _prePoint[0], 2));
                _distanceFromPrePointArray.push(_distanceFromPrePoint);
            }
        }
        let _distanceFromStartPointArray = [];
        for (let i = 0; i < _distanceFromPrePointArray.length; i++) {
            if (i == 0) {
                _distanceFromStartPointArray.push(0);
            }
            else {
                let _preIndex = i - 1;
                _distanceFromStartPointArray.push(_distanceFromStartPointArray[_preIndex] + _distanceFromPrePointArray[i]);
            }
        }
        //开始构建uv的初始数据。-------------------------------------------------------------------------------
        let _UVRawDatas = [];
        for (let i = 0; i < _distanceFromStartPointArray.length; i++) {
            let _uv = new THREE.Vector2(0, _distanceFromStartPointArray[i] / 100.0);
            _UVRawDatas.push(_uv);
        }
        let _scaleProfileLength = _profileLength / 100.0;
        for (let i = 0; i < _distanceFromStartPointArray.length; i++) {
            let _uv = new THREE.Vector2(_scaleProfileLength, _distanceFromStartPointArray[i] / 100.0);
            _UVRawDatas.push(_uv);
        }
        //剖面的法线方向。就是从墙指向地脚线那边的方向。---------------------------------------------------------
        let _profileNormalDir = _dir[1].clone().sub(_dir[0]);
        _profileNormalDir.applyAxisAngle(new THREE.Vector3(0, 1, 0), Math.PI / 2);
        _profileNormalDir.normalize();
        //起点的一圈点。-----------------------------------------------------------
        let _startRing = this.GetRingPoints(_dir[1], _profileNormalDir, _newProfileDatas);
        let _endRing = this.GetRingPoints(_dir[0], _profileNormalDir, _newProfileDatas);
        let _ringLength = _startRing.length;
        //用来做挤出模型切割用的平面。----------------------------------------------
        let _startPlane = null;
        let _endPlane = null;
        //开始创建头尾两个切割平面。-----------------------------------------------
        let _endPlaneDir = _cutPlaneDir[0].clone();
        _endPlaneDir.applyAxisAngle(new THREE.Vector3(0, 1, 0), Math.PI / 2).normalize();
        _endPlane = new THREE.Plane();
        _endPlane.setFromNormalAndCoplanarPoint(_endPlaneDir, _dir[0]);
        let _startPlaneDir = _cutPlaneDir[1].clone();
        _startPlaneDir.applyAxisAngle(new THREE.Vector3(0, 1, 0), Math.PI / 2).normalize();
        _startPlane = new THREE.Plane();
        _startPlane.setFromNormalAndCoplanarPoint(_startPlaneDir, _dir[1]);
        //利用切割平面重新创建两圈点。-----------------------------------------------
        _endRing = _MyUtil__WEBPACK_IMPORTED_MODULE_1__["MyUtil"].MakeNewRingPoints(_endRing, _startRing, _endPlane);
        _startRing = _MyUtil__WEBPACK_IMPORTED_MODULE_1__["MyUtil"].MakeNewRingPoints(_startRing, _endRing, _startPlane);
        let vertices = [];
        for (let i = 0; i < _startRing.length; i++) {
            vertices.push(_startRing[i]);
        }
        for (let i = 0; i < _endRing.length; i++) {
            vertices.push(_endRing[i]);
        }
        //开始产生face3数组的数据。----------------------------------------------------
        let faces = [];
        if (_recountFace3 == true) {
            for (let i = 0; i < _ringLength; i++) {
                let nextI = i + 1;
                if (nextI == _ringLength) {
                    nextI = 0;
                }
                let oppositeI = i + _ringLength;
                let oppositeNextI = nextI + _ringLength;
                faces.push(new THREE.Face3(i, oppositeI, nextI));
                faces.push(new THREE.Face3(nextI, oppositeI, oppositeNextI));
            }
        }
        else {
            faces = this.profileGeometry.faces;
        }
        //开始计算UV的数据。-----------------------------------------------------------
        let _uvs = [[]];
        for (let i = 0; i < faces.length; i++) {
            let _oneLineUv = [];
            _oneLineUv.push(_UVRawDatas[faces[i].a]);
            _oneLineUv.push(_UVRawDatas[faces[i].b]);
            _oneLineUv.push(_UVRawDatas[faces[i].c]);
            _uvs[0].push(_oneLineUv);
        }
        return {
            vertices: vertices,
            faces: faces,
            uvs: _uvs
        };
    }
    /**
     * 为弧形墙创建构建模型所需的所有vertexes和faces和uvs等数据。============================================
     * @param _kickLineSize
     * @param _wallLinePoints
     * @param _cutPlaneDir
     * @param _profileDatas
     * @param _recountFace3 是否重新计算Face3
     */
    MakeArcWallModelVertexesAndFaces(_kickLineSize, _wallLinePoints, _cutPlaneDir, _profileDatas, _filpNormalDir, _recountFace3) {
        //把剖面的数值进行一次缩放。-------------------------------------------------------
        let _newProfileDatas = _MyUtil__WEBPACK_IMPORTED_MODULE_1__["MyUtil"].ClampArray(_kickLineSize, _profileDatas);
        //圆形地脚线下面的一排向量。-------------------------------------------------------
        let _wallLineDir = [];
        for (let i = 0; i < _wallLinePoints.length - 1; i++) {
            let _nextI = i + 1;
            _wallLineDir.push(_wallLinePoints[_nextI].clone().sub(_wallLinePoints[i]).normalize());
        }
        //计算剖面线朝向的法线方向。-------------------------------------------------------------
        //------------------------------------------------------------------------------------
        let _middleWallLineNormal = [];
        //先计算中间部分的剖面线朝向的法线方向。-------------------------------------
        for (let i = 0; i < _wallLineDir.length - 1; i++) {
            let _nextI = i + 1;
            _middleWallLineNormal.push(_wallLineDir[_nextI].clone().sub(_wallLineDir[i]).normalize());
        }
        //再计算两端的剖面线朝向的法线方向。----------------------------------------
        let _firstWallLineNormal = _wallLineDir[0].applyAxisAngle(new THREE.Vector3(0, 1, 0), -Math.PI / 2).normalize();
        let _lastWallLineNormal = _wallLineDir[_wallLineDir.length - 1].applyAxisAngle(new THREE.Vector3(0, 1, 0), -Math.PI / 2).normalize();
        _middleWallLineNormal[0].copy(_firstWallLineNormal);
        _middleWallLineNormal[_middleWallLineNormal.length - 1].copy(_lastWallLineNormal);
        //把两端部分和中间部分的剖面线朝向的法线方向都整合起来。------------------------
        let _allWallLineNormal = [];
        _allWallLineNormal.push(_firstWallLineNormal);
        for (let i = 0; i < _middleWallLineNormal.length; i++) {
            _allWallLineNormal.push(_middleWallLineNormal[i]);
        }
        _allWallLineNormal.push(_lastWallLineNormal);
        //如果要把所有的法线都翻转。--------------------------------------------------
        if (_filpNormalDir) {
            for (let i = 0; i < _allWallLineNormal.length; i++) {
                _allWallLineNormal[i].multiplyScalar(-1);
            }
        }
        //开始获取一圈一圈的点。----------------------------------------------------
        let _allRingPoints = [];
        for (let i = 0; i < _wallLinePoints.length; i++) {
            _allRingPoints.push(this.GetRingPoints(_wallLinePoints[i], _allWallLineNormal[i], _newProfileDatas));
        }
        //用来做挤出模型切割用的平面。-------------------------------------------------------------
        let _startPlane = null;
        let _endPlane = null;
        //开始创建头尾两个切割平面。----------------------------------------------------------------
        let _endPlaneDir = _cutPlaneDir[0].clone();
        _endPlaneDir.applyAxisAngle(new THREE.Vector3(0, 1, 0), Math.PI / 2).normalize();
        _endPlane = new THREE.Plane();
        _endPlane.setFromNormalAndCoplanarPoint(_endPlaneDir, _wallLinePoints[0]);
        let _startPlaneDir = _cutPlaneDir[1].clone();
        _startPlaneDir.applyAxisAngle(new THREE.Vector3(0, 1, 0), Math.PI / 2).normalize();
        _startPlane = new THREE.Plane();
        _startPlane.setFromNormalAndCoplanarPoint(_startPlaneDir, _wallLinePoints[_wallLinePoints.length - 1]);
        //利用切割平面重新创建两圈点。----------------------------------------------------------------
        _allRingPoints[0] = _MyUtil__WEBPACK_IMPORTED_MODULE_1__["MyUtil"].MakeNewRingPoints(_allRingPoints[0], _allRingPoints[1], _endPlane);
        _allRingPoints[_allRingPoints.length - 1] = _MyUtil__WEBPACK_IMPORTED_MODULE_1__["MyUtil"].MakeNewRingPoints(_allRingPoints[_allRingPoints.length - 1], _allRingPoints[_allRingPoints.length - 2], _startPlane);
        //开始获取剖面线的所有顶点。------------------------------------------------------------------
        let vertices = [];
        for (let i = 0; i < _allRingPoints.length; i++) {
            for (let j = 0; j < _allRingPoints[i].length; j++) {
                vertices.push(_allRingPoints[i][j]);
            }
        }
        //开始产生face3数组的数据。----------------------------------------------------
        let faces = [];
        if (_recountFace3 == true) {
            let _ringLength = _profileDatas.length;
            for (let i = 0; i < _wallLinePoints.length - 1; i++) {
                for (let j = 0; j < _ringLength; j++) {
                    let _nextJ = j + 1;
                    if (_nextJ == _ringLength) {
                        _nextJ = 0;
                    }
                    let _StartValue = i * _ringLength + j;
                    let _OppositeValue = i * _ringLength + j + _ringLength;
                    let _nextValue = i * _ringLength + _nextJ;
                    let _OppositeNextValue = i * _ringLength + _nextJ + _ringLength;
                    if (_filpNormalDir == false) {
                        faces.push(new THREE.Face3(_StartValue, _OppositeValue, _nextValue));
                        faces.push(new THREE.Face3(_OppositeValue, _OppositeNextValue, _nextValue));
                    }
                    //对于外墙的地脚线和石灰线，Face3的顺序需要反一下。-------------------------------------
                    else {
                        faces.push(new THREE.Face3(_StartValue, _nextValue, _OppositeValue));
                        faces.push(new THREE.Face3(_OppositeValue, _nextValue, _OppositeNextValue));
                    }
                }
            }
        }
        else {
            faces = this.profileGeometry.faces;
        }
        //开始计算一下模型的UV。---------------------------------------------------------------------------
        //-----------------------------------------------------------------------------------------------
        //一节圆弧的长度。---------------------------------------------------------------------------------
        let _oneLineLength = _wallLinePoints[0].distanceTo(_wallLinePoints[1]);
        //计算一圈点里一个点距离上一个点的距离。-------------------------------------------------------------
        let _distanceFromPrePoints = [];
        for (let i = 0; i < _newProfileDatas.length; i++) {
            if (i == 0) {
                _distanceFromPrePoints.push(0);
            }
            else {
                let _preI = i - 1;
                let _distanceFromPrePoint = Math.sqrt(Math.pow(_newProfileDatas[i][0] - _newProfileDatas[_preI][0], 2) + Math.pow(_newProfileDatas[i][1] - _newProfileDatas[_preI][1], 2));
                _distanceFromPrePoints.push(_distanceFromPrePoint);
            }
        }
        //计算一圈点里一个点距离开始点的距离。--------------------------------------------------------------
        let _distanceFromStartPoints = [];
        let ___distanceFromStartPoint = 0;
        for (let i = 0; i < _distanceFromPrePoints.length; i++) {
            ___distanceFromStartPoint += _distanceFromPrePoints[i];
            _distanceFromStartPoints.push(___distanceFromStartPoint);
        }
        //得到uv的原始数据先。跟顶点的顺序一一对应。--------------------------------------------------------------------------
        let _uvsRawData = [];
        for (let i = 0; i < _wallLinePoints.length; i++) {
            for (let j = 0; j < _newProfileDatas.length; j++) {
                _uvsRawData.push(new THREE.Vector2(_oneLineLength * i, _distanceFromStartPoints[j]));
            }
        }
        //开始正式组织UV数据。---------------------------------------------------------------------------------
        let _uvs = [[]];
        for (let i = 0; i < faces.length; i++) {
            let _oneLineUvs = [];
            for (let j = 0; j < _MyUtil__WEBPACK_IMPORTED_MODULE_1__["MyUtil"].faceABC.length; j++) {
                let _faceIndex = faces[i][_MyUtil__WEBPACK_IMPORTED_MODULE_1__["MyUtil"].faceABC[j]];
                let _theUVVector2 = _uvsRawData[_faceIndex];
                _oneLineUvs.push(new THREE.Vector2(_theUVVector2.x / 100.0, _theUVVector2.y / 100.0));
            }
            _uvs[0].push(_oneLineUvs);
        }
        return {
            vertices: vertices,
            faces: faces,
            uvs: _uvs
        };
    }
    /**
        * 把这个放样的模型销毁掉。========================================================
        */
    DisposeProfileModel() {
        //销毁mesh---------------------------------------------------------------
        if (this.profileMesh != null) {
            this.dataServer.sceneCommonObj.scene.remove(this.profileMesh);
            this.profileMesh.material.dispose();
            this.profileMesh.geometry.dispose();
            this.profileTexture.dispose();
            this.profileMesh = null;
        }
        //销毁布尔之后的mesh------------------------------------------------------
        this.DisposeAfterBooleanMesh();
        //销毁geometry-----------------------------------------------------------
        if (this.profileGeometry != null) {
            this.profileGeometry.dispose();
            this.profileGeometry = null;
        }
    }
    /**
     * 用来销毁布尔之后产生的模型。========================================================
     */
    DisposeAfterBooleanMesh() {
        if (this.afterBooleanMesh != null) {
            this.dataServer.sceneCommonObj.scene.remove(this.afterBooleanMesh);
            this.afterBooleanMesh.geometry.dispose();
            this.afterBooleanMesh = null;
        }
    }
    /**
     * 获取放样的一圈点的坐标。=========================================================
     */
    GetRingPoints(_startPoint, _normalDir, _profileDatas) {
        let returnPoints = [];
        for (let i = 0; i < _profileDatas.length; i++) {
            let onePoint = _startPoint.clone()
                .addScaledVector(_normalDir, _profileDatas[i][0])
                .addScaledVector(new THREE.Vector3(0, 1, 0), _profileDatas[i][1]);
            returnPoints.push(onePoint);
        }
        return returnPoints;
    }
    /**
      * 为石灰线或地脚线加载初始化的贴图。==========================================================================
      */
    LoadTextureByIndex(_textureIndex) {
        let initTextureUrl;
        if (this.profileType == _dataStruct__WEBPACK_IMPORTED_MODULE_0__["ModelType"].kickLine) {
            initTextureUrl = this.jDataServer.json.footLinePics[_textureIndex];
        }
        else {
            initTextureUrl = this.jDataServer.json.plasterLinePics[_textureIndex];
        }
        this.profileTexture = this.dataServer.loaders.textureLoader.load(initTextureUrl);
        this.profileTexture.wrapS = THREE.RepeatWrapping;
        this.profileTexture.wrapT = THREE.RepeatWrapping;
    }
    /**
     * 用来设置石灰线或地脚线的材质。===================================================================
     * @param _imageUrl
     */
    SetModelTexture(_imageUrl) {
        this.profileTexture.image.src = _imageUrl;
        this.profileTexture.image.onload = () => {
            this.profileTexture.needsUpdate = true;
        };
    }
}
ProfileModel.ctorParameters = () => [
    { type: _THREEDataServer__WEBPACK_IMPORTED_MODULE_2__["THREEDataServer"] },
    { type: undefined },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_3__["JdesignDataService"] }
];


/***/ }),

/***/ "./src/app/three/classes/PropertiesMenuData.ts":
/*!*****************************************************!*\
  !*** ./src/app/three/classes/PropertiesMenuData.ts ***!
  \*****************************************************/
/*! exports provided: PropertiesMenuData */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertiesMenuData", function() { return PropertiesMenuData; });
class PropertiesMenuData {
}


/***/ }),

/***/ "./src/app/three/classes/RayhitModelList.ts":
/*!**************************************************!*\
  !*** ./src/app/three/classes/RayhitModelList.ts ***!
  \**************************************************/
/*! exports provided: RayhitModelList */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RayhitModelList", function() { return RayhitModelList; });
class RayhitModelList {
    constructor() {
        this.theModelList = []; //所有要和射线发生碰撞的模型都放在这里。
        //把无限大的平面对象创建出来。-------------------------
        this.bigPlane = new THREE.Plane(new THREE.Vector3(0, 1, 0), 0);
    }
    /**
     * 往列表中添加要跟射线产生碰撞的模型。===========================
     * @param _theModel
     */
    AddRayHitModel(_theModel) {
        if (_theModel.userData.customUserData != undefined) {
            if (this.theModelList.indexOf(_theModel)) {
                this.theModelList.push(_theModel);
                // console.log(this.theModelList.length);
            }
        }
        else {
            console.error("这个模型少了基本资料，不能添加到可碰撞模型列表里。");
        }
    }
    /**
     * 把某个模型从碰撞模型列表中删除掉。==============================
     * @param _theModel
     */
    RemoveRayHitModel(_theModel) {
        var _index = this.theModelList.indexOf(_theModel);
        if (_index > -1) {
            this.theModelList.splice(_index, 1);
        }
    }
    /**
     * 根据给出的模型类型返回一个模型数组。
     * @param _typeArray 里面的结构类似于[ModelType.door,ModelType.window]
     */
    GetRayHitModelListByModelType(_typeArray) {
        let _returnArray = [];
        for (let i = 0; i < this.theModelList.length; i++) {
            let _theModelType = this.theModelList[i].userData.customUserData.modelType;
            if (_typeArray.indexOf(_theModelType) != -1) {
                _returnArray.push(this.theModelList[i]);
            }
        }
        return _returnArray;
    }
}


/***/ }),

/***/ "./src/app/three/classes/Rayhitter.ts":
/*!********************************************!*\
  !*** ./src/app/three/classes/Rayhitter.ts ***!
  \********************************************/
/*! exports provided: Rayhitter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Rayhitter", function() { return Rayhitter; });
/* harmony import */ var _THREEDataServer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./THREEDataServer */ "./src/app/three/classes/THREEDataServer.ts");
/* harmony import */ var _dataStruct__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dataStruct */ "./src/app/three/classes/dataStruct.ts");
/* harmony import */ var _MyUtil__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./MyUtil */ "./src/app/three/classes/MyUtil.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../services/pop-div.service */ "./src/app/services/pop-div.service.ts");
/*
 作者：张建。
 类说明：这个类专门用来处理鼠标单击的事件。
*/





class Rayhitter {
    constructor(_dataServer, _jDataServer, _popServer) {
        this.cancelMouseUpRayHit = false; //是否取消射线撞击模型？一般在拖动了鼠标后就取消掉。
        // private leftMouseIsDown = false;         //左键是否按下去了？主要用来检测拖拽鼠标。
        this.dataServer = null;
        this.rayHitModels = {
            mouseDownDoorWinFurniture: null,
            mouseDownDoorWinFurnitureOffset: null,
            mouseDownFloorWallRoofId: null,
        };
        this.neverConsiderOffset = false; //在移动模型的时候不考虑偏移了。
        this.dataServer = _dataServer;
        this.popServer = _popServer;
        this.jDataServer = _jDataServer;
        //为在屏幕操作摄像机开始绑定事件。---------------------------------------------
        let mousedownEvent = _MyUtil__WEBPACK_IMPORTED_MODULE_2__["MyUtil"].MakeMouseEvent(this.OnMouseDown, this);
        this.dataServer.classesObj.canvasEventMaster.mouseDownEvents.push(mousedownEvent);
        let mousemoveEvent = _MyUtil__WEBPACK_IMPORTED_MODULE_2__["MyUtil"].MakeMouseEvent(this.OnMouseMove, this);
        this.dataServer.classesObj.canvasEventMaster.mouseMoveEvents.push(mousemoveEvent);
        let mouseupEvent = _MyUtil__WEBPACK_IMPORTED_MODULE_2__["MyUtil"].MakeMouseEvent(this.OnMouseUp, this);
        this.dataServer.classesObj.canvasEventMaster.mouseUpEvents.push(mouseupEvent);
    }
    OnMouseDown(_ev, _scope) {
        if (_ev.button == 0) {
            _scope.cancelMouseUpRayHit = false;
            _scope.dataServer.params.leftMouseIsDown = true;
            _scope.neverConsiderOffset = false;
            let _3dCamera = _scope.jDataServer.camera._3Dcamera;
            //记录下单击下鼠标的时候被击中的门窗和家具和飘窗的模型。----------------------------------------------------------------
            //----------------------------------------------------------------------------------------------------
            //----------------------------------------------------------------------------------------------------
            let _winDoormodelList = _scope.dataServer.classesObj.rayHitModelList.GetRayHitModelListByModelType([_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].door, _dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].window, _dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].furniture, _dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].build, _dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].normalBayWindow]);
            _MyUtil__WEBPACK_IMPORTED_MODULE_2__["MyUtil"].ShootRayToModel(_scope.dataServer, new THREE.Vector2(_ev.offsetX, _ev.offsetY), _3dCamera, _winDoormodelList, false, (_beHitModel) => {
                _scope.rayHitModels.mouseDownDoorWinFurniture = _beHitModel;
            }, () => {
                _scope.rayHitModels.mouseDownDoorWinFurniture = null;
            });
            //发出一条射线，检测和墙体，地板天花板的碰撞。--------------------------------------------------
            //------------------------------------------------------------------------------------------
            //------------------------------------------------------------------------------------------
            if (_scope.rayHitModels.mouseDownDoorWinFurniture != null) {
                let _wallFloormodelList = _scope.dataServer.classesObj.rayHitModelList.GetRayHitModelListByModelType([_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].inWall, _dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].outWall, _dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].floor, _dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].roof]);
                _MyUtil__WEBPACK_IMPORTED_MODULE_2__["MyUtil"].ShootRayToModel(_scope.dataServer, new THREE.Vector2(_ev.offsetX, _ev.offsetY), _3dCamera, _wallFloormodelList, true, (_beHitModel, _hitPoint) => {
                    //鼠标按下去的时候被单击中的墙和地板和天花板。--------------------------------
                    if (_beHitModel != null) {
                        _scope.rayHitModels.mouseDownFloorWallRoofId = _MyUtil__WEBPACK_IMPORTED_MODULE_2__["MyUtil"].GetMeshLongObj(_beHitModel).id;
                    }
                    else {
                        _scope.rayHitModels.mouseDownFloorWallRoofId = "bigPlane";
                    }
                    _scope.rayHitModels.mouseDownDoorWinFurnitureOffset = _scope.rayHitModels.mouseDownDoorWinFurniture.position.clone().sub(_hitPoint);
                }, () => {
                });
            }
            //单击下去，模型创建成功。-------------------------------------------------------------
            //----------------------------------------------------------------------------------
            if (_scope.dataServer.creatingLongObj != null) {
                //放置好家具模型。-------------------------------------------------------
                if (_scope.dataServer.creatingLongObj.type == "furniture") {
                    _scope.jDataServer.cache.furniture.moveEnd(_scope.dataServer.creatingLongObj);
                }
                //放置好烟道模型。-------------------------------------------------------
                if (_scope.dataServer.creatingLongObj.type == "build") {
                    _scope.jDataServer.cache.build.moveEnd(_scope.dataServer.creatingLongObj);
                }
                //放置好门窗模型。--------------------------------------------------------
                if (_scope.dataServer.creatingLongObj.type == "win" || _scope.dataServer.creatingLongObj.type == "door") {
                    _scope.jDataServer.cache.doorWin.moveEnd(_scope.dataServer.creatingLongObj);
                }
                //放置好转角飘窗模型。-----------------------------------------------------
                if (_scope.dataServer.creatingLongObj.type == "cornerWin") {
                    _scope.jDataServer.cache.cornerWin.moveEnd(_scope.dataServer.creatingLongObj);
                }
                _scope.dataServer.creatingLongObj = null;
            }
        }
    }
    OnMouseMove(_ev, _scope) {
        //鼠标移动了一下，就认为你不是要单击模型，而是要旋转视图。
        _scope.cancelMouseUpRayHit = true;
        let _3dCamera = _scope.jDataServer.camera._3Dcamera;
        //如果是左键拖拽鼠标的话。----------------------------------------------------
        if (_scope.dataServer.params.leftMouseIsDown == true) {
            //console.log("1")
            if (_scope.rayHitModels.mouseDownDoorWinFurniture != null) {
                // console.log("2")
                //还要保证没有击中移动旋转工具，才能在屏幕中随意拖动哦。-----------------------------
                if (_scope.dataServer.classesObj.modelTransformer.mouseDownHitModel == null) {
                    // console.log("3")
                    let _mouseDownModelID = _MyUtil__WEBPACK_IMPORTED_MODULE_2__["MyUtil"].GetMeshLongObj(_scope.rayHitModels.mouseDownDoorWinFurniture).id;
                    let _currentSelectModelID = _scope.dataServer.classesObj.currentSelectModel.GetSelectModelID();
                    // console.log(_mouseDownModelID)
                    // console.log(_currentSelectModelID)
                    if (_mouseDownModelID == _currentSelectModelID) {
                        //console.log("4")
                        //开始检测与墙壁地板的碰撞。------------------------------------------------------------------------------
                        //----------------------------------------------------------------------------------------------------
                        //----------------------------------------------------------------------------------------------------
                        let _wallFloormodelList = _scope.dataServer.classesObj.rayHitModelList.GetRayHitModelListByModelType([_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].inWall, _dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].outWall, _dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].floor, _dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].roof]);
                        _MyUtil__WEBPACK_IMPORTED_MODULE_2__["MyUtil"].ShootRayToModel(_scope.dataServer, new THREE.Vector2(_ev.offsetX, _ev.offsetY), _3dCamera, _wallFloormodelList, true, (_beHitModel, _hitPoint) => {
                            let _currentID;
                            if (_beHitModel != null) {
                                _currentID = _MyUtil__WEBPACK_IMPORTED_MODULE_2__["MyUtil"].GetMeshLongObj(_beHitModel).id; //当前的墙或者地板或者天花板的id。
                            }
                            else {
                                _currentID = "bigPlane";
                            }
                            //计算鼠标单击点和模型实际位置的偏移。-------------------------------
                            let _modelPlacePos;
                            if (_currentID == _scope.rayHitModels.mouseDownFloorWallRoofId && _scope.neverConsiderOffset == false) {
                                _modelPlacePos = _hitPoint.clone().add(_scope.rayHitModels.mouseDownDoorWinFurnitureOffset);
                            }
                            else {
                                _modelPlacePos = _hitPoint;
                                _scope.neverConsiderOffset = true;
                            }
                            let _selectLongObj = _scope.dataServer.classesObj.currentSelectModel.GetSelectedLongObj();
                            //如果是门窗或者飘窗的话。则移动门窗和飘窗。--------------------------------------
                            let _currentSelectModelType = _scope.dataServer.classesObj.currentSelectModel.GetSelectedModelType();
                            if (_currentSelectModelType == _dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].door || _currentSelectModelType == _dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].window || _currentSelectModelType == _dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].normalBayWindow) {
                                _scope.jDataServer.cache.doorWin.move(_selectLongObj, { x: _modelPlacePos.x, y: _modelPlacePos.z });
                            }
                            //如果是家具的话。则移动家具。----------------------------------------
                            if (_currentSelectModelType == _dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].furniture) {
                                _scope.jDataServer.cache.furniture.move(_selectLongObj, { x: _modelPlacePos.x, y: _modelPlacePos.z });
                            }
                            //如果是烟道模型的话，则移动烟道。-----------------------------------
                            if (_currentSelectModelType == _dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].build) {
                                _scope.jDataServer.cache.build.move(_selectLongObj, { x: _modelPlacePos.x, y: _modelPlacePos.z });
                            }
                        }, () => {
                        });
                    }
                }
            }
        }
        //如果是纯粹在画布移动鼠标的话。-------------------------------------------------------------
        //----------------------------------------------------------------------------------------
        //----------------------------------------------------------------------------------------
        else {
            //如果是正在创建模型的话。
            if (_scope.dataServer.creatingLongObj != null) {
                //如果当前正好是创建模型的时候。--------------------------------------------
                if (_scope.jDataServer.cache.floorplan.createAndMove == true) {
                    //正在创建的模型
                    let _createModelPos = null;
                    //创建模型的时候，先检测和墙有没有碰撞，如果有碰撞，先把模型吸附到墙上。------------------------------------
                    let _wallList = _scope.dataServer.classesObj.rayHitModelList.GetRayHitModelListByModelType([_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].inWall, _dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].outWall]);
                    _MyUtil__WEBPACK_IMPORTED_MODULE_2__["MyUtil"].ShootRayToModel(_scope.dataServer, new THREE.Vector2(_ev.offsetX, _ev.offsetY), _3dCamera, _wallList, true, (_beHitModel, _hitPoint) => {
                        _createModelPos = _hitPoint;
                    }, () => {
                    });
                    //如果在创建模型的时候，跟大平面或者墙面产生碰撞。则开始放置模型。--------------------------
                    if (_createModelPos != null) {
                        console.log("ok");
                        //如果新创建的是家具的话，则移动家具。------------------------------------
                        if (_scope.dataServer.creatingLongObj.type == "furniture") {
                            _scope.jDataServer.cache.furniture.move(_scope.dataServer.creatingLongObj, { x: _createModelPos.x, y: _createModelPos.z });
                        }
                        //如果新创建的是烟道的话，则移动烟道。------------------------------------
                        if (_scope.dataServer.creatingLongObj.type == "build") {
                            _scope.jDataServer.cache.build.move(_scope.dataServer.creatingLongObj, { x: _createModelPos.x, y: _createModelPos.z });
                        }
                        //如果新创建的是门窗的话，则移动门窗。-------------------------------------
                        if (_scope.dataServer.creatingLongObj.type == "win" || _scope.dataServer.creatingLongObj.type == "door") {
                            _scope.jDataServer.cache.doorWin.move(_scope.dataServer.creatingLongObj, { x: _createModelPos.x, y: _createModelPos.z });
                        }
                        //如果新创建的是转角飘窗，则移动转角飘窗。---------------------------------
                        if (_scope.dataServer.creatingLongObj.type == "cornerWin") {
                            _scope.jDataServer.cache.cornerWin.move(_scope.dataServer.creatingLongObj, { x: _createModelPos.x, y: _createModelPos.z });
                        }
                    }
                }
                //如果是阿隆那边创建好了模型的话。--------------------------------------------------
                else {
                    _scope.dataServer.creatingLongObj = null;
                }
            }
        }
    }
    //鼠标弹起的时候触发的函数。========================================================================
    OnMouseUp(_ev, _scope) {
        if (_ev.button == 0) {
            _scope.dataServer.params.leftMouseIsDown = false;
            if (_scope.cancelMouseUpRayHit == true) {
                return;
            }
            let _3dCamera = _scope.jDataServer.camera._3Dcamera;
            let _modelList = _scope.dataServer.classesObj.rayHitModelList.theModelList;
            _MyUtil__WEBPACK_IMPORTED_MODULE_2__["MyUtil"].ShootRayToModel(_scope.dataServer, new THREE.Vector2(_ev.offsetX, _ev.offsetY), _3dCamera, _modelList, false, (_beHitModel) => {
                _scope.OnModelHit(_beHitModel);
            }, () => {
                _scope.jDataServer.cache.common.choose = _scope.jDataServer.floorplan;
                _scope.OnNothingHit();
            });
        }
    }
    //当某个模型被单击中的时候触发的函数。=======================================================
    OnModelHit(_beHitModel) {
        //设置当前选择的模型就是被击中的模型。-------------------------------
        this.dataServer.classesObj.currentSelectModel.Select(_beHitModel);
        let _longObj = this.dataServer.classesObj.currentSelectModel.GetSelectedLongObj();
        //触发对应的对象的被选择动作。-------------------------
        _longObj.OnSelected();
        //对二维图形进行相应的选择。---------------------------
        this.jDataServer.cache.common.choose = _longObj;
        /*
        //设置无敌大平面的位置。------------------------------------------------------------------------------------------------------------
        this.dataServer.classesObj.rayHitModelList.bigPlane.setFromNormalAndCoplanarPoint(new THREE.Vector3(0, 1, 0), _beHitModel.position);
        // let helper = new THREE.PlaneHelper(this.dataServer.classesObj.rayHitModelList.bigPlane, 500000, 0xff0000);
        // this.dataServer.sceneCommonObj.scene.add(helper);
        let _currentHitModelType = this.dataServer.classesObj.currentSelectModel.GetSelectedModelType();
        //下面这些类型的模型需要有模型选择框的。---------------------------
        let _needWireFrameModelType = [
            ModelType.endWall,
            ModelType.floor,
            ModelType.inWall,
            ModelType.outWall,
            ModelType.startWall,
            ModelType.roof
        ]

        //创建模型被选中时候的选择框。在模型被选择的时候显示--------------------------------
        if (_needWireFrameModelType.indexOf(_currentHitModelType) != -1) {
            let _beHitModelCustomData: CustomUserData = _beHitModel.userData.customUserData;
            let _wireSelectedPoints = _beHitModelCustomData.wireSelectedPoints;
            this.dataServer.classesObj.wireSelectFrame.MakeWireSelectFrame(_wireSelectedPoints);
        } else {
            //点击中不需要模型选择框的模型的时候把模型选择框销毁掉。-------------------------
            this.dataServer.classesObj.wireSelectFrame.destory3D();
        }

        //下面这些类型的模型需要显示盒子状的选择框。--------------------------
        let _needWireBoxModelType = [
            ModelType.door,
            ModelType.window,
            ModelType.furniture
        ]
        this.HideDoorWindowFurnitureSelectFrame();


        //如果单击中了门窗家具的模型。-----------------------------------------------------------
        //-------------------------------------------------------------------------------------
        //-------------------------------------------------------------------------------------
        if (_needWireBoxModelType.indexOf(_currentHitModelType) != -1) {
            _longObj.ShowWireFrame(true);

        }
        //如果单击中门窗家具以外的模型。-----------------------------------------------------------
        else {

        }


        //下面的模型是有移动旋转工具的。-----------------------------------------------------------
        let _transformerbleModelType = [
            ModelType.window,
            ModelType.furniture,
            ModelType.door
        ];
        if (_transformerbleModelType.indexOf(_currentHitModelType) != -1) {
            //家具门和窗都把移动旋转工具显示出来。------------------------------------------------
            this.dataServer.classesObj.modelTransformer.SetEnable(true);
            //设置当前被控制模型为被单击的模型。--------------------------------------------------
            this.dataServer.classesObj.modelTransformer.SetControlModel(_beHitModel);
            //设置移动旋转工具的位置。-----------------------------------------------------------

            this.dataServer.classesObj.modelTransformer.SetTransformerPos(_beHitModel.position);
            //家具模型可以使用移动旋转工具的旋转和垂直移动功能。-----------------------------------
            if (_currentHitModelType == ModelType.furniture) {
                this.dataServer.classesObj.modelTransformer.SetRotatable(true);
                this.dataServer.classesObj.modelTransformer.SetVerticalMovable(true);
            }
            //窗户模型不可以使用移动旋转工具的旋转功能。但是可以使用垂直移动功能。--------------------------
            else if (_currentHitModelType == ModelType.window) {
                this.dataServer.classesObj.modelTransformer.SetRotatable(false);
                this.dataServer.classesObj.modelTransformer.SetVerticalMovable(true);
            }
            //门既不能用旋转功能，也不能用垂直移动功能。-------------------------------------------------
            else if (_currentHitModelType == ModelType.door) {
                this.dataServer.classesObj.modelTransformer.SetRotatable(false);
                this.dataServer.classesObj.modelTransformer.SetVerticalMovable(false);
            }
        } else {
            this.dataServer.classesObj.modelTransformer.SetEnable(false);
            this.dataServer.classesObj.modelTransformer.ClearControlModel();
        }


        let _currentSelectParams = this.dataServer.classesObj.currentSelectModel.GetSelectedModelParamsValues();
        //做模型被选中时候右边显示的属性面板。-------------------------------
        let PanelData;
        switch (this.dataServer.classesObj.currentSelectModel.GetSelectedModelType()) {
            case ModelType.inWall:
            case ModelType.outWall:
            case ModelType.startWall:
            case ModelType.endWall:
                PanelData = this.dataServer.classesObj.propertiesMenuData.MakeWallData(_currentSelectParams);
                break;
            case ModelType.floor:
                PanelData = this.dataServer.classesObj.propertiesMenuData.MakeFloorData(_currentSelectParams);
                break;
            case ModelType.roof:
                PanelData = this.dataServer.classesObj.propertiesMenuData.MakeRoofData(_currentSelectParams);
                break;
            case ModelType.door:
                PanelData = this.dataServer.classesObj.propertiesMenuData.MakeWinDoorData(_currentSelectParams, "门框贴图", "门框轮廓线", ModelType.door);
                break;
            case ModelType.window:
                PanelData = this.dataServer.classesObj.propertiesMenuData.MakeWinDoorData(_currentSelectParams, "窗框贴图", "窗框轮廓线", ModelType.window);
                break;

        }
        this.popServer.panelRight.emit(PanelData);
        */
    }
    //当什么东西都没有单击中的时候触发的函数。======================================================
    OnNothingHit() {
        //把模型选中的时候显示的选择框销毁掉。------------------------------
        this.dataServer.classesObj.wireSelectFrame.destory3D();
        //设置当前没有任何模型被选择。--------------------------------------
        this.dataServer.classesObj.currentSelectModel.DeselectAll();
        //
        this.HideDoorWindowFurnitureSelectFrame();
        //右边属性面板什么都没有。------------------------------------------
        //this.popServer.panelRight.emit([]);
        //把移动旋转工具全部取消激活。--------------------------------------
        this.dataServer.classesObj.modelTransformer.SetEnable(false);
        //清空移动旋转工具的当前控制模型。----------------------------------
        this.dataServer.classesObj.modelTransformer.ClearControlModel();
    }
    /**
     * 把所有的门窗选择框都取消显示。================================================================
     */
    HideDoorWindowFurnitureSelectFrame() {
        //获取场景里的所有窗户和普通飘窗对象。------------------------------------------
        let _allWindowInScene = this.jDataServer.doWins().arr();
        for (let i = 0; i < _allWindowInScene.length; i++) {
            _allWindowInScene[i].ShowWireFrame(false);
        }
        //获取场景里的所有门对象。------------------------------------------
        let _allDoorInScene = this.jDataServer.doDoors().arr();
        for (let i = 0; i < _allDoorInScene.length; i++) {
            _allDoorInScene[i].ShowWireFrame(false);
        }
        //获取场景里的所有家具对象。------------------------------------------
        let _allFurnitureInScene = this.jDataServer.doFurnitures().arr();
        for (let i = 0; i < _allFurnitureInScene.length; i++) {
            _allFurnitureInScene[i].ShowWireFrame(false);
        }
        //获取场景里的所有烟道对象。------------------------------------------
        let _allBuildInScene = this.jDataServer.doBuilds().arr();
        for (let i = 0; i < _allBuildInScene.length; i++) {
            _allBuildInScene[i].ShowWireFrame(false);
        }
        //获取场景里的所有转角飘窗对象。------------------------------------------
        let _allCornerwinInScene = this.jDataServer.doCornerWins().arr();
        for (let i = 0; i < _allCornerwinInScene.length; i++) {
            _allCornerwinInScene[i].ShowWireFrame(false);
        }
    }
}
Rayhitter.ctorParameters = () => [
    { type: _THREEDataServer__WEBPACK_IMPORTED_MODULE_0__["THREEDataServer"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_3__["JdesignDataService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_4__["PopDivService"] }
];


/***/ }),

/***/ "./src/app/three/classes/SceneMaker.ts":
/*!*********************************************!*\
  !*** ./src/app/three/classes/SceneMaker.ts ***!
  \*********************************************/
/*! exports provided: SceneMaker */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SceneMaker", function() { return SceneMaker; });
/* harmony import */ var _THREEDataServer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./THREEDataServer */ "./src/app/three/classes/THREEDataServer.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/*
 作者：张建。
 类说明：这个类是用来创建最基本的三维场景的。
*/



class SceneMaker {
    constructor(dataServer, jDataServer, JDUServer) {
        this.dataServer = dataServer;
        this.jDataServer = jDataServer;
        this.JDUServer = JDUServer;
        this.jDataServer.cache.AnimationFuncs.push(() => {
            this.AnimateScene();
        });
    }
    /**
     * 开始初始化场景。
     */
    StartScene() {
        if (this.JDUServer.obj.getQueryString('quality') == "0") {
            this.dataServer.params.lowQuality = true;
        }
        this.dataServer.sceneCommonObj.mainCanvas = document.getElementById("mainCanvas");
        let _webGLParams = { canvas: this.dataServer.sceneCommonObj.mainCanvas };
        if (this.dataServer.params.lowQuality == false) {
            _webGLParams.antialias = true;
        }
        //设置renderer。
        this.dataServer.sceneCommonObj.renderer = new THREE.WebGLRenderer(_webGLParams);
        this.dataServer.sceneCommonObj.renderer.setClearColor(0xabcdef);
        this.dataServer.sceneCommonObj.renderer.setPixelRatio(window.devicePixelRatio);
        //this.dataServer.sceneCommonObj.renderer.setPixelRatio(window.devicePixelRatio);
        //设置scene。
        this.dataServer.sceneCommonObj.scene = new THREE.Scene();
        //新建一个正方体。
        let cube = new THREE.Mesh(new THREE.CubeGeometry(1, 1, 1), //长方体的长宽高分别是1,1,1
        new THREE.MeshPhongMaterial({
            color: 0xabcdef
        }));
        this.dataServer.sceneCommonObj.scene.add(cube);
        //添加上一盏灯光。
        let directionalLight = new THREE.DirectionalLight(0xffffff, 0.4);
        directionalLight.position.set(5, 5, 5);
        this.dataServer.sceneCommonObj.scene.add(directionalLight);
        //打上第二盏灯光。
        let directionalLight2 = new THREE.DirectionalLight(0xffffff, 0.6);
        directionalLight2.position.set(-5, 5, 5);
        this.dataServer.sceneCommonObj.scene.add(directionalLight2);
        //打上第三盏灯光。
        let directionalLight3 = new THREE.DirectionalLight(0xffffff, 0.3);
        directionalLight3.position.set(-5, 5, -5);
        this.dataServer.sceneCommonObj.scene.add(directionalLight3);
        //打上第四盏灯光。
        let directionalLight4 = new THREE.DirectionalLight(0xffffff, 0.2);
        directionalLight3.position.set(5, 5, -5);
        this.dataServer.sceneCommonObj.scene.add(directionalLight4);
        //打上第五盏灯光。
        let directionalLight5 = new THREE.DirectionalLight(0xffffff, 0.2);
        directionalLight3.position.set(0, -5, 0);
        this.dataServer.sceneCommonObj.scene.add(directionalLight5);
        //从外面读取图片构建天空盒对象。--------------------------------------------------------------------
        let _cubeTexture = this.dataServer.loaders.cubeMapLoader.setPath('./assets/threeAssets/maps/skyBox/') //设置好路径，后面的贴图就只要写贴图的名字就行了。
            .load([
            'px.jpg',
            'nx.jpg',
            'py.jpg',
            'ny.jpg',
            'pz.jpg',
            'nz.jpg'
        ]);
        //利用cubeMap来创建skybox;
        let _skyShader = THREE.ShaderLib["cube"];
        _skyShader.uniforms["tCube"].value = _cubeTexture;
        var material = new THREE.ShaderMaterial({
            fragmentShader: _skyShader.fragmentShader,
            vertexShader: _skyShader.vertexShader,
            uniforms: _skyShader.uniforms,
            side: THREE.BackSide
        });
        var skyBox = new THREE.Mesh(new THREE.BoxGeometry(1000000, 1000000, 1000000), material);
        this.dataServer.sceneCommonObj.scene.add(skyBox);
        //在场景里加入环境光。
        var ambientLight = new THREE.AmbientLight(0x555555);
        this.dataServer.sceneCommonObj.scene.add(ambientLight);
    }
    /**
         * 一帧帧调用的动画帧。
         */
    AnimateScene() {
        if (this.jDataServer.camera._3Dcamera != undefined) {
            this.dataServer.sceneCommonObj.renderer.render(this.dataServer.sceneCommonObj.scene, this.jDataServer.camera._3Dcamera);
        }
    }
    /**
     * 用来做画布缩放用的。在程序一运行的时候也会触发一次。=========================================================
     */
    ResizeScene(_sizeData) {
        if (this.jDataServer.camera._3Dcamera != undefined) {
            this.jDataServer.camera._3Dcamera.aspect = _sizeData.width / _sizeData.height;
            this.jDataServer.camera._3Dcamera.updateProjectionMatrix();
        }
        //根据不同的性能要求决定渲染图的分辨率。---------------------------------------
        let _chuShu = 1.0;
        if (this.dataServer.params.lowQuality == true) {
            _chuShu = 3.0;
        }
        this.dataServer.sceneCommonObj.renderer.setPixelRatio(window.devicePixelRatio);
        this.dataServer.sceneCommonObj.renderer.setSize(_sizeData.width / window.devicePixelRatio / _chuShu, _sizeData.height / window.devicePixelRatio / _chuShu);
        this.dataServer.sceneCommonObj.mainCanvas.style.width = _sizeData.width + "px";
        this.dataServer.sceneCommonObj.mainCanvas.style.height = _sizeData.height + "px";
    }
}
SceneMaker.ctorParameters = () => [
    { type: _THREEDataServer__WEBPACK_IMPORTED_MODULE_0__["THREEDataServer"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_1__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_2__["JdesignUtil2dService"] }
];


/***/ }),

/***/ "./src/app/three/classes/THREEDataServer.ts":
/*!**************************************************!*\
  !*** ./src/app/three/classes/THREEDataServer.ts ***!
  \**************************************************/
/*! exports provided: THREEDataServer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "THREEDataServer", function() { return THREEDataServer; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _RayhitModelList__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./RayhitModelList */ "./src/app/three/classes/RayhitModelList.ts");
/* harmony import */ var _WireSelectFrame__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./WireSelectFrame */ "./src/app/three/classes/WireSelectFrame.ts");
/* harmony import */ var _PropertiesMenuData__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./PropertiesMenuData */ "./src/app/three/classes/PropertiesMenuData.ts");
/* harmony import */ var _CurrentSelectModel__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./CurrentSelectModel */ "./src/app/three/classes/CurrentSelectModel.ts");
/* harmony import */ var _BoxMaker__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./BoxMaker */ "./src/app/three/classes/BoxMaker.ts");
/* harmony import */ var _ExtrueModelMaker__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ExtrueModelMaker */ "./src/app/three/classes/ExtrueModelMaker.ts");

/*
 作者：张建。
 类说明：这个是我自己使用的数据层，用来存放一切我自己使用的数据。
*/







let THREEDataServer = class THREEDataServer {
    constructor() {
        //3d场景里常用的东西。
        this.sceneCommonObj = {
            mainCanvas: null,
            renderer: null,
            scene: null
        };
        //所有的单例模式的类的对象都放这里。
        this.classesObj = {
            sceneMaker: null,
            canvasEventMaster: null,
            rayHitter: null,
            rayHitModelList: new _RayhitModelList__WEBPACK_IMPORTED_MODULE_2__["RayhitModelList"](),
            wireSelectFrame: new _WireSelectFrame__WEBPACK_IMPORTED_MODULE_3__["WireSelectFrame"](this),
            propertiesMenuData: new _PropertiesMenuData__WEBPACK_IMPORTED_MODULE_4__["PropertiesMenuData"](),
            currentSelectModel: new _CurrentSelectModel__WEBPACK_IMPORTED_MODULE_5__["CurrentSelectModel"](),
            profileLoader: null,
            boxMaker: new _BoxMaker__WEBPACK_IMPORTED_MODULE_6__["BoxMaker"](),
            extrudeModelMaker: new _ExtrueModelMaker__WEBPACK_IMPORTED_MODULE_7__["ExtrueModelMaker"](),
            modelTransformer: null,
        };
        this.canvasSize = null; //当前的画布的长宽。里面有个width有个height
        this.creatingLongObj = null; //正在创建的杨振龙的对象，可以是窗对象，门对象或者家具对象。
        //各种加载器。
        this.loaders = {
            textureLoader: new THREE.TextureLoader(),
            fileLoader: new THREE.FileLoader(),
            daeLoader: new THREE.ColladaLoader(),
            cubeMapLoader: new THREE.CubeTextureLoader(),
            wardrobeLoader: null
        };
        //其它的一些参数。=============================================================
        this.params = {
            lowQuality: false,
            leftMouseIsDown: false
        };
        //用来做射线碰撞的一些对象。=====================================================
        this.rayhitObjs = {
            raycaster: new THREE.Raycaster(),
            rayHitMousePos: new THREE.Vector2()
        };
        // this.loaders.daeLoader.options.convertUpAxis = true;
    }
};
THREEDataServer = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
], THREEDataServer);



/***/ }),

/***/ "./src/app/three/classes/WireSelectFrame.ts":
/*!**************************************************!*\
  !*** ./src/app/three/classes/WireSelectFrame.ts ***!
  \**************************************************/
/*! exports provided: WireSelectFrame */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WireSelectFrame", function() { return WireSelectFrame; });
/* harmony import */ var _THREEDataServer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./THREEDataServer */ "./src/app/three/classes/THREEDataServer.ts");

/*
 作者：张建。
 类说明：这个主要是用来做模型的面被选择的时候的选择框用的。
*/
class WireSelectFrame {
    constructor(_dataServer) {
        this.wireMesh = null;
        this.wireGeometry = null;
        this.dataServer = null;
        this.lineMat = null;
        this.dataServer = _dataServer;
        this.lineMat = new THREE.LineBasicMaterial({
            color: 0xffff00,
            depthTest: false,
            depthWrite: false,
        });
    }
    MakeWireSelectFrame(_pointList) {
        //先把前面的销毁掉把。------------------------
        this.destory3D();
        this.wireGeometry = new THREE.Geometry();
        for (let i = 0; i < _pointList.length; i++) {
            this.wireGeometry.vertices.push(_pointList[i]);
        }
        //再加个起点，好成为一个闭合的四边形。
        this.wireGeometry.vertices.push(_pointList[0]);
        this.wireMesh = new THREE.Line(this.wireGeometry, this.lineMat);
        this.wireMesh.renderOrder = 100000000;
        this.dataServer.sceneCommonObj.scene.add(this.wireMesh);
    }
    /**
     * 把这个模型选择框销毁掉。
     */
    destory3D() {
        if (this.wireMesh != null) {
            this.dataServer.sceneCommonObj.scene.remove(this.wireMesh);
            this.wireMesh.material.dispose();
            this.wireMesh = null;
        }
        if (this.wireGeometry != null) {
            this.wireGeometry.dispose();
            this.wireGeometry = null;
        }
    }
}
WireSelectFrame.ctorParameters = () => [
    { type: _THREEDataServer__WEBPACK_IMPORTED_MODULE_0__["THREEDataServer"] }
];


/***/ }),

/***/ "./src/app/three/classes/canvasEventMaster.ts":
/*!****************************************************!*\
  !*** ./src/app/three/classes/canvasEventMaster.ts ***!
  \****************************************************/
/*! exports provided: CanvasEventMaster */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CanvasEventMaster", function() { return CanvasEventMaster; });
/* harmony import */ var _THREEDataServer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./THREEDataServer */ "./src/app/three/classes/THREEDataServer.ts");
/*
 作者：张建。
 类说明：这个用来处理绑定在canvas里的所有事件。
*/

class CanvasEventMaster {
    constructor(dataServer) {
        //鼠标按下的时候触发的函数。
        this.mouseDownEvents = [];
        this.mouseUpEvents = [];
        this.globelMouseUpEvents = [];
        this.mouseMoveEvents = [];
        this.mouseOutEvents = [];
        //绑定鼠标按下事件。--------------------------------------------------------
        dataServer.sceneCommonObj.mainCanvas.addEventListener("mousedown", (ev) => {
            for (let i = 0; i < this.mouseDownEvents.length; i++) {
                this.mouseDownEvents[i].fuc(ev, this.mouseDownEvents[i].scope);
            }
        });
        //绑定鼠标移动事件。--------------------------------------------------------
        dataServer.sceneCommonObj.mainCanvas.addEventListener("mousemove", (ev) => {
            for (let i = 0; i < this.mouseMoveEvents.length; i++) {
                this.mouseMoveEvents[i].fuc(ev, this.mouseMoveEvents[i].scope);
            }
        });
        //绑定鼠标弹起事件。--------------------------------------------------------
        dataServer.sceneCommonObj.mainCanvas.addEventListener("mouseup", (ev) => {
            for (let i = 0; i < this.mouseUpEvents.length; i++) {
                this.mouseUpEvents[i].fuc(ev, this.mouseUpEvents[i].scope);
            }
        });
        //鼠标移开事件。-------------------------------------------------------------
        dataServer.sceneCommonObj.mainCanvas.addEventListener("mouseout", (ev) => {
            for (let i = 0; i < this.mouseOutEvents.length; i++) {
                this.mouseOutEvents[i].fuc(ev, this.mouseOutEvents[i].scope);
            }
        });
        //绑定在document上的鼠标弹起事件。--------------------------------------------
        document.addEventListener("mouseup", (ev) => {
            for (let i = 0; i < this.globelMouseUpEvents.length; i++) {
                this.globelMouseUpEvents[i].fuc(ev, this.globelMouseUpEvents[i].scope);
            }
        });
    }
}
CanvasEventMaster.ctorParameters = () => [
    { type: _THREEDataServer__WEBPACK_IMPORTED_MODULE_0__["THREEDataServer"] }
];


/***/ }),

/***/ "./src/app/three/classes/dataStruct.ts":
/*!*********************************************!*\
  !*** ./src/app/three/classes/dataStruct.ts ***!
  \*********************************************/
/*! exports provided: ClassesObj, SceneCommonObj, EventData, AllLoaders, CustomUserData, ProfileModelData, MoveAxis, ZVector2, MyDirect, ModelType, FrameType, TransformMode, AxisType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ClassesObj", function() { return ClassesObj; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SceneCommonObj", function() { return SceneCommonObj; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EventData", function() { return EventData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AllLoaders", function() { return AllLoaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CustomUserData", function() { return CustomUserData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProfileModelData", function() { return ProfileModelData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MoveAxis", function() { return MoveAxis; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ZVector2", function() { return ZVector2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MyDirect", function() { return MyDirect; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModelType", function() { return ModelType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FrameType", function() { return FrameType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TransformMode", function() { return TransformMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AxisType", function() { return AxisType; });
/*
 作者：张建。
 类说明：这里存放一些用来约束数据的一些小型的类。可以理解为结构体。
*/
class ClassesObj {
}
class SceneCommonObj {
}
class EventData {
}
class AllLoaders {
}
class CustomUserData {
}
class ProfileModelData {
    constructor() {
        this.kickLine = null; //用来生成该墙的地脚线的对象。
        this.plasterCornice = null; //用来生成该墙的天花线的对象。
        this.kickLineSize = new ZVector2(30, 115); //该墙的地脚线的大小。
        this.plasterCorniceSize = new ZVector2(80, 80); //该墙的天花线的大小。
        this.profileDir = []; //就是这个地脚线和石灰线沿着哪个方向走？
        this.cutPlaneDir = []; //墙切割平面的朝向，非切割平面法线朝向。
        this.kickLineProfilePoints = null; //地脚线的一圈点的数据。
        this.plasterCornicePoints = null; //天花线的一圈点的数据。
    }
}
class MoveAxis {
    constructor() {
        this.lineVisible = null; //用来做移动显示出来的那条线，仅仅用来做显示。
        this.lineCollider = null; //用来做垂直移动工具碰撞那条线，仅仅用来做碰撞，不可见。
        this.forwardConeMesh = null; //就是垂直移动工具上面的那个朝上的箭头。
        this.backwardConeMesh = null; //就是垂直移动工具上面的那个朝下的箭头。
        this.moveMouseDownModelAxisPos = 0.0; //鼠标单击下去垂直工具模型距离地面的高度。
        this.moveMouseDownHitPos = 0.0; //鼠标单击下去垂直工具在垂直大平面上的单击点的高度。                                                  
    }
}
// export class DoorWindowFrameData {
//     winDoorFrame: DoorWindowFrame = null;                            //用来生成门框的对象。
// }
// export class ProfileModels {
//     inWall: ProfileModelData;                          //内墙的地脚线和天花线
//     outWall: ProfileModelData;                         //外墙的地脚线和天花线
//     startSideWall: ProfileModelData;                   //开始转角墙的地脚线和天花线
//     endSideWall: ProfileModelData;                     //结束转角墙的地脚线和天花线
// }
class ZVector2 {
    constructor(_x, _y) {
        this.x = _x;
        this.y = _y;
    }
}
ZVector2.ctorParameters = () => [
    { type: Number },
    { type: Number }
];
/**
 * 上下左右前后六个方向的枚举。==============================
 */
var MyDirect;
(function (MyDirect) {
    MyDirect[MyDirect["front"] = 0] = "front";
    MyDirect[MyDirect["back"] = 1] = "back";
    MyDirect[MyDirect["right"] = 2] = "right";
    MyDirect[MyDirect["left"] = 3] = "left";
    MyDirect[MyDirect["top"] = 4] = "top";
    MyDirect[MyDirect["bottom"] = 5] = "bottom";
})(MyDirect || (MyDirect = {}));
var ModelType;
(function (ModelType) {
    ModelType[ModelType["startWall"] = 0] = "startWall";
    ModelType[ModelType["endWall"] = 1] = "endWall";
    ModelType[ModelType["inWall"] = 2] = "inWall";
    ModelType[ModelType["outWall"] = 3] = "outWall";
    ModelType[ModelType["floor"] = 4] = "floor";
    ModelType[ModelType["roof"] = 5] = "roof";
    ModelType[ModelType["kickLine"] = 6] = "kickLine";
    ModelType[ModelType["plasterCornice"] = 7] = "plasterCornice";
    ModelType[ModelType["door"] = 8] = "door";
    ModelType[ModelType["window"] = 9] = "window";
    ModelType[ModelType["furniture"] = 10] = "furniture";
    ModelType[ModelType["normalBayWindow"] = 11] = "normalBayWindow";
    ModelType[ModelType["cornerBayWindow"] = 12] = "cornerBayWindow";
    ModelType[ModelType["build"] = 13] = "build"; //烟道。 
})(ModelType || (ModelType = {}));
/**
 * 门框的具体哪一个模型。==========
 */
var FrameType;
(function (FrameType) {
    FrameType[FrameType["topFrame"] = 0] = "topFrame";
    FrameType[FrameType["bottomFrame"] = 1] = "bottomFrame";
    FrameType[FrameType["rightFrame"] = 2] = "rightFrame";
    FrameType[FrameType["leftFrame"] = 3] = "leftFrame";
})(FrameType || (FrameType = {}));
/**
 * 移动旋转工具所处的模式。===================
 */
var TransformMode;
(function (TransformMode) {
    TransformMode[TransformMode["moveX"] = 0] = "moveX";
    TransformMode[TransformMode["moveY"] = 1] = "moveY";
    TransformMode[TransformMode["moveZ"] = 2] = "moveZ";
    TransformMode[TransformMode["rotate"] = 3] = "rotate";
    TransformMode[TransformMode["none"] = 4] = "none"; //移动旋转工具用的什么都不是。
})(TransformMode || (TransformMode = {}));
var AxisType;
(function (AxisType) {
    AxisType[AxisType["xAixs"] = 0] = "xAixs";
    AxisType[AxisType["yAixs"] = 1] = "yAixs";
    AxisType[AxisType["zAixs"] = 2] = "zAixs";
})(AxisType || (AxisType = {}));


/***/ }),

/***/ "./src/app/three/jDesign3D/JBayWin3D.ts":
/*!**********************************************!*\
  !*** ./src/app/three/jDesign3D/JBayWin3D.ts ***!
  \**********************************************/
/*! exports provided: JBayWin3D */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JBayWin3D", function() { return JBayWin3D; });
/* harmony import */ var _svg_common_jdesign_JWin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../svg/common/jdesign/JWin */ "./src/app/svg/common/jdesign/JWin.ts");
/* harmony import */ var _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../classes/dataStruct */ "./src/app/three/classes/dataStruct.ts");
/* harmony import */ var _classes_BaywinModel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../classes/BaywinModel */ "./src/app/three/classes/BaywinModel.ts");



class JBayWin3D extends _svg_common_jdesign_JWin__WEBPACK_IMPORTED_MODULE_0__["JWin"] {
    SetDataServerAndOthers(_dataServer, _jDataServer, _popServer) {
        if (this.dataServer != undefined) {
            return;
        }
        this.dataServer = _dataServer;
        this.popServer = _popServer;
        this.jDataServer = _jDataServer;
        this.OnModelMove.push(this.OnBayWinBeMove.bind(this));
    }
    //当阿隆飘窗那边移动的时候会被触发的函数。=========================================================
    OnBayWinBeMove() {
        //如果飘窗存储的宽度跟目前的宽度或者深度不相等，代表飘窗的宽度被缩放过了。--------------------------
        if (this.formerWidth != this.size.width ||
            this.formerDeep != this.size.height) {
            this.MakeWin();
            this.UpdateDoorWinPos(this.GetWinDoorPos(this.floorHeight));
            let _cowalls = this.getwall().getCowallArr();
            for (let i = 0; i < _cowalls.length; i++) {
                _cowalls[i].MakeWall(true);
            }
        }
    }
    MakeWin() {
        //先把前面的门窗销毁掉咯。------------------------------------------
        this.DestoryWinDoor(true);
        //this.floorHeight = 500;
        //构建基础窗洞的一些步骤。------------------------------------
        this.Init(_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].normalBayWindow);
        //设置飘窗是可以在垂直方向上移动的。-------------------------------------
        this.dataServer.classesObj.modelTransformer.SetVerticalMovable(true);
        this.MakeBaywindow();
    }
    //开始创建飘窗的模型。=================================================================
    MakeBaywindow() {
        if (this.baywin == null) {
            this.baywin = new _classes_BaywinModel__WEBPACK_IMPORTED_MODULE_2__["BaywinModel"](this.dataServer, this.jDataServer, this.size.width, this.size.height, this.size.height3D, this.outThickness, this.outBoxThickness);
            //记录下普通飘窗在开始的时候大理石使用的贴图。---------------------------------------
            this.baywin.paramsValues.windowsillMaterialIndex[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].normalBayWindow] = 0;
        }
        this.baywin.MakeBayWin();
    }
    //提供给杨松岭设置飘窗窗台的材质用的。=====================================================
    SetBaywindowStillTexture(_path) {
        this.baywin.SetBaywindowStillTexture(_path);
    }
    //提供给杨松岭来获取当前普通飘窗使用的是第几个材质。=========================================
    getBaywindowStillMatIndex() {
        return this.baywin.paramsValues.windowsillMaterialIndex[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].normalBayWindow];
    }
    //提供给杨松岭来设置当前普通飘窗使用的是第几个材质。=========================================
    SetBaywindowStillMatIndex(_index) {
        this.baywin.paramsValues.windowsillMaterialIndex[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].normalBayWindow] = _index;
    }
}


/***/ }),

/***/ "./src/app/three/jDesign3D/JBuild3D.ts":
/*!*********************************************!*\
  !*** ./src/app/three/jDesign3D/JBuild3D.ts ***!
  \*********************************************/
/*! exports provided: JBuild3D */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JBuild3D", function() { return JBuild3D; });
/* harmony import */ var _svg_common_jdesign_JBuild__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../svg/common/jdesign/JBuild */ "./src/app/svg/common/jdesign/JBuild.ts");
/* harmony import */ var _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../classes/dataStruct */ "./src/app/three/classes/dataStruct.ts");
/* harmony import */ var _classes_ProfileModel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../classes/ProfileModel */ "./src/app/three/classes/ProfileModel.ts");



class JBuild3D extends _svg_common_jdesign_JBuild__WEBPACK_IMPORTED_MODULE_0__["JBuild"] {
    constructor() {
        super(...arguments);
        this.buildTexture = null; //烟道上的贴图。
        this.paramsValues = {
            materialIndex: [],
            kickLineProfileShapeIndex: [],
            kickLineProfileMatIndex: [],
            plasterCorniceProfileShapeIndex: [],
            plasterCorniceProfileMatIndex: [],
        };
        this.profileModels = []; //这个烟道上的所有地脚线和石灰线等数据。
        this.allWallTypes = [
            _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["MyDirect"].front,
            _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["MyDirect"].back,
            _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["MyDirect"].right,
            _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["MyDirect"].left
        ];
    }
    SetDataServerAndOthers(_dataServer, _jDataServer, _popServer) {
        if (this.dataServer != undefined) {
            return;
        }
        this.jDataServer = _jDataServer;
        this.FatherSetDataServerAndOthers(_dataServer, _popServer);
        //设置好paramsValues所有参数的初始值。--------------------------------------
        this.paramsValues.materialIndex[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].build] = 0;
        this.paramsValues.kickLineProfileShapeIndex[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].build] = 0;
        this.paramsValues.kickLineProfileMatIndex[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].build] = 0;
        this.paramsValues.plasterCorniceProfileShapeIndex[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].build] = 0;
        this.paramsValues.plasterCorniceProfileMatIndex[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].build] = 0;
        //初始化profileModels的所有数据。---------------------------------
        for (let i = 0; i < this.allWallTypes.length; i++) {
            this.profileModels[this.allWallTypes[i]] = new _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ProfileModelData"]();
        }
        //为剖面线设置必须的数据。------------------------------------------
        this.SetProfileData();
        this.OnModelMove.push(this.OnBuildBeMove.bind(this));
    }
    OnBuildBeMove() {
        this.UpdateProfileTransform();
    }
    UpdateProfileTransform() {
        if (this.profileModels[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["MyDirect"].front].kickLine != null) {
            this.profileModels[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["MyDirect"].front].kickLine.profileMesh.position.x = this.pos.x;
            this.profileModels[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["MyDirect"].front].kickLine.profileMesh.position.z = this.pos.y;
            this.profileModels[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["MyDirect"].front].kickLine.profileMesh.rotation.y = -this.radian;
        }
    }
    SetProfileData() {
        //设置烟道前面的面的地脚线的数据。--------------------------------------------
        this.profileModels[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["MyDirect"].front].profileDir = [new THREE.Vector3(-this.size.width / 2, 0.0, -this.size.height / 2), new THREE.Vector3(this.size.width / 2, 0.0, -this.size.height / 2)];
        this.profileModels[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["MyDirect"].front].cutPlaneDir = [
            new THREE.Vector3(-1, 0, -1),
            new THREE.Vector3(1, 0, -1),
        ];
        //设置烟道后面的面的地脚线的数据。--------------------------------------------
        this.profileModels[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["MyDirect"].back].profileDir = [new THREE.Vector3(-this.size.width / 2, 0.0, this.size.height / 2), new THREE.Vector3(this.size.width / 2, 0.0, this.size.height / 2)];
        this.profileModels[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["MyDirect"].back].cutPlaneDir = [
            new THREE.Vector3(-1, 0, 1),
            new THREE.Vector3(1, 0, 1),
        ];
    }
    MakeBuild() {
        //构架烟道的父对象。-----------------------------
        this.furnitureFarther = new THREE.Object3D();
        this.dataServer.sceneCommonObj.scene.add(this.furnitureFarther);
        //创建烟道的模型。-------------------------------
        let _buildModel = this.dataServer.classesObj.boxMaker.MakeBox(this.size.width, this.size.height3D, this.size.height, true, true);
        this.LoadTextureByIndex(0);
        _buildModel.material.map = this.buildTexture;
        _buildModel.material.color.r = 1.0;
        _buildModel.material.color.g = 1.0;
        _buildModel.material.color.b = 1.0;
        _buildModel.material.needsUpdate = true;
        this.furnitureFarther.add(_buildModel);
        //创建一个选择器。-------------------------------
        this.selector = this.dataServer.classesObj.boxMaker.MakeBox(this.size.width, this.size.height3D, this.size.height, true, true);
        this.selector.material = new THREE.MeshBasicMaterial({ color: 0xffff00, visible: false });
        this.dataServer.sceneCommonObj.scene.add(this.selector);
        //把选择用的模型放到跟射线的碰撞列表里。---------------------------------------
        let _customUserData = new _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["CustomUserData"]();
        _customUserData.longObj = this;
        _customUserData.modelType = _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].build;
        this.selector.userData.customUserData = _customUserData;
        this.dataServer.classesObj.rayHitModelList.AddRayHitModel(this.selector);
        //创建模型的外框，用来显示模型当前是否被选择的状态。-------------------------------------------
        this.wireFrame = this.dataServer.classesObj.boxMaker.MakeBox(this.size.width, this.size.height3D, this.size.height, true, true);
        this.wireFrame.material = new THREE.MeshBasicMaterial({ color: 0xffff00, wireframe: true, visible: false });
        this.dataServer.sceneCommonObj.scene.add(this.wireFrame);
        //设置移动旋转工具是否可以旋转是否可以垂直移动。----------------------------
        this.dataServer.classesObj.modelTransformer.SetRotatable(true);
        this.dataServer.classesObj.modelTransformer.SetVerticalMovable(false);
        //把移动旋转工具全部取消激活。--------------------------------------
        this.dataServer.classesObj.modelTransformer.SetEnable(false);
        //清空移动旋转工具的当前控制模型。----------------------------------
        this.dataServer.classesObj.modelTransformer.ClearControlModel();
    }
    LoadTextureByIndex(_textureIndex) {
        let _initTextureUrl = this.jDataServer.json.wallPaper[_textureIndex];
        this.buildTexture = this.dataServer.loaders.textureLoader.load(_initTextureUrl);
        this.buildTexture.wrapS = THREE.RepeatWrapping;
        this.buildTexture.wrapT = THREE.RepeatWrapping;
    }
    //给杨松岭获取当前墙使用的贴图的序号。==============================================
    GetMaterialSelectIndex() {
        return this.paramsValues.materialIndex[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].build];
    }
    //给杨松岭设置当前墙使用的贴图的序号。==============================================
    SetMaterialSelectIndex(_index) {
        this.paramsValues.materialIndex[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].build] = _index;
    }
    //给杨松岭获取当前墙使用的是哪个款式的地脚线。=========================================
    GetKickLineProfileIndex() {
        return this.paramsValues.kickLineProfileShapeIndex[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].build];
    }
    //给杨松岭设置当前墙使用的是哪个款式的地脚线。=========================================
    SetKickLineProfileIndex(_index) {
        this.paramsValues.kickLineProfileShapeIndex[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].build] = _index;
    }
    //给杨松岭获取当前使用的是哪个款式的石灰线。=========================================
    GetPlasterCorniceProfileIndex() {
        return this.paramsValues.plasterCorniceProfileShapeIndex[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].build];
    }
    //给杨松岭设置当前墙使用的是哪个款式的石灰线。=========================================
    SetPlasterCorniceProfileIndex(_index) {
        this.paramsValues.plasterCorniceProfileShapeIndex[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].build] = _index;
    }
    //给杨松岭获取当前地脚线使用的是第几张贴图。============================================
    GetKickLineProfileMatIndex() {
        return this.paramsValues.kickLineProfileMatIndex[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].build];
    }
    //给杨松岭用来设置地脚线使用的是第几张贴图。=============================================
    SetKickLineProfileMatIndex(_index) {
        this.paramsValues.kickLineProfileMatIndex[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].build] = _index;
    }
    //给杨松岭获获取当前石灰线使用的是第几张贴图。=============================================
    GetPlasterCorniceProfileMatIndex() {
        return this.paramsValues.plasterCorniceProfileMatIndex[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].build];
    }
    //给杨松岭获设置当前石灰线使用的是第几张贴图。=============================================
    SetPlasterCorniceProfileMatIndex(_index) {
        this.paramsValues.plasterCorniceProfileMatIndex[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].build] = _index;
    }
    //创建地脚线。===========================================================================
    MakeKickLine(_profileDatas) {
        for (let i = 0; i < this.allWallTypes.length; i++) {
            if (this.profileModels[this.allWallTypes[i]].profileDir == undefined) {
                continue;
            }
            this.profileModels[this.allWallTypes[i]].kickLineProfilePoints = _profileDatas;
            //第一个创建地脚线的时候，请先创建一个ProfileModel对象。---------------
            if (this.profileModels[this.allWallTypes[i]].kickLine == null) {
                this.profileModels[this.allWallTypes[i]].kickLine = new _classes_ProfileModel__WEBPACK_IMPORTED_MODULE_2__["ProfileModel"](this.dataServer, _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].kickLine, this.jDataServer);
            }
            this.profileModels[this.allWallTypes[i]].kickLine.MakeStraightProfile(this.paramsValues.kickLineProfileMatIndex[this.allWallTypes[i]], 0, this.profileModels[this.allWallTypes[i]].kickLineSize, this.profileModels[this.allWallTypes[i]].profileDir, this.profileModels[this.allWallTypes[i]].cutPlaneDir, this.profileModels[this.allWallTypes[i]].kickLineProfilePoints, []);
        }
        this.UpdateProfileTransform();
    }
}


/***/ }),

/***/ "./src/app/three/jDesign3D/JCamera3D.ts":
/*!**********************************************!*\
  !*** ./src/app/three/jDesign3D/JCamera3D.ts ***!
  \**********************************************/
/*! exports provided: JCamera3D */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JCamera3D", function() { return JCamera3D; });
/* harmony import */ var _svg_common_jdesign_JCamera__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../svg/common/jdesign/JCamera */ "./src/app/svg/common/jdesign/JCamera.ts");
/* harmony import */ var _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../classes/dataStruct */ "./src/app/three/classes/dataStruct.ts");
/* harmony import */ var _classes_MyUtil__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../classes/MyUtil */ "./src/app/three/classes/MyUtil.ts");
/*
 作者：张建。
 类说明：把摄像机的功能都封装到这个类里。
*/



class JCamera3D extends _svg_common_jdesign_JCamera__WEBPACK_IMPORTED_MODULE_0__["JCamera"] {
    constructor() {
        super(...arguments);
        this.personHeight = 1600; //一个人的高度，主要用来控制摄像机的高度。
        this.canRotate = true; //这个视图视图是否可以旋转？在拖拽门窗的时候是不允许旋转的。
        this.mouseStatus = {
            mouseIsDown: false,
            mouseDownPos: null,
            mouseDownRadian: 0,
            mouseDownElevation: 0 //鼠标按下的时候的摄像机的垂直旋转角。
        };
        this.elevation = 0; //摄像机在垂直方向上的仰角。
        this.keyIsDown = {
            q: false,
            e: false
        };
    }
    //因为我不能实例化它，只能把dataServer等需要用到的东西先给我传递进来。===============================================
    SetDataServerAndOthers(_dataServer, _domServer, _jDataServer) {
        if (this.dataServer != undefined) {
            return;
        }
        this.dataServer = _dataServer;
        this.domServer = _domServer;
        this.jDataServer = _jDataServer;
    }
    /**
     * 创建一个摄像机并把摄像机添加到场景里。===================================================================
     */
    AddCameraToScene() {
        this._3Dcamera = new THREE.PerspectiveCamera(45, this.dataServer.sceneCommonObj.mainCanvas.clientWidth / this.dataServer.sceneCommonObj.mainCanvas.clientHeight, 1, 20000000);
        this._3Dcamera.position.set(this.pos.x, this.personHeight, this.pos.y);
        this.dataServer.sceneCommonObj.scene.add(this._3Dcamera);
        //为在屏幕操作摄像机开始绑定事件。---------------------------------------------
        let mousedownEvent = _classes_MyUtil__WEBPACK_IMPORTED_MODULE_2__["MyUtil"].MakeMouseEvent(this.OnMouseDown, this);
        this.dataServer.classesObj.canvasEventMaster.mouseDownEvents.push(mousedownEvent);
        let mousemoveEvent = _classes_MyUtil__WEBPACK_IMPORTED_MODULE_2__["MyUtil"].MakeMouseEvent(this.OnMouseMove, this);
        this.dataServer.classesObj.canvasEventMaster.mouseMoveEvents.push(mousemoveEvent);
        let mouseupEvent = _classes_MyUtil__WEBPACK_IMPORTED_MODULE_2__["MyUtil"].MakeMouseEvent(this.OnMouseUp, this);
        this.dataServer.classesObj.canvasEventMaster.globelMouseUpEvents.push(mouseupEvent);
        //再自己绑定一些快捷键。-----------------------------------------------------
        // this.jDataServer.cache.hotKeys.data.push({
        //     keyArr: ["q"],
        //     downFunc: () => {
        //         this.keyIsDown.q = true;
        //     },
        //     upFunc: () => {
        //         this.keyIsDown.q = false;
        //     }
        // });
        // this.jDataServer.cache.hotKeys.data.push({
        //     keyArr: ["e"],
        //     downFunc: () => {
        //         this.keyIsDown.e = true;
        //     },
        //     upFunc: () => {
        //         this.keyIsDown.e = false;
        //     }
        // });
        this.jDataServer.cache.shortFuncs['cameraMoveUpStart'] = () => {
            this.keyIsDown.q = true;
        };
        this.jDataServer.cache.shortFuncs['cameraMoveUpStop'] = () => {
            this.keyIsDown.q = false;
        };
        this.jDataServer.cache.shortFuncs['cameraMoveDownStart'] = () => {
            this.keyIsDown.e = true;
        };
        this.jDataServer.cache.shortFuncs['cameraMoveDownStop'] = () => {
            this.keyIsDown.e = false;
        };
        //增加一个动画帧。-------------------------------------------------------
        this.jDataServer.cache.AnimationFuncs.push(() => {
            this.AnimateScene();
        });
    }
    /**
     * 用来更新摄像机的坐标和旋转的自定义函数。=======================================================================
     */
    UpdateCameraPosAndRotation() {
        this.UpdateCameraPos();
        //更新摄像机的旋转。---------------------------------------------
        this.UpdateCameraRotation();
    }
    /**
     * 更新摄像机的坐标。=====================================================================================
     */
    UpdateCameraPos() {
        //更新摄像机的坐标位置。-----------------------------------------
        this._3Dcamera.position.set(this.pos.x, this.personHeight, this.pos.y);
    }
    /**
     * 更新摄像机的旋转。====================================================================================
     */
    UpdateCameraRotation() {
        let _cameraQuaternionHorizontal = new THREE.Quaternion();
        _cameraQuaternionHorizontal.setFromAxisAngle(new THREE.Vector3(0, 1, 0), -this.radian);
        let _cameraQuaternionVertical = new THREE.Quaternion();
        _cameraQuaternionVertical.setFromAxisAngle(new THREE.Vector3(1, 0, 0), this.elevation);
        //摄像机旋转的水平四元数和垂直四元数的乘积。
        let _cameraQuaternion = new THREE.Quaternion();
        _cameraQuaternion.multiplyQuaternions(_cameraQuaternionHorizontal, _cameraQuaternionVertical);
        this._3Dcamera.quaternion.copy(_cameraQuaternion);
    }
    //当鼠标按下去的时候触发的函数。==========================================================================
    OnMouseDown(_ev, _scope) {
        //如果单击下去碰到的模型和当前选择的模型是一个模型，则不允许视图旋转。--------------------
        //----------------------------------------------------------------------------------
        let _currentSelectModelType = _scope.dataServer.classesObj.currentSelectModel.GetSelectedModelType();
        if (_currentSelectModelType == _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].door ||
            _currentSelectModelType == _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].window ||
            _currentSelectModelType == _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].furniture ||
            _currentSelectModelType == _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].normalBayWindow ||
            _currentSelectModelType == _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].build) {
            if (_scope.dataServer.classesObj.rayHitter.rayHitModels.mouseDownDoorWinFurniture != null) {
                let _mouseDownModelID = _classes_MyUtil__WEBPACK_IMPORTED_MODULE_2__["MyUtil"].GetMeshLongObj(_scope.dataServer.classesObj.rayHitter.rayHitModels.mouseDownDoorWinFurniture).id;
                let _currentSelectModelID = _scope.dataServer.classesObj.currentSelectModel.GetSelectModelID();
                if (_mouseDownModelID == _currentSelectModelID) {
                    _scope.canRotate = false;
                }
            }
        }
        //如果击中了移动旋转工具，则不允许视图旋转。--------------------------------------------
        //----------------------------------------------------------------------------------
        if (_scope.dataServer.classesObj.modelTransformer.mouseDownHitModel != null) {
            _scope.canRotate = false;
        }
        _scope.mouseStatus.mouseIsDown = true;
        _scope.mouseStatus.mouseDownPos = new THREE.Vector2(_ev.clientX, _ev.clientY);
        _scope.mouseStatus.mouseDownRadian = _scope.radian;
        _scope.mouseStatus.mouseDownElevation = _scope.elevation;
    }
    //当鼠标移动的时候触发的函数。============================================================================
    OnMouseMove(_ev, _scope) {
        if (_scope.canRotate == false) {
            return;
        }
        if (_scope.mouseStatus.mouseIsDown == true) {
            let _currentMousePos = new THREE.Vector2(_ev.clientX, _ev.clientY);
            let _posOffset = _currentMousePos.sub(_scope.mouseStatus.mouseDownPos);
            _scope.radian = _scope.mouseStatus.mouseDownRadian - _posOffset.x / _scope.dataServer.canvasSize.width * 2;
            _scope.elevation = _scope.mouseStatus.mouseDownElevation + _posOffset.y / _scope.dataServer.canvasSize.height * 2;
            _scope.elevation = _classes_MyUtil__WEBPACK_IMPORTED_MODULE_2__["MyUtil"].Clamp(_scope.elevation, -0.5, 0.5);
            _scope.domServer.svgCamera.emit();
            _scope.UpdateCameraRotation();
        }
    }
    //当鼠标弹起来的时候触发的函数。===========================================================================
    OnMouseUp(_ev, _scope) {
        _scope.mouseStatus.mouseIsDown = false;
        _scope.canRotate = true;
    }
    /**
     * 这个是动画帧，会不断被调用的。==============================================================
     */
    AnimateScene() {
        //按下Q键的时候摄像机往上跑。--------------------
        if (this.keyIsDown.q == true) {
            this.personHeight += 40;
            this.UpdateCameraPos();
        }
        //按下E键的时候摄像机往下跑。--------------------
        if (this.keyIsDown.e == true) {
            this.personHeight -= 40;
            //眼睛的高度不能小于0。
            this.personHeight = Math.max(this.personHeight, 100.0);
            this.UpdateCameraPos();
        }
    }
}


/***/ }),

/***/ "./src/app/three/jDesign3D/JCornerWin3D.ts":
/*!*************************************************!*\
  !*** ./src/app/three/jDesign3D/JCornerWin3D.ts ***!
  \*************************************************/
/*! exports provided: JCornerWin3D */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JCornerWin3D", function() { return JCornerWin3D; });
/* harmony import */ var _svg_common_jdesign_JCornerWin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../svg/common/jdesign/JCornerWin */ "./src/app/svg/common/jdesign/JCornerWin.ts");
/* harmony import */ var _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../classes/dataStruct */ "./src/app/three/classes/dataStruct.ts");
/* harmony import */ var _classes_MyUtil__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../classes/MyUtil */ "./src/app/three/classes/MyUtil.ts");
/* harmony import */ var _classes_CornerBaywinModel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../classes/CornerBaywinModel */ "./src/app/three/classes/CornerBaywinModel.ts");
/*
 作者：张建。
 类说明：这个类是专门用来做转角飘窗用的。
*/




class JCornerWin3D extends _svg_common_jdesign_JCornerWin__WEBPACK_IMPORTED_MODULE_0__["JCornerWin"] {
    constructor() {
        super(...arguments);
        this.selector = null; //用来选择转角飘窗的对象。为Mesh。
        this.wireFrame = null; //转角飘窗的线框，用来显示是否被选择用的。为Mesh。
        this.booleanModels = []; //用来做转角飘窗布尔的模型，为Mesh。
        this.formerPointID = null; //这个转角飘窗原来所在的墙角的point的ID号。
        this.formerWallArray = null;
        this.cornerBaywin = null; //转角飘窗的所有模型在这里。
    }
    //给飘窗类先设置一些必要的参数。===========================================================
    SetDataServerAndOthers(_dataServer, _jDataServer, _popServer) {
        if (this.dataServer != undefined) {
            return;
        }
        this.dataServer = _dataServer;
        this.popServer = _popServer;
        this.jDataServer = _jDataServer;
        //选择二维图形的时候转角飘窗也跟着被选中。--------------------------------------
        this.chooseFuncArr.push(() => {
            //设置当前选择的模型就是被击中的模型。-------------------------------
            this.dataServer.classesObj.currentSelectModel.Select(this.selector);
            this.OnSelected();
        });
    }
    /**
     * 开始做转角飘窗的模型。==================================================================
     */
    MakeCornerBaywin() {
        console.log(this.height3D);
        //把前面创建的一切转角飘窗都删除掉。----------------------------------------------------
        this.DestoryCornerWin();
        let _cornerBaywinPoints = this.getPathPosArr({ x: 0, y: 0 });
        let _shapePoints = [];
        for (let i = 0; i < _cornerBaywinPoints.length; i++) {
            _shapePoints.push(new THREE.Vector3(_cornerBaywinPoints[i].x, 0.0, _cornerBaywinPoints[i].y));
        }
        //开始创建一个用来选择窗用的box模型。---------------------------------------------------------
        this.selector = this.dataServer.classesObj.extrudeModelMaker.MakeExtrueModel(_shapePoints, new THREE.Vector3(0.0, 1.0, 0.0), this.height3D, 1);
        this.selector.material = new THREE.MeshBasicMaterial({ color: 0xffff00, visible: false });
        this.dataServer.sceneCommonObj.scene.add(this.selector);
        //把选择用的模型放到跟射线的碰撞列表里。---------------------------------------
        let _customUserData = new _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["CustomUserData"]();
        _customUserData.longObj = this;
        _customUserData.modelType = _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].cornerBayWindow;
        this.selector.userData.customUserData = _customUserData;
        this.dataServer.classesObj.rayHitModelList.AddRayHitModel(this.selector);
        //创建模型的外框，用来显示模型当前是否被选择的状态。-------------------------------------------
        this.wireFrame = this.dataServer.classesObj.extrudeModelMaker.MakeExtrueModel(_shapePoints, new THREE.Vector3(0.0, 1.0, 0.0), this.height3D, 1);
        this.wireFrame.material = new THREE.MeshBasicMaterial({ color: 0xffff00, wireframe: true, visible: false });
        this.dataServer.sceneCommonObj.scene.add(this.wireFrame);
        //开始做布尔的模型。-------------------------------------------------------------------------
        //-----------------------------------------------------------------------------------------
        //只有转角飘窗在墙上放置的话才会做布尔用的模型。
        if (this.getPoint() != null) {
            //准备好创建布尔多边形的数据。
            let _booleanData01 = this.MakeBooleanMeshData(new THREE.Vector2(_cornerBaywinPoints[1].x, _cornerBaywinPoints[1].y), new THREE.Vector2(_cornerBaywinPoints[2].x, _cornerBaywinPoints[2].y));
            let _booleanData02 = this.MakeBooleanMeshData(new THREE.Vector2(_cornerBaywinPoints[5].x, _cornerBaywinPoints[5].y), new THREE.Vector2(_cornerBaywinPoints[4].x, _cornerBaywinPoints[4].y));
            //得出的布尔模型是否要翻转法线？--------------------------------------------------
            _booleanData01.filp = false;
            _booleanData02.filp = true;
            let _cornerPoint = this.getPoint();
            let _cornerWall = _cornerPoint.getWallArr();
            let _firstCornerWallOutLine = _cornerWall[0].outLine;
            let _leftUpPoint = new THREE.Vector2(_firstCornerWallOutLine[0][0].x, _firstCornerWallOutLine[0][0].y);
            let _leftDownPoint = new THREE.Vector2(_firstCornerWallOutLine[0][1].x, _firstCornerWallOutLine[0][1].y);
            let _rightDownPoint = new THREE.Vector2(_firstCornerWallOutLine[1][0].x, _firstCornerWallOutLine[1][0].y);
            let _rightUpPoint = new THREE.Vector2(_firstCornerWallOutLine[1][1].x, _firstCornerWallOutLine[1][1].y);
            let isInWall = _classes_MyUtil__WEBPACK_IMPORTED_MODULE_2__["MyUtil"].IsInPoly(_booleanData01.judgeMentPoint, [_leftUpPoint, _leftDownPoint, _rightDownPoint, _rightUpPoint]);
            if (isInWall == true) {
                _booleanData01.wallId = _cornerWall[0].id;
                _booleanData02.wallId = _cornerWall[1].id;
            }
            else {
                _booleanData01.wallId = _cornerWall[1].id;
                _booleanData02.wallId = _cornerWall[0].id;
            }
            let _booleanDataList = [];
            _booleanDataList.push(_booleanData01);
            _booleanDataList.push(_booleanData02);
            //开始构建布尔用的模型。--------------------------------
            for (let i = 0; i < _booleanDataList.length; i++) {
                let _offsetStartPoint = _booleanDataList[i].startPoint.clone().addScaledVector(_booleanDataList[i].toCenterDir, 0.1);
                let _offsetEndPoint = _booleanDataList[i].endPoint.clone().addScaledVector(_booleanDataList[i].toCenterDir, 0.1);
                let _startPoint = _booleanDataList[i].startPoint;
                let _endPoint = _booleanDataList[i].endPoint;
                let _allVertexes = [
                    new THREE.Vector3(_offsetStartPoint.x, 0.0, _offsetStartPoint.y),
                    new THREE.Vector3(_offsetEndPoint.x, 0.0, _offsetEndPoint.y),
                    new THREE.Vector3(_startPoint.x, 0.0, _startPoint.y),
                    new THREE.Vector3(_endPoint.x, 0.0, _endPoint.y),
                    new THREE.Vector3(_startPoint.x, this.height3D, _startPoint.y),
                    new THREE.Vector3(_endPoint.x, this.height3D, _endPoint.y),
                    new THREE.Vector3(_offsetStartPoint.x, this.height3D, _offsetStartPoint.y),
                    new THREE.Vector3(_offsetEndPoint.x, this.height3D, _offsetEndPoint.y),
                ];
                let _allFaces;
                if (_booleanDataList[i].filp == true) {
                    _allFaces = [
                        new THREE.Face3(0, 1, 2),
                        new THREE.Face3(1, 3, 2),
                        new THREE.Face3(2, 3, 4),
                        new THREE.Face3(3, 5, 4),
                        new THREE.Face3(4, 5, 6),
                        new THREE.Face3(5, 7, 6)
                    ];
                }
                else {
                    _allFaces = [
                        new THREE.Face3(0, 2, 1),
                        new THREE.Face3(1, 2, 3),
                        new THREE.Face3(2, 4, 3),
                        new THREE.Face3(3, 4, 5),
                        new THREE.Face3(4, 6, 5),
                        new THREE.Face3(5, 6, 7)
                    ];
                }
                //根据上面的数据把一个平面构建出来。
                let _geom = new THREE.Geometry();
                _geom.vertices = _allVertexes;
                _geom.faces = _allFaces;
                _geom.computeFaceNormals();
                //把重复的顶点去掉。
                _geom.mergeVertices();
                let _booleanMesh = new THREE.Mesh(_geom);
                _booleanMesh.visible = false;
                //给模型标记一个它所在墙的标记。----------------------------------------
                _booleanMesh.userData.wallId = _booleanDataList[i].wallId;
                this.booleanModels.push(_booleanMesh);
                this.dataServer.sceneCommonObj.scene.add(_booleanMesh);
            }
        }
        //开始做飘窗上放置的模型。========================================================================
        this.MakeCornerBaywinModels(_shapePoints);
    }
    MakeBooleanMeshData(_startPoint, _targetPoint) {
        let _toEndPointDir = _targetPoint.clone().sub(_startPoint);
        let _toEndPointDirNormalize = _toEndPointDir.clone().normalize();
        let _endPoint = _startPoint.clone().addScaledVector(_toEndPointDirNormalize, 0.1);
        let _judgementPointAbsolute = _startPoint.clone().add(_toEndPointDirNormalize).add(new THREE.Vector2(this.pos.x, this.pos.y)); //结束点的绝对坐标。
        let _toCenterDir = new THREE.Vector2(0.0, 0.0).sub(_startPoint).normalize();
        let _returnData = {
            startPoint: _startPoint,
            endPoint: _endPoint,
            judgeMentPoint: _judgementPointAbsolute,
            toCenterDir: _toCenterDir
        };
        return _returnData;
    }
    /**
     * 为飘窗添加start move end三个事件。======================================================
     */
    StartEvent() {
        this.act3D.start = () => {
        };
        this.act3D.move = () => {
            //更新转角飘窗里一切模型的位置和旋转。--------------------------------
            this.UpdateCornerWinPos(this.GetCornerWinPos(this.floorHeight));
            //如果这个转角飘窗放在墙角的话。--------------------------------------
            if (this.getPoint() != null) {
                let _pointID = this.getPoint().id;
                if (this.formerPointID != _pointID) {
                    this.formerPointID = _pointID;
                    //开始从新更新模型。----------------------------------------------------------
                    this.MakeCornerBaywin();
                    this.UpdateCornerWinPos(this.GetCornerWinPos(this.floorHeight));
                    //开始更新转角飘窗所在的墙的模型。----------------------------------------------
                    let _wallArrays = this.getPoint().getWallArr();
                    //把现在所在的两面墙先存储起来，以便后面把窗洞填起来。----------------------------
                    this.formerWallArray = _wallArrays;
                    //开始在墙上挖洞了。-----------------------------------------------------------
                    for (let i = 0; i < _wallArrays.length; i++) {
                        let _cowalls = _wallArrays[i].getCowallArr();
                        for (let j = 0; j < _cowalls.length; j++) {
                            _cowalls[j].MakeWall(true);
                        }
                    }
                }
            }
            else {
                if (this.formerPointID != null) {
                    this.formerPointID = null;
                    //开始从新更新模型。---------------------------
                    this.MakeCornerBaywin();
                    //把原来的洞口重新填起来。---------------------
                    if (this.formerWallArray != null) {
                        for (let i = 0; i < this.formerWallArray.length; i++) {
                            //检查一下这个wall是否还在场景里。-----------------------------------
                            if (this.jDataServer.walls[this.formerWallArray[i].id] != undefined) {
                                let _cowalls = this.formerWallArray[i].getCowallArr();
                                for (let j = 0; j < _cowalls.length; j++) {
                                    //杨振龙在移动墙的时候有时候居然会产生新墙，它产生了新墙我得执行一下这一句，好保证他偷偷生成的墙我这边也做好实例化工作。
                                    _cowalls[j].SetDataServerAndOthers(this.dataServer, this.popServer, this.jDataServer);
                                    _cowalls[j].MakeWall(true);
                                }
                            }
                        }
                    }
                    this.formerWallArray = null;
                }
            }
        };
        this.act3D.end = () => {
            //开始从新更新模型。----------------------------------------------------------
            this.MakeCornerBaywin();
            let _cornerWinNewPos = this.GetCornerWinPos(this.floorHeight);
            // console.log(_cornerWinNewPos);
            this.UpdateCornerWinPos(_cornerWinNewPos);
            //开始更新转角飘窗所在的墙的模型。----------------------------------------------
            let _wallArrays = this.getPoint().getWallArr();
            //把现在所在的两面墙先存储起来，以便后面把窗洞填起来。----------------------------
            this.formerWallArray = _wallArrays;
            //开始在墙上挖洞了。-----------------------------------------------------------
            for (let i = 0; i < _wallArrays.length; i++) {
                let _cowalls = _wallArrays[i].getCowallArr();
                for (let j = 0; j < _cowalls.length; j++) {
                    _cowalls[j].MakeWall(true);
                }
            }
        };
    }
    /**
    * 用来显示隐藏模型的选择框用的。===============================================
    * @param _show 设置为true则显示，设置为false则隐藏。
    */
    ShowWireFrame(_show) {
        this.wireFrame.material.visible = _show;
    }
    //开始创建飘窗上放置的模型。=================================================================
    MakeCornerBaywinModels(_shapePoints) {
        if (this.cornerBaywin == null) {
            this.cornerBaywin = new _classes_CornerBaywinModel__WEBPACK_IMPORTED_MODULE_3__["CornerBaywinModel"](this.dataServer, this.jDataServer, this.outThickness);
            //记录下飘窗模型在创建的时候的下面的大理石板使用的是第几张贴图。---------------------------
            this.cornerBaywin.paramsValues.windowsillMaterialIndex[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].cornerBayWindow] = 0;
        }
        this.cornerBaywin.MakeCornerbayWinModel(_shapePoints, this.height3D);
    }
    /**
     * 转角飘窗在三维视图被单击中的时候触发的函数。========================================================
     */
    OnSelected() {
        //把面选择框销毁掉。-----------------------------------------------------------
        this.dataServer.classesObj.wireSelectFrame.destory3D();
        //把场景里所有的门窗家具选择框都去掉。-------------------------------------------
        this.dataServer.classesObj.rayHitter.HideDoorWindowFurnitureSelectFrame();
        //显示当前转角飘窗的选择框。----------------------------------------------------
        this.ShowWireFrame(true);
        //开始创建右边属性面板的数据并生成右边属性面板。--------------------------------------------------
        //let _PanelData = this.dataServer.classesObj.propertiesMenuData.MakeCornerBayWinData(this.cornerBaywin.paramsValues);
        //this.popServer.panelRight.emit(_PanelData);
    }
    OnUnselected() {
        this.dataServer.classesObj.rayHitter.OnNothingHit();
    }
    /**
     * 用来更新转角飘窗所有东西的位置和旋转。==============================================
     * @param _pos
     */
    UpdateCornerWinPos(_pos) {
        this.selector.position.copy(_pos);
        //this.selector.rotation.y = -this.radian;
        this.wireFrame.position.copy(_pos);
        if (this.booleanModels.length > 0) {
            for (let i = 0; i < this.booleanModels.length; i++) {
                this.booleanModels[i].position.copy(_pos);
            }
        }
        //设置转角飘窗模型的位置。----------------------------------------
        if (this.cornerBaywin != null) {
            this.cornerBaywin.SetPosition(_pos);
        }
    }
    //提供给杨松岭来设置转角飘窗距离地面的高度。================================
    // public SetFloorHeight(_height) {
    //     this.floorHeight = _height;
    //     // this.UpdateCornerWinPos(this.GetCornerWinPos(this.floorHeight));
    //     // //开始更新转角飘窗所在的墙的模型。----------------------------------------------
    //     // let _wallArrays: JWall3D[] = <JWall3D[]>this.getPoint().getWallArr();
    //     // //把现在所在的两面墙先存储起来，以便后面把窗洞填起来。----------------------------
    //     // //this.formerWallArray = _wallArrays;
    //     // //开始在墙上挖洞了。-----------------------------------------------------------
    //     // for (let i = 0; i < _wallArrays.length; i++) {
    //     //     let _cowalls: JCowall3D[] = <JCowall3D[]>_wallArrays[i].getCowallArr();
    //     //     for (let j = 0; j < _cowalls.length; j++) {
    //     //         _cowalls[j].MakeWall(true);
    //     //     }
    //     // }
    // }
    GetCornerWinPos(_height) {
        _height = Math.max(_height, 0.0);
        let _windowPos = new THREE.Vector3(this.pos.x, this.floorHeight, this.pos.y);
        return _windowPos;
    }
    /**
    * 阿隆调用的销毁转角飘窗的方法。=============================================================
    */
    destory3D() {
        this.DestoryCornerWin();
    }
    //提供给杨松岭设置飘窗窗台的材质用的。=====================================================
    SetBaywindowStillTexture(_path) {
        this.cornerBaywin.SetBaywindowStillTexture(_path);
    }
    //提供给杨松岭来获取当前普通飘窗使用的是第几个材质。=========================================
    getBaywindowStillMatIndex() {
        return this.cornerBaywin.paramsValues.windowsillMaterialIndex[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].cornerBayWindow];
    }
    //提供给杨松岭来设置当前普通飘窗使用的是第几个材质。=========================================
    SetBaywindowStillMatIndex(_index) {
        this.cornerBaywin.paramsValues.windowsillMaterialIndex[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].cornerBayWindow] = _index;
    }
    /**
     * 把转角飘窗的一切模型都销毁。===========================================
     */
    DestoryCornerWin() {
        //把模型的选择器销毁掉。--------------------------------------------
        if (this.selector != null) {
            this.dataServer.classesObj.rayHitModelList.RemoveRayHitModel(this.selector);
            this.dataServer.sceneCommonObj.scene.remove(this.selector);
            this.selector.geometry.dispose();
            this.selector = null;
        }
        //把模型的选择显示器销毁掉。------------------------------------------
        if (this.wireFrame != null) {
            this.dataServer.sceneCommonObj.scene.remove(this.wireFrame);
            this.wireFrame.geometry.dispose();
            this.wireFrame = null;
        }
        //把布尔用的模型全部销毁掉。-------------------------------------------
        for (let i = 0; i < this.booleanModels.length; i++) {
            this.dataServer.sceneCommonObj.scene.remove(this.booleanModels[i]);
            this.booleanModels[i].geometry.dispose();
        }
        this.booleanModels = [];
        //把转角飘窗上放的所有的模型都销毁掉。----------------------------------
        if (this.cornerBaywin != null) {
            this.cornerBaywin.DestroyBaywinModel();
        }
        //转角飘窗销毁了，如果在墙里面的话，所在的墙也要重建一下。------------------------------
        if (this.getPoint() != null) {
            let _wallArrays = this.getPoint().getWallArr();
            //把转角飘窗的洞填起来。
            for (let i = 0; i < _wallArrays.length; i++) {
                let _cowalls = _wallArrays[i].getCowallArr();
                for (let j = 0; j < _cowalls.length; j++) {
                    //生怕阿隆换墙了，再把cowall初始化一下。-----------------------------------
                    _cowalls[j].SetDataServerAndOthers(this.dataServer, this.popServer, this.jDataServer);
                    console.log(_cowalls[j]);
                    console.log(_cowalls[j].getInLine());
                    _cowalls[j].MakeWall(true);
                }
            }
        }
    }
}


/***/ }),

/***/ "./src/app/three/jDesign3D/JCowall3D.ts":
/*!**********************************************!*\
  !*** ./src/app/three/jDesign3D/JCowall3D.ts ***!
  \**********************************************/
/*! exports provided: JCowall3D */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JCowall3D", function() { return JCowall3D; });
/* harmony import */ var _svg_common_jdesign_JCowall__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../svg/common/jdesign/JCowall */ "./src/app/svg/common/jdesign/JCowall.ts");
/* harmony import */ var _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../classes/dataStruct */ "./src/app/three/classes/dataStruct.ts");
/* harmony import */ var _classes_MyUtil__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../classes/MyUtil */ "./src/app/three/classes/MyUtil.ts");
/* harmony import */ var _classes_ProfileModel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../classes/ProfileModel */ "./src/app/three/classes/ProfileModel.ts");
/*
 作者：张建。
 类说明：colwall3D对象。
*/




class JCowall3D extends _svg_common_jdesign_JCowall__WEBPACK_IMPORTED_MODULE_0__["JCowall"] {
    constructor() {
        super(...arguments);
        this.wallMeshs = []; //一个cowall所有墙的Mesh都堆到这里。
        this.afterBooleanMesh = []; //布尔后的墙模型都放在这里。
        this.wallGeometrys = []; //一个cowall所有墙的Geomtry都堆到这里。
        this.oldData = {}; //用来和新的数据做比对，检查这个colwall是否要更新。
        this.allWallTypes = [
            _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].inWall,
            _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].outWall,
            _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].startWall,
            _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].endWall
        ];
        this.formerArcDistance = 0; //弧形墙上一次的arcDistance值。
        this.isSwitching = false; //是否在弧形墙和直墙的相互转换过程中。
        this.allWallTextrues = []; //四面墙上贴的贴图。
        this.arcProfilePoints = []; //弧形墙下边的一排点。
        this.uvRawDatas = []; //各面墙的uv初始数据。                    
        this.profileModels = []; //这个cowall上的所有地脚线和石灰线等数据。
        this.paramsValues = {
            materialIndex: [],
            kickLineProfileShapeIndex: [],
            kickLineProfileMatIndex: [],
            plasterCorniceProfileShapeIndex: [],
            plasterCorniceProfileMatIndex: [],
        };
    }
    // public myValue:number=0;
    //因为我不能实例化它，只能把dataServer等需要用到的东西先给我传递进来。===============================================
    SetDataServerAndOthers(_dataServer, _popServer, _jDataServer) {
        if (this.dataServer != undefined) {
            return;
        }
        this.dataServer = _dataServer;
        this.popServer = _popServer;
        this.jDataServer = _jDataServer;
        //初始化profileModels的所有数据。---------------------------------
        for (let i = 0; i < this.allWallTypes.length; i++) {
            this.profileModels[this.allWallTypes[i]] = new _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ProfileModelData"]();
        }
        // console.log(this.profileModels);
        //初始化paramsValues里的所有数据。----------------------------------
        // console.log("初始化");
        for (let key in this.paramsValues) {
            for (let i = 0; i < this.allWallTypes.length; i++) {
                if (this.paramsValues[key][this.allWallTypes[i]] == undefined) {
                    this.paramsValues[key][this.allWallTypes[i]] = 0;
                }
            }
        }
    }
    /**
     * 用来创建三维墙的函数。更新墙的时候也是，直接删掉原来的再利用这里进行重建===================================
     *  _forceMakeWall：是否强制建墙？如果设置为true的话，不管这个墙有没有被移动，我强行来建。
     */
    MakeWall(_forceMakeWall) {
        //检查这个墙是否在弧形墙和平墙切换中。--------------------------------
        this.isSwitching = false;
        let _currentArcDistance = this.getWall().arcDistance;
        if (_currentArcDistance != 0 && this.formerArcDistance == 0) {
            this.isSwitching = true;
        }
        if (_currentArcDistance == 0 && this.formerArcDistance != 0) {
            this.isSwitching = true;
        }
        this.formerArcDistance = _currentArcDistance;
        //检查开始的地方和结束的地方是否没有别的cowall衔接。----------------
        let _hasStartCowall = true;
        let _hasEndCowall = true;
        if (this.getPointStart().cowallIDs.length == 1) {
            _hasStartCowall = false;
        }
        if (this.getPointEnd().cowallIDs.length == 1) {
            _hasEndCowall = false;
        }
        //完全没有改变的墙不需要进行下面的重建工作。--------------------------
        if (this.IfVertexesChange() == false && _forceMakeWall == false) {
            return;
        }
        //把前面的墙都销毁掉把。---------------------------------
        this.DisposeWall();
        if (this.getWall().arcDistance == 0) {
            //创建直墙。-------------------------------------
            this.MakeStraightWall(_hasStartCowall, _hasEndCowall);
        }
        else {
            //创建弧形墙。---------------------------------
            this.MakeArcWall(_hasStartCowall, _hasEndCowall);
        }
        //开始更新地脚线和天花线的模型。------------------------------------------------
        this.UpdateKickLineProfileModel();
        this.UpdatePlasterCorniceProfileModel();
    }
    /**
     * 创建弧形墙的函数。======================================================================
     * @param _hasStartCowall 这个墙前面是否有cowall？
     * @param _hasEndCowall   这个墙后面是否有cowall？
     */
    MakeArcWall(_hasStartCowall, _hasEndCowall) {
        //这个cowall对应的墙对象。----------------------------------------------------------
        let _wall3D = this.getWall();
        //首先做内墙。----------------------------------------------------------------------
        let _inWall2DPoints = this.getInLine();
        let _outWall2DPoints = this.getOutLine();
        //为了检测墙有没有更新，要把一些老的数据先记录起来。------------------------------------
        this.oldData._inWall2DPoints = _inWall2DPoints;
        this.oldData._outWall2DPoints = _outWall2DPoints;
        this.oldData._roomID = this.roomID;
        //获取弧形墙的旋转中心。---------------------------------------------------------------
        let _rotateCenter = new THREE.Vector2(_wall3D.circlePos.x, _wall3D.circlePos.y);
        //开始做内墙。-----------------------------------------------------------------------------
        //----------------------------------------------------------------------------------------
        //旋转中心指向开始点的向量。----------------------------------------------------------
        let _inWallStartVec = new THREE.Vector2(_inWall2DPoints[0].x - _rotateCenter.x, _inWall2DPoints[0].y - _rotateCenter.y);
        //旋转中心指向结束点的向量。-------------------------------------------------------------
        let _inWallEndVec = new THREE.Vector2(_inWall2DPoints[1].x - _rotateCenter.x, _inWall2DPoints[1].y - _rotateCenter.y);
        //从圆弧开始点转向圆弧结束点的角度。-------------------------------------------------------
        let _inwallAngleFromStartToEnd = _classes_MyUtil__WEBPACK_IMPORTED_MODULE_2__["MyUtil"].GetAngleFrom2Vector(_inWallStartVec, _inWallEndVec);
        //估计下圆弧要被划分成多少份。-------------------------------------------------------------
        let _splitPartCount = Math.ceil(_inwallAngleFromStartToEnd / 0.2);
        //求旋转一定量角度的向量的方向。-----------------------------------------------------------
        let _inwallArcVecList = [];
        for (let i = 0; i < _splitPartCount + 1; i++) {
            let _beRotateVec2 = _classes_MyUtil__WEBPACK_IMPORTED_MODULE_2__["MyUtil"].RotateVector2(_inWallStartVec, _inwallAngleFromStartToEnd / _splitPartCount * i);
            _inwallArcVecList.push(_beRotateVec2);
        }
        //求弧形墙的一圈点。----------------------------------------------------------------------
        let _inWallArcPoint = [];
        for (let i = 0; i < _splitPartCount + 1; i++) {
            _inWallArcPoint.push(_rotateCenter.clone().add(_inwallArcVecList[i]));
        }
        //内墙的面的顶点数据。----------------------------------------------------------------
        let _inWallVertexes = [];
        //先放入下一排的点。-----------------------------------------------------------------
        this.arcProfilePoints[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].inWall] = [];
        for (let i = 0; i < _inWallArcPoint.length; i++) {
            _inWallVertexes.push(new THREE.Vector3(_inWallArcPoint[i].x, 0.0, _inWallArcPoint[i].y));
            //把下面这一排点也单独存起来，后面用来做地脚线要用到。----------------------------------------------
            this.arcProfilePoints[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].inWall].push(new THREE.Vector3(_inWallArcPoint[i].x, 0.0, _inWallArcPoint[i].y));
        }
        //再放入上一排的点。-----------------------------------------------------------------
        for (let i = _inWallArcPoint.length - 1; i > -1; i--) {
            _inWallVertexes.push(new THREE.Vector3(_inWallArcPoint[i].x, _wall3D.wallHeight, _inWallArcPoint[i].y));
        }
        //为内墙准备UV数据。-----------------------------------------------------------------
        let _inWallDistanceFromPrePoint = _inWallVertexes[1].distanceTo(_inWallVertexes[0]);
        this.uvRawDatas[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].inWall] = [];
        for (let i = 0; i < _inWallArcPoint.length; i++) {
            this.uvRawDatas[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].inWall].push(new THREE.Vector2(_inWallDistanceFromPrePoint * i, 0.0));
        }
        for (let i = _inWallArcPoint.length - 1; i > -1; i--) {
            this.uvRawDatas[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].inWall].push(new THREE.Vector2(_inWallDistanceFromPrePoint * i, _wall3D.wallHeight));
        }
        //计算切割平面的平面朝向。-----------------------------------------------------------
        let _inwallFirstValue;
        let _inwallSecondValue;
        let _inwallArcDir01 = this.arcProfilePoints[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].inWall][0].clone().sub(this.arcProfilePoints[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].inWall][1]);
        let _inwallArcDir02 = this.arcProfilePoints[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].inWall][this.arcProfilePoints[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].inWall].length - 1].clone().sub(this.arcProfilePoints[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].inWall][this.arcProfilePoints[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].inWall].length - 2]);
        if (_hasStartCowall == true) {
            _inwallFirstValue = new THREE.Vector3(_outWall2DPoints[1].x, 0, _outWall2DPoints[1].y).sub(new THREE.Vector3(_inWall2DPoints[0].x, 0.0, _inWall2DPoints[0].y));
        }
        else {
            _inwallFirstValue = _inwallArcDir01.clone().applyAxisAngle(new THREE.Vector3(0, 1, 0), Math.PI / 4 + _inwallAngleFromStartToEnd / _splitPartCount / 2);
        }
        if (_hasEndCowall == true) {
            _inwallSecondValue = new THREE.Vector3(_outWall2DPoints[0].x, 0, _outWall2DPoints[0].y).sub(new THREE.Vector3(_inWall2DPoints[1].x, 0.0, _inWall2DPoints[1].y));
        }
        else {
            _inwallSecondValue = _inwallArcDir02.clone().applyAxisAngle(new THREE.Vector3(0, 1, 0), -Math.PI / 4 - _inwallAngleFromStartToEnd / _splitPartCount / 2);
        }
        this.profileModels[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].inWall].cutPlaneDir = [
            _inwallFirstValue,
            _inwallSecondValue
        ];
        //为内墙创建Face3数据。----------------------------------------------------------------------------
        let _inWallFaces = [];
        for (let i = 0; i < _inWallArcPoint.length - 1; i++) {
            let _nextI = i + 1;
            let _oppositeI = _inWallArcPoint.length - i - 1 + _inWallArcPoint.length;
            let _oppositeNextI = _oppositeI - 1;
            _inWallFaces.push(new THREE.Face3(i, _nextI, _oppositeI));
            _inWallFaces.push(new THREE.Face3(_nextI, _oppositeNextI, _oppositeI));
        }
        //开始创建一个弧形的内墙。----------------------------------------------------------------------
        let _InwallMesh = this.MakeOneWallMesh(_inWallVertexes, _inWallFaces, _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].inWall, false);
        //这个模型绑定阿隆创建的JCowall3D对象。-----------------------------------
        let customUserData = new _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["CustomUserData"]();
        customUserData.longObj = this;
        customUserData.modelType = _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].inWall;
        customUserData.wireSelectedPoints = _inWallVertexes;
        _InwallMesh.userData.customUserData = customUserData;
        //把模型放置到可单击模型列表里。--------------------------------------------
        this.dataServer.classesObj.rayHitModelList.AddRayHitModel(_InwallMesh);
        //再做外墙。------------------------------------------------------------------------
        //---------------------------------------------------------------------------------
        if (this.roomID == undefined) { //没有构成room的cowall。
            //旋转中心指向外墙开始点的向量。----------------------------------------------------------
            let _outWallStartVec = new THREE.Vector2(_outWall2DPoints[1].x - _rotateCenter.x, _outWall2DPoints[1].y - _rotateCenter.y);
            //旋转中心指向外墙结束点的向量。-------------------------------------------------------------
            let _outWallEndVec = new THREE.Vector2(_outWall2DPoints[0].x - _rotateCenter.x, _outWall2DPoints[0].y - _rotateCenter.y);
            //从圆弧开始点转向圆弧结束点的角度。-------------------------------------------------------
            let _outWallAngleFromStartToEnd = _classes_MyUtil__WEBPACK_IMPORTED_MODULE_2__["MyUtil"].GetAngleFrom2Vector(_outWallStartVec, _outWallEndVec);
            //求旋转一定量角度的向量的方向。-----------------------------------------------------------
            let _outwallArcVecList = [];
            for (let i = 0; i < _splitPartCount + 1; i++) {
                let _beRotateVec2 = _classes_MyUtil__WEBPACK_IMPORTED_MODULE_2__["MyUtil"].RotateVector2(_outWallStartVec, _outWallAngleFromStartToEnd / _splitPartCount * i);
                _outwallArcVecList.push(_beRotateVec2);
            }
            //求弧形墙的一圈点。----------------------------------------------------------------------
            let _outWallArcPoint = [];
            for (let i = 0; i < _splitPartCount + 1; i++) {
                _outWallArcPoint.push(_rotateCenter.clone().add(_outwallArcVecList[i]));
            }
            //外墙的面的顶点数据。----------------------------------------------------------------
            let _outWallVertexes = [];
            //先放入下一排的点。-----------------------------------------------------------------
            this.arcProfilePoints[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].outWall] = [];
            for (let i = 0; i < _outWallArcPoint.length; i++) {
                _outWallVertexes.push(new THREE.Vector3(_outWallArcPoint[i].x, 0.0, _outWallArcPoint[i].y));
                //把下面这一排点也单独存起来，后面用来做地脚线要用到。----------------------------------------------
                this.arcProfilePoints[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].outWall].push(new THREE.Vector3(_outWallArcPoint[i].x, 0.0, _outWallArcPoint[i].y));
            }
            // //把外墙的一圈点的顺序反一下。-------------------------------------------------------
            // this.arcProfilePoints[ModelType.outWall].reverse();
            //再放入上一排的点。-----------------------------------------------------------------
            for (let i = _outWallArcPoint.length - 1; i > -1; i--) {
                _outWallVertexes.push(new THREE.Vector3(_outWallArcPoint[i].x, _wall3D.wallHeight, _outWallArcPoint[i].y));
            }
            //为外墙准备UV数据。-----------------------------------------------------------------
            let _outWallDistanceFromPrePoint = _outWallVertexes[1].distanceTo(_outWallVertexes[0]);
            this.uvRawDatas[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].outWall] = [];
            for (let i = 0; i < _outWallArcPoint.length; i++) {
                this.uvRawDatas[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].outWall].push(new THREE.Vector2(_outWallDistanceFromPrePoint * i, 0.0));
            }
            for (let i = _outWallArcPoint.length - 1; i > -1; i--) {
                this.uvRawDatas[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].outWall].push(new THREE.Vector2(_outWallDistanceFromPrePoint * i, _wall3D.wallHeight));
            }
            //计算切割平面的平面朝向。-------------------------------------------------------------
            let _outwallFirstValue;
            let _outwallSecondValue;
            let _ouwallDir01 = this.arcProfilePoints[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].outWall][0].clone().sub(this.arcProfilePoints[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].outWall][1]);
            let _ouwallDir02 = this.arcProfilePoints[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].outWall][this.arcProfilePoints[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].outWall].length - 1].clone().sub(this.arcProfilePoints[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].outWall][this.arcProfilePoints[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].outWall].length - 2]);
            if (_hasEndCowall == true) {
                _outwallSecondValue = new THREE.Vector3(_inWall2DPoints[1].x, 0, _inWall2DPoints[1].y).sub(new THREE.Vector3(_outWall2DPoints[0].x, 0.0, _outWall2DPoints[0].y));
            }
            else {
                _outwallSecondValue = _ouwallDir02.clone().applyAxisAngle(new THREE.Vector3(0, 1, 0), Math.PI / 4 - _outWallAngleFromStartToEnd / _splitPartCount / 2);
            }
            if (_hasStartCowall == true) {
                _outwallFirstValue = new THREE.Vector3(_inWall2DPoints[0].x, 0, _inWall2DPoints[0].y).sub(new THREE.Vector3(_outWall2DPoints[1].x, 0.0, _outWall2DPoints[1].y));
            }
            else {
                _outwallFirstValue = _ouwallDir01.clone().applyAxisAngle(new THREE.Vector3(0, 1, 0), -Math.PI / 4 + _outWallAngleFromStartToEnd / _splitPartCount / 2);
            }
            this.profileModels[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].outWall].cutPlaneDir = [
                _outwallFirstValue,
                _outwallSecondValue
            ];
            //为外墙创建Face3数据。----------------------------------------------------------------------------
            let _outWallFaces = [];
            for (let i = 0; i < _outWallArcPoint.length - 1; i++) {
                let _nextI = i + 1;
                let _oppositeI = _outWallArcPoint.length - i - 1 + _outWallArcPoint.length;
                let _oppositeNextI = _oppositeI - 1;
                _outWallFaces.push(new THREE.Face3(i, _oppositeI, _nextI));
                _outWallFaces.push(new THREE.Face3(_nextI, _oppositeI, _oppositeNextI));
            }
            //开始创建一个弧形的外墙。----------------------------------------------------------------------
            let _outwallMesh = this.MakeOneWallMesh(_outWallVertexes, _outWallFaces, _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].outWall, false);
            //这个外墙模型绑定阿隆创建的JCowall3D对象。-----------------------------------
            let customUserData = new _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["CustomUserData"]();
            customUserData.longObj = this;
            customUserData.modelType = _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].outWall;
            customUserData.wireSelectedPoints = _outWallVertexes;
            _outwallMesh.userData.customUserData = customUserData;
            //把外墙模型放置到可单击模型列表里。--------------------------------------------
            this.dataServer.classesObj.rayHitModelList.AddRayHitModel(_outwallMesh);
        }
        //做开始处的侧墙。-------------------------------------------------------------------
        //-----------------------------------------------------------------------------------------
        if (_hasStartCowall == false) {
            // this.centerPoints[ModelType.startWall] = this.GetCenterPoint(_inWall2DPoints[0], _outWall2DPoints[1]);
            // this.referenceDir[ModelType.startWall] = new THREE.Vector2(_outWall2DPoints[1].x - _inWall2DPoints[0].x, _outWall2DPoints[1].y - _inWall2DPoints[0].y);
            let _startSideWallVertexes = [
                new THREE.Vector3(_inWall2DPoints[0].x, 0, _inWall2DPoints[0].y),
                new THREE.Vector3(_outWall2DPoints[1].x, 0, _outWall2DPoints[1].y),
                new THREE.Vector3(_outWall2DPoints[1].x, _wall3D.wallHeight, _outWall2DPoints[1].y),
                new THREE.Vector3(_inWall2DPoints[0].x, _wall3D.wallHeight, _inWall2DPoints[0].y),
            ];
            //为墙面UV搜集数据。---------------------------------------------------------------------------------
            let _startSideWallLength = _startSideWallVertexes[0].clone().distanceTo(_startSideWallVertexes[1]);
            this.uvRawDatas[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].startWall] = [
                new THREE.Vector2(0, 0),
                new THREE.Vector2(_startSideWallLength, 0.0),
                new THREE.Vector2(_startSideWallLength, _wall3D.wallHeight),
                new THREE.Vector2(0.0, _wall3D.wallHeight)
            ];
            //为地脚线和石灰线的走向搜集数据。-----------------------------------------------------
            this.profileModels[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].startWall].profileDir = [_startSideWallVertexes[0], _startSideWallVertexes[1]];
            let _startWallDir = _startSideWallVertexes[0].clone().sub(_startSideWallVertexes[1]);
            this.profileModels[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].startWall].cutPlaneDir = [
                _startWallDir.clone().applyAxisAngle(new THREE.Vector3(0, 1, 0), -Math.PI / 4),
                _startWallDir.clone().applyAxisAngle(new THREE.Vector3(0, 1, 0), Math.PI / 4),
            ];
            let _startSideWallFaces = [
                new THREE.Face3(0, 3, 1),
                new THREE.Face3(1, 3, 2),
            ];
            //为模型加载最初始的贴图。-----------------------------------------------
            if (this.allWallTextrues[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].startWall] == undefined) {
                this.allWallTextrues[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].startWall] = this.LoadInitTexture();
            }
            let _startSideWall = this.MakeOneWallMesh(_startSideWallVertexes, _startSideWallFaces, _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].startWall, false);
            //这个模型绑定阿隆创建的JCowall3D对象。-----------------------------------
            let customUserData = new _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["CustomUserData"]();
            customUserData.longObj = this;
            customUserData.modelType = _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].startWall;
            customUserData.wireSelectedPoints = _startSideWallVertexes;
            _startSideWall.userData.customUserData = customUserData;
            //把模型放置到可单击模型列表里。--------------------------------------------
            this.dataServer.classesObj.rayHitModelList.AddRayHitModel(_startSideWall);
        }
        //做结束处的侧墙。---------------------------------------------------------------------------
        //-----------------------------------------------------------------------------------------
        if (_hasEndCowall == false) {
            let _endSideWallVertexes = [
                new THREE.Vector3(_inWall2DPoints[1].x, 0, _inWall2DPoints[1].y),
                new THREE.Vector3(_outWall2DPoints[0].x, 0, _outWall2DPoints[0].y),
                new THREE.Vector3(_outWall2DPoints[0].x, _wall3D.wallHeight, _outWall2DPoints[0].y),
                new THREE.Vector3(_inWall2DPoints[1].x, _wall3D.wallHeight, _inWall2DPoints[1].y),
            ];
            //为墙面UV搜集数据。---------------------------------------------------------------------------------
            let _endSideWallLength = _endSideWallVertexes[0].clone().distanceTo(_endSideWallVertexes[1]);
            this.uvRawDatas[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].endWall] = [
                new THREE.Vector2(0, 0),
                new THREE.Vector2(_endSideWallLength, 0.0),
                new THREE.Vector2(_endSideWallLength, _wall3D.wallHeight),
                new THREE.Vector2(0.0, _wall3D.wallHeight)
            ];
            //为地脚线和石灰线的走向搜集数据。-----------------------------------------------------
            this.profileModels[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].endWall].profileDir = [_endSideWallVertexes[1], _endSideWallVertexes[0]];
            let _endWallDir = _endSideWallVertexes[1].clone().sub(_endSideWallVertexes[0]);
            this.profileModels[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].endWall].cutPlaneDir = [
                _endWallDir.clone().applyAxisAngle(new THREE.Vector3(0, 1, 0), -Math.PI / 4),
                _endWallDir.clone().applyAxisAngle(new THREE.Vector3(0, 1, 0), Math.PI / 4),
            ];
            let _endSideWallFaces = [
                new THREE.Face3(0, 1, 3),
                new THREE.Face3(1, 2, 3),
            ];
            //为模型加载最初始的贴图。-----------------------------------------------
            if (this.allWallTextrues[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].endWall] == undefined) {
                this.allWallTextrues[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].endWall] = this.LoadInitTexture();
            }
            let _endSideWall = this.MakeOneWallMesh(_endSideWallVertexes, _endSideWallFaces, _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].endWall, false);
            //这个模型绑定阿隆创建的JCowall3D对象。-----------------------------------
            let customUserData = new _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["CustomUserData"]();
            customUserData.longObj = this;
            customUserData.modelType = _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].endWall;
            customUserData.wireSelectedPoints = _endSideWallVertexes;
            _endSideWall.userData.customUserData = customUserData;
            //把模型放置到可单击模型列表里。--------------------------------------------
            this.dataServer.classesObj.rayHitModelList.AddRayHitModel(_endSideWall);
        }
    }
    /**
     * 创建直墙的函数。======================================================================
     * @param _hasStartCowall 这个墙前面是否有cowall？
     * @param _hasEndCowall   这个墙后面是否有cowall？
     */
    MakeStraightWall(_hasStartCowall, _hasEndCowall) {
        //这个cowall对应的墙对象。----------------------------------------------------------
        let _wall3D = this.getWall();
        //首先做内墙。----------------------------------------------------------------------
        let _inWall2DPoints = this.getInLine();
        let _outWall2DPoints = this.getOutLine();
        //为了检测墙有没有更新，要把一些老的数据先记录起来。------------------------------------
        this.oldData._inWall2DPoints = _inWall2DPoints;
        this.oldData._outWall2DPoints = _outWall2DPoints;
        this.oldData._roomID = this.roomID;
        //内墙的面的顶点数据。----------------------------------------------------------------
        let _inWallVertexes = [
            new THREE.Vector3(_inWall2DPoints[0].x, 0, _inWall2DPoints[0].y),
            new THREE.Vector3(_inWall2DPoints[1].x, 0, _inWall2DPoints[1].y),
            new THREE.Vector3(_inWall2DPoints[1].x, _wall3D.wallHeight, _inWall2DPoints[1].y),
            new THREE.Vector3(_inWall2DPoints[0].x, _wall3D.wallHeight, _inWall2DPoints[0].y)
        ];
        //为墙面UV搜集数据。---------------------------------------------------------------------------------
        let _inWallLength = _inWallVertexes[0].clone().distanceTo(_inWallVertexes[1]);
        this.uvRawDatas[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].inWall] = [
            new THREE.Vector2(0, 0),
            new THREE.Vector2(_inWallLength, 0.0),
            new THREE.Vector2(_inWallLength, _wall3D.wallHeight),
            new THREE.Vector2(0.0, _wall3D.wallHeight)
        ];
        //为地脚线和石灰线的走向搜集数据。-----------------------------------------------------
        this.profileModels[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].inWall].profileDir = [_inWallVertexes[1], _inWallVertexes[0]];
        //计算切割平面的平面朝向。-----------------------------------------------------------
        let _inwallFirstValue;
        let _inwallSecondValue;
        let _inwallDir = _inWallVertexes[0].clone().sub(_inWallVertexes[1]);
        if (_hasStartCowall == true) {
            _inwallSecondValue = new THREE.Vector3(_outWall2DPoints[1].x, 0, _outWall2DPoints[1].y).sub(_inWallVertexes[0]);
        }
        else {
            _inwallSecondValue = _inwallDir.clone().applyAxisAngle(new THREE.Vector3(0, 1, 0), Math.PI / 4);
        }
        if (_hasEndCowall == true) {
            _inwallFirstValue = new THREE.Vector3(_outWall2DPoints[0].x, 0, _outWall2DPoints[0].y).sub(_inWallVertexes[1]);
        }
        else {
            _inwallFirstValue = _inwallDir.clone().applyAxisAngle(new THREE.Vector3(0, 1, 0), -Math.PI / 4);
        }
        this.profileModels[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].inWall].cutPlaneDir = [
            _inwallFirstValue,
            _inwallSecondValue
        ];
        //为内墙创建Face3数据。----------------------------------------------------------------------------
        let _inWallFaces = [
            new THREE.Face3(0, 1, 3),
            new THREE.Face3(1, 2, 3),
        ];
        //为内墙模型加载最初始的贴图。-----------------------------------------------
        // console.log(this.allWallTextrues);
        if (this.allWallTextrues[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].inWall] == undefined) {
            this.allWallTextrues[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].inWall] = this.LoadInitTexture();
        }
        let _InwallMesh = this.MakeOneWallMesh(_inWallVertexes, _inWallFaces, _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].inWall, false);
        //这个模型绑定阿隆创建的JCowall3D对象。-----------------------------------
        let customUserData = new _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["CustomUserData"]();
        customUserData.longObj = this;
        customUserData.modelType = _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].inWall;
        customUserData.wireSelectedPoints = _inWallVertexes;
        _InwallMesh.userData.customUserData = customUserData;
        //把模型放置到可单击模型列表里。--------------------------------------------
        this.dataServer.classesObj.rayHitModelList.AddRayHitModel(_InwallMesh);
        //再做外墙。------------------------------------------------------------------------
        if (this.roomID == undefined) { //没有构成room的cowall。
            // this.centerPoints[ModelType.outWall] = this.GetCenterPoint(_outWall2DPoints[0], _outWall2DPoints[1]);
            // this.referenceDir[ModelType.outWall] = new THREE.Vector2(_outWall2DPoints[1].x - _outWall2DPoints[0].x, _outWall2DPoints[1].y - _outWall2DPoints[0].y);
            //外墙的四个角的四个顶点。---------------------------------------------------------------
            let _outWallVertexes = [
                new THREE.Vector3(_outWall2DPoints[0].x, 0, _outWall2DPoints[0].y),
                new THREE.Vector3(_outWall2DPoints[1].x, 0, _outWall2DPoints[1].y),
                new THREE.Vector3(_outWall2DPoints[1].x, _wall3D.wallHeight, _outWall2DPoints[1].y),
                new THREE.Vector3(_outWall2DPoints[0].x, _wall3D.wallHeight, _outWall2DPoints[0].y),
            ];
            //为墙面UV搜集数据。---------------------------------------------------------------------------------
            let _outWallLength = _outWallVertexes[0].clone().distanceTo(_outWallVertexes[1]);
            this.uvRawDatas[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].outWall] = [
                new THREE.Vector2(0, 0),
                new THREE.Vector2(_outWallLength, 0.0),
                new THREE.Vector2(_outWallLength, _wall3D.wallHeight),
                new THREE.Vector2(0.0, _wall3D.wallHeight)
            ];
            //为地脚线和石灰线的走向搜集数据。-----------------------------------------------------
            this.profileModels[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].outWall].profileDir = [_outWallVertexes[1], _outWallVertexes[0]];
            //计算切割平面的平面朝向。-------------------------------------------------------------
            let _outwallFirstValue;
            let _outwallSecondValue;
            let _outallDir = _outWallVertexes[0].clone().sub(_outWallVertexes[1]);
            if (_hasEndCowall == true) {
                _outwallSecondValue = new THREE.Vector3(_inWall2DPoints[1].x, 0, _inWall2DPoints[1].y).sub(_outWallVertexes[0]);
            }
            else {
                _outwallSecondValue = _outallDir.clone().applyAxisAngle(new THREE.Vector3(0, 1, 0), Math.PI / 4);
            }
            if (_hasStartCowall == true) {
                _outwallFirstValue = new THREE.Vector3(_inWall2DPoints[0].x, 0, _inWall2DPoints[0].y).sub(_outWallVertexes[1]);
            }
            else {
                _outwallFirstValue = _outallDir.clone().applyAxisAngle(new THREE.Vector3(0, 1, 0), -Math.PI / 4);
            }
            this.profileModels[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].outWall].cutPlaneDir = [
                _outwallFirstValue,
                _outwallSecondValue
            ];
            //为外墙生成Face3数据。-------------------------------------------------
            let _outWallFaces = [
                new THREE.Face3(0, 1, 3),
                new THREE.Face3(1, 2, 3)
            ];
            //为外墙模型加载最初始的贴图。-----------------------------------------------
            if (this.allWallTextrues[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].outWall] == undefined) {
                this.allWallTextrues[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].outWall] = this.LoadInitTexture();
            }
            let _outwallMesh = this.MakeOneWallMesh(_outWallVertexes, _outWallFaces, _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].outWall, false);
            //这个模型绑定阿隆创建的JCowall3D对象。-----------------------------------
            let customUserData = new _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["CustomUserData"]();
            customUserData.longObj = this;
            customUserData.modelType = _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].outWall;
            customUserData.wireSelectedPoints = _outWallVertexes;
            _outwallMesh.userData.customUserData = customUserData;
            //把模型放置到可单击模型列表里。--------------------------------------------
            this.dataServer.classesObj.rayHitModelList.AddRayHitModel(_outwallMesh);
        }
        //做开始处的侧墙。-------------------------------------------------------------------
        if (_hasStartCowall == false) {
            // this.centerPoints[ModelType.startWall] = this.GetCenterPoint(_inWall2DPoints[0], _outWall2DPoints[1]);
            // this.referenceDir[ModelType.startWall] = new THREE.Vector2(_outWall2DPoints[1].x - _inWall2DPoints[0].x, _outWall2DPoints[1].y - _inWall2DPoints[0].y);
            let _startSideWallVertexes = [
                new THREE.Vector3(_inWall2DPoints[0].x, 0, _inWall2DPoints[0].y),
                new THREE.Vector3(_outWall2DPoints[1].x, 0, _outWall2DPoints[1].y),
                new THREE.Vector3(_outWall2DPoints[1].x, _wall3D.wallHeight, _outWall2DPoints[1].y),
                new THREE.Vector3(_inWall2DPoints[0].x, _wall3D.wallHeight, _inWall2DPoints[0].y),
            ];
            //为墙面UV搜集数据。---------------------------------------------------------------------------------
            let _startSideWallLength = _startSideWallVertexes[0].clone().distanceTo(_startSideWallVertexes[1]);
            this.uvRawDatas[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].startWall] = [
                new THREE.Vector2(0, 0),
                new THREE.Vector2(_startSideWallLength, 0.0),
                new THREE.Vector2(_startSideWallLength, _wall3D.wallHeight),
                new THREE.Vector2(0.0, _wall3D.wallHeight)
            ];
            //为地脚线和石灰线的走向搜集数据。-----------------------------------------------------
            this.profileModels[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].startWall].profileDir = [_startSideWallVertexes[0], _startSideWallVertexes[1]];
            let _startWallDir = _startSideWallVertexes[0].clone().sub(_startSideWallVertexes[1]);
            this.profileModels[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].startWall].cutPlaneDir = [
                _startWallDir.clone().applyAxisAngle(new THREE.Vector3(0, 1, 0), -Math.PI / 4),
                _startWallDir.clone().applyAxisAngle(new THREE.Vector3(0, 1, 0), Math.PI / 4),
            ];
            let _startSideWallFaces = [
                new THREE.Face3(0, 3, 1),
                new THREE.Face3(1, 3, 2),
            ];
            //为模型加载最初始的贴图。-----------------------------------------------
            if (this.allWallTextrues[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].startWall] == undefined) {
                this.allWallTextrues[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].startWall] = this.LoadInitTexture();
            }
            let _startSideWall = this.MakeOneWallMesh(_startSideWallVertexes, _startSideWallFaces, _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].startWall, false);
            //这个模型绑定阿隆创建的JCowall3D对象。-----------------------------------
            let customUserData = new _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["CustomUserData"]();
            customUserData.longObj = this;
            customUserData.modelType = _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].startWall;
            customUserData.wireSelectedPoints = _startSideWallVertexes;
            _startSideWall.userData.customUserData = customUserData;
            //把模型放置到可单击模型列表里。--------------------------------------------
            this.dataServer.classesObj.rayHitModelList.AddRayHitModel(_startSideWall);
        }
        //做结束处的侧墙。----------------------------------------------------------------------
        if (_hasEndCowall == false) {
            // this.centerPoints[ModelType.endWall] = this.GetCenterPoint(_inWall2DPoints[1], _outWall2DPoints[0]);
            // this.referenceDir[ModelType.endWall] = new THREE.Vector2(_outWall2DPoints[0].x - _inWall2DPoints[1].x, _outWall2DPoints[0].y - _inWall2DPoints[1].y);
            let _endSideWallVertexes = [
                new THREE.Vector3(_inWall2DPoints[1].x, 0, _inWall2DPoints[1].y),
                new THREE.Vector3(_outWall2DPoints[0].x, 0, _outWall2DPoints[0].y),
                new THREE.Vector3(_outWall2DPoints[0].x, _wall3D.wallHeight, _outWall2DPoints[0].y),
                new THREE.Vector3(_inWall2DPoints[1].x, _wall3D.wallHeight, _inWall2DPoints[1].y),
            ];
            //为墙面UV搜集数据。---------------------------------------------------------------------------------
            let _endSideWallLength = _endSideWallVertexes[0].clone().distanceTo(_endSideWallVertexes[1]);
            this.uvRawDatas[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].endWall] = [
                new THREE.Vector2(0, 0),
                new THREE.Vector2(_endSideWallLength, 0.0),
                new THREE.Vector2(_endSideWallLength, _wall3D.wallHeight),
                new THREE.Vector2(0.0, _wall3D.wallHeight)
            ];
            //为地脚线和石灰线的走向搜集数据。-----------------------------------------------------
            this.profileModels[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].endWall].profileDir = [_endSideWallVertexes[1], _endSideWallVertexes[0]];
            let _endWallDir = _endSideWallVertexes[1].clone().sub(_endSideWallVertexes[0]);
            this.profileModels[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].endWall].cutPlaneDir = [
                _endWallDir.clone().applyAxisAngle(new THREE.Vector3(0, 1, 0), -Math.PI / 4),
                _endWallDir.clone().applyAxisAngle(new THREE.Vector3(0, 1, 0), Math.PI / 4),
            ];
            let _endSideWallFaces = [
                new THREE.Face3(0, 1, 3),
                new THREE.Face3(1, 2, 3),
            ];
            //为模型加载最初始的贴图。-----------------------------------------------
            if (this.allWallTextrues[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].endWall] == undefined) {
                this.allWallTextrues[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].endWall] = this.LoadInitTexture();
            }
            let _endSideWall = this.MakeOneWallMesh(_endSideWallVertexes, _endSideWallFaces, _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].endWall, false);
            //这个模型绑定阿隆创建的JCowall3D对象。-----------------------------------
            let customUserData = new _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["CustomUserData"]();
            customUserData.longObj = this;
            customUserData.modelType = _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].endWall;
            customUserData.wireSelectedPoints = _endSideWallVertexes;
            _endSideWall.userData.customUserData = customUserData;
            //把模型放置到可单击模型列表里。--------------------------------------------
            this.dataServer.classesObj.rayHitModelList.AddRayHitModel(_endSideWall);
        }
    }
    /**
    * 把这个colwall上的所有的墙的模型销毁掉。==============================================================
    */
    DisposeWall() {
        if (this.dataServer == undefined) {
            return;
        }
        //这个墙是不是当前选择的模型？是的话取消一切选择。
        let _isCurrentSelectMesh = false;
        let _currentSelectModel = this.dataServer.classesObj.currentSelectModel.currentSelectedModel;
        if (_currentSelectModel != null) {
            for (let key in this.wallMeshs) {
                if (this.wallMeshs[key] == _currentSelectModel) {
                    _isCurrentSelectMesh = true;
                    break;
                }
            }
        }
        if (_isCurrentSelectMesh == true) {
            this.dataServer.classesObj.currentSelectModel.DeselectAll();
            this.dataServer.classesObj.wireSelectFrame.destory3D();
        }
        //把mesh都销毁掉。------------------------------------------------
        for (let key in this.wallMeshs) {
            if (this.wallMeshs[key] != null) {
                this.dataServer.classesObj.rayHitModelList.RemoveRayHitModel(this.wallMeshs[key]);
                this.dataServer.sceneCommonObj.scene.remove(this.wallMeshs[key]);
                this.wallMeshs[key].material.dispose();
                delete this.wallMeshs[key].userData.customUserData;
                this.wallMeshs[key].geometry.dispose();
                this.wallMeshs[key] = null;
            }
        }
        this.wallMeshs = [];
        //把布尔后的mesh都销毁掉。------------
        for (let key in this.afterBooleanMesh) {
            if (this.afterBooleanMesh[key] != null) {
                this.dataServer.sceneCommonObj.scene.remove(this.afterBooleanMesh[key]);
                this.afterBooleanMesh[key].material.dispose();
                this.afterBooleanMesh[key].geometry.dispose();
                this.afterBooleanMesh[key] = null;
            }
        }
        //把geometry都销毁掉。--------------------------------------------
        for (let key in this.wallGeometrys) {
            if (this.wallGeometrys[key] != null) {
                this.wallGeometrys[key].dispose();
                this.wallGeometrys[key] = null;
            }
        }
        this.wallGeometrys = [];
    }
    /**
     * 为墙体加载初始化的贴图。==========================================================================
     */
    LoadInitTexture() {
        let initTextureUrl = this.jDataServer.json.wallPaper[0];
        let _theTexture = this.dataServer.loaders.textureLoader.load(initTextureUrl);
        _theTexture.wrapS = THREE.RepeatWrapping;
        _theTexture.wrapT = THREE.RepeatWrapping;
        return _theTexture;
    }
    /**
     * 给这个模型创建地脚线。在右边属性面板勾上地脚线的时候调用===============================================================
     * @param _modelType 模型的类型,用来区分是内墙还是外墙还是边上的墙------------------------------------------
     *  @param _profileDatas 剖面上的一圈点--------------------------------------------------------------------
     */
    MakeKickLine(_profileDatas) {
        let _modelType = this.dataServer.classesObj.currentSelectModel.GetSelectedModelType();
        //let _allKickLine = this.dataServer.classesObj.profileLoader.GetKickLineData();
        //读取对应的地脚线的数据。----------------------------------
        //let _profileDatas = _allKickLine.dataList[this.paramsValues.kickLineProfileShapeIndex[_modelType]].vertexData;
        this.profileModels[_modelType].kickLineProfilePoints = _profileDatas;
        //第一个创建地脚线的时候，请先创建一个ProfileModel对象。---------------
        if (this.profileModels[_modelType].kickLine == null) {
            this.profileModels[_modelType].kickLine = new _classes_ProfileModel__WEBPACK_IMPORTED_MODULE_3__["ProfileModel"](this.dataServer, _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].kickLine, this.jDataServer);
        }
        let _wallDoors = this.getWall().getDoorArr();
        //如果是直墙的话则创建的是直墙的地脚线。-----------------------------------------
        if (this.MakeStarightOrArcWall(_modelType) == true) {
            this.profileModels[_modelType].kickLine.MakeStraightProfile(this.paramsValues.kickLineProfileMatIndex[_modelType], 0, this.profileModels[_modelType].kickLineSize, this.profileModels[_modelType].profileDir, this.profileModels[_modelType].cutPlaneDir, this.profileModels[_modelType].kickLineProfilePoints, _wallDoors);
        }
        //如果是弧形墙的话则为弧形墙创建地脚线。---------------------------------------------
        else {
            this.profileModels[_modelType].kickLine.MakeArcProfile(this.paramsValues.kickLineProfileMatIndex[_modelType], 0, this.profileModels[_modelType].kickLineSize, this.arcProfilePoints[_modelType], this.profileModels[_modelType].cutPlaneDir, this.profileModels[_modelType].kickLineProfilePoints, _wallDoors, _modelType == _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].outWall ? true : false);
        }
    }
    /**
     * 销毁某个地脚线。==========================================================================
      
     */
    DestroyKickLine() {
        let _currentHitModelType = this.dataServer.classesObj.currentSelectModel.GetSelectedModelType();
        this.profileModels[_currentHitModelType].kickLine.DisposeProfileModel();
        this.profileModels[_currentHitModelType].kickLine = undefined;
    }
    /**
     * 给这个模型创建石灰。在右边属性面板勾上石灰线的时候调用。===============================================================
     * @param _profileDatas 剖面上的一圈点--------------------------------------------------------------------
     */
    MakePlasterCornice(_profileDatas) {
        //let _allPlasterCornice = this.dataServer.classesObj.profileLoader.GetplasterCorniceData();
        //读取对应的石灰线的一圈点。----------------------------------
        //let _profileDatas = _allPlasterCornice.dataList[this.paramsValues.plasterCorniceProfileShapeIndex[_modelType]].vertexData;
        let _modelType = this.dataServer.classesObj.currentSelectModel.GetSelectedModelType();
        this.profileModels[_modelType].plasterCornicePoints = _profileDatas;
        //第一个创建石灰线的时候，请先创建一个ProfileModel对象。---------------
        if (this.profileModels[_modelType].plasterCornice == null) {
            this.profileModels[_modelType].plasterCornice = new _classes_ProfileModel__WEBPACK_IMPORTED_MODULE_3__["ProfileModel"](this.dataServer, _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].plasterCornice, this.jDataServer);
        }
        let _wall3D = this.getWall();
        //创建的是直的石灰线。---------------------------------------------------------------
        if (this.MakeStarightOrArcWall(_modelType) == true) {
            this.profileModels[_modelType].plasterCornice.MakeStraightProfile(this.paramsValues.plasterCorniceProfileMatIndex[_modelType], _wall3D.wallHeight - this.profileModels[_modelType].plasterCorniceSize.y, this.profileModels[_modelType].plasterCorniceSize, this.profileModels[_modelType].profileDir, this.profileModels[_modelType].cutPlaneDir, this.profileModels[_modelType].plasterCornicePoints, []);
        }
        //创建的是弧形的石灰线。---------------------------------------------------------------
        else {
            this.profileModels[_modelType].plasterCornice.MakeArcProfile(this.paramsValues.plasterCorniceProfileMatIndex[_modelType], _wall3D.wallHeight - this.profileModels[_modelType].plasterCorniceSize.y, this.profileModels[_modelType].plasterCorniceSize, this.arcProfilePoints[_modelType], this.profileModels[_modelType].cutPlaneDir, this.profileModels[_modelType].plasterCornicePoints, [], _modelType == _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].outWall ? true : false);
        }
    }
    //销毁石灰线的方法。========================================================================
    DestroyPlasterCornice() {
        let _currentHitModelType = this.dataServer.classesObj.currentSelectModel.GetSelectedModelType();
        this.profileModels[_currentHitModelType].plasterCornice.DisposeProfileModel();
        this.profileModels[_currentHitModelType].plasterCornice = undefined;
    }
    /**
    * 用来创建一面弧形墙自定义函数。===========================================================
    * @param _vertexsList 构成模型的所有顶点数据。
    * @param _faceList 构成模型的所有face3数据。
    * @param _wallName 这一个面的墙的名字。
    */
    // public MakeArcWallMesh(_vertexsList, _faceList, _modelType) {
    //     //构成模型的所有顶点数据。---------
    //     let _wallVertexes = [];
    //     for (let i = 0; i < _vertexsList.length; i++) {
    //         _wallVertexes.push(_vertexsList[i]);
    //     }
    //     let _wallFaces = [];
    //     for (let i = 0; i < _faceList.length; i++) {
    //         _wallFaces.push(_faceList[i]);
    //     }
    //     this.wallGeometrys[_modelType] = new THREE.Geometry();
    //     this.wallGeometrys[_modelType].vertices = _wallVertexes;
    //     this.wallGeometrys[_modelType].faces = _wallFaces;
    //     //this.wallGeometrys[_modelType].faceVertexUvs = _wallUVs;
    //     this.wallGeometrys[_modelType].computeFaceNormals();
    //     this.wallGeometrys[_modelType].mergeVertices();
    //     let _wallMaterial = new THREE.MeshPhongMaterial({
    //         map: this.allTextrues[_modelType]
    //     });
    //     this.wallMeshs[_modelType] = new THREE.Mesh(this.wallGeometrys[_modelType]);
    //     this.dataServer.sceneCommonObj.scene.add(this.wallMeshs[_modelType]);
    // }
    /**
     * 用来创建直一面墙模型的自定义函数。===========================================================
     * @param _vertexsList 构成模型的所有顶点数据。
     * @param _faceList 构成模型的所有face3数据。
     * @param _wallName 这一个面的墙的名字。
     * @param _smooth   这面墙是否使用平滑的设置。
     */
    MakeOneWallMesh(_vertexsList, _faceList, _modelType, _smooth) {
        //构成模型的所有顶点数据。---------
        let _wallVertexes = [];
        for (let i = 0; i < _vertexsList.length; i++) {
            _wallVertexes.push(_vertexsList[i]);
        }
        let _wallFaces = [];
        for (let i = 0; i < _faceList.length; i++) {
            _wallFaces.push(_faceList[i]);
        }
        //开始计算UV。
        let _wallUVs = [[]];
        for (let i = 0; i < _wallFaces.length; i++) {
            let _oneTriangleUVs = [];
            for (let j = 0; j < _classes_MyUtil__WEBPACK_IMPORTED_MODULE_2__["MyUtil"].faceABC.length; j++) {
                let _theUV = this.uvRawDatas[_modelType][_wallFaces[i][_classes_MyUtil__WEBPACK_IMPORTED_MODULE_2__["MyUtil"].faceABC[j]]];
                _oneTriangleUVs.push(new THREE.Vector2(_theUV.x / 1000, _theUV.y / 1000));
            }
            _wallUVs[0].push(_oneTriangleUVs);
        }
        this.wallGeometrys[_modelType] = new THREE.Geometry();
        this.wallGeometrys[_modelType].vertices = _wallVertexes;
        this.wallGeometrys[_modelType].faces = _wallFaces;
        this.wallGeometrys[_modelType].faceVertexUvs = _wallUVs;
        if (_smooth == true) {
            //如果这面墙要进行平滑处理。------------------------------
            this.wallGeometrys[_modelType].computeVertexNormals();
        }
        else {
            //如果这面墙不需要进行平滑处理。---------------------------
            this.wallGeometrys[_modelType].computeFaceNormals();
        }
        this.wallGeometrys[_modelType].mergeVertices();
        let _wallMaterial = new THREE.MeshPhongMaterial({
            map: this.allWallTextrues[_modelType]
        });
        this.wallMeshs[_modelType] = new THREE.Mesh(this.wallGeometrys[_modelType]);
        this.dataServer.sceneCommonObj.scene.add(this.wallMeshs[_modelType]);
        //要开始检测是否有和门窗的布尔运算。------------------------------------------------
        //只有外墙和内墙才会计算布尔。---------------------------
        if (_modelType == _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].inWall || _modelType == _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].outWall) {
            //获取一个cowall上的所有门对象。
            let _allDoors = this.getWall().getDoorArr();
            //获取一个cowall上的所有窗和飘窗对象。
            let _allWindows = this.getWall().getWinArr();
            //获取一个cowall上的所有转角飘窗对象。
            let _allCornerWins = this.getWall().getCornWinArr();
            // console.log(_allDoors);
            if (_allDoors.length > 0 || _allWindows.length > 0 || _allCornerWins.length > 0) {
                //用这个模型去减去别的模型。
                let _booleanMain = new ThreeBSP(this.wallMeshs[_modelType]);
                //开始进行转角飘窗的布尔。--------------------------------
                for (let i = 0; i < _allCornerWins.length; i++) {
                    let _cornerWinBooleanMeshes = _allCornerWins[i].booleanModels;
                    // console.log(_cornerWinBooleanMeshes);
                    // let _subtractModel = new ThreeBSP(_cornerWinBooleanMeshes[0]);
                    // _booleanMain = _booleanMain.subtract(_subtractModel);
                    for (let j = 0; j < _cornerWinBooleanMeshes.length; j++) {
                        let _booleanMeshWallId = _cornerWinBooleanMeshes[j].userData.wallId;
                        let _currentWallId = this.getWall().id;
                        if (_currentWallId == _booleanMeshWallId) {
                            let _subtractModel = new ThreeBSP(_cornerWinBooleanMeshes[j]);
                            _booleanMain = _booleanMain.subtract(_subtractModel);
                        }
                    }
                }
                //开始进行门的布尔。-------------------------------------
                for (let i = 0; i < _allDoors.length; i++) {
                    let _subtractModel = new ThreeBSP(_allDoors[i].booleanModel);
                    _booleanMain = _booleanMain.subtract(_subtractModel);
                }
                //开始进行窗和普通飘窗的布尔。-------------------------------------
                for (let i = 0; i < _allWindows.length; i++) {
                    let _subtractModel = new ThreeBSP(_allWindows[i].booleanModel);
                    _booleanMain = _booleanMain.subtract(_subtractModel);
                }
                this.afterBooleanMesh[_modelType] = _booleanMain.toMesh();
                if (_smooth == true) {
                    //如果模型需要进行平滑处理。----------------------------------------------
                    this.afterBooleanMesh[_modelType].geometry.mergeVertices();
                    this.afterBooleanMesh[_modelType].geometry.computeVertexNormals();
                }
                else {
                    //如果模型不需要被进行平滑处理。-------------------------------------------
                    this.afterBooleanMesh[_modelType].geometry.computeFaceNormals();
                }
                this.dataServer.sceneCommonObj.scene.add(this.afterBooleanMesh[_modelType]);
            }
        }
        //如果是有布尔后的墙的话。--------------------------
        if (this.afterBooleanMesh[_modelType] != undefined) {
            this.wallMeshs[_modelType].material.visible = false;
            this.afterBooleanMesh[_modelType].material = _wallMaterial;
        }
        else {
            this.wallMeshs[_modelType].material = _wallMaterial;
        }
        return this.wallMeshs[_modelType];
    }
    /**
     * 检查当前colwall对象的四个点的做标是否有变化。用来决定该墙体要不要更新。返回true代表这个墙需要重建，返回false代表不用-----------------------------
     */
    IfVertexesChange() {
        //从还没有构成空间的墙到构成空间的墙需要更新一下。-------------------------
        if (this.oldData._roomID != this.roomID) {
            return true;
        }
        else {
            //这个墙刚开始创建的时候肯定要更新一下咯。----------------------------
            if (Object.getOwnPropertyNames(this.oldData).length == 0) {
                return true;
            }
            else {
                //如果墙下面的四个点都不变，那就不要更新了啦。----------------------
                if (_classes_MyUtil__WEBPACK_IMPORTED_MODULE_2__["MyUtil"].IfArrayTheSame(this.oldData._inWall2DPoints, this.getInLine(), ["x", "y"]) &&
                    _classes_MyUtil__WEBPACK_IMPORTED_MODULE_2__["MyUtil"].IfArrayTheSame(this.oldData._outWall2DPoints, this.getOutLine(), ["x", "y"])) {
                    return false;
                }
                //如果墙下面对应的四个点稍有变化，那还是更新吧。--------------------
                else {
                    return true;
                }
            }
        }
    }
    /**
     * 获取阿隆给我的两个点的中心点，返回Vector2。
     */
    // private GetCenterPoint(_point1, _point2) {
    //     return new THREE.Vector2((_point1.x + _point2.x) / 2, (_point1.y + _point2.y) / 2);
    // }
    /**
     * 提供给阿隆使用的销毁墙体模型的方法。================================
     */
    destory3D() {
        this.DisposeWall();
        //把所有墙使用的贴图都要销毁掉。------------------------------------------------
        for (let key in this.allWallTextrues) {
            this.allWallTextrues[key].dispose();
        }
        this.allWallTextrues = [];
        //所有的地脚线天花线都要销毁掉啊。----------------------------------------------
        for (let i = 0; i < this.allWallTypes.length; i++) {
            if (this.HasKickLine(this.allWallTypes[i])) {
                this.profileModels[this.allWallTypes[i]].kickLine.DisposeProfileModel();
                this.profileModels[this.allWallTypes[i]].kickLine = undefined;
            }
            if (this.HasPlasterCornice(this.allWallTypes[i])) {
                this.profileModels[this.allWallTypes[i]].plasterCornice.DisposeProfileModel();
                this.profileModels[this.allWallTypes[i]].plasterCornice = undefined;
            }
        }
        this.profileModels = [];
    }
    //获取当前cowall的向量，返回Vector2。==========================================
    // public GetDir_Vector2() {
    //     let _dir = this.getVector();
    //     return new THREE.Vector2(_dir.x, _dir.y).normalize();
    // }
    /**
     * 设置cowall里某个模型的材质。========================================
     * @param _modelType
     */
    SetModelTexture(_imageUrl) {
        let _currentHitModelType = this.dataServer.classesObj.currentSelectModel.GetSelectedModelType();
        this.allWallTextrues[_currentHitModelType].image.src = _imageUrl;
        this.allWallTextrues[_currentHitModelType].image.onload = () => {
            this.allWallTextrues[_currentHitModelType].needsUpdate = true;
        };
    }
    //给杨松岭获取当前墙使用的贴图的序号。==============================================
    GetMaterialSelectIndex() {
        let _currentHitModelType = this.dataServer.classesObj.currentSelectModel.GetSelectedModelType();
        return this.paramsValues.materialIndex[_currentHitModelType];
    }
    //给杨松岭设置当前墙使用的贴图的序号。==============================================
    SetMaterialSelectIndex(_index) {
        let _currentHitModelType = this.dataServer.classesObj.currentSelectModel.GetSelectedModelType();
        this.paramsValues.materialIndex[_currentHitModelType] = _index;
        console.log(this.paramsValues);
    }
    //给杨松岭获取当前墙使用的是哪个款式的地脚线。=========================================
    GetKickLineProfileIndex() {
        let _currentHitModelType = this.dataServer.classesObj.currentSelectModel.GetSelectedModelType();
        return this.paramsValues.kickLineProfileShapeIndex[_currentHitModelType];
    }
    //给杨松岭设置当前墙使用的是哪个款式的地脚线。=========================================
    SetKickLineProfileIndex(_index) {
        let _currentHitModelType = this.dataServer.classesObj.currentSelectModel.GetSelectedModelType();
        this.paramsValues.kickLineProfileShapeIndex[_currentHitModelType] = _index;
    }
    //给杨松岭获取当前使用的是哪个款式的石灰线。=========================================
    GetPlasterCorniceProfileIndex() {
        let _currentHitModelType = this.dataServer.classesObj.currentSelectModel.GetSelectedModelType();
        return this.paramsValues.plasterCorniceProfileShapeIndex[_currentHitModelType];
    }
    //给杨松岭设置当前墙使用的是哪个款式的石灰线。=========================================
    SetPlasterCorniceProfileIndex(_index) {
        let _currentHitModelType = this.dataServer.classesObj.currentSelectModel.GetSelectedModelType();
        this.paramsValues.plasterCorniceProfileShapeIndex[_currentHitModelType] = _index;
    }
    //给杨松岭获取当前地脚线使用的是第几张贴图。============================================
    GetKickLineProfileMatIndex() {
        let _currentHitModelType = this.dataServer.classesObj.currentSelectModel.GetSelectedModelType();
        return this.paramsValues.kickLineProfileMatIndex[_currentHitModelType];
    }
    //给杨松岭用来设置地脚线使用的是第几张贴图。=============================================
    SetKickLineProfileMatIndex(_index) {
        let _currentHitModelType = this.dataServer.classesObj.currentSelectModel.GetSelectedModelType();
        this.paramsValues.kickLineProfileMatIndex[_currentHitModelType] = _index;
    }
    //给杨松岭获获取当前石灰线使用的是第几张贴图。=============================================
    GetPlasterCorniceProfileMatIndex() {
        let _currentHitModelType = this.dataServer.classesObj.currentSelectModel.GetSelectedModelType();
        return this.paramsValues.plasterCorniceProfileMatIndex[_currentHitModelType];
    }
    //给杨松岭获设置当前石灰线使用的是第几张贴图。=============================================
    SetPlasterCorniceProfileMatIndex(_index) {
        let _currentHitModelType = this.dataServer.classesObj.currentSelectModel.GetSelectedModelType();
        this.paramsValues.plasterCorniceProfileMatIndex[_currentHitModelType] = _index;
    }
    /**
     * 这个模型是否有某个地脚线。============================
     * @param _modelType
     */
    HasKickLine(_modelType) {
        let _returnValue = false;
        if (this.profileModels[_modelType] != undefined) {
            if (this.profileModels[_modelType].kickLine != undefined) {
                _returnValue = true;
            }
        }
        return _returnValue;
    }
    /**
     * 当前选择的那个模型有没有地脚线？=================================================
     */
    CurrentSelectHasKickLine() {
        let _currentHitModelType = this.dataServer.classesObj.currentSelectModel.GetSelectedModelType();
        return this.HasKickLine(_currentHitModelType);
    }
    /**
     * 获取当前墙体的某一个地脚线对象。============================
     * @param _modelType
     */
    GetKickLine(_modelType) {
        if (this.HasKickLine(_modelType)) {
            return this.profileModels[_modelType].kickLine;
        }
        else {
            return null;
        }
    }
    /**
     * 提供给杨松岭设置地脚线贴图的方法。==============================
     */
    SetCurrentSelectKickLineMat(_url) {
        let _currentHitModelType = this.dataServer.classesObj.currentSelectModel.GetSelectedModelType();
        let _theKickLine = this.GetKickLine(_currentHitModelType);
        _theKickLine.SetModelTexture(_url);
    }
    /**
     * 提供给杨松岭设置石灰线贴图的方法。==============================
     */
    SetCurrentPlasterCorniceMat(_url) {
        let _currentHitModelType = this.dataServer.classesObj.currentSelectModel.GetSelectedModelType();
        let _thePlasterCornice = this.GetPlasterCornice(_currentHitModelType);
        _thePlasterCornice.SetModelTexture(_url);
    }
    /**
     * 这个模型是否后某个石灰线。============================
     * @param _modelType
     */
    HasPlasterCornice(_modelType) {
        if (this.profileModels[_modelType] != undefined) {
            if (this.profileModels[_modelType].plasterCornice == undefined) {
                return false;
            }
            else {
                return true;
            }
        }
        //如果这个墙压根都没有被初始化的话，也当做是没有天花线。
        else {
            return false;
        }
    }
    /**
     * 当前选择的模型是否有天花线。主要是提供给杨松岭使用的。========================
     */
    CurrentSelectHasPlasterCornice() {
        let _currentHitModelType = this.dataServer.classesObj.currentSelectModel.GetSelectedModelType();
        return this.HasPlasterCornice(_currentHitModelType);
    }
    /**
     * 获取当前墙体的某一个石灰线对象。============================================
     * @param _modelType
     */
    GetPlasterCornice(_modelType) {
        if (this.HasPlasterCornice(_modelType)) {
            return this.profileModels[_modelType].plasterCornice;
        }
        else {
            return null;
        }
    }
    //更新地脚线的模型。在墙上拖动门窗的时候一直调用此函数。===============================================================
    UpdateKickLineProfileModel() {
        for (let i = 0; i < this.allWallTypes.length; i++) {
            //如果某些墙被销毁了，该墙对应的地脚线肯定要跟着被销毁吧。----------------------------------------
            if (this.wallMeshs[this.allWallTypes[i]] == undefined && this.HasKickLine(this.allWallTypes[i])) {
                this.profileModels[this.allWallTypes[i]].kickLine.DisposeProfileModel();
                this.profileModels[this.allWallTypes[i]].kickLine = undefined;
            }
            //这个墙上的所有的门。--------------------------------------------------------------------------
            let _wallDoors = this.getWall().getDoorArr();
            //如果某墙体存在并且它本来就拥有地脚线，那么就开始更新该地脚线吧。----------------------------------
            if (this.wallMeshs[this.allWallTypes[i]] != undefined && this.HasKickLine(this.allWallTypes[i])) {
                //如果是直墙的话则创建直墙的地脚线。-------------------------------------------------
                let _kickLineSize = this.profileModels[this.allWallTypes[i]].kickLineSize;
                let _kickLineProfilePoints = this.profileModels[this.allWallTypes[i]].kickLineProfilePoints;
                let _kickLineProfileMatIndex = this.paramsValues.kickLineProfileMatIndex[this.allWallTypes[i]];
                if (this.MakeStarightOrArcWall(this.allWallTypes[i]) == true) {
                    if (this.isSwitching == true) {
                        this.profileModels[this.allWallTypes[i]].kickLine.MakeStraightProfile(_kickLineProfileMatIndex, 0, _kickLineSize, this.profileModels[this.allWallTypes[i]].profileDir, this.profileModels[this.allWallTypes[i]].cutPlaneDir, _kickLineProfilePoints, _wallDoors);
                    }
                    else {
                        this.profileModels[this.allWallTypes[i]].kickLine.UpdateStraightProfile(0, _kickLineSize, this.profileModels[this.allWallTypes[i]].profileDir, this.profileModels[this.allWallTypes[i]].cutPlaneDir, _kickLineProfilePoints, _wallDoors);
                    }
                }
                //如果是弧形墙的话则为弧形墙创建地脚线。---------------------------------------------
                else {
                    if (this.isSwitching == true) {
                        this.profileModels[this.allWallTypes[i]].kickLine.MakeArcProfile(_kickLineProfileMatIndex, 0, _kickLineSize, this.arcProfilePoints[this.allWallTypes[i]], this.profileModels[this.allWallTypes[i]].cutPlaneDir, _kickLineProfilePoints, _wallDoors, this.allWallTypes[i] == _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].outWall ? true : false);
                    }
                    else {
                        this.profileModels[this.allWallTypes[i]].kickLine.UpdateArcProfile(0, _kickLineSize, this.arcProfilePoints[this.allWallTypes[i]], this.profileModels[this.allWallTypes[i]].cutPlaneDir, _kickLineProfilePoints, _wallDoors, this.allWallTypes[i] == _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].outWall ? true : false);
                    }
                }
            }
        }
    }
    OnSelected() {
        let _currentHitModelType = this.dataServer.classesObj.currentSelectModel.GetSelectedModelType();
        //做一个模型的面选择框。-----------------------------------------------------------------
        if (this.wallMeshs[_currentHitModelType] == undefined) {
            console.error("还没有创建可供选择的模型。");
            return;
        }
        let _beHitModelCustomData = this.wallMeshs[_currentHitModelType].userData.customUserData;
        let _wireSelectedPoints = _beHitModelCustomData.wireSelectedPoints;
        this.dataServer.classesObj.wireSelectFrame.MakeWireSelectFrame(_wireSelectedPoints);
        //把场景里所有的门窗家具选择框都去掉。--------------------
        this.dataServer.classesObj.rayHitter.HideDoorWindowFurnitureSelectFrame();
        //把移动旋转工具取消激活掉。------------------------------
        this.dataServer.classesObj.modelTransformer.SetEnable(false);
        this.dataServer.classesObj.modelTransformer.ClearControlModel();
        //为右边的面板创建数据。-----------------------------------
        //let PanelData = this.dataServer.classesObj.propertiesMenuData.MakeWallData(this.paramsValues);
        //this.popServer.panelRight.emit(PanelData);
    }
    //更新石灰线的模型。================================================================
    UpdatePlasterCorniceProfileModel() {
        for (let i = 0; i < this.allWallTypes.length; i++) {
            //如果某些墙被销毁了，该墙对应的石灰线肯定要跟着被销毁吧。----------------------------------------
            if (this.wallMeshs[this.allWallTypes[i]] == undefined && this.HasPlasterCornice(this.allWallTypes[i])) {
                this.profileModels[this.allWallTypes[i]].plasterCornice.DisposeProfileModel();
                this.profileModels[this.allWallTypes[i]].plasterCornice = undefined;
            }
            //如果某墙体存在并且它本来就拥有石灰线，那么就开始更新该石灰线吧。----------------------------------
            if (this.wallMeshs[this.allWallTypes[i]] != undefined && this.HasPlasterCornice(this.allWallTypes[i])) {
                let _wall3D = this.getWall();
                //如果是直墙的话则为直墙创建石灰线。------------------------------------------------
                let _profileHeight = _wall3D.wallHeight - this.profileModels[this.allWallTypes[i]].plasterCorniceSize.y;
                let _plasterCorniceSize = this.profileModels[this.allWallTypes[i]].plasterCorniceSize;
                let _plasterCornicePoints = this.profileModels[this.allWallTypes[i]].plasterCornicePoints;
                let _plasterCorniceProfileMatIndex = this.paramsValues.plasterCorniceProfileMatIndex[this.allWallTypes[i]];
                if (this.MakeStarightOrArcWall(this.allWallTypes[i]) == true) {
                    if (this.isSwitching == true) {
                        this.profileModels[this.allWallTypes[i]].plasterCornice.MakeStraightProfile(_plasterCorniceProfileMatIndex, _profileHeight, _plasterCorniceSize, this.profileModels[this.allWallTypes[i]].profileDir, this.profileModels[this.allWallTypes[i]].cutPlaneDir, _plasterCornicePoints, []);
                    }
                    else {
                        this.profileModels[this.allWallTypes[i]].plasterCornice.UpdateStraightProfile(_profileHeight, _plasterCorniceSize, this.profileModels[this.allWallTypes[i]].profileDir, this.profileModels[this.allWallTypes[i]].cutPlaneDir, _plasterCornicePoints, []);
                    }
                }
                //如果是弧形墙的话则为弧形墙创建石灰线。---------------------------------------------
                else {
                    if (this.isSwitching == true) {
                        this.profileModels[this.allWallTypes[i]].plasterCornice.MakeArcProfile(_plasterCorniceProfileMatIndex, _profileHeight, _plasterCorniceSize, this.arcProfilePoints[this.allWallTypes[i]], this.profileModels[this.allWallTypes[i]].cutPlaneDir, _plasterCornicePoints, [], this.allWallTypes[i] == _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].outWall ? true : false);
                    }
                    else {
                        this.profileModels[this.allWallTypes[i]].plasterCornice.UpdateArcProfile(_profileHeight, _plasterCorniceSize, this.arcProfilePoints[this.allWallTypes[i]], this.profileModels[this.allWallTypes[i]].cutPlaneDir, _plasterCornicePoints, [], this.allWallTypes[i] == _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].outWall ? true : false);
                    }
                }
            }
        }
    }
    /**
     * 用来判断是否要创建直的墙，返回true代表创建的是直墙，返回false代表创建的是弧形墙。
     * @param _modelType
     */
    MakeStarightOrArcWall(_modelType) {
        let _ifMakeStraightWall = true;
        //如果墙有弧度且又是内墙或者外墙的话，则创建弧形墙，否则都创建直墙。--------------------
        if (this.getWall().arcDistance != 0) {
            if (_modelType == _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].inWall || _modelType == _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].outWall) {
                _ifMakeStraightWall = false;
            }
        }
        return _ifMakeStraightWall;
    }
}


/***/ }),

/***/ "./src/app/three/jDesign3D/JDW3D.ts":
/*!******************************************!*\
  !*** ./src/app/three/jDesign3D/JDW3D.ts ***!
  \******************************************/
/*! exports provided: JDW3D */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JDW3D", function() { return JDW3D; });
/* harmony import */ var _classes_dataStruct__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/dataStruct */ "./src/app/three/classes/dataStruct.ts");
/* harmony import */ var _svg_common_jdesign_JDWAbstract__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../svg/common/jdesign/JDWAbstract */ "./src/app/svg/common/jdesign/JDWAbstract.ts");
/* harmony import */ var _classes_MyUtil__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../classes/MyUtil */ "./src/app/three/classes/MyUtil.ts");




class JDW3D extends _svg_common_jdesign_JDWAbstract__WEBPACK_IMPORTED_MODULE_1__["JDWAbstract"] {
    constructor() {
        super(...arguments);
        //门和窗的框。-----------------------------------------------------------------
        this.doorWinFrame = null; //门框的所有模型都放在这里
        this.baywin = null; //飘窗的所有模型在这里。
        this.formerWidth = 0; //这个门框的原来宽度，用来判断模型的宽度是否被修改过没有。
        this.formerDeep = 0; //这个门框的原来的厚度，用来判断模型的厚度是否被修改过了。
        this.OnModelMove = []; //当这个模型在阿隆那边被拖动的时候触发的函数。
    }
    /**
     * 用来显示隐藏模型的选择框用的。===============================================
     * @param _show 设置为true则显示，设置为false则隐藏。
     */
    ShowWireFrame(_show) {
        this.wireFrame.material.visible = _show;
    }
    /**
     * 开始绑定门一系列的事件。========================================================
     */
    StartEvent() {
        this.act3D.start = () => {
        };
        this.act3D.move = () => {
            this.UpdateDoorWinPos(this.GetWinDoorPos(this.floorHeight));
            //如果这个门放到墙里面的时候。-------------------------------
            if (this.getwall() != undefined) {
                let _currentWall = this.getwall();
                //当把门从一面墙移动到另外一面墙。----------------------------------------------
                if (this.formerwall != null) {
                    if (this.formerwall.id != _currentWall.id) {
                        //请把另外一堵墙给填充回去。--------------------------------------------------
                        let _formerCowalls = this.formerwall.getCowallArr();
                        for (let i = 0; i < _formerCowalls.length; i++) {
                            //检查这个this.formerCowalls[i]是否存在场景里。
                            //如果formerCowall[i]还存在场景里，那就是从一面墙移动到另外一面墙的情况。
                            //如果这个formerCowall[i]不在场景里，那就是杨振龙自己帮我换了一个colwall了，那这个formerCowall[i]就不用补了。
                            if (this.jDataServer.cowalls[_formerCowalls[i].id] != undefined) {
                                //杨振龙在移动墙的时候有时候居然会产生新墙，它产生了新墙我得执行一下这一句，好保证他偷偷生成的墙我这边也做好实例化工作。
                                _formerCowalls[i].SetDataServerAndOthers(this.dataServer, this.popServer, this.jDataServer);
                                _formerCowalls[i].MakeWall(true);
                            }
                        }
                    }
                }
                //把这个门离开的那些cowall记录起来。-------------------------------------------------
                this.formerwall = _currentWall;
                //新的墙再进行挖洞。-----------------------------------------------------------------
                let _currentCowalls = _currentWall.getCowallArr();
                for (let i = 0; i < _currentCowalls.length; i++) {
                    //杨振龙在移动墙的时候有时候居然会产生新墙，它产生了新墙我得执行一下这一句，好保证他偷偷生成的墙我这边也做好实例化工作。
                    _currentCowalls[i].SetDataServerAndOthers(this.dataServer, this.popServer, this.jDataServer);
                    _currentCowalls[i].MakeWall(true);
                }
            }
            else {
                //把门从墙里扯出来的话，需要把门原来的洞口给封起来。---------------------
                if (this.formerwall != null) {
                    //检查一下这个wall是否还在场景里。-----------------------------------
                    if (this.jDataServer.walls[this.formerwall.id] != undefined) {
                        let _formerCowalls = this.formerwall.getCowallArr();
                        for (let i = 0; i < _formerCowalls.length; i++) {
                            //杨振龙在移动墙的时候有时候居然会产生新墙，它产生了新墙我得执行一下这一句，好保证他偷偷生成的墙我这边也做好实例化工作。
                            _formerCowalls[i].SetDataServerAndOthers(this.dataServer, this.popServer, this.jDataServer);
                            _formerCowalls[i].MakeWall(true);
                        }
                        this.formerwall = null;
                    }
                    else {
                        this.formerwall = null;
                    }
                }
            }
            //开始调用子类里的模型移动的方法。-------------------------------------
            for (let i = 0; i < this.OnModelMove.length; i++) {
                this.OnModelMove[i]();
            }
        };
        this.act3D.end = () => {
        };
    }
    /**
     * 获取门的当前位置，返回vector3对象。
     */
    // private getPos_Vector3() {
    //     return new THREE.Vector3(this.pos.x, 0, this.pos.y);
    // }
    //检查两个cowall的数组是否相等。================================================
    isColwallArrayTheSame(_colwallArray1, _colwallArray2) {
        let _theSame = true;
        //如果数组的长度不一致，则不会是一样的。---------------------
        if (_colwallArray1.length != _colwallArray2.length) {
            _theSame = false;
            return _theSame;
        }
        for (let i = 0; i < _colwallArray1.length; i++) {
            if (_colwallArray1[i].id != _colwallArray2[i].id) {
                _theSame = false;
                break;
            }
        }
        return _theSame;
    }
    /**
     * 提供给阿隆使用的销毁模型的方法。========================================
     */
    destory3D() {
        //先把门原来所在的墙的懂给封起来。------------
        if (this.formerwall != null) {
            let _formerCowalls = this.formerwall.getCowallArr();
            for (let i = 0; i < _formerCowalls.length; i++) {
                //如果这个formerCowall[i]不在场景里，那就是杨振龙自己帮我换了一个colwall了，那这个formerCowall[i]就不用补了。
                if (this.jDataServer.cowalls[_formerCowalls[i].id] != undefined) {
                    _formerCowalls[i].SetDataServerAndOthers(this.dataServer, this.popServer, this.jDataServer);
                    _formerCowalls[i].MakeWall(true);
                }
            }
        }
        //移动旋转工具也取消激活。--------------------------------------------
        this.dataServer.classesObj.modelTransformer.SetEnable(false);
        this.DestoryWinDoor(true);
    }
    OnSelected() {
        //设置无敌大平面的位置。------------------------------------------------------------------------------------------------------------
        this.dataServer.classesObj.rayHitModelList.bigPlane.setFromNormalAndCoplanarPoint(new THREE.Vector3(0, 1, 0), this.selector.position);
        //把面选择框销毁掉。-----------------------------------------------------------
        this.dataServer.classesObj.wireSelectFrame.destory3D();
        //把场景里所有的门窗家具选择框都去掉。--------------------
        this.dataServer.classesObj.rayHitter.HideDoorWindowFurnitureSelectFrame();
        //把当前模型的选择框显示出来。----------------------------
        this.ShowWireFrame(true);
        //家具门和窗都把移动旋转工具显示出来。------------------------------------------------
        this.dataServer.classesObj.modelTransformer.SetEnable(true);
        //设置当前被控制模型为被单击的模型。--------------------------------------------------
        this.dataServer.classesObj.modelTransformer.SetControlModel(this.selector);
        //设置移动旋转工具的位置。-----------------------------------------------------------
        this.dataServer.classesObj.modelTransformer.SetTransformerPos(this.selector.position);
        let _currentModelType = this.dataServer.classesObj.currentSelectModel.GetSelectedModelType();
        //窗户模型不可以使用移动旋转工具的旋转功能。但是可以使用垂直移动功能。--------------------------
        //  let PanelData;
        if (_currentModelType == _classes_dataStruct__WEBPACK_IMPORTED_MODULE_0__["ModelType"].window) {
            this.dataServer.classesObj.modelTransformer.SetRotatable(false);
            this.dataServer.classesObj.modelTransformer.SetVerticalMovable(true);
            // if (this.doorWinFrame != null) {
            //     PanelData = this.dataServer.classesObj.propertiesMenuData.MakeWinDoorData(this.doorWinFrame.paramsValues, "窗框贴图", "窗框轮廓线", ModelType.window);
            // }
        }
        //门既不能用旋转功能，也不能用垂直移动功能。-------------------------------------------------
        else if (_currentModelType == _classes_dataStruct__WEBPACK_IMPORTED_MODULE_0__["ModelType"].door) {
            this.dataServer.classesObj.modelTransformer.SetRotatable(false);
            this.dataServer.classesObj.modelTransformer.SetVerticalMovable(false);
            // if (this.doorWinFrame != null) {
            //     PanelData = this.dataServer.classesObj.propertiesMenuData.MakeWinDoorData(this.doorWinFrame.paramsValues, "门框贴图", "门框轮廓线", ModelType.door);
            // }
        }
        //飘窗不可以旋转，但是可以垂直移动。--------------------------------------------------------
        else if (_currentModelType == _classes_dataStruct__WEBPACK_IMPORTED_MODULE_0__["ModelType"].normalBayWindow) {
            this.dataServer.classesObj.modelTransformer.SetRotatable(false);
            this.dataServer.classesObj.modelTransformer.SetVerticalMovable(true);
            // if (this.baywin != null) {
            //     PanelData = this.dataServer.classesObj.propertiesMenuData.MakeNormalBaywinData(this.baywin.paramsValues);
            // }
        }
        //this.popServer.panelRight.emit(PanelData);
    }
    OnUnselected() {
        this.dataServer.classesObj.rayHitter.OnNothingHit();
    }
    /**
     * 用来做销毁门窗的自定义函数。=============================================
     * @param _destroyDAE 是否要销毁掉DAE模型？
     */
    DestoryWinDoor(_destroyDAE) {
        //把模型的选择器销毁掉。------------------------------------------
        if (this.selector != null) {
            this.dataServer.classesObj.rayHitModelList.RemoveRayHitModel(this.selector);
            this.dataServer.sceneCommonObj.scene.remove(this.selector);
            this.selector.geometry.dispose();
            this.selector = null;
        }
        //把模型的选择显示器销毁掉。---------------------------------------
        if (this.wireFrame != null) {
            this.dataServer.sceneCommonObj.scene.remove(this.wireFrame);
            this.wireFrame.geometry.dispose();
            this.wireFrame = null;
        }
        //把布尔用的那个几何体也删除掉。------------------------------------
        if (this.booleanModel != null) {
            this.dataServer.sceneCommonObj.scene.remove(this.booleanModel);
            this.booleanModel.geometry.dispose();
            this.booleanModel = null;
        }
        //把formerCowalls清空。-------------------------------------------
        this.formerwall = null;
        //把门框都销毁掉。-------------------------------------------------
        if (this.doorWinFrame != null) {
            this.doorWinFrame.DestroyDoorWinFrame();
            this.doorWinFrame = null;
        }
        //把普通飘窗也销毁掉。----------------------------------------------
        if (this.baywin != null) {
            this.baywin.DestroyBaywinModel();
            this.baywin = null;
        }
        //把门的DAE模型也销毁掉。----------------------------------------------
        if (_destroyDAE == true) {
            if (this.doorWinModel != null) {
                _classes_MyUtil__WEBPACK_IMPORTED_MODULE_2__["MyUtil"].DestroyDAEModel(this.dataServer.sceneCommonObj.scene, this.doorWinModel);
                this.doorWinModel = null;
            }
        }
        //把加载进度显示框也销毁掉。------------------------------------------
        if (this.preloadBox != null) {
            this.preloadBox.DisposePreloadBox();
            this.preloadBox = null;
        }
    }
    /**
     * 做一个空白的可随意拖动的门洞需要调用的初始化函数。
     */
    Init(_modelType) {
        //=============================================================================
        //开始创建一个用来选择窗用的box模型。---------------------------------------------------------
        this.selector = this.dataServer.classesObj.boxMaker.MakeBox(this.size.width, this.size.height3D, this.size.height * 1.2, true, true);
        this.selector.material = new THREE.MeshBasicMaterial({ color: 0xffff00, visible: false });
        this.dataServer.sceneCommonObj.scene.add(this.selector);
        //创建模型的外框，用来显示模型当前是否被选择的状态。-------------------------------------------
        this.wireFrame = this.dataServer.classesObj.boxMaker.MakeBox(this.size.width, this.size.height3D, this.size.height, true, true);
        this.wireFrame.material = new THREE.MeshBasicMaterial({ color: 0xffff00, wireframe: true, visible: false });
        this.dataServer.sceneCommonObj.scene.add(this.wireFrame);
        //把选择用的模型放到跟射线的碰撞列表里。---------------------------------------
        let _customUserData = new _classes_dataStruct__WEBPACK_IMPORTED_MODULE_0__["CustomUserData"]();
        _customUserData.longObj = this;
        _customUserData.modelType = _modelType;
        this.selector.userData.customUserData = _customUserData;
        this.dataServer.classesObj.rayHitModelList.AddRayHitModel(this.selector);
        //用来做门洞的布尔盒子是没有下面的面的。---------------------------------------
        let _booleanBoxHasBottom = true;
        if (_modelType == _classes_dataStruct__WEBPACK_IMPORTED_MODULE_0__["ModelType"].door) {
            _booleanBoxHasBottom = false;
        }
        //开始创建一个用来做窗布尔用的box模型。
        this.booleanModel = this.dataServer.classesObj.boxMaker.MakeBox(this.size.width, this.size.height3D, this.size.height, false, _booleanBoxHasBottom);
        this.dataServer.sceneCommonObj.scene.add(this.booleanModel);
        this.booleanModel.material.visible = false;
        //设置门窗都不能够用旋转工具来进行旋转。-------------------------------------
        this.dataServer.classesObj.modelTransformer.SetRotatable(false);
        //把移动旋转工具全部取消激活。-----------------------------------------------------
        this.dataServer.classesObj.modelTransformer.SetEnable(false);
        //清空移动旋转工具的当前控制模型。--------------------------------------------------
        this.dataServer.classesObj.modelTransformer.ClearControlModel();
        //选择二维图形的时候门窗也跟着被选中。--------------------------------------
        this.chooseFuncArr.push(() => {
            //设置当前选择的模型就是被击中的模型。-------------------------------
            this.dataServer.classesObj.currentSelectModel.Select(this.selector);
            this.OnSelected();
        });
        //在二维图形里取消选择的时候三维视图也跟着一并取消选择。-------------------
        this.noChooseFuncArr.push(() => {
            this.OnUnselected();
        });
        //阿隆调用的更新门位置的函数。----------------------------------------------------------------------------
        this.updateArr3D.push(() => {
            this.UpdatePos(this.floorHeight);
        });
        //记录一下门的宽度。---------------------------------------------------
        this.formerWidth = this.size.width;
        //记录一下门的深度。---------------------------------------------------
        this.formerDeep = this.size.height;
    }
    /**
     * 输入一个高度，获取门窗的真实位置，返回值是Vector3。=====================================
     * @param _height
     */
    GetWinDoorPos(_height) {
        _height = Math.max(_height, 0.0);
        let _windowPos = new THREE.Vector3(this.pos.x, this.floorHeight, this.pos.y);
        return _windowPos;
    }
    /**
     * 用来更新这个门窗所在的墙体。========================================================
     */
    UpdateWallBoolean() {
        //如果窗户被上下移动，窗户又确实在墙的里面的话，则更新窗洞吧。------
        if (this.getwall() != undefined) {
            //如果是在垂直方向上移动窗户，那么把墙洞也更新下吧。---------------
            let cowalls = this.getwall().getCowallArr();
            for (let i = 0; i < cowalls.length; i++) {
                cowalls[i].MakeWall(true);
            }
        }
    }
    /**
     * 用来更新门窗里一切东西的位置和旋转。=====================================
     */
    UpdateDoorWinPos(_pos) {
        //设置门框选择器的位置和旋转。----------------------------------------
        this.selector.position.copy(_pos);
        this.selector.rotation.y = -this.radian;
        //设置门框选择显示器的位置和旋转。-------------------------------------
        this.wireFrame.position.copy(_pos);
        this.wireFrame.rotation.y = -this.radian;
        //设置门框布尔模型的位置和旋转。---------------------------------------
        this.booleanModel.position.copy(_pos);
        this.booleanModel.rotation.y = -this.radian;
        //更新移动旋转工具的位置。---------------------------------------------
        this.dataServer.classesObj.modelTransformer.SetTransformerPos(_pos);
        //设置门框的模型的位置和旋转。------------------------------------------
        if (this.doorWinFrame != null) {
            this.doorWinFrame.SetPosition(_pos);
            this.doorWinFrame.SetRotation(-this.radian);
        }
        //更新模型加载进度显示器的位置和旋转。--------------------------------
        if (this.preloadBox != null) {
            this.preloadBox.UpdatePos(_pos);
            this.preloadBox.UpdateYRadian(-this.radian);
        }
        //设置普通飘窗模型的位置和旋转。----------------------------------------
        if (this.baywin != null) {
            this.baywin.SetPosition(_pos);
            this.baywin.SetRotation(-this.radian);
        }
        if (this.doorWinModel != null) {
            this.doorWinModel.position.copy(_pos);
            this.doorWinModel.rotation.y = -this.radian;
        }
    }
    /**
     * 这个提供给阿隆来移动门窗的模型。同时也是提供给垂直移动工具移动门窗模型用的。====================
     * @param _height
     */
    UpdatePos(_height) {
        if (_height != this.floorHeight) {
            this.floorHeight = _height;
            this.UpdateWallBoolean();
        }
        this.UpdateDoorWinPos(this.GetWinDoorPos(_height));
    }
}


/***/ }),

/***/ "./src/app/three/jDesign3D/JDoor3D.ts":
/*!********************************************!*\
  !*** ./src/app/three/jDesign3D/JDoor3D.ts ***!
  \********************************************/
/*! exports provided: JDoor3D */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JDoor3D", function() { return JDoor3D; });
/* harmony import */ var _svg_common_jdesign_JDoor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../svg/common/jdesign/JDoor */ "./src/app/svg/common/jdesign/JDoor.ts");
/* harmony import */ var _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../classes/dataStruct */ "./src/app/three/classes/dataStruct.ts");
/* harmony import */ var _classes_DoorWindowFrame__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../classes/DoorWindowFrame */ "./src/app/three/classes/DoorWindowFrame.ts");
/* harmony import */ var _classes_MyUtil__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../classes/MyUtil */ "./src/app/three/classes/MyUtil.ts");
/* harmony import */ var _classes_PreloadBox__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../classes/PreloadBox */ "./src/app/three/classes/PreloadBox.ts");
/*
 作者：张建。
 类说明：本类就是用来专门做门用的。
*/





class JDoor3D extends _svg_common_jdesign_JDoor__WEBPACK_IMPORTED_MODULE_0__["JDoor"] {
    constructor() {
        super(...arguments);
        this.tempDaeModelUrl = "https://www.3dhome360.com/LZN/model/door/door3/door3.DAE";
    }
    SetDataServerAndOthers(_dataServer, _popServer, _jDataServer) {
        if (this.dataServer != undefined) {
            return;
        }
        this.dataServer = _dataServer;
        this.popServer = _popServer;
        this.jDataServer = _jDataServer;
        this.OnModelMove.push(this.OnDoorBeMove.bind(this));
    }
    /**
     * 当这个门的模型被阿隆那边移动的时候触发的函数。==============================================
     */
    OnDoorBeMove() {
        //如果门存储的宽度跟目前的宽度不相等，代表门的宽度被缩放过了。--------------------------
        if (this.formerWidth != this.size.width ||
            this.formerDeep != this.size.height) {
            console.log("重构门");
            this.MakeDoor(false);
            this.UpdateDoorWinPos(this.GetWinDoorPos(this.floorHeight));
            let _cowalls = this.getwall().getCowallArr();
            for (let i = 0; i < _cowalls.length; i++) {
                _cowalls[i].MakeWall(true);
            }
        }
    }
    /**
     *
     * @param _loadDae 创建门的时候是否要加载DAE模型？
     */
    MakeDoor(_loadDae) {
        //先把前面的门窗销毁掉咯。--------------------------------------------
        this.DestoryWinDoor(_loadDae);
        //构建基础窗洞的一些步骤。--------------------------------------------
        //this.floorHeight = 0;
        //初始化一些公共的步骤。----------------------------------------------
        this.Init(_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].door);
        //设置门是不能在垂直方向上移动的。-------------------------------------
        this.dataServer.classesObj.modelTransformer.SetVerticalMovable(false);
        //开始创建门框模型。------------------------------------------------------------------------
        //----------------------------------------------------------------------------------------
        let _allDoorFrameDatas = this.jDataServer.json.doorFrame;
        //第一个门框的一圈点的数据。----------------------------------
        if (this.isHaveFrame == true) {
            let _firstDoorFrameProfileData = _allDoorFrameDatas[0].vertexData;
            this.MakeDoorFrame(_firstDoorFrameProfileData);
        }
        //门框的厚度，不是整个门框的厚度哦。----------------------------
        let _doorFrameWidth = 0;
        if (this.doorWinFrame != null) {
            _doorFrameWidth = this.doorWinFrame.frameWidth;
        }
        //控制门的宽度深度高度。-----------------------------------------
        let _newWidth = this.size.width - 2 * _doorFrameWidth;
        let _newHeight = this.size.height3D - _doorFrameWidth;
        let _newDeep = 60;
        //开始加载门的模型。---------------------------------------------
        if (this.modelUrl != undefined) {
            if (_loadDae == true) {
                //创建显示加载进度的盒子。-----------------------------------------------------
                this.preloadBox = new _classes_PreloadBox__WEBPACK_IMPORTED_MODULE_4__["PreloadBox"](this.dataServer);
                this.preloadBox.MakeBox(_newWidth, _newHeight, _newDeep);
                //开始加载DAE模型进来。--------------------------------------------------------
                _classes_MyUtil__WEBPACK_IMPORTED_MODULE_3__["MyUtil"].LoadDaeClampInSize(this.dataServer, this.modelUrl, {
                    width: _newWidth,
                    height: _newHeight,
                    deep: _newDeep
                }, (_model) => {
                    // console.log(this.preloadBox);
                    // console.log(this.preloadBox);
                    if (this.preloadBox != null) {
                        this.doorWinModel = new THREE.Object3D();
                        this.dataServer.sceneCommonObj.scene.add(this.doorWinModel);
                        this.doorWinModel.add(_model);
                        this.doorWinModel.position.copy(this.GetWinDoorPos(this.floorHeight));
                        this.doorWinModel.rotation.y = -this.radian;
                        this.preloadBox.DisposePreloadBox();
                    }
                }, (_progress) => {
                    if (this.preloadBox != null) {
                        this.preloadBox.SetProgress(_progress);
                    }
                });
            }
            //如果不加载模型，那起码把模型的尺寸稍微修改一下吧。--------------------------
            else {
                if (this.doorWinModel != null) {
                    _classes_MyUtil__WEBPACK_IMPORTED_MODULE_3__["MyUtil"].ClampModelInSize(this.doorWinModel.children[0], {
                        width: _newWidth,
                        height: _newHeight,
                        deep: _newDeep
                    });
                }
            }
        }
    }
    /**
     * 创建门框的函数。====================================================================
     * @param _profileData 里面的数据是[[1,2],[3,4],[5,6]]
     */
    MakeDoorFrame(_profileData) {
        if (this.doorWinFrame == null) {
            this.doorWinFrame = new _classes_DoorWindowFrame__WEBPACK_IMPORTED_MODULE_2__["DoorWindowFrame"](this.dataServer, this.jDataServer);
            this.doorWinFrame.paramsValues.profileMaterialIndex[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].door] = 0;
            this.doorWinFrame.paramsValues.profileShapeIndex[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].door] = 0;
        }
        this.doorWinFrame.MakeFrame(_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].door, this.size.width, this.size.height3D, this.size.height, _profileData, false);
    }
}


/***/ }),

/***/ "./src/app/three/jDesign3D/JFloor3D.ts":
/*!*********************************************!*\
  !*** ./src/app/three/jDesign3D/JFloor3D.ts ***!
  \*********************************************/
/*! exports provided: JFloor3D */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JFloor3D", function() { return JFloor3D; });
/* harmony import */ var _svg_common_jdesign_JFloor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../svg/common/jdesign/JFloor */ "./src/app/svg/common/jdesign/JFloor.ts");
/* harmony import */ var _classes_MyUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../classes/MyUtil */ "./src/app/three/classes/MyUtil.ts");
/* harmony import */ var _classes_dataStruct__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../classes/dataStruct */ "./src/app/three/classes/dataStruct.ts");
/*
 作者：张建。
 类说明：这里用来创建地板模型。
*/



class JFloor3D extends _svg_common_jdesign_JFloor__WEBPACK_IMPORTED_MODULE_0__["JFloor"] {
    constructor() {
        super(...arguments);
        this.floorMesh = null;
        this.floorGeometry = null;
        this.oldData = {}; //用来和新的数据做比对，检查这个oldData是否要更新。
        this.floorTexture = null; //贴在地板上的贴图。
        this.paramsValues = {
            materialIndex: [],
        };
    }
    //因为我不能实例化它，只能把dataServer等需要用到的东西先给我传递进来。===============================================
    SetDataServerAndOthers(_dataServer, _domServer, _popServer, _jDataServer) {
        if (this.dataServer != undefined) {
            return;
        }
        this.dataServer = _dataServer;
        this.domServer = _domServer;
        this.popServer = _popServer;
        this.jDataServer = _jDataServer;
        if (this.paramsValues.materialIndex[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_2__["ModelType"].floor] == undefined) {
            this.paramsValues.materialIndex[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_2__["ModelType"].floor] = 0;
        }
    }
    //用来构建地板模型的方法。
    MakeFloor() {
        //完全没有改变的地板不需要进行下面的重建工作。---------------
        if (this.IfVertexesChange() == false) {
            return;
        }
        //先把前面的地板销毁掉吧。
        this.DisposeFloor();
        //地板的一圈点。数据结构是[{x:0,y:1},{x:0,y:1},{x:0,y:1}]
        let _floorVertexes = this.GetFloorRingVertexes();
        this.oldData._floorVertexes = _floorVertexes;
        let _floorVertexList = [];
        for (let i = 0; i < _floorVertexes.length; i++) {
            _floorVertexList.push(_floorVertexes[i].x);
            _floorVertexList.push(_floorVertexes[i].y);
        }
        let vertexIndex = earcut(_floorVertexList);
        //计算地板的所有顶点数据。----------------------------
        let _floorVertexesV3 = [];
        for (let i = 0; i < _floorVertexes.length; i++) {
            _floorVertexesV3.push(new THREE.Vector3(_floorVertexes[i].x, 0, _floorVertexes[i].y));
        }
        //计算地板的所有Face3数据。---------------------------
        let _floorFaces = [];
        for (let i = 0; i < vertexIndex.length; i += 3) {
            _floorFaces.push(new THREE.Face3(vertexIndex[i], vertexIndex[i + 2], vertexIndex[i + 1]));
        }
        //计算地板的所有UV数据。------------------------------
        let _floorUvs = [[]];
        for (let i = 0; i < _floorFaces.length; i++) {
            let _oneUV = [];
            _oneUV.push(new THREE.Vector2(_floorVertexesV3[_floorFaces[i].a].x / 2000, _floorVertexesV3[_floorFaces[i].a].z / 2000));
            _oneUV.push(new THREE.Vector2(_floorVertexesV3[_floorFaces[i].b].x / 2000, _floorVertexesV3[_floorFaces[i].b].z / 2000));
            _oneUV.push(new THREE.Vector2(_floorVertexesV3[_floorFaces[i].c].x / 2000, _floorVertexesV3[_floorFaces[i].c].z / 2000));
            _floorUvs[0].push(_oneUV);
        }
        this.floorGeometry = new THREE.Geometry();
        this.floorGeometry.vertices = _floorVertexesV3;
        this.floorGeometry.faces = _floorFaces;
        this.floorGeometry.faceVertexUvs = _floorUvs;
        this.floorGeometry.computeFaceNormals();
        this.floorGeometry.mergeVertices();
        let _floorMapIndex = this.paramsValues.materialIndex[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_2__["ModelType"].floor];
        if (this.floorTexture == null) {
            this.floorTexture = this.dataServer.loaders.textureLoader.load(this.jDataServer.json.floorPics[_floorMapIndex]);
            this.floorTexture.wrapS = THREE.RepeatWrapping;
            this.floorTexture.wrapT = THREE.RepeatWrapping;
            //修改杨振龙2D部分的地板贴图。-----------------------------------------------
            let _path = this.jDataServer.json.floorPics[_floorMapIndex];
            this.Set2DMap(_path, 2000, 2000);
        }
        this.floorMesh = new THREE.Mesh(this.floorGeometry, new THREE.MeshPhongMaterial({ map: this.floorTexture }));
        //绑定杨振龙创建的那个对象。--------------------------------
        let customUserData = new _classes_dataStruct__WEBPACK_IMPORTED_MODULE_2__["CustomUserData"]();
        customUserData.longObj = this;
        customUserData.modelType = _classes_dataStruct__WEBPACK_IMPORTED_MODULE_2__["ModelType"].floor;
        customUserData.wireSelectedPoints = _floorVertexesV3;
        this.floorMesh.userData.customUserData = customUserData;
        this.dataServer.classesObj.rayHitModelList.AddRayHitModel(this.floorMesh);
        this.dataServer.sceneCommonObj.scene.add(this.floorMesh);
    }
    /**
    * 把这个floor上的所有的地板的模型销毁掉。
    */
    DisposeFloor() {
        if (this.floorMesh != null) {
            this.dataServer.classesObj.rayHitModelList.RemoveRayHitModel(this.floorMesh);
            this.dataServer.sceneCommonObj.scene.remove(this.floorMesh);
            delete this.floorMesh.userData.customUserData;
            this.floorMesh = null;
        }
        if (this.floorGeometry != null) {
            this.floorGeometry.dispose();
            this.floorGeometry = null;
        }
    }
    /**
         * 检查当前floor3D对象的四周顶点是否有变化。用来决定该地板要不要更新。返回true代表这个地板需要重建，返回false代表不用-----------------------------
         */
    IfVertexesChange() {
        // let _theRoom: JRoom3D = this.getRoom();
        if (this.oldData._floorVertexes == undefined) {
            return true;
        }
        else {
            if (_classes_MyUtil__WEBPACK_IMPORTED_MODULE_1__["MyUtil"].IfArrayTheSame(this.oldData._floorVertexes, this.getInLine(), ["x", "y"])) {
                return false;
            }
            else {
                return true;
            }
        }
    }
    /**
     * 给阿隆调用的，销毁地板3D模型的自定义函数。======================
     */
    destory3D() {
        this.DisposeFloor();
    }
    /**
     * 修改地板地图的自定义函数。=====================================
     * @param _path 地板要切换成的贴图的路径。
     */
    SetModelTexture(_path) {
        this.floorTexture.image.src = _path;
        this.floorTexture.image.onload = () => {
            this.floorTexture.needsUpdate = true;
        };
        //修改杨振龙2D部分的地板贴图。-----------------------------------------------
        this.Set2DMap(_path, 2000, 2000);
    }
    //提供给杨松岭的，告知这个地板当前是获取哪一张贴图。---------------------------------
    GetMaterialSelectIndex() {
        return this.paramsValues.materialIndex[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_2__["ModelType"].floor];
    }
    //提供给杨松岭，设置地板的贴图。----------------------------------------------------
    SetMaterialSelectIndex(_index) {
        this.paramsValues.materialIndex[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_2__["ModelType"].floor] = _index;
    }
    //给杨军龙那边做还原贴图调用的。
    // public SetMaterialByIndex(_index) {
    //     // let _textureUrl=this.jDataServer.json.floorPics[_index];
    //     // this.SetModelTexture(_textureUrl);
    // }
    //修改杨振龙2D部分的地板贴图的自定义函数。-----------------------------------------------
    Set2DMap(_path, _width, _height) {
        this.imgUrl = _path;
        this.size = {
            width: _width,
            height: _height
        };
        this.domServer.svgRoom.emit();
    }
    OnSelected() {
        //产生一个面选择框。-----------------------------------------------------------------------
        let _beHitModelCustomData = this.floorMesh.userData.customUserData;
        let _wireSelectedPoints = _beHitModelCustomData.wireSelectedPoints;
        this.dataServer.classesObj.wireSelectFrame.MakeWireSelectFrame(_wireSelectedPoints);
        //把场景里所有的门窗家具选择框都去掉。--------------------
        this.dataServer.classesObj.rayHitter.HideDoorWindowFurnitureSelectFrame();
        //把移动旋转工具取消激活掉。------------------------------
        this.dataServer.classesObj.modelTransformer.SetEnable(false);
        this.dataServer.classesObj.modelTransformer.ClearControlModel();
        //为右边的面板创建数据。-----------------------------------
        // let PanelData = this.dataServer.classesObj.propertiesMenuData.MakeFloorData(this.paramsValues);
        //this.popServer.panelRight.emit(PanelData);
    }
    /**
     * 获取地板上的一圈的顶点。返回的数值要求是[{x:0,y:1},{x:0,y:1}]==================================
     */
    GetFloorRingVertexes() {
        let _returnPoints = [];
        let _allCowalls = this.getRoom().getCowallArrBySort();
        for (let i = 0; i < _allCowalls.length; i++) {
            let _colwall3D = _allCowalls[i];
            let _theWall = _colwall3D.getWall();
            if (_theWall.arcDistance != 0) {
                let _allPoints = _colwall3D.arcProfilePoints[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_2__["ModelType"].inWall];
                for (let j = 0; j < _allPoints.length; j++) {
                    _returnPoints.push({ x: _allPoints[j].x, y: _allPoints[j].z });
                }
            }
            else {
                let _allPoints = _colwall3D.getInLine();
                _returnPoints.push(_allPoints[0]);
                _returnPoints.push(_allPoints[1]);
            }
        }
        return _returnPoints;
    }
}


/***/ }),

/***/ "./src/app/three/jDesign3D/JFloorplan3D.ts":
/*!*************************************************!*\
  !*** ./src/app/three/jDesign3D/JFloorplan3D.ts ***!
  \*************************************************/
/*! exports provided: JFloorplan3D */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JFloorplan3D", function() { return JFloorplan3D; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _svg_common_jdesign_JFloorplan__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../svg/common/jdesign/JFloorplan */ "./src/app/svg/common/jdesign/JFloorplan.ts");


class JFloorplan3D extends _svg_common_jdesign_JFloorplan__WEBPACK_IMPORTED_MODULE_1__["JFloorplan"] {
    constructor(obj, dataService) {
        super(obj, dataService);
        this.dataService = dataService;
    }
}
JFloorplan3D.ctorParameters = () => [
    { type: _svg_common_jdesign_JFloorplan__WEBPACK_IMPORTED_MODULE_1__["JFloorplanInitType"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] }
];


/***/ }),

/***/ "./src/app/three/jDesign3D/JFurniture3D.ts":
/*!*************************************************!*\
  !*** ./src/app/three/jDesign3D/JFurniture3D.ts ***!
  \*************************************************/
/*! exports provided: JFurniture3D */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JFurniture3D", function() { return JFurniture3D; });
/* harmony import */ var _svg_common_jdesign_JFurniture__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../svg/common/jdesign/JFurniture */ "./src/app/svg/common/jdesign/JFurniture.ts");
/* harmony import */ var _classes_MyUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../classes/MyUtil */ "./src/app/three/classes/MyUtil.ts");
/* harmony import */ var _classes_dataStruct__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../classes/dataStruct */ "./src/app/three/classes/dataStruct.ts");
/* harmony import */ var _classes_PreloadBox__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../classes/PreloadBox */ "./src/app/three/classes/PreloadBox.ts");
/* harmony import */ var _classes_HGModel_HGWardrobeLoader__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../classes/HGModel/HGWardrobeLoader */ "./src/app/three/classes/HGModel/HGWardrobeLoader.ts");





class JFurniture3D extends _svg_common_jdesign_JFurniture__WEBPACK_IMPORTED_MODULE_0__["JFurniture"] {
    SetDataServerAndOthers(_dataServer, _hgModelServer, _popServer) {
        this.FatherSetDataServerAndOthers(_dataServer, _popServer);
        //初始化map加载器吧。------------------------------------------------
        if (this.dataServer.loaders.wardrobeLoader == null) {
            this.dataServer.loaders.wardrobeLoader = new _classes_HGModel_HGWardrobeLoader__WEBPACK_IMPORTED_MODULE_4__["HGWardrobeLoader"](_hgModelServer);
        }
    }
    MakeFurniture() {
        //构架家具的父对象。-----------------------------
        this.furnitureFarther = new THREE.Object3D();
        this.dataServer.sceneCommonObj.scene.add(this.furnitureFarther);
        let _modelExtension = (_classes_MyUtil__WEBPACK_IMPORTED_MODULE_1__["MyUtil"].getExtensionName(this.url3D));
        //开始加载dae模型。------------------------------
        if (_modelExtension == "DAE") {
            _classes_MyUtil__WEBPACK_IMPORTED_MODULE_1__["MyUtil"].LoadDaeClampInSize(this.dataServer, this.url3D, {
                width: this.size.width,
                height: this.size.height3D,
                deep: this.size.height
            }, (_model) => {
                this.furnitureFarther.add(_model);
                this.preloadBox.DisposePreloadBox();
            }, (_progress) => {
                this.preloadBox.SetProgress(_progress);
            });
        }
        else if (_modelExtension == "map") {
            _classes_MyUtil__WEBPACK_IMPORTED_MODULE_1__["MyUtil"].LoadMapClampInSize(this.dataServer, this.url3D, {
                width: this.size.width,
                height: this.size.height3D,
                deep: this.size.height
            }, (_model) => {
                this.furnitureFarther.add(_model);
                this.preloadBox.DisposePreloadBox();
            }, (_progress) => {
                this.preloadBox.SetProgress(_progress);
            });
        }
        //创建一个选择器。-------------------------------
        this.selector = this.dataServer.classesObj.boxMaker.MakeBox(this.size.width, this.size.height3D, this.size.height, true, true);
        this.selector.material = new THREE.MeshBasicMaterial({ color: 0xffff00, visible: false });
        this.dataServer.sceneCommonObj.scene.add(this.selector);
        //把选择用的模型放到跟射线的碰撞列表里。---------------------------------------
        let _customUserData = new _classes_dataStruct__WEBPACK_IMPORTED_MODULE_2__["CustomUserData"]();
        _customUserData.longObj = this;
        _customUserData.modelType = _classes_dataStruct__WEBPACK_IMPORTED_MODULE_2__["ModelType"].furniture;
        this.selector.userData.customUserData = _customUserData;
        this.dataServer.classesObj.rayHitModelList.AddRayHitModel(this.selector);
        //创建显示加载进度的盒子。-----------------------------------------------------
        this.preloadBox = new _classes_PreloadBox__WEBPACK_IMPORTED_MODULE_3__["PreloadBox"](this.dataServer);
        this.preloadBox.MakeBox(this.size.width, this.size.height3D, this.size.height);
        //创建模型的外框，用来显示模型当前是否被选择的状态。-------------------------------------------
        this.wireFrame = this.dataServer.classesObj.boxMaker.MakeBox(this.size.width, this.size.height3D, this.size.height, true, true);
        this.wireFrame.material = new THREE.MeshBasicMaterial({ color: 0xffff00, wireframe: true, visible: false });
        this.dataServer.sceneCommonObj.scene.add(this.wireFrame);
        //换算好家具模型距离地面的高度。-----------------------------------------------------------
        if (this.floorHeight != undefined) {
            if (this.floorHeight <= 0) {
                this.floorHeight = 2800 + this.floorHeight - this.size.height3D;
            }
        }
        else {
            this.floorHeight = 0;
        }
        //设置移动旋转工具是否可以旋转是否可以垂直移动。----------------------------
        this.dataServer.classesObj.modelTransformer.SetRotatable(true);
        this.dataServer.classesObj.modelTransformer.SetVerticalMovable(true);
        //把移动旋转工具全部取消激活。--------------------------------------
        this.dataServer.classesObj.modelTransformer.SetEnable(false);
        //清空移动旋转工具的当前控制模型。----------------------------------
        this.dataServer.classesObj.modelTransformer.ClearControlModel();
    }
    /**
        * 销毁家具的模型。=================================================================
        */
    DisposeFurniture() {
        //清空一切的选择。-------------------------------------------------
        this.dataServer.classesObj.currentSelectModel.DeselectAll();
        //把移动旋转工具全部取消激活。--------------------------------------
        this.dataServer.classesObj.modelTransformer.SetEnable(false);
        //清空移动旋转工具的当前控制模型。----------------------------------
        this.dataServer.classesObj.modelTransformer.ClearControlModel();
        //删除模型用来显示外框的东西。----------------------------------------
        this.dataServer.sceneCommonObj.scene.remove(this.wireFrame);
        this.wireFrame.material.dispose();
        this.wireFrame.geometry.dispose();
        //把预加载的盒子也删除掉。--------------------------------------------
        this.preloadBox.DisposePreloadBox();
        //删除用来做射线碰撞的盒子。------------------------------------------
        this.dataServer.classesObj.rayHitModelList.RemoveRayHitModel(this.selector);
        delete this.selector.userData.customUserData;
        this.dataServer.sceneCommonObj.scene.remove(this.selector);
        this.selector.geometry.dispose();
        this.selector.material.dispose();
        //删除家具的总的父物体。------------------------------------------------
        _classes_MyUtil__WEBPACK_IMPORTED_MODULE_1__["MyUtil"].DestroyDAEModel(this.dataServer.sceneCommonObj.scene, this.furnitureFarther);
    }
    /**
     * 阿隆删除家具的时候会调用这个函数。===========================================
     */
    destory3D() {
        this.DisposeFurniture();
    }
}


/***/ }),

/***/ "./src/app/three/jDesign3D/JGeometry3D.ts":
/*!************************************************!*\
  !*** ./src/app/three/jDesign3D/JGeometry3D.ts ***!
  \************************************************/
/*! exports provided: JGeometry3D */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JGeometry3D", function() { return JGeometry3D; });
/* harmony import */ var _svg_common_jdesign_JGeometry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../svg/common/jdesign/JGeometry */ "./src/app/svg/common/jdesign/JGeometry.ts");
/* harmony import */ var _classes_MyUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../classes/MyUtil */ "./src/app/three/classes/MyUtil.ts");


class JGeometry3D extends _svg_common_jdesign_JGeometry__WEBPACK_IMPORTED_MODULE_0__["JGeometry"] {
    constructor() {
        super(...arguments);
        this.OnModelMove = []; //当这个模型在阿隆那边被拖动的时候触发的函数。
    }
    FatherSetDataServerAndOthers(_dataServer, _popServer) {
        if (this.dataServer != undefined) {
            return;
        }
        this.dataServer = _dataServer;
        this.popServer = _popServer;
        this.chooseFuncArr.push(() => {
            //设置当前选择的模型就是被击中的模型。-------------------------------
            this.dataServer.classesObj.currentSelectModel.Select(this.selector);
            this.OnSelected();
        });
        this.noChooseFuncArr.push(() => {
            this.OnUnselected();
        });
    }
    //当家具被选择中的时候触发的函数。---------------------
    OnSelected() {
        //设置无敌大平面的位置。------------------------------------------------------------------------------------------------------------
        this.dataServer.classesObj.rayHitModelList.bigPlane.setFromNormalAndCoplanarPoint(new THREE.Vector3(0, 1, 0), this.selector.position);
        //把面选择框取消显示。-------------------------
        this.dataServer.classesObj.wireSelectFrame.destory3D();
        //把场景里所有的门窗家具选择框都去掉。--------------------
        this.dataServer.classesObj.rayHitter.HideDoorWindowFurnitureSelectFrame();
        //把当前模型的选择框显示出来。----------------------------
        this.ShowWireFrame(true);
        //家具门和窗都把移动旋转工具显示出来。------------------------------------------------
        this.dataServer.classesObj.modelTransformer.SetEnable(true);
        //设置当前被控制模型为被单击的模型。--------------------------------------------------
        this.dataServer.classesObj.modelTransformer.SetControlModel(this.selector);
        //设置移动旋转工具的位置。-----------------------------------------------------------
        this.dataServer.classesObj.modelTransformer.SetTransformerPos(this.selector.position);
        //设置移动旋转工具的权限。-----------------------------------------------------------
        this.dataServer.classesObj.modelTransformer.SetRotatable(true);
        if (this.type == "furniture") {
            //家具对象可以使用垂直移动工具在垂直方向上移动。--------------
            this.dataServer.classesObj.modelTransformer.SetVerticalMovable(true);
        }
        else {
            //烟道对象不可以使用垂直移动工具在垂直方向上移动。--------------
            this.dataServer.classesObj.modelTransformer.SetVerticalMovable(false);
        }
    }
    //当家具取消选择的时候触发的函数。-------------------
    OnUnselected() {
        this.dataServer.classesObj.rayHitter.OnNothingHit();
    }
    StartEvent() {
        this.act3D.start = () => {
        };
        this.act3D.move = () => {
            this.UpdatePos(this.floorHeight);
            //开始调用子类里的模型移动的方法。-------------------------------------
            for (let i = 0; i < this.OnModelMove.length; i++) {
                this.OnModelMove[i]();
            }
        };
        this.act3D.end = () => {
        };
    }
    /**
     * 更新模型的位置。
     */
    UpdatePos(_height) {
        this.floorHeight = _height;
        this.floorHeight = _classes_MyUtil__WEBPACK_IMPORTED_MODULE_1__["MyUtil"].Clamp(this.floorHeight, 0.0, Infinity);
        let _wantPos = this.getPos_Vector3(this.floorHeight);
        //更新用来选择家具模型的位置和旋转。----------------------------------
        this.selector.position.copy(_wantPos);
        this.selector.rotation.y = -this.radian;
        //更新模型父对象的位置和旋转。---------------------------------------
        this.furnitureFarther.position.copy(_wantPos);
        this.furnitureFarther.rotation.y = -this.radian;
        //更新模型加载进度显示器的位置和旋转。--------------------------------
        if (this.preloadBox != undefined) {
            this.preloadBox.UpdatePos(_wantPos);
            this.preloadBox.UpdateYRadian(-this.radian);
        }
        //更新模型选择外框的位置和旋转。---------------------------------------
        this.wireFrame.position.copy(_wantPos);
        this.wireFrame.rotation.y = -this.radian;
        //更新移动旋转工具的位置。---------------------------------------------
        this.dataServer.classesObj.modelTransformer.SetTransformerPos(_wantPos);
    }
    /**
    * 获取门的当前位置，返回vector3对象。================================================
    */
    getPos_Vector3(_height) {
        return new THREE.Vector3(this.pos.x, _height, this.pos.y);
    }
    /**
       * 用来显示隐藏模型的选择框用的。===============================================
       * @param _show 设置为true则显示，设置为false则隐藏。
       */
    ShowWireFrame(_show) {
        this.wireFrame.material.visible = _show;
    }
}


/***/ }),

/***/ "./src/app/three/jDesign3D/JLUWin3D.ts":
/*!*********************************************!*\
  !*** ./src/app/three/jDesign3D/JLUWin3D.ts ***!
  \*********************************************/
/*! exports provided: JLUWin3D */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JLUWin3D", function() { return JLUWin3D; });
/* harmony import */ var _svg_common_jdesign_JLUWin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../svg/common/jdesign/JLUWin */ "./src/app/svg/common/jdesign/JLUWin.ts");

class JLUWin3D extends _svg_common_jdesign_JLUWin__WEBPACK_IMPORTED_MODULE_0__["JLUWin"] {
}


/***/ }),

/***/ "./src/app/three/jDesign3D/JLWin3D.ts":
/*!********************************************!*\
  !*** ./src/app/three/jDesign3D/JLWin3D.ts ***!
  \********************************************/
/*! exports provided: JLWin3D */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JLWin3D", function() { return JLWin3D; });
/* harmony import */ var _svg_common_jdesign_JLWin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../svg/common/jdesign/JLWin */ "./src/app/svg/common/jdesign/JLWin.ts");

class JLWin3D extends _svg_common_jdesign_JLWin__WEBPACK_IMPORTED_MODULE_0__["JLWin"] {
}


/***/ }),

/***/ "./src/app/three/jDesign3D/JParamsModel3D.ts":
/*!***************************************************!*\
  !*** ./src/app/three/jDesign3D/JParamsModel3D.ts ***!
  \***************************************************/
/*! exports provided: JParamsModel3D */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JParamsModel3D", function() { return JParamsModel3D; });
/* harmony import */ var _svg_common_jdesign_JParamsModel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../svg/common/jdesign/JParamsModel */ "./src/app/svg/common/jdesign/JParamsModel.ts");

class JParamsModel3D extends _svg_common_jdesign_JParamsModel__WEBPACK_IMPORTED_MODULE_0__["JParamsModel"] {
}


/***/ }),

/***/ "./src/app/three/jDesign3D/JPoint3D.ts":
/*!*********************************************!*\
  !*** ./src/app/three/jDesign3D/JPoint3D.ts ***!
  \*********************************************/
/*! exports provided: JPoint3D */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JPoint3D", function() { return JPoint3D; });
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _svg_common_jdesign_JPoint__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../svg/common/jdesign/JPoint */ "./src/app/svg/common/jdesign/JPoint.ts");



class JPoint3D extends _svg_common_jdesign_JPoint__WEBPACK_IMPORTED_MODULE_2__["JPoint"] {
    constructor(obj, dataService, DUService) {
        super(obj, dataService, DUService);
        this.dataService = dataService;
        this.DUService = DUService;
    }
}
JPoint3D.ctorParameters = () => [
    { type: _svg_common_jdesign_JPoint__WEBPACK_IMPORTED_MODULE_2__["JPointInitType"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_0__["JdesignDataService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_1__["JdesignUtil2dService"] }
];


/***/ }),

/***/ "./src/app/three/jDesign3D/JRoof3D.ts":
/*!********************************************!*\
  !*** ./src/app/three/jDesign3D/JRoof3D.ts ***!
  \********************************************/
/*! exports provided: JRoof3D */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JRoof3D", function() { return JRoof3D; });
/* harmony import */ var _svg_common_jdesign_JRoof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../svg/common/jdesign/JRoof */ "./src/app/svg/common/jdesign/JRoof.ts");
/* harmony import */ var _classes_MyUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../classes/MyUtil */ "./src/app/three/classes/MyUtil.ts");
/* harmony import */ var _classes_dataStruct__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../classes/dataStruct */ "./src/app/three/classes/dataStruct.ts");



class JRoof3D extends _svg_common_jdesign_JRoof__WEBPACK_IMPORTED_MODULE_0__["JRoof"] {
    constructor() {
        super(...arguments);
        this.roofMesh = null;
        this.roofGeometry = null;
        this.oldData = {}; //用来和新的数据做比对，检查这个oldData是否要更新。
        this.roofTexture = null; //贴在天花板上的贴图。
        this.paramsValues = {
            materialIndex: [],
        };
    }
    //因为我不能实例化它，只能把dataServer等需要用到的东西先给我传递进来。===============================================
    SetDataServerAndOthers(_dataServer, _domServer, _popServer, _jDataServer) {
        if (this.dataServer != undefined) {
            return;
        }
        this.dataServer = _dataServer;
        this.domServer = _domServer;
        this.popServer = _popServer;
        this.jDataServer = _jDataServer;
        //当前屋顶选择的是第一个材质。---------------------------
        this.paramsValues.materialIndex[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_2__["ModelType"].roof] = 0;
    }
    //用来构建地板模型的方法。
    MakeRoof() {
        //完全没有改变的地板不需要进行下面的重建工作。---------------
        if (this.IfVertexesChange() == false) {
            return;
        }
        //先把前面的天花板销毁掉吧。
        this.DisposeRoof();
        //天花板的一圈点。
        let _roofVertexes = this.GetRoofRingVertexes();
        this.oldData._floorVertexes = _roofVertexes;
        let _roofVertexList = [];
        for (let i = 0; i < _roofVertexes.length; i++) {
            _roofVertexList.push(_roofVertexes[i].x);
            _roofVertexList.push(_roofVertexes[i].y);
        }
        let vertexIndex = earcut(_roofVertexList);
        //计算天花板的所有顶点数据。----------------------------
        let _theRoom3D = this.getRoom();
        let _roofVertexesV3 = [];
        for (let i = 0; i < _roofVertexes.length; i++) {
            _roofVertexesV3.push(new THREE.Vector3(_roofVertexes[i].x, _theRoom3D.wallHeight, _roofVertexes[i].y));
        }
        //计算天花板的所有Face3数据。---------------------------
        let _roofFaces = [];
        for (let i = 0; i < vertexIndex.length; i += 3) {
            _roofFaces.push(new THREE.Face3(vertexIndex[i], vertexIndex[i + 1], vertexIndex[i + 2]));
        }
        //计算天花板的所有UV数据。------------------------------
        let _roofUvs = [[]];
        for (let i = 0; i < _roofFaces.length; i++) {
            let _oneUV = [];
            _oneUV.push(new THREE.Vector2(_roofVertexesV3[_roofFaces[i].a].x / 2000, _roofVertexesV3[_roofFaces[i].a].z / 2000));
            _oneUV.push(new THREE.Vector2(_roofVertexesV3[_roofFaces[i].b].x / 2000, _roofVertexesV3[_roofFaces[i].b].z / 2000));
            _oneUV.push(new THREE.Vector2(_roofVertexesV3[_roofFaces[i].c].x / 2000, _roofVertexesV3[_roofFaces[i].c].z / 2000));
            _roofUvs[0].push(_oneUV);
        }
        this.roofGeometry = new THREE.Geometry();
        this.roofGeometry.vertices = _roofVertexesV3;
        this.roofGeometry.faces = _roofFaces;
        this.roofGeometry.faceVertexUvs = _roofUvs;
        this.roofGeometry.computeFaceNormals();
        this.roofGeometry.mergeVertices();
        if (this.roofTexture == null) {
            this.roofTexture = this.dataServer.loaders.textureLoader.load(this.jDataServer.json.roofPics[0]);
            this.roofTexture.wrapS = THREE.RepeatWrapping;
            this.roofTexture.wrapT = THREE.RepeatWrapping;
        }
        this.roofMesh = new THREE.Mesh(this.roofGeometry, new THREE.MeshPhongMaterial({ map: this.roofTexture }));
        //绑定杨振龙创建的那个对象。--------------------------------
        let customUserData = new _classes_dataStruct__WEBPACK_IMPORTED_MODULE_2__["CustomUserData"]();
        customUserData.longObj = this;
        customUserData.modelType = _classes_dataStruct__WEBPACK_IMPORTED_MODULE_2__["ModelType"].roof;
        customUserData.wireSelectedPoints = _roofVertexesV3;
        this.roofMesh.userData.customUserData = customUserData;
        this.dataServer.classesObj.rayHitModelList.AddRayHitModel(this.roofMesh);
        this.dataServer.sceneCommonObj.scene.add(this.roofMesh);
    }
    /**
    * 把这个roof上的所有的天花板的模型销毁掉。
    */
    DisposeRoof() {
        if (this.roofMesh != null) {
            this.dataServer.classesObj.rayHitModelList.RemoveRayHitModel(this.roofMesh);
            this.dataServer.sceneCommonObj.scene.remove(this.roofMesh);
            delete this.roofMesh.userData.customUserData;
            this.roofMesh = null;
        }
        if (this.roofGeometry != null) {
            this.roofGeometry.dispose();
            this.roofGeometry = null;
        }
    }
    /**
     * 给杨松岭提供的获取当点的屋顶使用的是哪张贴图的。================================
     */
    GetMaterialSelectIndex() {
        return this.paramsValues.materialIndex[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_2__["ModelType"].roof];
    }
    /**
     * 给杨松岭提供的记录当点的屋顶使用的是哪张贴图的。================================
     */
    SetMaterialSelectIndex(_index) {
        this.paramsValues.materialIndex[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_2__["ModelType"].roof] = _index;
    }
    /**
     * 检查当前Roof3D对象的四周顶点是否有变化。用来决定该天花板要不要更新。返回true代表这个天花板需要重建，返回false代表不用-----------------------------
    */
    IfVertexesChange() {
        if (this.oldData._floorVertexes == undefined) {
            return true;
        }
        else {
            if (_classes_MyUtil__WEBPACK_IMPORTED_MODULE_1__["MyUtil"].IfArrayTheSame(this.oldData._floorVertexes, this.getInLine(), ["x", "y"])) {
                return false;
            }
            else {
                return true;
            }
        }
    }
    /**
     * 给阿隆调用的销毁屋顶的模型的函数。==================================================
     */
    destory3D() {
        this.DisposeRoof();
    }
    /**
     * 此函数用来修改天花板的贴图用的。====================================================
     * @param _path 要被修改成的贴图的路径。
     */
    SetModelTexture(_path) {
        this.roofTexture.image.src = _path;
        this.roofTexture.image.onload = () => {
            this.roofTexture.needsUpdate = true;
        };
    }
    OnSelected() {
        //产生一个面选择框。-------------------------------------------------------------------
        let _beHitModelCustomData = this.roofMesh.userData.customUserData;
        let _wireSelectedPoints = _beHitModelCustomData.wireSelectedPoints;
        this.dataServer.classesObj.wireSelectFrame.MakeWireSelectFrame(_wireSelectedPoints);
        //把场景里所有的门窗家具选择框都去掉。--------------------
        this.dataServer.classesObj.rayHitter.HideDoorWindowFurnitureSelectFrame();
        //把移动旋转工具取消激活掉。------------------------------
        this.dataServer.classesObj.modelTransformer.SetEnable(false);
        this.dataServer.classesObj.modelTransformer.ClearControlModel();
        //为右边的面板创建数据。-----------------------------------
        //let PanelData = this.dataServer.classesObj.propertiesMenuData.MakeRoofData(this.paramsValues);
        //this.popServer.panelRight.emit(PanelData);
    }
    /**
    * 获取地板上的一圈的顶点。返回的数值要求是[{x:0,y:1},{x:0,y:1}]==================================
    */
    GetRoofRingVertexes() {
        let _returnPoints = [];
        let _allCowalls = this.getRoom().getCowallArrBySort();
        for (let i = 0; i < _allCowalls.length; i++) {
            let _colwall3D = _allCowalls[i];
            let _theWall = _colwall3D.getWall();
            if (_theWall.arcDistance != 0) {
                let _allPoints = _colwall3D.arcProfilePoints[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_2__["ModelType"].inWall];
                for (let j = 0; j < _allPoints.length; j++) {
                    _returnPoints.push({ x: _allPoints[j].x, y: _allPoints[j].z });
                }
            }
            else {
                let _allPoints = _colwall3D.getInLine();
                _returnPoints.push(_allPoints[0]);
                _returnPoints.push(_allPoints[1]);
            }
        }
        return _returnPoints;
    }
}


/***/ }),

/***/ "./src/app/three/jDesign3D/JRoom3D.ts":
/*!********************************************!*\
  !*** ./src/app/three/jDesign3D/JRoom3D.ts ***!
  \********************************************/
/*! exports provided: JRoom3D */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JRoom3D", function() { return JRoom3D; });
/* harmony import */ var _svg_common_jdesign_JRoom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../svg/common/jdesign/JRoom */ "./src/app/svg/common/jdesign/JRoom.ts");

class JRoom3D extends _svg_common_jdesign_JRoom__WEBPACK_IMPORTED_MODULE_0__["JRoom"] {
    constructor() {
        super(...arguments);
        this.wallHeight = 2800;
    }
    SetDataServerAndOthers(_dataServer) {
        if (this.dataServer != undefined) {
            return;
        }
        this.dataServer = _dataServer;
        this.chooseFuncArr.push(() => {
            // //设置当前选择的模型就是被击中的模型。-------------------------------
            // this.dataServer.classesObj.currentSelectModel.Select(this.selector);
            let _floorObj = this.getFloor();
            this.dataServer.classesObj.currentSelectModel.Select(_floorObj.floorMesh);
            _floorObj.OnSelected();
        });
        this.noChooseFuncArr.push(() => {
            // this.OnUnselected();
            this.dataServer.classesObj.rayHitter.OnNothingHit();
        });
    }
}


/***/ }),

/***/ "./src/app/three/jDesign3D/JUWin3D.ts":
/*!********************************************!*\
  !*** ./src/app/three/jDesign3D/JUWin3D.ts ***!
  \********************************************/
/*! exports provided: JUWin3D */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JUWin3D", function() { return JUWin3D; });
/* harmony import */ var _svg_common_jdesign_JUWin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../svg/common/jdesign/JUWin */ "./src/app/svg/common/jdesign/JUWin.ts");

class JUWin3D extends _svg_common_jdesign_JUWin__WEBPACK_IMPORTED_MODULE_0__["JUWin"] {
}


/***/ }),

/***/ "./src/app/three/jDesign3D/JWall3D.ts":
/*!********************************************!*\
  !*** ./src/app/three/jDesign3D/JWall3D.ts ***!
  \********************************************/
/*! exports provided: JWall3D */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JWall3D", function() { return JWall3D; });
/* harmony import */ var _svg_common_jdesign_JWall__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../svg/common/jdesign/JWall */ "./src/app/svg/common/jdesign/JWall.ts");

class JWall3D extends _svg_common_jdesign_JWall__WEBPACK_IMPORTED_MODULE_0__["JWall"] {
    constructor() {
        super(...arguments);
        this.wallHeight = 2800;
    }
    SetDataServerAndOthers(_dataServer) {
        if (this.dataServer != undefined) {
            return;
        }
        this.dataServer = _dataServer;
        //在2D里选择墙的时候触发的动作。=============================================
        this.chooseFuncArr.push(() => {
            // let _theCowalls = this.getCowallArr();
            // let _oneOfCowall: JCowall3D = <JCowall3D>_theCowalls[0];
            // //设置当前选择的模型就是被击中的模型。-------------------------------
            // this.dataServer.classesObj.currentSelectModel.Select(_oneOfCowall.wallMeshs[ModelType.inWall]);
            // _oneOfCowall.OnSelected();
        });
        this.noChooseFuncArr.push(() => {
            this.dataServer.classesObj.rayHitter.OnNothingHit();
        });
    }
}


/***/ }),

/***/ "./src/app/three/jDesign3D/JWin3D.ts":
/*!*******************************************!*\
  !*** ./src/app/three/jDesign3D/JWin3D.ts ***!
  \*******************************************/
/*! exports provided: JWin3D */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JWin3D", function() { return JWin3D; });
/* harmony import */ var _svg_common_jdesign_JWin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../svg/common/jdesign/JWin */ "./src/app/svg/common/jdesign/JWin.ts");
/* harmony import */ var _classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../classes/dataStruct */ "./src/app/three/classes/dataStruct.ts");
/* harmony import */ var _classes_MyUtil__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../classes/MyUtil */ "./src/app/three/classes/MyUtil.ts");
/* harmony import */ var _classes_DoorWindowFrame__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../classes/DoorWindowFrame */ "./src/app/three/classes/DoorWindowFrame.ts");
/* harmony import */ var _classes_PreloadBox__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../classes/PreloadBox */ "./src/app/three/classes/PreloadBox.ts");
/*
 作者：张建。
 类说明：本类就是专门用来做窗的类。-----------------------------
*/





class JWin3D extends _svg_common_jdesign_JWin__WEBPACK_IMPORTED_MODULE_0__["JWin"] {
    constructor() {
        super(...arguments);
        this.tempDaeModelUrl = "https://www.3dhome360.com/LZN/model/window/win001/ch02.DAE";
    }
    SetDataServerAndOthers(_dataServer, _jDataServer, _popServer) {
        if (this.dataServer != undefined) {
            return;
        }
        this.dataServer = _dataServer;
        this.popServer = _popServer;
        this.jDataServer = _jDataServer;
        this.OnModelMove.push(this.OnWinBeMove.bind(this));
    }
    /**
    * 当这个窗的模型被阿隆那边移动的时候触发的函数。==============================================
    */
    OnWinBeMove() {
        //如果窗存储的宽度跟目前的宽度不相等，代表窗的宽度被缩放过了。--------------------------
        if (this.formerWidth != this.size.width ||
            this.formerDeep != this.size.height) {
            this.MakeWin(false);
            this.UpdateDoorWinPos(this.GetWinDoorPos(this.floorHeight));
            let _cowalls = this.getwall().getCowallArr();
            for (let i = 0; i < _cowalls.length; i++) {
                _cowalls[i].MakeWall(true);
            }
        }
    }
    MakeWin(_loadDae) {
        //先把前面的门窗销毁掉咯。------------------------------------------
        this.DestoryWinDoor(_loadDae);
        //设置窗户的离地高度。--------------------------------------------------
        //this.floorHeight = 500;
        //构建基础窗洞的一些步骤。------------------------------------
        this.Init(_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].window);
        //设置窗是可以在垂直方向上移动的。-------------------------------------
        this.dataServer.classesObj.modelTransformer.SetVerticalMovable(true);
        //开始创建窗框。----------------------------------------------------------------------------
        //----------------------------------------------------------------------------------------
        let _allDoorFrameDatas = this.jDataServer.json.winFrame;
        //第一个窗框的一圈点的数据。----------------------------------
        let _firstWinFrameProfileData = _allDoorFrameDatas[0].vertexData;
        this.MakeWinFrame(_firstWinFrameProfileData);
        let _doorFrameWidth = 0;
        if (this.doorWinFrame != null) {
            _doorFrameWidth = this.doorWinFrame.frameWidth;
        }
        let _newWidth = this.size.width - 2 * _doorFrameWidth;
        let _newHeight = this.size.height3D - 2 * _doorFrameWidth;
        let _newDeep = 60;
        //如果要重新加载DAE的话就重新加载DAE。-------------------------------------
        if (_loadDae == true) {
            //创建显示加载进度的盒子。-----------------------------------------------------
            this.preloadBox = new _classes_PreloadBox__WEBPACK_IMPORTED_MODULE_4__["PreloadBox"](this.dataServer);
            this.preloadBox.MakeBox(_newWidth, _newHeight, _newDeep);
            this.preloadBox.SetYOffset(_doorFrameWidth);
            //开始加载门的模型。---------------------------------------------
            _classes_MyUtil__WEBPACK_IMPORTED_MODULE_2__["MyUtil"].LoadDaeClampInSize(this.dataServer, this.tempDaeModelUrl, {
                width: _newWidth,
                height: _newHeight,
                deep: _newDeep
            }, (_model) => {
                if (this.preloadBox != null) {
                    this.doorWinModel = new THREE.Object3D();
                    this.dataServer.sceneCommonObj.scene.add(this.doorWinModel);
                    this.doorWinModel.add(_model);
                    _model.position.y = _doorFrameWidth;
                    this.doorWinModel.position.copy(this.GetWinDoorPos(this.floorHeight));
                    this.doorWinModel.rotation.y = -this.radian;
                    this.preloadBox.DisposePreloadBox();
                }
            }, (_progress) => {
                if (this.preloadBox != null) {
                    this.preloadBox.SetProgress(_progress);
                }
            });
        }
        //如果不加载模型，那起码把模型的尺寸稍微修改一下吧。--------------------------
        else {
            if (this.doorWinModel != undefined) {
                _classes_MyUtil__WEBPACK_IMPORTED_MODULE_2__["MyUtil"].ClampModelInSize(this.doorWinModel.children[0], {
                    width: _newWidth,
                    height: _newHeight,
                    deep: _newDeep
                });
            }
        }
    }
    /**
       * 创建窗框的自定义函数。
       * @param _profileData 里面的数据是[[1,2],[3,4],[5,6]]
       */
    MakeWinFrame(_profileData) {
        if (this.doorWinFrame == null) {
            this.doorWinFrame = new _classes_DoorWindowFrame__WEBPACK_IMPORTED_MODULE_3__["DoorWindowFrame"](this.dataServer, this.jDataServer);
            this.doorWinFrame.paramsValues.profileMaterialIndex[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].window] = 0;
            this.doorWinFrame.paramsValues.profileShapeIndex[_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].window] = 0;
        }
        this.doorWinFrame.MakeFrame(_classes_dataStruct__WEBPACK_IMPORTED_MODULE_1__["ModelType"].window, this.size.width, this.size.height3D, this.size.height, _profileData, true);
    }
}


/***/ }),

/***/ "./src/app/three/save3D/Redo3D.ts":
/*!****************************************!*\
  !*** ./src/app/three/save3D/Redo3D.ts ***!
  \****************************************/
/*! exports provided: Redo3D */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Redo3D", function() { return Redo3D; });
class Redo3D {
    constructor() {
    }
    /** 点还原 */
    rePoint(obj) {
    }
    /** 创建点 */
    createPoint(obj) {
        obj.strongUpdate3D();
    }
    /** 墙还原 */
    reWall(obj) {
    }
    /** 创建墙 */
    createWall(obj) {
        obj.strongUpdate3D();
    }
    /** 有序墙还原 */
    reCowall(obj) {
    }
    /** 创建有序墙 */
    createCowall(obj) {
        console.log(obj.paramsValues);
        // obj.strongUpdate3D();
    }
    /** 空间还原 */
    reRoom(obj) {
    }
    /** 创建空间 */
    createRoom(obj) {
        // InitDataUtil.CreateObjUpdate(obj)
        // obj.strongUpdate3D()
    }
    /** floor还原 */
    reFloor(obj) {
        console.log(obj);
    }
    /* 天花还原 */
    reRoof(obj) {
    }
    /** 创建地板 */
    createFloor(obj) {
        // obj.strongUpdate3D()
    }
    doneFloor(obj) {
    }
    /* 创建天花 */
    createRoof(obj) {
        obj.strongUpdate3D();
    }
    /** door还原 */
    reDoor(obj) {
        obj.strongUpdate3D();
        // obj.setDig();
    }
    /** 创建门 */
    createDoor(obj) {
        // InitDataUtil.CreateObjUpdate(obj)
        // obj.strongUpdate3D()
        // obj.setDig()
    }
    /** window还原 */
    reWin(obj) {
        // obj.strongUpdate3D();
        // obj.setDig();
    }
    reLWin(obj) {
    }
    reUWin(obj) {
    }
    createLWin(obj) {
    }
    createUWin(obj) {
    }
    reCornWin(obj) {
        obj.act3D.move();
    }
    /** 创建窗 */
    createWin(obj) {
        // InitDataUtil.CreateObjUpdate(obj)
        // obj.strongUpdate3D()
        // obj.setDig()
    }
    /** 家具还原 */
    reFurniture(obj) {
        obj.strongUpdate3D();
    }
    /* 建筑还原 */
    reBuild(obj) {
        obj.strongUpdate3D();
    }
    /** 创建家具 */
    createFurniture(obj) {
        // InitDataUtil.CreateObjUpdate(obj)
        // obj.strongUpdate3D()
    }
    /* 创建建筑 */
    createBuild(obj) {
    }
    /* 创建飘窗 */
    createCornerWin(obj) {
    }
}


/***/ }),

/***/ "./src/app/three/save3D/SaveType3D.ts":
/*!********************************************!*\
  !*** ./src/app/three/save3D/SaveType3D.ts ***!
  \********************************************/
/*! exports provided: SaveType3D */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SaveType3D", function() { return SaveType3D; });
/* harmony import */ var _svg_common_save_SaveType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../svg/common/save/SaveType */ "./src/app/svg/common/save/SaveType.ts");

var SaveType3D;
(function (SaveType3D) {
    class JPoint3D extends _svg_common_save_SaveType__WEBPACK_IMPORTED_MODULE_0__["SaveType"].JPoint {
        /* 范例 */
        constructor() {
            super();
        }
    }
    SaveType3D.JPoint3D = JPoint3D;
    class JWall3D extends _svg_common_save_SaveType__WEBPACK_IMPORTED_MODULE_0__["SaveType"].JWall {
    }
    SaveType3D.JWall3D = JWall3D;
    class JCowall3D extends _svg_common_save_SaveType__WEBPACK_IMPORTED_MODULE_0__["SaveType"].JCowall {
        /* 范例 */
        constructor() {
            super();
            this.paramsValues = null;
            // this.wallTextureIndex = null;
            // this.hasProfile = null;
            // this.profileStyle = null;
            // this.profileTextureIndex = null;
        }
    }
    SaveType3D.JCowall3D = JCowall3D;
    class JRoom3D extends _svg_common_save_SaveType__WEBPACK_IMPORTED_MODULE_0__["SaveType"].JRoom {
        constructor() {
            super();
            this.rootTextureIndex = null;
        }
    }
    SaveType3D.JRoom3D = JRoom3D;
    class JFloor3D extends _svg_common_save_SaveType__WEBPACK_IMPORTED_MODULE_0__["SaveType"].JFloor {
        constructor() {
            super();
            this.paramsValues = null;
        }
    }
    SaveType3D.JFloor3D = JFloor3D;
    class JRoof3D extends _svg_common_save_SaveType__WEBPACK_IMPORTED_MODULE_0__["SaveType"].JRoof {
        constructor() {
            super();
        }
    }
    SaveType3D.JRoof3D = JRoof3D;
    class JWin3D extends _svg_common_save_SaveType__WEBPACK_IMPORTED_MODULE_0__["SaveType"].JWin {
        constructor() {
            super();
            this.profileIndex = null;
        }
    }
    SaveType3D.JWin3D = JWin3D;
    class JLWin3D extends _svg_common_save_SaveType__WEBPACK_IMPORTED_MODULE_0__["SaveType"].JLWin {
        constructor() {
            super();
        }
    }
    SaveType3D.JLWin3D = JLWin3D;
    class JUWin3D extends _svg_common_save_SaveType__WEBPACK_IMPORTED_MODULE_0__["SaveType"].JUWin {
        constructor() {
            super();
        }
    }
    SaveType3D.JUWin3D = JUWin3D;
    class JBayWin3D extends _svg_common_save_SaveType__WEBPACK_IMPORTED_MODULE_0__["SaveType"].JWin {
        constructor() {
            super();
        }
    }
    SaveType3D.JBayWin3D = JBayWin3D;
    class JDoor3D extends _svg_common_save_SaveType__WEBPACK_IMPORTED_MODULE_0__["SaveType"].JDoor {
        constructor() {
            super();
            this.profileIndex = null;
        }
    }
    SaveType3D.JDoor3D = JDoor3D;
    class JCamera3D extends _svg_common_save_SaveType__WEBPACK_IMPORTED_MODULE_0__["SaveType"].JCamera {
    }
    SaveType3D.JCamera3D = JCamera3D;
    class JFurniture3D extends _svg_common_save_SaveType__WEBPACK_IMPORTED_MODULE_0__["SaveType"].JFurniture {
        constructor() {
            super();
            this.modelYPos = null;
        }
    }
    SaveType3D.JFurniture3D = JFurniture3D;
    class JBuild3D extends _svg_common_save_SaveType__WEBPACK_IMPORTED_MODULE_0__["SaveType"].JBuild {
    }
    SaveType3D.JBuild3D = JBuild3D;
    class JFloorPlan3D extends _svg_common_save_SaveType__WEBPACK_IMPORTED_MODULE_0__["SaveType"].JFloorplan {
    }
    SaveType3D.JFloorPlan3D = JFloorPlan3D;
    class JCornerWin3D extends _svg_common_save_SaveType__WEBPACK_IMPORTED_MODULE_0__["SaveType"].JCornerWin {
    }
    SaveType3D.JCornerWin3D = JCornerWin3D;
})(SaveType3D || (SaveType3D = {}));


/***/ }),

/***/ "./src/app/three/three.component.scss":
/*!********************************************!*\
  !*** ./src/app/three/three.component.scss ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".testDiv {\n  width: 100%;\n  height: 100%;\n  background-color: #ff0000;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdGhyZWUvRDpcXGtub3dsZWRnZVxcaGdcXG9sZFxcb2xkUm9vbS9zcmNcXGFwcFxcdGhyZWVcXHRocmVlLmNvbXBvbmVudC5zY3NzIiwic3JjL2FwcC90aHJlZS90aHJlZS5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLFdBQUE7RUFDQSxZQUFBO0VBQ0EseUJBQUE7QUNDSiIsImZpbGUiOiJzcmMvYXBwL3RocmVlL3RocmVlLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLnRlc3REaXYge1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmYwMDAwO1xyXG59IiwiLnRlc3REaXYge1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmYwMDAwO1xufSJdfQ== */"

/***/ }),

/***/ "./src/app/three/three.component.ts":
/*!******************************************!*\
  !*** ./src/app/three/three.component.ts ***!
  \******************************************/
/*! exports provided: ThreeComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ThreeComponent", function() { return ThreeComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _classes_THREEDataServer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./classes/THREEDataServer */ "./src/app/three/classes/THREEDataServer.ts");
/* harmony import */ var _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../services/jdesign-data.service */ "./src/app/services/jdesign-data.service.ts");
/* harmony import */ var _services_dom_update_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../services/dom-update.service */ "./src/app/services/dom-update.service.ts");
/* harmony import */ var _classes_SceneMaker__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./classes/SceneMaker */ "./src/app/three/classes/SceneMaker.ts");
/* harmony import */ var _classes_canvasEventMaster__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./classes/canvasEventMaster */ "./src/app/three/classes/canvasEventMaster.ts");
/* harmony import */ var _classes_HGModel_HGDataServer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./classes/HGModel/HGDataServer */ "./src/app/three/classes/HGModel/HGDataServer.ts");
/* harmony import */ var _classes_Rayhitter__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./classes/Rayhitter */ "./src/app/three/classes/Rayhitter.ts");
/* harmony import */ var _services_pop_div_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../services/pop-div.service */ "./src/app/services/pop-div.service.ts");
/* harmony import */ var _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../services/jdesign-util2d.service */ "./src/app/services/jdesign-util2d.service.ts");
/* harmony import */ var _classes_ModelTransformer__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./classes/ModelTransformer */ "./src/app/three/classes/ModelTransformer.ts");

/*
 作者：张建。
 类说明：这个是三维部分的主要组建，起总的统筹作用。
*/











let ThreeComponent = class ThreeComponent {
    constructor(dataServer, jDataServer, domServer, popServer, JDUServer, hgModelServer) {
        this.dataServer = dataServer;
        this.jDataServer = jDataServer;
        this.domServer = domServer;
        this.popServer = popServer;
        this.JDUServer = JDUServer;
        this.hgModelServer = hgModelServer;
        //画布更新的时候调用这个函数。===============================
        this.domServer.three.subscribe(() => {
            //调整一下三维视图的尺寸。
            this.ResizeCanvas();
        });
        //svg初始化的时候触发一次。==================================
        this.domServer.svgInit.subscribe(() => {
            //实例化seneMaker对象。-----------------------------
            this.dataServer.classesObj.sceneMaker = new _classes_SceneMaker__WEBPACK_IMPORTED_MODULE_5__["SceneMaker"](this.dataServer, this.jDataServer, this.JDUServer);
            //初始化场景里的东西先。-----------------------------
            this.dataServer.classesObj.sceneMaker.StartScene();
            //开始给画布绑定事件。-----------------------------------
            this.dataServer.classesObj.canvasEventMaster = new _classes_canvasEventMaster__WEBPACK_IMPORTED_MODULE_6__["CanvasEventMaster"](this.dataServer);
            //开始处理射线事件。----------------------------------
            this.dataServer.classesObj.rayHitter = new _classes_Rayhitter__WEBPACK_IMPORTED_MODULE_8__["Rayhitter"](this.dataServer, this.jDataServer, this.popServer);
            //开始创建移动旋转模型的工具。-------------------------------------
            this.dataServer.classesObj.modelTransformer = new _classes_ModelTransformer__WEBPACK_IMPORTED_MODULE_11__["ModelTransformer"](this.dataServer, this.jDataServer);
            //把3d摄像机放置在场景里。----------------------------
            this.jDataServer.camera.SetDataServerAndOthers(this.dataServer, this.domServer, this.jDataServer);
            this.jDataServer.camera.AddCameraToScene();
            //调整一下三维视图的尺寸。-------------------------------
            this.ResizeCanvas();
            // this.dataServer.classesObj.sceneMaker.AnimationScene();
            //阿隆的摄像机被移动的时候调用的事件。-----------------------
            this.jDataServer.camera.updateArr3D.push((_target) => {
                let _currentCamera = _target;
                _currentCamera.UpdateCameraPosAndRotation();
            });
            //开始加载石灰线和地脚线的数据。---------------------------------------
            // this.dataServer.classesObj.profileLoader = new ProfileLoader(this.dataServer);
            // this.dataServer.classesObj.profileLoader.StartLoadData(() => {
            //   // console.log(this.dataServer.classesObj.profileLoader.GetDoorFrameData())
            //   //执行一下这个，证明这个程序可以开始了。--------------------
            //   this.domServer.threeInit.emit();
            // });
            // 
        });
        //cowall更新的时候触发的函数。===========================================
        this.jDataServer.cache.cowall.update3D.subscribe(() => {
            //获取场景里的所有cowall并进行更新。----------------------------------
            let _allCowalls = this.jDataServer.doCowalls().arr();
            for (let i = 0; i < _allCowalls.length; i++) {
                let _theWall = _allCowalls[i].getWall();
                _theWall.SetDataServerAndOthers(this.dataServer);
                _allCowalls[i].SetDataServerAndOthers(this.dataServer, this.popServer, this.jDataServer);
                _allCowalls[i].MakeWall(false);
            }
            //获取场景里的所有room并对其里面的地板和天花板进行更新。------------------------------------
            let _allRooms = this.jDataServer.doRooms().arr();
            for (let i = 0; i < _allRooms.length; i++) {
                let _theRoom = _allRooms[i];
                _theRoom.SetDataServerAndOthers(this.dataServer);
                //开始创建地板的模型。--------------------------------------------------
                let _theFloor3D = _theRoom.getFloor();
                _theFloor3D.SetDataServerAndOthers(this.dataServer, this.domServer, this.popServer, this.jDataServer);
                _theFloor3D.MakeFloor();
                //开始创建天花板的模型。------------------------------------------------
                let _theRoof3D = _theRoom.getRoof();
                _theRoof3D.SetDataServerAndOthers(this.dataServer, this.domServer, this.popServer, this.jDataServer);
                _theRoof3D.MakeRoof();
            }
            //做取消选择任何模型的动作。=================================================
            //把模型选择框都取消显示。-------------------------------------------------
            //this.dataServer.classesObj.wireSelectFrame.destory3D();
            //设置当前没有任何模型被选择。-----------------------------------
            //this.dataServer.classesObj.currentSelectModel.DeselectAll();
            //右边属性面板什么都没有。-------------------------------
            //this.popServer.panelRight.emit([]);
        });
        //创建门的时候调用的事件----------------------------------------------------
        this.jDataServer.cache.door.createFunc = (_obj) => {
            _obj.SetDataServerAndOthers(this.dataServer, popServer, this.jDataServer);
            this.dataServer.creatingLongObj = _obj;
            //开始创建门了。-------------------------------
            _obj.MakeDoor(true);
            //开启门的一系列事件。-----------------------
            _obj.StartEvent();
        };
        this.jDataServer.cache.cornerWin.createFunc = (_obj) => {
            _obj.SetDataServerAndOthers(this.dataServer, this.jDataServer, popServer);
            this.dataServer.creatingLongObj = _obj;
            _obj.MakeCornerBaywin();
            _obj.StartEvent();
        };
        // this.jDataServer.cache.furniture.rotate(obj,9)
        //创建窗的时候调用的事件----------------------------------------------------
        this.jDataServer.cache.win.createFunc = (_obj) => {
            _obj.SetDataServerAndOthers(this.dataServer, this.jDataServer, popServer);
            this.dataServer.creatingLongObj = _obj;
            //开始创建窗了。-------------------------------
            _obj.MakeWin(true);
            //开启窗的一系列事件。-----------------------
            _obj.StartEvent();
        };
        //当家具创建的时候调用的函数。------------------------------------------------
        this.jDataServer.cache.furniture.createFunc = (_obj) => {
            _obj.SetDataServerAndOthers(this.dataServer, this.hgModelServer, this.popServer);
            this.dataServer.creatingLongObj = _obj;
            _obj.MakeFurniture();
            _obj.StartEvent();
        };
        this.jDataServer.cache.build.createFunc = (_obj) => {
            _obj.SetDataServerAndOthers(this.dataServer, this.jDataServer, this.popServer);
            this.dataServer.creatingLongObj = _obj;
            _obj.MakeBuild();
            _obj.StartEvent();
        };
    }
    ResizeCanvas() {
        if (this.dataServer.classesObj.sceneMaker == undefined) {
            return;
        }
        if (this.jDataServer.cache.thumbnail.three.isZoom) {
            this.dataServer.canvasSize = this.jDataServer.cache.thumbnail.three.zoomSize;
        }
        else {
            this.dataServer.canvasSize = this.jDataServer.cache.thumbnail.three.divSize;
        }
        this.dataServer.classesObj.sceneMaker.ResizeScene(this.dataServer.canvasSize);
    }
};
ThreeComponent.ctorParameters = () => [
    { type: _classes_THREEDataServer__WEBPACK_IMPORTED_MODULE_2__["THREEDataServer"] },
    { type: _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_3__["JdesignDataService"] },
    { type: _services_dom_update_service__WEBPACK_IMPORTED_MODULE_4__["DomUpdateService"] },
    { type: _services_pop_div_service__WEBPACK_IMPORTED_MODULE_9__["PopDivService"] },
    { type: _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_10__["JdesignUtil2dService"] },
    { type: _classes_HGModel_HGDataServer__WEBPACK_IMPORTED_MODULE_7__["HGDataServer"] }
];
ThreeComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: '[threeCanvas]',
        template: __webpack_require__(/*! raw-loader!./three.component.html */ "./node_modules/raw-loader/index.js!./src/app/three/three.component.html"),
        providers: [_classes_THREEDataServer__WEBPACK_IMPORTED_MODULE_2__["THREEDataServer"], _classes_HGModel_HGDataServer__WEBPACK_IMPORTED_MODULE_7__["HGDataServer"]],
        styles: [__webpack_require__(/*! ./three.component.scss */ "./src/app/three/three.component.scss")]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_classes_THREEDataServer__WEBPACK_IMPORTED_MODULE_2__["THREEDataServer"],
        _services_jdesign_data_service__WEBPACK_IMPORTED_MODULE_3__["JdesignDataService"],
        _services_dom_update_service__WEBPACK_IMPORTED_MODULE_4__["DomUpdateService"],
        _services_pop_div_service__WEBPACK_IMPORTED_MODULE_9__["PopDivService"],
        _services_jdesign_util2d_service__WEBPACK_IMPORTED_MODULE_10__["JdesignUtil2dService"],
        _classes_HGModel_HGDataServer__WEBPACK_IMPORTED_MODULE_7__["HGDataServer"]])
], ThreeComponent);



/***/ }),

/***/ "./src/app/three/three.module.ts":
/*!***************************************!*\
  !*** ./src/app/three/three.module.ts ***!
  \***************************************/
/*! exports provided: ThreeModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ThreeModule", function() { return ThreeModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _three_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./three.component */ "./src/app/three/three.component.ts");
/* harmony import */ var _svg_common_services_mouse_event_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../svg/common/services/mouse-event.service */ "./src/app/svg/common/services/mouse-event.service.ts");
/* harmony import */ var _services_right_menu_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../services/right-menu.service */ "./src/app/services/right-menu.service.ts");
/* harmony import */ var _svg_common_services_console_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../svg/common/services/console.service */ "./src/app/svg/common/services/console.service.ts");
/* harmony import */ var _design_pop_toggle_window_toggle_window_module__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../design-pop/toggle-window/toggle-window.module */ "./src/app/design-pop/toggle-window/toggle-window.module.ts");








let ThreeModule = class ThreeModule {
};
ThreeModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
            _design_pop_toggle_window_toggle_window_module__WEBPACK_IMPORTED_MODULE_7__["ToggleWindowModule"]
        ],
        declarations: [_three_component__WEBPACK_IMPORTED_MODULE_3__["ThreeComponent"]],
        exports: [_three_component__WEBPACK_IMPORTED_MODULE_3__["ThreeComponent"]],
        providers: [_svg_common_services_mouse_event_service__WEBPACK_IMPORTED_MODULE_4__["MouseEventService"], _services_right_menu_service__WEBPACK_IMPORTED_MODULE_5__["RightMenuService"], _svg_common_services_console_service__WEBPACK_IMPORTED_MODULE_6__["ConsoleService"]]
    })
], ThreeModule);



/***/ }),

/***/ "./src/environments/environment.ts":
/*!*****************************************!*\
  !*** ./src/environments/environment.ts ***!
  \*****************************************/
/*! exports provided: environment */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "environment", function() { return environment; });
// This file can be replaced during build by using the `fileReplacements` array.
// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.
// The list of file replacements can be found in `angular.json`.
const environment = {
    production: false
};
/*
 * For easier debugging in development mode, you can import the following file
 * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.
 *
 * This import should be commented out in production mode because it will have a negative impact
 * on performance if an error is thrown.
 */
// import 'zone.js/dist/zone-error';  // Included with Angular CLI.


/***/ }),

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_platform_browser_dynamic__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/platform-browser-dynamic */ "./node_modules/@angular/platform-browser-dynamic/fesm2015/platform-browser-dynamic.js");
/* harmony import */ var _app_app_module__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./app/app.module */ "./src/app/app.module.ts");
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./environments/environment */ "./src/environments/environment.ts");




if (_environments_environment__WEBPACK_IMPORTED_MODULE_3__["environment"].production) {
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["enableProdMode"])();
}
Object(_angular_platform_browser_dynamic__WEBPACK_IMPORTED_MODULE_1__["platformBrowserDynamic"])().bootstrapModule(_app_app_module__WEBPACK_IMPORTED_MODULE_2__["AppModule"])
    .catch(err => console.error(err));


/***/ }),

/***/ 0:
/*!***************************!*\
  !*** multi ./src/main.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! D:\knowledge\hg\old\oldRoom\src\main.ts */"./src/main.ts");


/***/ })

},[[0,"runtime","vendor"]]]);
//# sourceMappingURL=main-es2015.js.map